/* 
 * Selling Partner API for Vendor Direct Fulfillment Sandbox Test Data
 *
 * The Selling Partner API for Vendor Direct Fulfillment Sandbox Test Data provides programmatic access to vendor direct fulfillment sandbox test data.
 *
 * OpenAPI spec version: 2021-10-28
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorDirectFulfillmentSandboxData
{
    /// <summary>
    /// A GUID assigned by Amazon to identify this transaction.
    /// </summary>
    [DataContract]
    public partial class TransactionReference : IEquatable<TransactionReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionReference" /> class.
        /// </summary>
        /// <param name="transactionId">A GUID (Globally Unique Identifier) assigned by Amazon to uniquely identify the transaction..</param>
        public TransactionReference(string transactionId = default)
        {
            this.TransactionId = transactionId;
        }

        /// <summary>
        /// A GUID (Globally Unique Identifier) assigned by Amazon to uniquely identify the transaction.
        /// </summary>
        /// <value>A GUID (Globally Unique Identifier) assigned by Amazon to uniquely identify the transaction.</value>
        [DataMember(Name = "transactionId", EmitDefaultValue = false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionReference {\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionReference);
        }

        /// <summary>
        /// Returns true if TransactionReference instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionReference input)
        {
            if (input == null)
                return false;

            return
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
