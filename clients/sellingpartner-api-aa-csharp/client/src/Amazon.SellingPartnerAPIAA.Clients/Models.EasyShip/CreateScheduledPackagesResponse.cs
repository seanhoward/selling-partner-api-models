/* 
 * Selling Partner API for Easy Ship
 *
 * The Selling Partner API for Easy Ship helps you build applications that help sellers manage and ship Amazon Easy Ship orders.  Your Easy Ship applications can:  * Get available time slots for packages to be scheduled for delivery.  * Schedule, reschedule, and cancel Easy Ship orders.  * Print labels, invoices, and warranties.  See the [Marketplace Support Table](doc:easyship-api-v2022-03-23-use-case-guide#marketplace-support-table) for the differences in Easy Ship operations by marketplace.
 *
 * OpenAPI spec version: 2022-03-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.EasyShip
{
    /// <summary>
    /// The response schema for the bulk scheduling API. It returns by the bulk scheduling API containing an array of the scheduled packtages, an optional list of orders we couldn&#39;t schedule with the reason, and a pre-signed URL for a ZIP file containing the associated shipping labels plus the documents enabled for your marketplace.
    /// </summary>
    [DataContract]
    public partial class CreateScheduledPackagesResponse :  IEquatable<CreateScheduledPackagesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateScheduledPackagesResponse" /> class.
        /// </summary>
        /// <param name="scheduledPackages">A list of packages. Refer to the &#x60;Package&#x60; object..</param>
        /// <param name="rejectedOrders">A list of orders we couldn&#39;t scheduled on your behalf. Each element contains the reason and details on the error..</param>
        /// <param name="printableDocumentsUrl">printableDocumentsUrl.</param>
        public CreateScheduledPackagesResponse(List<Package> scheduledPackages = default(List<Package>), List<RejectedOrder> rejectedOrders = default(List<RejectedOrder>), string printableDocumentsUrl = default(string))
        {
            this.ScheduledPackages = scheduledPackages;
            this.RejectedOrders = rejectedOrders;
            this.PrintableDocumentsUrl = printableDocumentsUrl;
        }
        
        /// <summary>
        /// A list of packages. Refer to the &#x60;Package&#x60; object.
        /// </summary>
        /// <value>A list of packages. Refer to the &#x60;Package&#x60; object.</value>
        [DataMember(Name="scheduledPackages", EmitDefaultValue=false)]
        public List<Package> ScheduledPackages { get; set; }

        /// <summary>
        /// A list of orders we couldn&#39;t scheduled on your behalf. Each element contains the reason and details on the error.
        /// </summary>
        /// <value>A list of orders we couldn&#39;t scheduled on your behalf. Each element contains the reason and details on the error.</value>
        [DataMember(Name="rejectedOrders", EmitDefaultValue=false)]
        public List<RejectedOrder> RejectedOrders { get; set; }

        /// <summary>
        /// Gets or Sets PrintableDocumentsUrl
        /// </summary>
        [DataMember(Name="printableDocumentsUrl", EmitDefaultValue=false)]
        public string PrintableDocumentsUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateScheduledPackagesResponse {\n");
            sb.Append("  ScheduledPackages: ").Append(ScheduledPackages).Append("\n");
            sb.Append("  RejectedOrders: ").Append(RejectedOrders).Append("\n");
            sb.Append("  PrintableDocumentsUrl: ").Append(PrintableDocumentsUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateScheduledPackagesResponse);
        }

        /// <summary>
        /// Returns true if CreateScheduledPackagesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateScheduledPackagesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateScheduledPackagesResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScheduledPackages == input.ScheduledPackages ||
                    this.ScheduledPackages != null &&
                    this.ScheduledPackages.SequenceEqual(input.ScheduledPackages)
                ) && 
                (
                    this.RejectedOrders == input.RejectedOrders ||
                    this.RejectedOrders != null &&
                    this.RejectedOrders.SequenceEqual(input.RejectedOrders)
                ) && 
                (
                    this.PrintableDocumentsUrl == input.PrintableDocumentsUrl ||
                    (this.PrintableDocumentsUrl != null &&
                    this.PrintableDocumentsUrl.Equals(input.PrintableDocumentsUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScheduledPackages != null)
                    hashCode = hashCode * 59 + this.ScheduledPackages.GetHashCode();
                if (this.RejectedOrders != null)
                    hashCode = hashCode * 59 + this.RejectedOrders.GetHashCode();
                if (this.PrintableDocumentsUrl != null)
                    hashCode = hashCode * 59 + this.PrintableDocumentsUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
