/* 
 * Selling Partner API for Easy Ship
 *
 * Use the Selling Partner API for Easy Ship to build applications for sellers to manage and ship Amazon Easy Ship orders. With this API, you can get available time slots, schedule and reschedule Easy Ship orders, and print shipping labels, invoices, and warranties. To review the differences in Easy Ship operations by marketplace, refer to [Marketplace support](https://developer-docs.amazon.com/sp-api/docs/easyship-api-v2022-03-23-use-case-guide#marketplace-support).
 *
 * OpenAPI spec version: 2022-03-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.EasyShip
{
    /// <summary>
    /// Package details. Includes &#x60;packageItems&#x60;, &#x60;packageTimeSlot&#x60;, and &#x60;packageIdentifier&#x60;.
    /// </summary>
    [DataContract]
    public partial class PackageDetails : IEquatable<PackageDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageDetails" /> class.
        /// </summary>
        [JsonConstructor]
        protected PackageDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageDetails" /> class.
        /// </summary>
        /// <param name="packageItems">packageItems.</param>
        /// <param name="packageTimeSlot">packageTimeSlot (required).</param>
        /// <param name="packageIdentifier">packageIdentifier.</param>
        public PackageDetails(Items packageItems = default, TimeSlot packageTimeSlot = default, string packageIdentifier = default)
        {
            // to ensure "packageTimeSlot" is required (not null)
            if (packageTimeSlot == null)
            {
                throw new InvalidDataException("packageTimeSlot is a required property for PackageDetails and cannot be null");
            }
            else
            {
                this.PackageTimeSlot = packageTimeSlot;
            }
            this.PackageItems = packageItems;
            this.PackageIdentifier = packageIdentifier;
        }

        /// <summary>
        /// Gets or Sets PackageItems
        /// </summary>
        [DataMember(Name = "packageItems", EmitDefaultValue = false)]
        public Items PackageItems { get; set; }

        /// <summary>
        /// Gets or Sets PackageTimeSlot
        /// </summary>
        [DataMember(Name = "packageTimeSlot", EmitDefaultValue = false)]
        public TimeSlot PackageTimeSlot { get; set; }

        /// <summary>
        /// Gets or Sets PackageIdentifier
        /// </summary>
        [DataMember(Name = "packageIdentifier", EmitDefaultValue = false)]
        public string PackageIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PackageDetails {\n");
            sb.Append("  PackageItems: ").Append(PackageItems).Append("\n");
            sb.Append("  PackageTimeSlot: ").Append(PackageTimeSlot).Append("\n");
            sb.Append("  PackageIdentifier: ").Append(PackageIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PackageDetails);
        }

        /// <summary>
        /// Returns true if PackageDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PackageDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackageDetails input)
        {
            if (input == null)
                return false;

            return
                (
                    this.PackageItems == input.PackageItems ||
                    (this.PackageItems != null &&
                    this.PackageItems.Equals(input.PackageItems))
                ) &&
                (
                    this.PackageTimeSlot == input.PackageTimeSlot ||
                    (this.PackageTimeSlot != null &&
                    this.PackageTimeSlot.Equals(input.PackageTimeSlot))
                ) &&
                (
                    this.PackageIdentifier == input.PackageIdentifier ||
                    (this.PackageIdentifier != null &&
                    this.PackageIdentifier.Equals(input.PackageIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PackageItems != null)
                    hashCode = hashCode * 59 + this.PackageItems.GetHashCode();
                if (this.PackageTimeSlot != null)
                    hashCode = hashCode * 59 + this.PackageTimeSlot.GetHashCode();
                if (this.PackageIdentifier != null)
                    hashCode = hashCode * 59 + this.PackageIdentifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
