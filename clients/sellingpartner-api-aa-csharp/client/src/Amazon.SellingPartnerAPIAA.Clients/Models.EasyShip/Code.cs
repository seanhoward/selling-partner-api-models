/* 
 * Selling Partner API for Easy Ship
 *
 * The Selling Partner API for Easy Ship helps you build applications that help sellers manage and ship Amazon Easy Ship orders.  Your Easy Ship applications can:  * Get available time slots for packages to be scheduled for delivery.  * Schedule, reschedule, and cancel Easy Ship orders.  * Print labels, invoices, and warranties.  See the [Marketplace Support Table](doc:easyship-api-v2022-03-23-use-case-guide#marketplace-support-table) for the differences in Easy Ship operations by marketplace.
 *
 * OpenAPI spec version: 2022-03-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.EasyShip
{
    /// <summary>
    /// An error code that identifies the type of error that occurred. The error codes listed below are specific to the Easy Ship section.
    /// </summary>
    /// <value>An error code that identifies the type of error that occurred. The error codes listed below are specific to the Easy Ship section.</value>
    
    [JsonConverter(typeof(StringEnumConverter))]
    
    public enum Code
    {
        
        /// <summary>
        /// Enum InvalidInput for value: InvalidInput
        /// </summary>
        [EnumMember(Value = "InvalidInput")]
        InvalidInput = 1,
        
        /// <summary>
        /// Enum InvalidTimeSlotId for value: InvalidTimeSlotId
        /// </summary>
        [EnumMember(Value = "InvalidTimeSlotId")]
        InvalidTimeSlotId = 2,
        
        /// <summary>
        /// Enum ScheduledPackageAlreadyExists for value: ScheduledPackageAlreadyExists
        /// </summary>
        [EnumMember(Value = "ScheduledPackageAlreadyExists")]
        ScheduledPackageAlreadyExists = 3,
        
        /// <summary>
        /// Enum ScheduleWindowExpired for value: ScheduleWindowExpired
        /// </summary>
        [EnumMember(Value = "ScheduleWindowExpired")]
        ScheduleWindowExpired = 4,
        
        /// <summary>
        /// Enum RetryableAfterGettingNewSlots for value: RetryableAfterGettingNewSlots
        /// </summary>
        [EnumMember(Value = "RetryableAfterGettingNewSlots")]
        RetryableAfterGettingNewSlots = 5,
        
        /// <summary>
        /// Enum TimeSlotNotAvailable for value: TimeSlotNotAvailable
        /// </summary>
        [EnumMember(Value = "TimeSlotNotAvailable")]
        TimeSlotNotAvailable = 6,
        
        /// <summary>
        /// Enum ResourceNotFound for value: ResourceNotFound
        /// </summary>
        [EnumMember(Value = "ResourceNotFound")]
        ResourceNotFound = 7,
        
        /// <summary>
        /// Enum InvalidOrderState for value: InvalidOrderState
        /// </summary>
        [EnumMember(Value = "InvalidOrderState")]
        InvalidOrderState = 8,
        
        /// <summary>
        /// Enum RegionNotSupported for value: RegionNotSupported
        /// </summary>
        [EnumMember(Value = "RegionNotSupported")]
        RegionNotSupported = 9,
        
        /// <summary>
        /// Enum OrderNotEligibleForRescheduling for value: OrderNotEligibleForRescheduling
        /// </summary>
        [EnumMember(Value = "OrderNotEligibleForRescheduling")]
        OrderNotEligibleForRescheduling = 10,
        
        /// <summary>
        /// Enum InternalServerError for value: InternalServerError
        /// </summary>
        [EnumMember(Value = "InternalServerError")]
        InternalServerError = 11
    }

}
