/* 
 * Selling Partner API for Easy Ship
 *
 * The Selling Partner API for Easy Ship helps you build applications that help sellers manage and ship Amazon Easy Ship orders.  Your Easy Ship applications can:  * Get available time slots for packages to be scheduled for delivery.  * Schedule, reschedule, and cancel Easy Ship orders.  * Print labels, invoices, and warranties.  See the [Marketplace Support Table](doc:easyship-api-v2022-03-23-use-case-guide#marketplace-support-table) for the differences in Easy Ship operations by marketplace.
 *
 * OpenAPI spec version: 2022-03-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.EasyShip
{
    /// <summary>
    /// A time window to hand over an Easy Ship package to Amazon Logistics.
    /// </summary>
    [DataContract]
    public partial class TimeSlot :  IEquatable<TimeSlot>, IValidatableObject
    {
        /// <summary>
        /// The method by which a seller will hand a package over to Amazon Logistics.
        /// </summary>
        /// <value>The method by which a seller will hand a package over to Amazon Logistics.</value>
        [DataMember(Name="handoverMethod", EmitDefaultValue=false)]
        public HandoverMethod? HandoverMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeSlot" /> class.
        /// </summary>
        [JsonConstructor]
        protected TimeSlot() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeSlot" /> class.
        /// </summary>
        /// <param name="slotId">An Amazon-defined identifier for a time slot. (required).</param>
        /// <param name="startTime">The start date and time of the time slot..</param>
        /// <param name="endTime">The end date and time of the time slot..</param>
        /// <param name="handoverMethod">The method by which a seller will hand a package over to Amazon Logistics..</param>
        public TimeSlot(string slotId = default, DateTime? startTime = default, DateTime? endTime = default, HandoverMethod? handoverMethod = default)
        {
            // to ensure "slotId" is required (not null)
            if (slotId == null)
            {
                throw new InvalidDataException("slotId is a required property for TimeSlot and cannot be null");
            }
            else
            {
                this.SlotId = slotId;
            }
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.HandoverMethod = handoverMethod;
        }
        
        /// <summary>
        /// An Amazon-defined identifier for a time slot.
        /// </summary>
        /// <value>An Amazon-defined identifier for a time slot.</value>
        [DataMember(Name="slotId", EmitDefaultValue=false)]
        public string SlotId { get; set; }

        /// <summary>
        /// The start date and time of the time slot.
        /// </summary>
        /// <value>The start date and time of the time slot.</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// The end date and time of the time slot.
        /// </summary>
        /// <value>The end date and time of the time slot.</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public DateTime? EndTime { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeSlot {\n");
            sb.Append("  SlotId: ").Append(SlotId).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  HandoverMethod: ").Append(HandoverMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeSlot);
        }

        /// <summary>
        /// Returns true if TimeSlot instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeSlot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeSlot input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SlotId == input.SlotId ||
                    (this.SlotId != null &&
                    this.SlotId.Equals(input.SlotId))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.HandoverMethod == input.HandoverMethod ||
                    (this.HandoverMethod != null &&
                    this.HandoverMethod.Equals(input.HandoverMethod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SlotId != null)
                    hashCode = hashCode * 59 + this.SlotId.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.HandoverMethod != null)
                    hashCode = hashCode * 59 + this.HandoverMethod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
