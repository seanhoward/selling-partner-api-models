/* 
 * Selling Partner API for Easy Ship
 *
 * Use the Selling Partner API for Easy Ship to build applications for sellers to manage and ship Amazon Easy Ship orders. With this API, you can get available time slots, schedule and reschedule Easy Ship orders, and print shipping labels, invoices, and warranties. To review the differences in Easy Ship operations by marketplace, refer to [Marketplace support](https://developer-docs.amazon.com/sp-api/docs/easyship-api-v2022-03-23-use-case-guide#marketplace-support).
 *
 * OpenAPI spec version: 2022-03-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.EasyShip
{
    /// <summary>
    /// The request schema for the &#x60;updateScheduledPackages&#x60; operation.
    /// </summary>
    [DataContract]
    public partial class UpdateScheduledPackagesRequest : IEquatable<UpdateScheduledPackagesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateScheduledPackagesRequest" /> class.
        /// </summary>
        [JsonConstructor]
        protected UpdateScheduledPackagesRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateScheduledPackagesRequest" /> class.
        /// </summary>
        /// <param name="marketplaceId">marketplaceId (required).</param>
        /// <param name="updatePackageDetailsList">updatePackageDetailsList (required).</param>
        public UpdateScheduledPackagesRequest(string marketplaceId = default, UpdatePackageDetailsList updatePackageDetailsList = default)
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for UpdateScheduledPackagesRequest and cannot be null");
            }
            else
            {
                this.MarketplaceId = marketplaceId;
            }
            // to ensure "updatePackageDetailsList" is required (not null)
            if (updatePackageDetailsList == null)
            {
                throw new InvalidDataException("updatePackageDetailsList is a required property for UpdateScheduledPackagesRequest and cannot be null");
            }
            else
            {
                this.UpdatePackageDetailsList = updatePackageDetailsList;
            }
        }

        /// <summary>
        /// Gets or Sets MarketplaceId
        /// </summary>
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Gets or Sets UpdatePackageDetailsList
        /// </summary>
        [DataMember(Name = "updatePackageDetailsList", EmitDefaultValue = false)]
        public UpdatePackageDetailsList UpdatePackageDetailsList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateScheduledPackagesRequest {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  UpdatePackageDetailsList: ").Append(UpdatePackageDetailsList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateScheduledPackagesRequest);
        }

        /// <summary>
        /// Returns true if UpdateScheduledPackagesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateScheduledPackagesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateScheduledPackagesRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    this.UpdatePackageDetailsList == input.UpdatePackageDetailsList ||
                    (this.UpdatePackageDetailsList != null &&
                    this.UpdatePackageDetailsList.Equals(input.UpdatePackageDetailsList))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.UpdatePackageDetailsList != null)
                    hashCode = hashCode * 59 + this.UpdatePackageDetailsList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
