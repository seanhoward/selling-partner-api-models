/* 
 * Selling Partner API for Easy Ship
 *
 * Use the Selling Partner API for Easy Ship to build applications for sellers to manage and ship Amazon Easy Ship orders. With this API, you can get available time slots, schedule and reschedule Easy Ship orders, and print shipping labels, invoices, and warranties. To review the differences in Easy Ship operations by marketplace, refer to [Marketplace support](https://developer-docs.amazon.com/sp-api/docs/easyship-api-v2022-03-23-use-case-guide#marketplace-support).
 *
 * OpenAPI spec version: 2022-03-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.EasyShip
{
    /// <summary>
    /// The request schema for the &#x60;listHandoverSlots&#x60; operation.
    /// </summary>
    [DataContract]
    public partial class ListHandoverSlotsRequest : IEquatable<ListHandoverSlotsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListHandoverSlotsRequest" /> class.
        /// </summary>
        [JsonConstructor]
        protected ListHandoverSlotsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListHandoverSlotsRequest" /> class.
        /// </summary>
        /// <param name="marketplaceId">marketplaceId (required).</param>
        /// <param name="amazonOrderId">amazonOrderId (required).</param>
        /// <param name="packageDimensions">packageDimensions (required).</param>
        /// <param name="packageWeight">packageWeight (required).</param>
        public ListHandoverSlotsRequest(string marketplaceId = default, string amazonOrderId = default, Dimensions packageDimensions = default, Weight packageWeight = default)
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for ListHandoverSlotsRequest and cannot be null");
            }
            else
            {
                this.MarketplaceId = marketplaceId;
            }
            // to ensure "amazonOrderId" is required (not null)
            if (amazonOrderId == null)
            {
                throw new InvalidDataException("amazonOrderId is a required property for ListHandoverSlotsRequest and cannot be null");
            }
            else
            {
                this.AmazonOrderId = amazonOrderId;
            }
            // to ensure "packageDimensions" is required (not null)
            if (packageDimensions == null)
            {
                throw new InvalidDataException("packageDimensions is a required property for ListHandoverSlotsRequest and cannot be null");
            }
            else
            {
                this.PackageDimensions = packageDimensions;
            }
            // to ensure "packageWeight" is required (not null)
            if (packageWeight == null)
            {
                throw new InvalidDataException("packageWeight is a required property for ListHandoverSlotsRequest and cannot be null");
            }
            else
            {
                this.PackageWeight = packageWeight;
            }
        }

        /// <summary>
        /// Gets or Sets MarketplaceId
        /// </summary>
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Gets or Sets AmazonOrderId
        /// </summary>
        [DataMember(Name = "amazonOrderId", EmitDefaultValue = false)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        /// Gets or Sets PackageDimensions
        /// </summary>
        [DataMember(Name = "packageDimensions", EmitDefaultValue = false)]
        public Dimensions PackageDimensions { get; set; }

        /// <summary>
        /// Gets or Sets PackageWeight
        /// </summary>
        [DataMember(Name = "packageWeight", EmitDefaultValue = false)]
        public Weight PackageWeight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListHandoverSlotsRequest {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  AmazonOrderId: ").Append(AmazonOrderId).Append("\n");
            sb.Append("  PackageDimensions: ").Append(PackageDimensions).Append("\n");
            sb.Append("  PackageWeight: ").Append(PackageWeight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListHandoverSlotsRequest);
        }

        /// <summary>
        /// Returns true if ListHandoverSlotsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ListHandoverSlotsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListHandoverSlotsRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    this.AmazonOrderId == input.AmazonOrderId ||
                    (this.AmazonOrderId != null &&
                    this.AmazonOrderId.Equals(input.AmazonOrderId))
                ) &&
                (
                    this.PackageDimensions == input.PackageDimensions ||
                    (this.PackageDimensions != null &&
                    this.PackageDimensions.Equals(input.PackageDimensions))
                ) &&
                (
                    this.PackageWeight == input.PackageWeight ||
                    (this.PackageWeight != null &&
                    this.PackageWeight.Equals(input.PackageWeight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.AmazonOrderId != null)
                    hashCode = hashCode * 59 + this.AmazonOrderId.GetHashCode();
                if (this.PackageDimensions != null)
                    hashCode = hashCode * 59 + this.PackageDimensions.GetHashCode();
                if (this.PackageWeight != null)
                    hashCode = hashCode * 59 + this.PackageWeight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
