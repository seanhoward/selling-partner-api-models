/* 
 * Selling Partner API for Easy Ship
 *
 * Use the Selling Partner API for Easy Ship to build applications for sellers to manage and ship Amazon Easy Ship orders. With this API, you can get available time slots, schedule and reschedule Easy Ship orders, and print shipping labels, invoices, and warranties. To review the differences in Easy Ship operations by marketplace, refer to [Marketplace support](https://developer-docs.amazon.com/sp-api/docs/easyship-api-v2022-03-23-use-case-guide#marketplace-support).
 *
 * OpenAPI spec version: 2022-03-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.EasyShip
{
    /// <summary>
    /// A list of packages.
    /// </summary>
    [DataContract]
    public partial class Packages : IEquatable<Packages>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Packages" /> class.
        /// </summary>
        [JsonConstructor]
        protected Packages() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Packages" /> class.
        /// </summary>
        /// <param name="packages">A list of packages. (required).</param>
        public Packages(List<Package> packages = default)
        {
            // to ensure "packages" is required (not null)
            if (packages == null)
            {
                throw new InvalidDataException("packages is a required property for Packages and cannot be null");
            }
            else
            {
                this._Packages = packages;
            }
        }

        /// <summary>
        /// A list of packages.
        /// </summary>
        /// <value>A list of packages.</value>
        [DataMember(Name = "packages", EmitDefaultValue = false)]
        public List<Package> _Packages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Packages {\n");
            sb.Append("  _Packages: ").Append(_Packages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Packages);
        }

        /// <summary>
        /// Returns true if Packages instances are equal
        /// </summary>
        /// <param name="input">Instance of Packages to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Packages input)
        {
            if (input == null)
                return false;

            return
                (
                    this._Packages == input._Packages ||
                    this._Packages != null &&
                    this._Packages.SequenceEqual(input._Packages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Packages != null)
                    hashCode = hashCode * 59 + this._Packages.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
