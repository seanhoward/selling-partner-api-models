/* 
 * Selling Partner API for Easy Ship
 *
 * The Selling Partner API for Easy Ship helps you build applications that help sellers manage and ship Amazon Easy Ship orders.  Your Easy Ship applications can:  * Get available time slots for packages to be scheduled for delivery.  * Schedule, reschedule, and cancel Easy Ship orders.  * Print labels, invoices, and warranties.  See the [Marketplace Support Table](doc:easyship-api-v2022-03-23-use-case-guide#marketplace-support-table) for the differences in Easy Ship operations by marketplace.
 *
 * OpenAPI spec version: 2022-03-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.EasyShip
{
    /// <summary>
    /// This object contains all the details of the scheduled Easy Ship package.
    /// </summary>
    [DataContract]
    public partial class Package :  IEquatable<Package>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets PackageStatus
        /// </summary>
        [DataMember(Name="packageStatus", EmitDefaultValue=false)]
        public PackageStatus? PackageStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Package" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Package() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Package" /> class.
        /// </summary>
        /// <param name="scheduledPackageId">scheduledPackageId (required).</param>
        /// <param name="packageDimensions">packageDimensions (required).</param>
        /// <param name="packageWeight">packageWeight (required).</param>
        /// <param name="packageItems">packageItems.</param>
        /// <param name="packageTimeSlot">packageTimeSlot (required).</param>
        /// <param name="packageIdentifier">packageIdentifier.</param>
        /// <param name="invoice">invoice.</param>
        /// <param name="packageStatus">packageStatus.</param>
        /// <param name="trackingDetails">trackingDetails.</param>
        public Package(ScheduledPackageId scheduledPackageId = default(ScheduledPackageId), Dimensions packageDimensions = default(Dimensions), Weight packageWeight = default(Weight), Items packageItems = default(Items), TimeSlot packageTimeSlot = default(TimeSlot), string packageIdentifier = default(string), InvoiceData invoice = default(InvoiceData), PackageStatus? packageStatus = default(PackageStatus?), TrackingDetails trackingDetails = default(TrackingDetails))
        {
            // to ensure "scheduledPackageId" is required (not null)
            if (scheduledPackageId == null)
            {
                throw new InvalidDataException("scheduledPackageId is a required property for Package and cannot be null");
            }
            else
            {
                this.ScheduledPackageId = scheduledPackageId;
            }
            // to ensure "packageDimensions" is required (not null)
            if (packageDimensions == null)
            {
                throw new InvalidDataException("packageDimensions is a required property for Package and cannot be null");
            }
            else
            {
                this.PackageDimensions = packageDimensions;
            }
            // to ensure "packageWeight" is required (not null)
            if (packageWeight == null)
            {
                throw new InvalidDataException("packageWeight is a required property for Package and cannot be null");
            }
            else
            {
                this.PackageWeight = packageWeight;
            }
            // to ensure "packageTimeSlot" is required (not null)
            if (packageTimeSlot == null)
            {
                throw new InvalidDataException("packageTimeSlot is a required property for Package and cannot be null");
            }
            else
            {
                this.PackageTimeSlot = packageTimeSlot;
            }
            this.PackageItems = packageItems;
            this.PackageIdentifier = packageIdentifier;
            this.Invoice = invoice;
            this.PackageStatus = packageStatus;
            this.TrackingDetails = trackingDetails;
        }
        
        /// <summary>
        /// Gets or Sets ScheduledPackageId
        /// </summary>
        [DataMember(Name="scheduledPackageId", EmitDefaultValue=false)]
        public ScheduledPackageId ScheduledPackageId { get; set; }

        /// <summary>
        /// Gets or Sets PackageDimensions
        /// </summary>
        [DataMember(Name="packageDimensions", EmitDefaultValue=false)]
        public Dimensions PackageDimensions { get; set; }

        /// <summary>
        /// Gets or Sets PackageWeight
        /// </summary>
        [DataMember(Name="packageWeight", EmitDefaultValue=false)]
        public Weight PackageWeight { get; set; }

        /// <summary>
        /// Gets or Sets PackageItems
        /// </summary>
        [DataMember(Name="packageItems", EmitDefaultValue=false)]
        public Items PackageItems { get; set; }

        /// <summary>
        /// Gets or Sets PackageTimeSlot
        /// </summary>
        [DataMember(Name="packageTimeSlot", EmitDefaultValue=false)]
        public TimeSlot PackageTimeSlot { get; set; }

        /// <summary>
        /// Gets or Sets PackageIdentifier
        /// </summary>
        [DataMember(Name="packageIdentifier", EmitDefaultValue=false)]
        public string PackageIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Invoice
        /// </summary>
        [DataMember(Name="invoice", EmitDefaultValue=false)]
        public InvoiceData Invoice { get; set; }


        /// <summary>
        /// Gets or Sets TrackingDetails
        /// </summary>
        [DataMember(Name="trackingDetails", EmitDefaultValue=false)]
        public TrackingDetails TrackingDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Package {\n");
            sb.Append("  ScheduledPackageId: ").Append(ScheduledPackageId).Append("\n");
            sb.Append("  PackageDimensions: ").Append(PackageDimensions).Append("\n");
            sb.Append("  PackageWeight: ").Append(PackageWeight).Append("\n");
            sb.Append("  PackageItems: ").Append(PackageItems).Append("\n");
            sb.Append("  PackageTimeSlot: ").Append(PackageTimeSlot).Append("\n");
            sb.Append("  PackageIdentifier: ").Append(PackageIdentifier).Append("\n");
            sb.Append("  Invoice: ").Append(Invoice).Append("\n");
            sb.Append("  PackageStatus: ").Append(PackageStatus).Append("\n");
            sb.Append("  TrackingDetails: ").Append(TrackingDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Package);
        }

        /// <summary>
        /// Returns true if Package instances are equal
        /// </summary>
        /// <param name="input">Instance of Package to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Package input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScheduledPackageId == input.ScheduledPackageId ||
                    (this.ScheduledPackageId != null &&
                    this.ScheduledPackageId.Equals(input.ScheduledPackageId))
                ) && 
                (
                    this.PackageDimensions == input.PackageDimensions ||
                    (this.PackageDimensions != null &&
                    this.PackageDimensions.Equals(input.PackageDimensions))
                ) && 
                (
                    this.PackageWeight == input.PackageWeight ||
                    (this.PackageWeight != null &&
                    this.PackageWeight.Equals(input.PackageWeight))
                ) && 
                (
                    this.PackageItems == input.PackageItems ||
                    (this.PackageItems != null &&
                    this.PackageItems.Equals(input.PackageItems))
                ) && 
                (
                    this.PackageTimeSlot == input.PackageTimeSlot ||
                    (this.PackageTimeSlot != null &&
                    this.PackageTimeSlot.Equals(input.PackageTimeSlot))
                ) && 
                (
                    this.PackageIdentifier == input.PackageIdentifier ||
                    (this.PackageIdentifier != null &&
                    this.PackageIdentifier.Equals(input.PackageIdentifier))
                ) && 
                (
                    this.Invoice == input.Invoice ||
                    (this.Invoice != null &&
                    this.Invoice.Equals(input.Invoice))
                ) && 
                (
                    this.PackageStatus == input.PackageStatus ||
                    (this.PackageStatus != null &&
                    this.PackageStatus.Equals(input.PackageStatus))
                ) && 
                (
                    this.TrackingDetails == input.TrackingDetails ||
                    (this.TrackingDetails != null &&
                    this.TrackingDetails.Equals(input.TrackingDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScheduledPackageId != null)
                    hashCode = hashCode * 59 + this.ScheduledPackageId.GetHashCode();
                if (this.PackageDimensions != null)
                    hashCode = hashCode * 59 + this.PackageDimensions.GetHashCode();
                if (this.PackageWeight != null)
                    hashCode = hashCode * 59 + this.PackageWeight.GetHashCode();
                if (this.PackageItems != null)
                    hashCode = hashCode * 59 + this.PackageItems.GetHashCode();
                if (this.PackageTimeSlot != null)
                    hashCode = hashCode * 59 + this.PackageTimeSlot.GetHashCode();
                if (this.PackageIdentifier != null)
                    hashCode = hashCode * 59 + this.PackageIdentifier.GetHashCode();
                if (this.Invoice != null)
                    hashCode = hashCode * 59 + this.Invoice.GetHashCode();
                if (this.PackageStatus != null)
                    hashCode = hashCode * 59 + this.PackageStatus.GetHashCode();
                if (this.TrackingDetails != null)
                    hashCode = hashCode * 59 + this.TrackingDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
