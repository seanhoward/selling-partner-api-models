/* 
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Amazon.SellingPartnerAPIAA.Clients.Client;
using Amazon.SellingPartnerAPIAA.Clients.Models.SellerWallet;
using RestSharp;

namespace Amazon.SellingPartnerAPIAA.Clients.API
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a transaction request from Amazon Seller Wallet account to another customer-provided account
        /// </summary>
        /// <remarks>
        /// Create a transaction request from an Amazon Seller Wallet account to another customer-provided account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the request</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>Transaction</returns>
        Transaction CreateTransaction(TransactionInitiationRequest body, string destAccountDigitalSignature, string amountDigitalSignature);

        /// <summary>
        /// Create a transaction request from Amazon Seller Wallet account to another customer-provided account
        /// </summary>
        /// <remarks>
        /// Create a transaction request from an Amazon Seller Wallet account to another customer-provided account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the request</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>ApiResponse of Transaction</returns>
        ApiResponse<Transaction> CreateTransactionWithHttpInfo(TransactionInitiationRequest body, string destAccountDigitalSignature, string amountDigitalSignature);
        /// <summary>
        /// Find particular Amazon Seller Wallet account transaction by Amazon transaction identifier
        /// </summary>
        /// <remarks>
        /// Find a transaction by the Amazon transaction identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">The ID of the Amazon Seller Wallet transaction.</param>
        /// <returns>Transaction</returns>
        Transaction GetTransaction(string transactionId);

        /// <summary>
        /// Find particular Amazon Seller Wallet account transaction by Amazon transaction identifier
        /// </summary>
        /// <remarks>
        /// Find a transaction by the Amazon transaction identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">The ID of the Amazon Seller Wallet transaction.</param>
        /// <returns>ApiResponse of Transaction</returns>
        ApiResponse<Transaction> GetTransactionWithHttpInfo(string transactionId);
        /// <summary>
        /// The API will return all the transactions for a given Amazon Seller Wallet account sorted by the transaction request date
        /// </summary>
        /// <remarks>
        /// Retrieve a list of transactions for a given Amazon Seller Wallet bank account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the Amazon Seller Wallet account.</param>
        /// <param name="nextPageToken">A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds 100. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)</param>
        /// <returns>TransactionListing</returns>
        TransactionListing ListAccountTransactions(string accountId, string nextPageToken = null);

        /// <summary>
        /// The API will return all the transactions for a given Amazon Seller Wallet account sorted by the transaction request date
        /// </summary>
        /// <remarks>
        /// Retrieve a list of transactions for a given Amazon Seller Wallet bank account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the Amazon Seller Wallet account.</param>
        /// <param name="nextPageToken">A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds 100. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)</param>
        /// <returns>ApiResponse of TransactionListing</returns>
        ApiResponse<TransactionListing> ListAccountTransactionsWithHttpInfo(string accountId, string nextPageToken = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a transaction request from Amazon Seller Wallet account to another customer-provided account
        /// </summary>
        /// <remarks>
        /// Create a transaction request from an Amazon Seller Wallet account to another customer-provided account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the request</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>Task of Transaction</returns>
        System.Threading.Tasks.Task<Transaction> CreateTransactionAsync(TransactionInitiationRequest body, string destAccountDigitalSignature, string amountDigitalSignature);

        /// <summary>
        /// Create a transaction request from Amazon Seller Wallet account to another customer-provided account
        /// </summary>
        /// <remarks>
        /// Create a transaction request from an Amazon Seller Wallet account to another customer-provided account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the request</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transaction>> CreateTransactionAsyncWithHttpInfo(TransactionInitiationRequest body, string destAccountDigitalSignature, string amountDigitalSignature);
        /// <summary>
        /// Find particular Amazon Seller Wallet account transaction by Amazon transaction identifier
        /// </summary>
        /// <remarks>
        /// Find a transaction by the Amazon transaction identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">The ID of the Amazon Seller Wallet transaction.</param>
        /// <returns>Task of Transaction</returns>
        System.Threading.Tasks.Task<Transaction> GetTransactionAsync(string transactionId);

        /// <summary>
        /// Find particular Amazon Seller Wallet account transaction by Amazon transaction identifier
        /// </summary>
        /// <remarks>
        /// Find a transaction by the Amazon transaction identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">The ID of the Amazon Seller Wallet transaction.</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transaction>> GetTransactionAsyncWithHttpInfo(string transactionId);
        /// <summary>
        /// The API will return all the transactions for a given Amazon Seller Wallet account sorted by the transaction request date
        /// </summary>
        /// <remarks>
        /// Retrieve a list of transactions for a given Amazon Seller Wallet bank account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the Amazon Seller Wallet account.</param>
        /// <param name="nextPageToken">A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds 100. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)</param>
        /// <returns>Task of TransactionListing</returns>
        System.Threading.Tasks.Task<TransactionListing> ListAccountTransactionsAsync(string accountId, string nextPageToken = null);

        /// <summary>
        /// The API will return all the transactions for a given Amazon Seller Wallet account sorted by the transaction request date
        /// </summary>
        /// <remarks>
        /// Retrieve a list of transactions for a given Amazon Seller Wallet bank account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the Amazon Seller Wallet account.</param>
        /// <param name="nextPageToken">A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds 100. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionListing)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionListing>> ListAccountTransactionsAsyncWithHttpInfo(string accountId, string nextPageToken = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransactionsApi : ITransactionsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransactionsApi(Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a transaction request from Amazon Seller Wallet account to another customer-provided account Create a transaction request from an Amazon Seller Wallet account to another customer-provided account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the request</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>Transaction</returns>
        public Transaction CreateTransaction(TransactionInitiationRequest body, string destAccountDigitalSignature, string amountDigitalSignature)
        {
            ApiResponse<Transaction> localVarResponse = CreateTransactionWithHttpInfo(body, destAccountDigitalSignature, amountDigitalSignature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a transaction request from Amazon Seller Wallet account to another customer-provided account Create a transaction request from an Amazon Seller Wallet account to another customer-provided account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the request</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>ApiResponse of Transaction</returns>
        public ApiResponse<Transaction> CreateTransactionWithHttpInfo(TransactionInitiationRequest body, string destAccountDigitalSignature, string amountDigitalSignature)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionsApi->CreateTransaction");
            // verify the required parameter 'destAccountDigitalSignature' is set
            if (destAccountDigitalSignature == null)
                throw new ApiException(400, "Missing required parameter 'destAccountDigitalSignature' when calling TransactionsApi->CreateTransaction");
            // verify the required parameter 'amountDigitalSignature' is set
            if (amountDigitalSignature == null)
                throw new ApiException(400, "Missing required parameter 'amountDigitalSignature' when calling TransactionsApi->CreateTransaction");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destAccountDigitalSignature != null) localVarHeaderParams.Add("destAccountDigitalSignature", this.Configuration.ApiClient.ParameterToString(destAccountDigitalSignature)); // header parameter
            if (amountDigitalSignature != null) localVarHeaderParams.Add("amountDigitalSignature", this.Configuration.ApiClient.ParameterToString(amountDigitalSignature)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Transaction)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

        /// <summary>
        /// Create a transaction request from Amazon Seller Wallet account to another customer-provided account Create a transaction request from an Amazon Seller Wallet account to another customer-provided account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the request</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>Task of Transaction</returns>
        public async System.Threading.Tasks.Task<Transaction> CreateTransactionAsync(TransactionInitiationRequest body, string destAccountDigitalSignature, string amountDigitalSignature)
        {
            ApiResponse<Transaction> localVarResponse = await CreateTransactionAsyncWithHttpInfo(body, destAccountDigitalSignature, amountDigitalSignature);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Create a transaction request from Amazon Seller Wallet account to another customer-provided account Create a transaction request from an Amazon Seller Wallet account to another customer-provided account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the request</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Transaction>> CreateTransactionAsyncWithHttpInfo(TransactionInitiationRequest body, string destAccountDigitalSignature, string amountDigitalSignature)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionsApi->CreateTransaction");
            // verify the required parameter 'destAccountDigitalSignature' is set
            if (destAccountDigitalSignature == null)
                throw new ApiException(400, "Missing required parameter 'destAccountDigitalSignature' when calling TransactionsApi->CreateTransaction");
            // verify the required parameter 'amountDigitalSignature' is set
            if (amountDigitalSignature == null)
                throw new ApiException(400, "Missing required parameter 'amountDigitalSignature' when calling TransactionsApi->CreateTransaction");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destAccountDigitalSignature != null) localVarHeaderParams.Add("destAccountDigitalSignature", this.Configuration.ApiClient.ParameterToString(destAccountDigitalSignature)); // header parameter
            if (amountDigitalSignature != null) localVarHeaderParams.Add("amountDigitalSignature", this.Configuration.ApiClient.ParameterToString(amountDigitalSignature)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Transaction)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

        /// <summary>
        /// Find particular Amazon Seller Wallet account transaction by Amazon transaction identifier Find a transaction by the Amazon transaction identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">The ID of the Amazon Seller Wallet transaction.</param>
        /// <returns>Transaction</returns>
        public Transaction GetTransaction(string transactionId)
        {
            ApiResponse<Transaction> localVarResponse = GetTransactionWithHttpInfo(transactionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find particular Amazon Seller Wallet account transaction by Amazon transaction identifier Find a transaction by the Amazon transaction identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">The ID of the Amazon Seller Wallet transaction.</param>
        /// <returns>ApiResponse of Transaction</returns>
        public ApiResponse<Transaction> GetTransactionWithHttpInfo(string transactionId)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling TransactionsApi->GetTransaction");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/transactions/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Transaction)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

        /// <summary>
        /// Find particular Amazon Seller Wallet account transaction by Amazon transaction identifier Find a transaction by the Amazon transaction identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">The ID of the Amazon Seller Wallet transaction.</param>
        /// <returns>Task of Transaction</returns>
        public async System.Threading.Tasks.Task<Transaction> GetTransactionAsync(string transactionId)
        {
            ApiResponse<Transaction> localVarResponse = await GetTransactionAsyncWithHttpInfo(transactionId);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Find particular Amazon Seller Wallet account transaction by Amazon transaction identifier Find a transaction by the Amazon transaction identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">The ID of the Amazon Seller Wallet transaction.</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Transaction>> GetTransactionAsyncWithHttpInfo(string transactionId)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling TransactionsApi->GetTransaction");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/transactions/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Transaction)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

        /// <summary>
        /// The API will return all the transactions for a given Amazon Seller Wallet account sorted by the transaction request date Retrieve a list of transactions for a given Amazon Seller Wallet bank account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the Amazon Seller Wallet account.</param>
        /// <param name="nextPageToken">A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds 100. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)</param>
        /// <returns>TransactionListing</returns>
        public TransactionListing ListAccountTransactions(string accountId, string nextPageToken = null)
        {
            ApiResponse<TransactionListing> localVarResponse = ListAccountTransactionsWithHttpInfo(accountId, nextPageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The API will return all the transactions for a given Amazon Seller Wallet account sorted by the transaction request date Retrieve a list of transactions for a given Amazon Seller Wallet bank account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the Amazon Seller Wallet account.</param>
        /// <param name="nextPageToken">A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds 100. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)</param>
        /// <returns>ApiResponse of TransactionListing</returns>
        public ApiResponse<TransactionListing> ListAccountTransactionsWithHttpInfo(string accountId, string nextPageToken = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TransactionsApi->ListAccountTransactions");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter
            if (nextPageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageToken", nextPageToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionListing>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionListing)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionListing)));
        }

        /// <summary>
        /// The API will return all the transactions for a given Amazon Seller Wallet account sorted by the transaction request date Retrieve a list of transactions for a given Amazon Seller Wallet bank account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the Amazon Seller Wallet account.</param>
        /// <param name="nextPageToken">A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds 100. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)</param>
        /// <returns>Task of TransactionListing</returns>
        public async System.Threading.Tasks.Task<TransactionListing> ListAccountTransactionsAsync(string accountId, string nextPageToken = null)
        {
            ApiResponse<TransactionListing> localVarResponse = await ListAccountTransactionsAsyncWithHttpInfo(accountId, nextPageToken);
            return localVarResponse.Data;

        }

        /// <summary>
        /// The API will return all the transactions for a given Amazon Seller Wallet account sorted by the transaction request date Retrieve a list of transactions for a given Amazon Seller Wallet bank account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the Amazon Seller Wallet account.</param>
        /// <param name="nextPageToken">A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds 100. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionListing)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionListing>> ListAccountTransactionsAsyncWithHttpInfo(string accountId, string nextPageToken = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TransactionsApi->ListAccountTransactions");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter
            if (nextPageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageToken", nextPageToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionListing>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionListing)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionListing)));
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }


            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public TransactionsApi Build()
            {
                if (lwaAuthorizationCredentials == null)
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }


                Configuration configuration = new Configuration
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    RateLimitConfig = rateLimitConfiguration,
                    // default HTTP connection timeout (in milliseconds)
                    Timeout = 100000
                };

                return new TransactionsApi(configuration);
            }
        }
    }
}
