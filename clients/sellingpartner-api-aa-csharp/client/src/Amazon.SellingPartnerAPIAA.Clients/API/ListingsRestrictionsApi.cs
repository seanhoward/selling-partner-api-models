/* 
 * Selling Partner API for Listings Restrictions
 *
 * The Selling Partner API for Listings Restrictions provides programmatic access to restrictions on Amazon catalog listings.  For more information, see the [Listings Restrictions API Use Case Guide](doc:listings-restrictions-api-v2021-08-01-use-case-guide).
 *
 * OpenAPI spec version: 2021-08-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Amazon.SellingPartnerAPIAA.Clients.Client;
using Amazon.SellingPartnerAPIAA.Clients.Models.ListingsRestrictions;
using RestSharp;

namespace Amazon.SellingPartnerAPIAA.Clients.API
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListingsRestrictionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns listing restrictions for an item in the Amazon Catalog.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="conditionType">The condition used to filter restrictions. (optional)</param>
        /// <param name="reasonLocale">A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>RestrictionList</returns>
        RestrictionList GetListingsRestrictions(string asin, string sellerId, List<string> marketplaceIds, string conditionType = null, string reasonLocale = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns listing restrictions for an item in the Amazon Catalog.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="conditionType">The condition used to filter restrictions. (optional)</param>
        /// <param name="reasonLocale">A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>ApiResponse of RestrictionList</returns>
        ApiResponse<RestrictionList> GetListingsRestrictionsWithHttpInfo(string asin, string sellerId, List<string> marketplaceIds, string conditionType = null, string reasonLocale = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns listing restrictions for an item in the Amazon Catalog.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="conditionType">The condition used to filter restrictions. (optional)</param>
        /// <param name="reasonLocale">A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>Task of RestrictionList</returns>
        System.Threading.Tasks.Task<RestrictionList> GetListingsRestrictionsAsync(string asin, string sellerId, List<string> marketplaceIds, string conditionType = null, string reasonLocale = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns listing restrictions for an item in the Amazon Catalog.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="conditionType">The condition used to filter restrictions. (optional)</param>
        /// <param name="reasonLocale">A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>Task of ApiResponse (RestrictionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestrictionList>> GetListingsRestrictionsAsyncWithHttpInfo(string asin, string sellerId, List<string> marketplaceIds, string conditionType = null, string reasonLocale = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ListingsRestrictionsApi : IListingsRestrictionsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsRestrictionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ListingsRestrictionsApi(Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns listing restrictions for an item in the Amazon Catalog.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="conditionType">The condition used to filter restrictions. (optional)</param>
        /// <param name="reasonLocale">A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>RestrictionList</returns>
        public RestrictionList GetListingsRestrictions(string asin, string sellerId, List<string> marketplaceIds, string conditionType = null, string reasonLocale = null)
        {
            ApiResponse<RestrictionList> localVarResponse = GetListingsRestrictionsWithHttpInfo(asin, sellerId, marketplaceIds, conditionType, reasonLocale);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns listing restrictions for an item in the Amazon Catalog.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="conditionType">The condition used to filter restrictions. (optional)</param>
        /// <param name="reasonLocale">A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>ApiResponse of RestrictionList</returns>
        public ApiResponse<RestrictionList> GetListingsRestrictionsWithHttpInfo(string asin, string sellerId, List<string> marketplaceIds, string conditionType = null, string reasonLocale = null)
        {
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling ListingsApi->GetListingsRestrictions");
            // verify the required parameter 'sellerId' is set
            if (sellerId == null)
                throw new ApiException(400, "Missing required parameter 'sellerId' when calling ListingsApi->GetListingsRestrictions");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ListingsApi->GetListingsRestrictions");

            var localVarPath = "/listings/2021-08-01/restrictions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asin", asin)); // query parameter
            if (conditionType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conditionType", conditionType)); // query parameter
            if (sellerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sellerId", sellerId)); // query parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (reasonLocale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reasonLocale", reasonLocale)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListingsRestrictions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestrictionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestrictionList)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestrictionList)));
        }

        /// <summary>
        ///  Returns listing restrictions for an item in the Amazon Catalog.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="conditionType">The condition used to filter restrictions. (optional)</param>
        /// <param name="reasonLocale">A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>Task of RestrictionList</returns>
        public async System.Threading.Tasks.Task<RestrictionList> GetListingsRestrictionsAsync(string asin, string sellerId, List<string> marketplaceIds, string conditionType = null, string reasonLocale = null)
        {
            ApiResponse<RestrictionList> localVarResponse = await GetListingsRestrictionsAsyncWithHttpInfo(asin, sellerId, marketplaceIds, conditionType, reasonLocale);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns listing restrictions for an item in the Amazon Catalog.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="conditionType">The condition used to filter restrictions. (optional)</param>
        /// <param name="reasonLocale">A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>Task of ApiResponse (RestrictionList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestrictionList>> GetListingsRestrictionsAsyncWithHttpInfo(string asin, string sellerId, List<string> marketplaceIds, string conditionType = null, string reasonLocale = null)
        {
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling ListingsApi->GetListingsRestrictions");
            // verify the required parameter 'sellerId' is set
            if (sellerId == null)
                throw new ApiException(400, "Missing required parameter 'sellerId' when calling ListingsApi->GetListingsRestrictions");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ListingsApi->GetListingsRestrictions");

            var localVarPath = "/listings/2021-08-01/restrictions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asin", asin)); // query parameter
            if (conditionType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conditionType", conditionType)); // query parameter
            if (sellerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sellerId", sellerId)); // query parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (reasonLocale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reasonLocale", reasonLocale)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListingsRestrictions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestrictionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestrictionList)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestrictionList)));
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }


            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public ListingsRestrictionsApi Build()
            {
                if (lwaAuthorizationCredentials == null)
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }


                Configuration configuration = new Configuration
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    RateLimitConfig = rateLimitConfiguration,
                    // default HTTP connection timeout (in milliseconds)
                    Timeout = 100000
                };

                return new ListingsRestrictionsApi(configuration);
            }
        }
    }
}
