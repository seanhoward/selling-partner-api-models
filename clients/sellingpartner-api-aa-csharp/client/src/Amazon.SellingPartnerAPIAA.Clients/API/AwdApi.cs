/* 
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory. 
 *
 * OpenAPI spec version: 2024-05-09
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Amazon.SellingPartnerAPIAA.Clients.Client;
using Amazon.SellingPartnerAPIAA.Clients.Models.Awd;
using Amazon.SellingPartnerAPIAA;

namespace Amazon.SellingPartnerAPIAA.Clients.API
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAwdApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an AWD inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">ID for the shipment. A shipment contains the cases being inbounded.</param>
        /// <param name="skuQuantities">If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.  Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)</param>
        /// <returns>InboundShipment</returns>
        InboundShipment GetInboundShipment (string shipmentId, string skuQuantities = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an AWD inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">ID for the shipment. A shipment contains the cases being inbounded.</param>
        /// <param name="skuQuantities">If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.  Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)</param>
        /// <returns>ApiResponse of InboundShipment</returns>
        ApiResponse<InboundShipment> GetInboundShipmentWithHttpInfo (string shipmentId, string skuQuantities = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a summary of all the inbound AWD shipments associated with a merchant, with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)</param>
        /// <param name="sortOrder">Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order. (optional)</param>
        /// <param name="shipmentStatus">Filter by inbound shipment status. (optional)</param>
        /// <param name="updatedAfter">List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)</param>
        /// <param name="updatedBefore">List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)</param>
        /// <param name="maxResults">Maximum number of results to return. (optional, default to 25)</param>
        /// <param name="nextToken">Token to retrieve the next set of paginated results. (optional)</param>
        /// <returns>ShipmentListing</returns>
        ShipmentListing ListInboundShipments (string sortBy = null, string sortOrder = null, string shipmentStatus = null, DateTime? updatedAfter = null, DateTime? updatedBefore = null, int? maxResults = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a summary of all the inbound AWD shipments associated with a merchant, with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)</param>
        /// <param name="sortOrder">Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order. (optional)</param>
        /// <param name="shipmentStatus">Filter by inbound shipment status. (optional)</param>
        /// <param name="updatedAfter">List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)</param>
        /// <param name="updatedBefore">List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)</param>
        /// <param name="maxResults">Maximum number of results to return. (optional, default to 25)</param>
        /// <param name="nextToken">Token to retrieve the next set of paginated results. (optional)</param>
        /// <returns>ApiResponse of ShipmentListing</returns>
        ApiResponse<ShipmentListing> ListInboundShipmentsWithHttpInfo (string sortBy = null, string sortOrder = null, string shipmentStatus = null, DateTime? updatedAfter = null, DateTime? updatedBefore = null, int? maxResults = null, string nextToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists AWD inventory associated with a merchant with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sku">Filter by seller or merchant SKU for the item. (optional)</param>
        /// <param name="sortOrder">Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)</param>
        /// <param name="details">Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)</param>
        /// <param name="nextToken">Token to retrieve the next set of paginated results. (optional)</param>
        /// <param name="maxResults">Maximum number of results to return. (optional, default to 25)</param>
        /// <returns>InventoryListing</returns>
        InventoryListing ListInventory (string sku = null, string sortOrder = null, string details = null, string nextToken = null, int? maxResults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists AWD inventory associated with a merchant with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sku">Filter by seller or merchant SKU for the item. (optional)</param>
        /// <param name="sortOrder">Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)</param>
        /// <param name="details">Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)</param>
        /// <param name="nextToken">Token to retrieve the next set of paginated results. (optional)</param>
        /// <param name="maxResults">Maximum number of results to return. (optional, default to 25)</param>
        /// <returns>ApiResponse of InventoryListing</returns>
        ApiResponse<InventoryListing> ListInventoryWithHttpInfo (string sku = null, string sortOrder = null, string details = null, string nextToken = null, int? maxResults = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an AWD inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">ID for the shipment. A shipment contains the cases being inbounded.</param>
        /// <param name="skuQuantities">If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.  Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)</param>
        /// <returns>Task of InboundShipment</returns>
        System.Threading.Tasks.Task<InboundShipment> GetInboundShipmentAsync (string shipmentId, string skuQuantities = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an AWD inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">ID for the shipment. A shipment contains the cases being inbounded.</param>
        /// <param name="skuQuantities">If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.  Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)</param>
        /// <returns>Task of ApiResponse (InboundShipment)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboundShipment>> GetInboundShipmentAsyncWithHttpInfo (string shipmentId, string skuQuantities = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a summary of all the inbound AWD shipments associated with a merchant, with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)</param>
        /// <param name="sortOrder">Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order. (optional)</param>
        /// <param name="shipmentStatus">Filter by inbound shipment status. (optional)</param>
        /// <param name="updatedAfter">List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)</param>
        /// <param name="updatedBefore">List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)</param>
        /// <param name="maxResults">Maximum number of results to return. (optional, default to 25)</param>
        /// <param name="nextToken">Token to retrieve the next set of paginated results. (optional)</param>
        /// <returns>Task of ShipmentListing</returns>
        System.Threading.Tasks.Task<ShipmentListing> ListInboundShipmentsAsync (string sortBy = null, string sortOrder = null, string shipmentStatus = null, DateTime? updatedAfter = null, DateTime? updatedBefore = null, int? maxResults = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a summary of all the inbound AWD shipments associated with a merchant, with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)</param>
        /// <param name="sortOrder">Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order. (optional)</param>
        /// <param name="shipmentStatus">Filter by inbound shipment status. (optional)</param>
        /// <param name="updatedAfter">List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)</param>
        /// <param name="updatedBefore">List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)</param>
        /// <param name="maxResults">Maximum number of results to return. (optional, default to 25)</param>
        /// <param name="nextToken">Token to retrieve the next set of paginated results. (optional)</param>
        /// <returns>Task of ApiResponse (ShipmentListing)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShipmentListing>> ListInboundShipmentsAsyncWithHttpInfo (string sortBy = null, string sortOrder = null, string shipmentStatus = null, DateTime? updatedAfter = null, DateTime? updatedBefore = null, int? maxResults = null, string nextToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists AWD inventory associated with a merchant with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sku">Filter by seller or merchant SKU for the item. (optional)</param>
        /// <param name="sortOrder">Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)</param>
        /// <param name="details">Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)</param>
        /// <param name="nextToken">Token to retrieve the next set of paginated results. (optional)</param>
        /// <param name="maxResults">Maximum number of results to return. (optional, default to 25)</param>
        /// <returns>Task of InventoryListing</returns>
        System.Threading.Tasks.Task<InventoryListing> ListInventoryAsync (string sku = null, string sortOrder = null, string details = null, string nextToken = null, int? maxResults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists AWD inventory associated with a merchant with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sku">Filter by seller or merchant SKU for the item. (optional)</param>
        /// <param name="sortOrder">Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)</param>
        /// <param name="details">Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)</param>
        /// <param name="nextToken">Token to retrieve the next set of paginated results. (optional)</param>
        /// <param name="maxResults">Maximum number of results to return. (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (InventoryListing)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryListing>> ListInventoryAsyncWithHttpInfo (string sku = null, string sortOrder = null, string details = null, string nextToken = null, int? maxResults = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AwdApi : IAwdApi
    {
        private Amazon.SellingPartnerAPIAA.Clients.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AwdApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AwdApi(Amazon.SellingPartnerAPIAA.Clients.Client.Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = Amazon.SellingPartnerAPIAA.Clients.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Amazon.SellingPartnerAPIAA.Clients.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Amazon.SellingPartnerAPIAA.Clients.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Retrieves an AWD inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">ID for the shipment. A shipment contains the cases being inbounded.</param>
        /// <param name="skuQuantities">If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.  Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)</param>
        /// <returns>InboundShipment</returns>
        public InboundShipment GetInboundShipment (string shipmentId, string skuQuantities = null)
        {
             ApiResponse<InboundShipment> localVarResponse = GetInboundShipmentWithHttpInfo(shipmentId, skuQuantities);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an AWD inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">ID for the shipment. A shipment contains the cases being inbounded.</param>
        /// <param name="skuQuantities">If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.  Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)</param>
        /// <returns>ApiResponse of InboundShipment</returns>
        public ApiResponse< InboundShipment > GetInboundShipmentWithHttpInfo (string shipmentId, string skuQuantities = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling AwdApi->GetInboundShipment");

            var localVarPath = "/awd/2024-05-09/inboundShipments/{shipmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (skuQuantities != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skuQuantities", skuQuantities)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InboundShipment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InboundShipment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InboundShipment)));
        }

        /// <summary>
        ///  Retrieves an AWD inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">ID for the shipment. A shipment contains the cases being inbounded.</param>
        /// <param name="skuQuantities">If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.  Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)</param>
        /// <returns>Task of InboundShipment</returns>
        public async System.Threading.Tasks.Task<InboundShipment> GetInboundShipmentAsync (string shipmentId, string skuQuantities = null)
        {
             ApiResponse<InboundShipment> localVarResponse = await GetInboundShipmentAsyncWithHttpInfo(shipmentId, skuQuantities);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an AWD inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">ID for the shipment. A shipment contains the cases being inbounded.</param>
        /// <param name="skuQuantities">If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.  Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)</param>
        /// <returns>Task of ApiResponse (InboundShipment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InboundShipment>> GetInboundShipmentAsyncWithHttpInfo (string shipmentId, string skuQuantities = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling AwdApi->GetInboundShipment");

            var localVarPath = "/awd/2024-05-09/inboundShipments/{shipmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (skuQuantities != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skuQuantities", skuQuantities)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InboundShipment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InboundShipment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InboundShipment)));
        }

        /// <summary>
        ///  Retrieves a summary of all the inbound AWD shipments associated with a merchant, with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)</param>
        /// <param name="sortOrder">Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order. (optional)</param>
        /// <param name="shipmentStatus">Filter by inbound shipment status. (optional)</param>
        /// <param name="updatedAfter">List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)</param>
        /// <param name="updatedBefore">List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)</param>
        /// <param name="maxResults">Maximum number of results to return. (optional, default to 25)</param>
        /// <param name="nextToken">Token to retrieve the next set of paginated results. (optional)</param>
        /// <returns>ShipmentListing</returns>
        public ShipmentListing ListInboundShipments (string sortBy = null, string sortOrder = null, string shipmentStatus = null, DateTime? updatedAfter = null, DateTime? updatedBefore = null, int? maxResults = null, string nextToken = null)
        {
             ApiResponse<ShipmentListing> localVarResponse = ListInboundShipmentsWithHttpInfo(sortBy, sortOrder, shipmentStatus, updatedAfter, updatedBefore, maxResults, nextToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a summary of all the inbound AWD shipments associated with a merchant, with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)</param>
        /// <param name="sortOrder">Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order. (optional)</param>
        /// <param name="shipmentStatus">Filter by inbound shipment status. (optional)</param>
        /// <param name="updatedAfter">List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)</param>
        /// <param name="updatedBefore">List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)</param>
        /// <param name="maxResults">Maximum number of results to return. (optional, default to 25)</param>
        /// <param name="nextToken">Token to retrieve the next set of paginated results. (optional)</param>
        /// <returns>ApiResponse of ShipmentListing</returns>
        public ApiResponse< ShipmentListing > ListInboundShipmentsWithHttpInfo (string sortBy = null, string sortOrder = null, string shipmentStatus = null, DateTime? updatedAfter = null, DateTime? updatedBefore = null, int? maxResults = null, string nextToken = null)
        {

            var localVarPath = "/awd/2024-05-09/inboundShipments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (shipmentStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipmentStatus", shipmentStatus)); // query parameter
            if (updatedAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updatedAfter", updatedAfter)); // query parameter
            if (updatedBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updatedBefore", updatedBefore)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxResults", maxResults)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextToken", nextToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInboundShipments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShipmentListing>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShipmentListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShipmentListing)));
        }

        /// <summary>
        ///  Retrieves a summary of all the inbound AWD shipments associated with a merchant, with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)</param>
        /// <param name="sortOrder">Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order. (optional)</param>
        /// <param name="shipmentStatus">Filter by inbound shipment status. (optional)</param>
        /// <param name="updatedAfter">List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)</param>
        /// <param name="updatedBefore">List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)</param>
        /// <param name="maxResults">Maximum number of results to return. (optional, default to 25)</param>
        /// <param name="nextToken">Token to retrieve the next set of paginated results. (optional)</param>
        /// <returns>Task of ShipmentListing</returns>
        public async System.Threading.Tasks.Task<ShipmentListing> ListInboundShipmentsAsync (string sortBy = null, string sortOrder = null, string shipmentStatus = null, DateTime? updatedAfter = null, DateTime? updatedBefore = null, int? maxResults = null, string nextToken = null)
        {
             ApiResponse<ShipmentListing> localVarResponse = await ListInboundShipmentsAsyncWithHttpInfo(sortBy, sortOrder, shipmentStatus, updatedAfter, updatedBefore, maxResults, nextToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves a summary of all the inbound AWD shipments associated with a merchant, with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)</param>
        /// <param name="sortOrder">Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order. (optional)</param>
        /// <param name="shipmentStatus">Filter by inbound shipment status. (optional)</param>
        /// <param name="updatedAfter">List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)</param>
        /// <param name="updatedBefore">List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)</param>
        /// <param name="maxResults">Maximum number of results to return. (optional, default to 25)</param>
        /// <param name="nextToken">Token to retrieve the next set of paginated results. (optional)</param>
        /// <returns>Task of ApiResponse (ShipmentListing)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShipmentListing>> ListInboundShipmentsAsyncWithHttpInfo (string sortBy = null, string sortOrder = null, string shipmentStatus = null, DateTime? updatedAfter = null, DateTime? updatedBefore = null, int? maxResults = null, string nextToken = null)
        {

            var localVarPath = "/awd/2024-05-09/inboundShipments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (shipmentStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipmentStatus", shipmentStatus)); // query parameter
            if (updatedAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updatedAfter", updatedAfter)); // query parameter
            if (updatedBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updatedBefore", updatedBefore)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxResults", maxResults)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextToken", nextToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInboundShipments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShipmentListing>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShipmentListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShipmentListing)));
        }

        /// <summary>
        ///  Lists AWD inventory associated with a merchant with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sku">Filter by seller or merchant SKU for the item. (optional)</param>
        /// <param name="sortOrder">Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)</param>
        /// <param name="details">Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)</param>
        /// <param name="nextToken">Token to retrieve the next set of paginated results. (optional)</param>
        /// <param name="maxResults">Maximum number of results to return. (optional, default to 25)</param>
        /// <returns>InventoryListing</returns>
        public InventoryListing ListInventory (string sku = null, string sortOrder = null, string details = null, string nextToken = null, int? maxResults = null)
        {
             ApiResponse<InventoryListing> localVarResponse = ListInventoryWithHttpInfo(sku, sortOrder, details, nextToken, maxResults);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists AWD inventory associated with a merchant with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sku">Filter by seller or merchant SKU for the item. (optional)</param>
        /// <param name="sortOrder">Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)</param>
        /// <param name="details">Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)</param>
        /// <param name="nextToken">Token to retrieve the next set of paginated results. (optional)</param>
        /// <param name="maxResults">Maximum number of results to return. (optional, default to 25)</param>
        /// <returns>ApiResponse of InventoryListing</returns>
        public ApiResponse< InventoryListing > ListInventoryWithHttpInfo (string sku = null, string sortOrder = null, string details = null, string nextToken = null, int? maxResults = null)
        {

            var localVarPath = "/awd/2024-05-09/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sku != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sku", sku)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextToken", nextToken)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxResults", maxResults)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InventoryListing>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InventoryListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InventoryListing)));
        }

        /// <summary>
        ///  Lists AWD inventory associated with a merchant with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sku">Filter by seller or merchant SKU for the item. (optional)</param>
        /// <param name="sortOrder">Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)</param>
        /// <param name="details">Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)</param>
        /// <param name="nextToken">Token to retrieve the next set of paginated results. (optional)</param>
        /// <param name="maxResults">Maximum number of results to return. (optional, default to 25)</param>
        /// <returns>Task of InventoryListing</returns>
        public async System.Threading.Tasks.Task<InventoryListing> ListInventoryAsync (string sku = null, string sortOrder = null, string details = null, string nextToken = null, int? maxResults = null)
        {
             ApiResponse<InventoryListing> localVarResponse = await ListInventoryAsyncWithHttpInfo(sku, sortOrder, details, nextToken, maxResults);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists AWD inventory associated with a merchant with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sku">Filter by seller or merchant SKU for the item. (optional)</param>
        /// <param name="sortOrder">Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)</param>
        /// <param name="details">Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)</param>
        /// <param name="nextToken">Token to retrieve the next set of paginated results. (optional)</param>
        /// <param name="maxResults">Maximum number of results to return. (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (InventoryListing)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InventoryListing>> ListInventoryAsyncWithHttpInfo (string sku = null, string sortOrder = null, string details = null, string nextToken = null, int? maxResults = null)
        {

            var localVarPath = "/awd/2024-05-09/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sku != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sku", sku)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextToken", nextToken)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxResults", maxResults)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InventoryListing>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InventoryListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InventoryListing)));
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }
            
            
            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public AwdApi Build() 
            {
                if (lwaAuthorizationCredentials == null) 
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }

                
                Amazon.SellingPartnerAPIAA.Clients.Client.Configuration configuration = new Amazon.SellingPartnerAPIAA.Clients.Client.Configuration()
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    RateLimitConfig = rateLimitConfiguration
                };

                // default HTTP connection timeout (in milliseconds)
                configuration.Timeout = 100000;

                return new AwdApi(configuration);
            }
        }
    }
}
