/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Amazon.SellingPartnerAPIAA.Clients.Client;
using Amazon.SellingPartnerAPIAA.Clients.Models.Services;
using Amazon.SellingPartnerAPIAA;

namespace Amazon.SellingPartnerAPIAA.Clients.API
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="body">Add appointment operation input details.</param>
        /// <returns>SetAppointmentResponse</returns>
        SetAppointmentResponse AddAppointmentForServiceJobByServiceJobId (string serviceJobId, AddAppointmentRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="body">Add appointment operation input details.</param>
        /// <returns>ApiResponse of SetAppointmentResponse</returns>
        ApiResponse<SetAppointmentResponse> AddAppointmentForServiceJobByServiceJobIdWithHttpInfo (string serviceJobId, AddAppointmentRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.</param>
        /// <param name="appointmentId">An Amazon-defined identifier of active service job appointment.</param>
        /// <param name="body"></param>
        /// <returns>AssignAppointmentResourcesResponse</returns>
        AssignAppointmentResourcesResponse AssignAppointmentResources (string serviceJobId, string appointmentId, AssignAppointmentResourcesRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.</param>
        /// <param name="appointmentId">An Amazon-defined identifier of active service job appointment.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AssignAppointmentResourcesResponse</returns>
        ApiResponse<AssignAppointmentResourcesResponse> AssignAppointmentResourcesWithHttpInfo (string serviceJobId, string appointmentId, AssignAppointmentResourcesRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reservationId">Reservation Identifier</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>CancelReservationResponse</returns>
        CancelReservationResponse CancelReservation (string reservationId, List<string> marketplaceIds);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reservationId">Reservation Identifier</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>ApiResponse of CancelReservationResponse</returns>
        ApiResponse<CancelReservationResponse> CancelReservationWithHttpInfo (string reservationId, List<string> marketplaceIds);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="cancellationReasonCode">A cancel reason code that specifies the reason for cancelling a service job.</param>
        /// <returns>CancelServiceJobByServiceJobIdResponse</returns>
        CancelServiceJobByServiceJobIdResponse CancelServiceJobByServiceJobId (string serviceJobId, string cancellationReasonCode);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="cancellationReasonCode">A cancel reason code that specifies the reason for cancelling a service job.</param>
        /// <returns>ApiResponse of CancelServiceJobByServiceJobIdResponse</returns>
        ApiResponse<CancelServiceJobByServiceJobIdResponse> CancelServiceJobByServiceJobIdWithHttpInfo (string serviceJobId, string cancellationReasonCode);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <returns>CompleteServiceJobByServiceJobIdResponse</returns>
        CompleteServiceJobByServiceJobIdResponse CompleteServiceJobByServiceJobId (string serviceJobId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <returns>ApiResponse of CompleteServiceJobByServiceJobIdResponse</returns>
        ApiResponse<CompleteServiceJobByServiceJobIdResponse> CompleteServiceJobByServiceJobIdWithHttpInfo (string serviceJobId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reservation details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>CreateReservationResponse</returns>
        CreateReservationResponse CreateReservation (CreateReservationRequest body, List<string> marketplaceIds);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reservation details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>ApiResponse of CreateReservationResponse</returns>
        ApiResponse<CreateReservationResponse> CreateReservationWithHttpInfo (CreateReservationRequest body, List<string> marketplaceIds);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Upload document operation input details.</param>
        /// <returns>CreateServiceDocumentUploadDestination</returns>
        CreateServiceDocumentUploadDestination CreateServiceDocumentUploadDestination (ServiceUploadDocument body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Upload document operation input details.</param>
        /// <returns>ApiResponse of CreateServiceDocumentUploadDestination</returns>
        ApiResponse<CreateServiceDocumentUploadDestination> CreateServiceDocumentUploadDestinationWithHttpInfo (ServiceUploadDocument body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">ASIN associated with the service.</param>
        /// <param name="storeId">Store identifier defining the region scope to retrive appointment slots.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace for which appointment slots are queried</param>
        /// <param name="startTime">A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)</param>
        /// <param name="endTime">A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)</param>
        /// <returns>GetAppointmentSlotsResponse</returns>
        GetAppointmentSlotsResponse GetAppointmentSlots (string asin, string storeId, List<string> marketplaceIds, string startTime = null, string endTime = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">ASIN associated with the service.</param>
        /// <param name="storeId">Store identifier defining the region scope to retrive appointment slots.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace for which appointment slots are queried</param>
        /// <param name="startTime">A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)</param>
        /// <param name="endTime">A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)</param>
        /// <returns>ApiResponse of GetAppointmentSlotsResponse</returns>
        ApiResponse<GetAppointmentSlotsResponse> GetAppointmentSlotsWithHttpInfo (string asin, string storeId, List<string> marketplaceIds, string startTime = null, string endTime = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier to retrive appointment slots for associated service.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="startTime">A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)</param>
        /// <param name="endTime">A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)</param>
        /// <returns>GetAppointmentSlotsResponse</returns>
        GetAppointmentSlotsResponse GetAppointmmentSlotsByJobId (string serviceJobId, List<string> marketplaceIds, string startTime = null, string endTime = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier to retrive appointment slots for associated service.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="startTime">A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)</param>
        /// <param name="endTime">A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)</param>
        /// <returns>ApiResponse of GetAppointmentSlotsResponse</returns>
        ApiResponse<GetAppointmentSlotsResponse> GetAppointmmentSlotsByJobIdWithHttpInfo (string serviceJobId, List<string> marketplaceIds, string startTime = null, string endTime = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource Identifier.</param>
        /// <param name="body">Request body.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="nextPageToken">Next page token returned in the response of your previous request. (optional)</param>
        /// <returns>FixedSlotCapacity</returns>
        FixedSlotCapacity GetFixedSlotCapacity (string resourceId, FixedSlotCapacityQuery body, List<string> marketplaceIds, string nextPageToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource Identifier.</param>
        /// <param name="body">Request body.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="nextPageToken">Next page token returned in the response of your previous request. (optional)</param>
        /// <returns>ApiResponse of FixedSlotCapacity</returns>
        ApiResponse<FixedSlotCapacity> GetFixedSlotCapacityWithHttpInfo (string resourceId, FixedSlotCapacityQuery body, List<string> marketplaceIds, string nextPageToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource Identifier.</param>
        /// <param name="body">Request body.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="nextPageToken">Next page token returned in the response of your previous request. (optional)</param>
        /// <returns>RangeSlotCapacity</returns>
        RangeSlotCapacity GetRangeSlotCapacity (string resourceId, RangeSlotCapacityQuery body, List<string> marketplaceIds, string nextPageToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource Identifier.</param>
        /// <param name="body">Request body.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="nextPageToken">Next page token returned in the response of your previous request. (optional)</param>
        /// <returns>ApiResponse of RangeSlotCapacity</returns>
        ApiResponse<RangeSlotCapacity> GetRangeSlotCapacityWithHttpInfo (string resourceId, RangeSlotCapacityQuery body, List<string> marketplaceIds, string nextPageToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets details of service job indicated by the provided &#x60;serviceJobID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier.</param>
        /// <returns>GetServiceJobByServiceJobIdResponse</returns>
        GetServiceJobByServiceJobIdResponse GetServiceJobByServiceJobId (string serviceJobId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets details of service job indicated by the provided &#x60;serviceJobID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier.</param>
        /// <returns>ApiResponse of GetServiceJobByServiceJobIdResponse</returns>
        ApiResponse<GetServiceJobByServiceJobIdResponse> GetServiceJobByServiceJobIdWithHttpInfo (string serviceJobId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">Used to select jobs that were placed in the specified marketplaces.</param>
        /// <param name="serviceOrderIds">List of service order ids for the query you want to perform.Max values supported 20. (optional)</param>
        /// <param name="serviceJobStatus">A list of one or more job status by which to filter the list of jobs. (optional)</param>
        /// <param name="pageToken">String returned in the response of your previous request. (optional)</param>
        /// <param name="pageSize">A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. (optional, default to 20)</param>
        /// <param name="sortField">Sort fields on which you want to sort the output. (optional)</param>
        /// <param name="sortOrder">Sort order for the query you want to perform. (optional)</param>
        /// <param name="createdAfter">A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)</param>
        /// <param name="createdBefore">A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format. (optional)</param>
        /// <param name="scheduleStartDate">A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)</param>
        /// <param name="scheduleEndDate">A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)</param>
        /// <param name="asins">List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20. (optional)</param>
        /// <param name="requiredSkills">A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20. (optional)</param>
        /// <param name="storeIds">List of Amazon-defined identifiers for the region scope. Max values supported is 50. (optional)</param>
        /// <returns>GetServiceJobsResponse</returns>
        GetServiceJobsResponse GetServiceJobs (List<string> marketplaceIds, List<string> serviceOrderIds = null, List<string> serviceJobStatus = null, string pageToken = null, int? pageSize = null, string sortField = null, string sortOrder = null, string createdAfter = null, string createdBefore = null, string lastUpdatedAfter = null, string lastUpdatedBefore = null, string scheduleStartDate = null, string scheduleEndDate = null, List<string> asins = null, List<string> requiredSkills = null, List<string> storeIds = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">Used to select jobs that were placed in the specified marketplaces.</param>
        /// <param name="serviceOrderIds">List of service order ids for the query you want to perform.Max values supported 20. (optional)</param>
        /// <param name="serviceJobStatus">A list of one or more job status by which to filter the list of jobs. (optional)</param>
        /// <param name="pageToken">String returned in the response of your previous request. (optional)</param>
        /// <param name="pageSize">A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. (optional, default to 20)</param>
        /// <param name="sortField">Sort fields on which you want to sort the output. (optional)</param>
        /// <param name="sortOrder">Sort order for the query you want to perform. (optional)</param>
        /// <param name="createdAfter">A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)</param>
        /// <param name="createdBefore">A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format. (optional)</param>
        /// <param name="scheduleStartDate">A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)</param>
        /// <param name="scheduleEndDate">A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)</param>
        /// <param name="asins">List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20. (optional)</param>
        /// <param name="requiredSkills">A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20. (optional)</param>
        /// <param name="storeIds">List of Amazon-defined identifiers for the region scope. Max values supported is 50. (optional)</param>
        /// <returns>ApiResponse of GetServiceJobsResponse</returns>
        ApiResponse<GetServiceJobsResponse> GetServiceJobsWithHttpInfo (List<string> marketplaceIds, List<string> serviceOrderIds = null, List<string> serviceJobStatus = null, string pageToken = null, int? pageSize = null, string sortField = null, string sortOrder = null, string createdAfter = null, string createdBefore = null, string lastUpdatedAfter = null, string lastUpdatedBefore = null, string scheduleStartDate = null, string scheduleEndDate = null, List<string> asins = null, List<string> requiredSkills = null, List<string> storeIds = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="appointmentId">An existing appointment identifier for the Service Job.</param>
        /// <param name="body">Reschedule appointment operation input details.</param>
        /// <returns>SetAppointmentResponse</returns>
        SetAppointmentResponse RescheduleAppointmentForServiceJobByServiceJobId (string serviceJobId, string appointmentId, RescheduleAppointmentRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="appointmentId">An existing appointment identifier for the Service Job.</param>
        /// <param name="body">Reschedule appointment operation input details.</param>
        /// <returns>ApiResponse of SetAppointmentResponse</returns>
        ApiResponse<SetAppointmentResponse> RescheduleAppointmentForServiceJobByServiceJobIdWithHttpInfo (string serviceJobId, string appointmentId, RescheduleAppointmentRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the appointment fulfillment data related to a given &#x60;jobID&#x60; and &#x60;appointmentID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.</param>
        /// <param name="appointmentId">An Amazon-defined identifier of active service job appointment.</param>
        /// <param name="body">Appointment fulfillment data collection details.</param>
        /// <returns>string</returns>
        string SetAppointmentFulfillmentData (string serviceJobId, string appointmentId, SetAppointmentFulfillmentDataRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the appointment fulfillment data related to a given &#x60;jobID&#x60; and &#x60;appointmentID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.</param>
        /// <param name="appointmentId">An Amazon-defined identifier of active service job appointment.</param>
        /// <param name="body">Appointment fulfillment data collection details.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SetAppointmentFulfillmentDataWithHttpInfo (string serviceJobId, string appointmentId, SetAppointmentFulfillmentDataRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reservationId">Reservation Identifier</param>
        /// <param name="body">Reservation details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>UpdateReservationResponse</returns>
        UpdateReservationResponse UpdateReservation (string reservationId, UpdateReservationRequest body, List<string> marketplaceIds);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reservationId">Reservation Identifier</param>
        /// <param name="body">Reservation details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>ApiResponse of UpdateReservationResponse</returns>
        ApiResponse<UpdateReservationResponse> UpdateReservationWithHttpInfo (string reservationId, UpdateReservationRequest body, List<string> marketplaceIds);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource (store) Identifier</param>
        /// <param name="body">Schedule details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>UpdateScheduleResponse</returns>
        UpdateScheduleResponse UpdateSchedule (string resourceId, UpdateScheduleRequest body, List<string> marketplaceIds);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource (store) Identifier</param>
        /// <param name="body">Schedule details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>ApiResponse of UpdateScheduleResponse</returns>
        ApiResponse<UpdateScheduleResponse> UpdateScheduleWithHttpInfo (string resourceId, UpdateScheduleRequest body, List<string> marketplaceIds);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="body">Add appointment operation input details.</param>
        /// <returns>Task of SetAppointmentResponse</returns>
        System.Threading.Tasks.Task<SetAppointmentResponse> AddAppointmentForServiceJobByServiceJobIdAsync (string serviceJobId, AddAppointmentRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="body">Add appointment operation input details.</param>
        /// <returns>Task of ApiResponse (SetAppointmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetAppointmentResponse>> AddAppointmentForServiceJobByServiceJobIdAsyncWithHttpInfo (string serviceJobId, AddAppointmentRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.</param>
        /// <param name="appointmentId">An Amazon-defined identifier of active service job appointment.</param>
        /// <param name="body"></param>
        /// <returns>Task of AssignAppointmentResourcesResponse</returns>
        System.Threading.Tasks.Task<AssignAppointmentResourcesResponse> AssignAppointmentResourcesAsync (string serviceJobId, string appointmentId, AssignAppointmentResourcesRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.</param>
        /// <param name="appointmentId">An Amazon-defined identifier of active service job appointment.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AssignAppointmentResourcesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssignAppointmentResourcesResponse>> AssignAppointmentResourcesAsyncWithHttpInfo (string serviceJobId, string appointmentId, AssignAppointmentResourcesRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reservationId">Reservation Identifier</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>Task of CancelReservationResponse</returns>
        System.Threading.Tasks.Task<CancelReservationResponse> CancelReservationAsync (string reservationId, List<string> marketplaceIds);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reservationId">Reservation Identifier</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>Task of ApiResponse (CancelReservationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelReservationResponse>> CancelReservationAsyncWithHttpInfo (string reservationId, List<string> marketplaceIds);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="cancellationReasonCode">A cancel reason code that specifies the reason for cancelling a service job.</param>
        /// <returns>Task of CancelServiceJobByServiceJobIdResponse</returns>
        System.Threading.Tasks.Task<CancelServiceJobByServiceJobIdResponse> CancelServiceJobByServiceJobIdAsync (string serviceJobId, string cancellationReasonCode);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="cancellationReasonCode">A cancel reason code that specifies the reason for cancelling a service job.</param>
        /// <returns>Task of ApiResponse (CancelServiceJobByServiceJobIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelServiceJobByServiceJobIdResponse>> CancelServiceJobByServiceJobIdAsyncWithHttpInfo (string serviceJobId, string cancellationReasonCode);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <returns>Task of CompleteServiceJobByServiceJobIdResponse</returns>
        System.Threading.Tasks.Task<CompleteServiceJobByServiceJobIdResponse> CompleteServiceJobByServiceJobIdAsync (string serviceJobId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <returns>Task of ApiResponse (CompleteServiceJobByServiceJobIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompleteServiceJobByServiceJobIdResponse>> CompleteServiceJobByServiceJobIdAsyncWithHttpInfo (string serviceJobId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reservation details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>Task of CreateReservationResponse</returns>
        System.Threading.Tasks.Task<CreateReservationResponse> CreateReservationAsync (CreateReservationRequest body, List<string> marketplaceIds);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reservation details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>Task of ApiResponse (CreateReservationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateReservationResponse>> CreateReservationAsyncWithHttpInfo (CreateReservationRequest body, List<string> marketplaceIds);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Upload document operation input details.</param>
        /// <returns>Task of CreateServiceDocumentUploadDestination</returns>
        System.Threading.Tasks.Task<CreateServiceDocumentUploadDestination> CreateServiceDocumentUploadDestinationAsync (ServiceUploadDocument body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Upload document operation input details.</param>
        /// <returns>Task of ApiResponse (CreateServiceDocumentUploadDestination)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateServiceDocumentUploadDestination>> CreateServiceDocumentUploadDestinationAsyncWithHttpInfo (ServiceUploadDocument body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">ASIN associated with the service.</param>
        /// <param name="storeId">Store identifier defining the region scope to retrive appointment slots.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace for which appointment slots are queried</param>
        /// <param name="startTime">A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)</param>
        /// <param name="endTime">A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)</param>
        /// <returns>Task of GetAppointmentSlotsResponse</returns>
        System.Threading.Tasks.Task<GetAppointmentSlotsResponse> GetAppointmentSlotsAsync (string asin, string storeId, List<string> marketplaceIds, string startTime = null, string endTime = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">ASIN associated with the service.</param>
        /// <param name="storeId">Store identifier defining the region scope to retrive appointment slots.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace for which appointment slots are queried</param>
        /// <param name="startTime">A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)</param>
        /// <param name="endTime">A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)</param>
        /// <returns>Task of ApiResponse (GetAppointmentSlotsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAppointmentSlotsResponse>> GetAppointmentSlotsAsyncWithHttpInfo (string asin, string storeId, List<string> marketplaceIds, string startTime = null, string endTime = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier to retrive appointment slots for associated service.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="startTime">A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)</param>
        /// <param name="endTime">A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)</param>
        /// <returns>Task of GetAppointmentSlotsResponse</returns>
        System.Threading.Tasks.Task<GetAppointmentSlotsResponse> GetAppointmmentSlotsByJobIdAsync (string serviceJobId, List<string> marketplaceIds, string startTime = null, string endTime = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier to retrive appointment slots for associated service.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="startTime">A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)</param>
        /// <param name="endTime">A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)</param>
        /// <returns>Task of ApiResponse (GetAppointmentSlotsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAppointmentSlotsResponse>> GetAppointmmentSlotsByJobIdAsyncWithHttpInfo (string serviceJobId, List<string> marketplaceIds, string startTime = null, string endTime = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource Identifier.</param>
        /// <param name="body">Request body.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="nextPageToken">Next page token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of FixedSlotCapacity</returns>
        System.Threading.Tasks.Task<FixedSlotCapacity> GetFixedSlotCapacityAsync (string resourceId, FixedSlotCapacityQuery body, List<string> marketplaceIds, string nextPageToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource Identifier.</param>
        /// <param name="body">Request body.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="nextPageToken">Next page token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (FixedSlotCapacity)</returns>
        System.Threading.Tasks.Task<ApiResponse<FixedSlotCapacity>> GetFixedSlotCapacityAsyncWithHttpInfo (string resourceId, FixedSlotCapacityQuery body, List<string> marketplaceIds, string nextPageToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource Identifier.</param>
        /// <param name="body">Request body.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="nextPageToken">Next page token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of RangeSlotCapacity</returns>
        System.Threading.Tasks.Task<RangeSlotCapacity> GetRangeSlotCapacityAsync (string resourceId, RangeSlotCapacityQuery body, List<string> marketplaceIds, string nextPageToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource Identifier.</param>
        /// <param name="body">Request body.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="nextPageToken">Next page token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (RangeSlotCapacity)</returns>
        System.Threading.Tasks.Task<ApiResponse<RangeSlotCapacity>> GetRangeSlotCapacityAsyncWithHttpInfo (string resourceId, RangeSlotCapacityQuery body, List<string> marketplaceIds, string nextPageToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets details of service job indicated by the provided &#x60;serviceJobID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier.</param>
        /// <returns>Task of GetServiceJobByServiceJobIdResponse</returns>
        System.Threading.Tasks.Task<GetServiceJobByServiceJobIdResponse> GetServiceJobByServiceJobIdAsync (string serviceJobId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets details of service job indicated by the provided &#x60;serviceJobID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier.</param>
        /// <returns>Task of ApiResponse (GetServiceJobByServiceJobIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetServiceJobByServiceJobIdResponse>> GetServiceJobByServiceJobIdAsyncWithHttpInfo (string serviceJobId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">Used to select jobs that were placed in the specified marketplaces.</param>
        /// <param name="serviceOrderIds">List of service order ids for the query you want to perform.Max values supported 20. (optional)</param>
        /// <param name="serviceJobStatus">A list of one or more job status by which to filter the list of jobs. (optional)</param>
        /// <param name="pageToken">String returned in the response of your previous request. (optional)</param>
        /// <param name="pageSize">A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. (optional, default to 20)</param>
        /// <param name="sortField">Sort fields on which you want to sort the output. (optional)</param>
        /// <param name="sortOrder">Sort order for the query you want to perform. (optional)</param>
        /// <param name="createdAfter">A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)</param>
        /// <param name="createdBefore">A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format. (optional)</param>
        /// <param name="scheduleStartDate">A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)</param>
        /// <param name="scheduleEndDate">A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)</param>
        /// <param name="asins">List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20. (optional)</param>
        /// <param name="requiredSkills">A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20. (optional)</param>
        /// <param name="storeIds">List of Amazon-defined identifiers for the region scope. Max values supported is 50. (optional)</param>
        /// <returns>Task of GetServiceJobsResponse</returns>
        System.Threading.Tasks.Task<GetServiceJobsResponse> GetServiceJobsAsync (List<string> marketplaceIds, List<string> serviceOrderIds = null, List<string> serviceJobStatus = null, string pageToken = null, int? pageSize = null, string sortField = null, string sortOrder = null, string createdAfter = null, string createdBefore = null, string lastUpdatedAfter = null, string lastUpdatedBefore = null, string scheduleStartDate = null, string scheduleEndDate = null, List<string> asins = null, List<string> requiredSkills = null, List<string> storeIds = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">Used to select jobs that were placed in the specified marketplaces.</param>
        /// <param name="serviceOrderIds">List of service order ids for the query you want to perform.Max values supported 20. (optional)</param>
        /// <param name="serviceJobStatus">A list of one or more job status by which to filter the list of jobs. (optional)</param>
        /// <param name="pageToken">String returned in the response of your previous request. (optional)</param>
        /// <param name="pageSize">A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. (optional, default to 20)</param>
        /// <param name="sortField">Sort fields on which you want to sort the output. (optional)</param>
        /// <param name="sortOrder">Sort order for the query you want to perform. (optional)</param>
        /// <param name="createdAfter">A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)</param>
        /// <param name="createdBefore">A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format. (optional)</param>
        /// <param name="scheduleStartDate">A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)</param>
        /// <param name="scheduleEndDate">A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)</param>
        /// <param name="asins">List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20. (optional)</param>
        /// <param name="requiredSkills">A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20. (optional)</param>
        /// <param name="storeIds">List of Amazon-defined identifiers for the region scope. Max values supported is 50. (optional)</param>
        /// <returns>Task of ApiResponse (GetServiceJobsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetServiceJobsResponse>> GetServiceJobsAsyncWithHttpInfo (List<string> marketplaceIds, List<string> serviceOrderIds = null, List<string> serviceJobStatus = null, string pageToken = null, int? pageSize = null, string sortField = null, string sortOrder = null, string createdAfter = null, string createdBefore = null, string lastUpdatedAfter = null, string lastUpdatedBefore = null, string scheduleStartDate = null, string scheduleEndDate = null, List<string> asins = null, List<string> requiredSkills = null, List<string> storeIds = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="appointmentId">An existing appointment identifier for the Service Job.</param>
        /// <param name="body">Reschedule appointment operation input details.</param>
        /// <returns>Task of SetAppointmentResponse</returns>
        System.Threading.Tasks.Task<SetAppointmentResponse> RescheduleAppointmentForServiceJobByServiceJobIdAsync (string serviceJobId, string appointmentId, RescheduleAppointmentRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="appointmentId">An existing appointment identifier for the Service Job.</param>
        /// <param name="body">Reschedule appointment operation input details.</param>
        /// <returns>Task of ApiResponse (SetAppointmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetAppointmentResponse>> RescheduleAppointmentForServiceJobByServiceJobIdAsyncWithHttpInfo (string serviceJobId, string appointmentId, RescheduleAppointmentRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the appointment fulfillment data related to a given &#x60;jobID&#x60; and &#x60;appointmentID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.</param>
        /// <param name="appointmentId">An Amazon-defined identifier of active service job appointment.</param>
        /// <param name="body">Appointment fulfillment data collection details.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SetAppointmentFulfillmentDataAsync (string serviceJobId, string appointmentId, SetAppointmentFulfillmentDataRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the appointment fulfillment data related to a given &#x60;jobID&#x60; and &#x60;appointmentID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.</param>
        /// <param name="appointmentId">An Amazon-defined identifier of active service job appointment.</param>
        /// <param name="body">Appointment fulfillment data collection details.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SetAppointmentFulfillmentDataAsyncWithHttpInfo (string serviceJobId, string appointmentId, SetAppointmentFulfillmentDataRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reservationId">Reservation Identifier</param>
        /// <param name="body">Reservation details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>Task of UpdateReservationResponse</returns>
        System.Threading.Tasks.Task<UpdateReservationResponse> UpdateReservationAsync (string reservationId, UpdateReservationRequest body, List<string> marketplaceIds);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reservationId">Reservation Identifier</param>
        /// <param name="body">Reservation details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>Task of ApiResponse (UpdateReservationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateReservationResponse>> UpdateReservationAsyncWithHttpInfo (string reservationId, UpdateReservationRequest body, List<string> marketplaceIds);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource (store) Identifier</param>
        /// <param name="body">Schedule details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>Task of UpdateScheduleResponse</returns>
        System.Threading.Tasks.Task<UpdateScheduleResponse> UpdateScheduleAsync (string resourceId, UpdateScheduleRequest body, List<string> marketplaceIds);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource (store) Identifier</param>
        /// <param name="body">Schedule details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>Task of ApiResponse (UpdateScheduleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateScheduleResponse>> UpdateScheduleAsyncWithHttpInfo (string resourceId, UpdateScheduleRequest body, List<string> marketplaceIds);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ServiceApi : IServiceApi
    {
        private Amazon.SellingPartnerAPIAA.Clients.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ServiceApi(Amazon.SellingPartnerAPIAA.Clients.Client.Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = Amazon.SellingPartnerAPIAA.Clients.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Amazon.SellingPartnerAPIAA.Clients.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Amazon.SellingPartnerAPIAA.Clients.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="body">Add appointment operation input details.</param>
        /// <returns>SetAppointmentResponse</returns>
        public SetAppointmentResponse AddAppointmentForServiceJobByServiceJobId (string serviceJobId, AddAppointmentRequest body)
        {
             ApiResponse<SetAppointmentResponse> localVarResponse = AddAppointmentForServiceJobByServiceJobIdWithHttpInfo(serviceJobId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="body">Add appointment operation input details.</param>
        /// <returns>ApiResponse of SetAppointmentResponse</returns>
        public ApiResponse< SetAppointmentResponse > AddAppointmentForServiceJobByServiceJobIdWithHttpInfo (string serviceJobId, AddAppointmentRequest body)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->AddAppointmentForServiceJobByServiceJobId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->AddAppointmentForServiceJobByServiceJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/appointments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", this.Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAppointmentForServiceJobByServiceJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetAppointmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetAppointmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetAppointmentResponse)));
        }

        /// <summary>
        ///  Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="body">Add appointment operation input details.</param>
        /// <returns>Task of SetAppointmentResponse</returns>
        public async System.Threading.Tasks.Task<SetAppointmentResponse> AddAppointmentForServiceJobByServiceJobIdAsync (string serviceJobId, AddAppointmentRequest body)
        {
             ApiResponse<SetAppointmentResponse> localVarResponse = await AddAppointmentForServiceJobByServiceJobIdAsyncWithHttpInfo(serviceJobId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="body">Add appointment operation input details.</param>
        /// <returns>Task of ApiResponse (SetAppointmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SetAppointmentResponse>> AddAppointmentForServiceJobByServiceJobIdAsyncWithHttpInfo (string serviceJobId, AddAppointmentRequest body)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->AddAppointmentForServiceJobByServiceJobId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->AddAppointmentForServiceJobByServiceJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/appointments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", this.Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAppointmentForServiceJobByServiceJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetAppointmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetAppointmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetAppointmentResponse)));
        }

        /// <summary>
        ///  Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.</param>
        /// <param name="appointmentId">An Amazon-defined identifier of active service job appointment.</param>
        /// <param name="body"></param>
        /// <returns>AssignAppointmentResourcesResponse</returns>
        public AssignAppointmentResourcesResponse AssignAppointmentResources (string serviceJobId, string appointmentId, AssignAppointmentResourcesRequest body)
        {
             ApiResponse<AssignAppointmentResourcesResponse> localVarResponse = AssignAppointmentResourcesWithHttpInfo(serviceJobId, appointmentId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.</param>
        /// <param name="appointmentId">An Amazon-defined identifier of active service job appointment.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AssignAppointmentResourcesResponse</returns>
        public ApiResponse< AssignAppointmentResourcesResponse > AssignAppointmentResourcesWithHttpInfo (string serviceJobId, string appointmentId, AssignAppointmentResourcesRequest body)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->AssignAppointmentResources");
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling ServiceApi->AssignAppointmentResources");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->AssignAppointmentResources");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", this.Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter
            if (appointmentId != null) localVarPathParams.Add("appointmentId", this.Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignAppointmentResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssignAppointmentResourcesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssignAppointmentResourcesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssignAppointmentResourcesResponse)));
        }

        /// <summary>
        ///  Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.</param>
        /// <param name="appointmentId">An Amazon-defined identifier of active service job appointment.</param>
        /// <param name="body"></param>
        /// <returns>Task of AssignAppointmentResourcesResponse</returns>
        public async System.Threading.Tasks.Task<AssignAppointmentResourcesResponse> AssignAppointmentResourcesAsync (string serviceJobId, string appointmentId, AssignAppointmentResourcesRequest body)
        {
             ApiResponse<AssignAppointmentResourcesResponse> localVarResponse = await AssignAppointmentResourcesAsyncWithHttpInfo(serviceJobId, appointmentId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.</param>
        /// <param name="appointmentId">An Amazon-defined identifier of active service job appointment.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AssignAppointmentResourcesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssignAppointmentResourcesResponse>> AssignAppointmentResourcesAsyncWithHttpInfo (string serviceJobId, string appointmentId, AssignAppointmentResourcesRequest body)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->AssignAppointmentResources");
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling ServiceApi->AssignAppointmentResources");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->AssignAppointmentResources");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", this.Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter
            if (appointmentId != null) localVarPathParams.Add("appointmentId", this.Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignAppointmentResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssignAppointmentResourcesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssignAppointmentResourcesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssignAppointmentResourcesResponse)));
        }

        /// <summary>
        ///  Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reservationId">Reservation Identifier</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>CancelReservationResponse</returns>
        public CancelReservationResponse CancelReservation (string reservationId, List<string> marketplaceIds)
        {
             ApiResponse<CancelReservationResponse> localVarResponse = CancelReservationWithHttpInfo(reservationId, marketplaceIds);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reservationId">Reservation Identifier</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>ApiResponse of CancelReservationResponse</returns>
        public ApiResponse< CancelReservationResponse > CancelReservationWithHttpInfo (string reservationId, List<string> marketplaceIds)
        {
            // verify the required parameter 'reservationId' is set
            if (reservationId == null)
                throw new ApiException(400, "Missing required parameter 'reservationId' when calling ServiceApi->CancelReservation");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ServiceApi->CancelReservation");

            var localVarPath = "/service/v1/reservation/{reservationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reservationId != null) localVarPathParams.Add("reservationId", this.Configuration.ApiClient.ParameterToString(reservationId)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelReservation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelReservationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelReservationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelReservationResponse)));
        }

        /// <summary>
        ///  Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reservationId">Reservation Identifier</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>Task of CancelReservationResponse</returns>
        public async System.Threading.Tasks.Task<CancelReservationResponse> CancelReservationAsync (string reservationId, List<string> marketplaceIds)
        {
             ApiResponse<CancelReservationResponse> localVarResponse = await CancelReservationAsyncWithHttpInfo(reservationId, marketplaceIds);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reservationId">Reservation Identifier</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>Task of ApiResponse (CancelReservationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelReservationResponse>> CancelReservationAsyncWithHttpInfo (string reservationId, List<string> marketplaceIds)
        {
            // verify the required parameter 'reservationId' is set
            if (reservationId == null)
                throw new ApiException(400, "Missing required parameter 'reservationId' when calling ServiceApi->CancelReservation");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ServiceApi->CancelReservation");

            var localVarPath = "/service/v1/reservation/{reservationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reservationId != null) localVarPathParams.Add("reservationId", this.Configuration.ApiClient.ParameterToString(reservationId)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelReservation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelReservationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelReservationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelReservationResponse)));
        }

        /// <summary>
        ///  Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="cancellationReasonCode">A cancel reason code that specifies the reason for cancelling a service job.</param>
        /// <returns>CancelServiceJobByServiceJobIdResponse</returns>
        public CancelServiceJobByServiceJobIdResponse CancelServiceJobByServiceJobId (string serviceJobId, string cancellationReasonCode)
        {
             ApiResponse<CancelServiceJobByServiceJobIdResponse> localVarResponse = CancelServiceJobByServiceJobIdWithHttpInfo(serviceJobId, cancellationReasonCode);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="cancellationReasonCode">A cancel reason code that specifies the reason for cancelling a service job.</param>
        /// <returns>ApiResponse of CancelServiceJobByServiceJobIdResponse</returns>
        public ApiResponse< CancelServiceJobByServiceJobIdResponse > CancelServiceJobByServiceJobIdWithHttpInfo (string serviceJobId, string cancellationReasonCode)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->CancelServiceJobByServiceJobId");
            // verify the required parameter 'cancellationReasonCode' is set
            if (cancellationReasonCode == null)
                throw new ApiException(400, "Missing required parameter 'cancellationReasonCode' when calling ServiceApi->CancelServiceJobByServiceJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/cancellations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", this.Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter
            if (cancellationReasonCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cancellationReasonCode", cancellationReasonCode)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelServiceJobByServiceJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelServiceJobByServiceJobIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelServiceJobByServiceJobIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelServiceJobByServiceJobIdResponse)));
        }

        /// <summary>
        ///  Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="cancellationReasonCode">A cancel reason code that specifies the reason for cancelling a service job.</param>
        /// <returns>Task of CancelServiceJobByServiceJobIdResponse</returns>
        public async System.Threading.Tasks.Task<CancelServiceJobByServiceJobIdResponse> CancelServiceJobByServiceJobIdAsync (string serviceJobId, string cancellationReasonCode)
        {
             ApiResponse<CancelServiceJobByServiceJobIdResponse> localVarResponse = await CancelServiceJobByServiceJobIdAsyncWithHttpInfo(serviceJobId, cancellationReasonCode);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="cancellationReasonCode">A cancel reason code that specifies the reason for cancelling a service job.</param>
        /// <returns>Task of ApiResponse (CancelServiceJobByServiceJobIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelServiceJobByServiceJobIdResponse>> CancelServiceJobByServiceJobIdAsyncWithHttpInfo (string serviceJobId, string cancellationReasonCode)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->CancelServiceJobByServiceJobId");
            // verify the required parameter 'cancellationReasonCode' is set
            if (cancellationReasonCode == null)
                throw new ApiException(400, "Missing required parameter 'cancellationReasonCode' when calling ServiceApi->CancelServiceJobByServiceJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/cancellations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", this.Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter
            if (cancellationReasonCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cancellationReasonCode", cancellationReasonCode)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelServiceJobByServiceJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelServiceJobByServiceJobIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelServiceJobByServiceJobIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelServiceJobByServiceJobIdResponse)));
        }

        /// <summary>
        ///  Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <returns>CompleteServiceJobByServiceJobIdResponse</returns>
        public CompleteServiceJobByServiceJobIdResponse CompleteServiceJobByServiceJobId (string serviceJobId)
        {
             ApiResponse<CompleteServiceJobByServiceJobIdResponse> localVarResponse = CompleteServiceJobByServiceJobIdWithHttpInfo(serviceJobId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <returns>ApiResponse of CompleteServiceJobByServiceJobIdResponse</returns>
        public ApiResponse< CompleteServiceJobByServiceJobIdResponse > CompleteServiceJobByServiceJobIdWithHttpInfo (string serviceJobId)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->CompleteServiceJobByServiceJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/completions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", this.Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteServiceJobByServiceJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompleteServiceJobByServiceJobIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompleteServiceJobByServiceJobIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompleteServiceJobByServiceJobIdResponse)));
        }

        /// <summary>
        ///  Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <returns>Task of CompleteServiceJobByServiceJobIdResponse</returns>
        public async System.Threading.Tasks.Task<CompleteServiceJobByServiceJobIdResponse> CompleteServiceJobByServiceJobIdAsync (string serviceJobId)
        {
             ApiResponse<CompleteServiceJobByServiceJobIdResponse> localVarResponse = await CompleteServiceJobByServiceJobIdAsyncWithHttpInfo(serviceJobId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <returns>Task of ApiResponse (CompleteServiceJobByServiceJobIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompleteServiceJobByServiceJobIdResponse>> CompleteServiceJobByServiceJobIdAsyncWithHttpInfo (string serviceJobId)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->CompleteServiceJobByServiceJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/completions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", this.Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteServiceJobByServiceJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompleteServiceJobByServiceJobIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompleteServiceJobByServiceJobIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompleteServiceJobByServiceJobIdResponse)));
        }

        /// <summary>
        ///  Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reservation details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>CreateReservationResponse</returns>
        public CreateReservationResponse CreateReservation (CreateReservationRequest body, List<string> marketplaceIds)
        {
             ApiResponse<CreateReservationResponse> localVarResponse = CreateReservationWithHttpInfo(body, marketplaceIds);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reservation details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>ApiResponse of CreateReservationResponse</returns>
        public ApiResponse< CreateReservationResponse > CreateReservationWithHttpInfo (CreateReservationRequest body, List<string> marketplaceIds)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->CreateReservation");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ServiceApi->CreateReservation");

            var localVarPath = "/service/v1/reservation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReservation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateReservationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateReservationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateReservationResponse)));
        }

        /// <summary>
        ///  Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reservation details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>Task of CreateReservationResponse</returns>
        public async System.Threading.Tasks.Task<CreateReservationResponse> CreateReservationAsync (CreateReservationRequest body, List<string> marketplaceIds)
        {
             ApiResponse<CreateReservationResponse> localVarResponse = await CreateReservationAsyncWithHttpInfo(body, marketplaceIds);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reservation details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>Task of ApiResponse (CreateReservationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateReservationResponse>> CreateReservationAsyncWithHttpInfo (CreateReservationRequest body, List<string> marketplaceIds)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->CreateReservation");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ServiceApi->CreateReservation");

            var localVarPath = "/service/v1/reservation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReservation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateReservationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateReservationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateReservationResponse)));
        }

        /// <summary>
        ///  Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Upload document operation input details.</param>
        /// <returns>CreateServiceDocumentUploadDestination</returns>
        public CreateServiceDocumentUploadDestination CreateServiceDocumentUploadDestination (ServiceUploadDocument body)
        {
             ApiResponse<CreateServiceDocumentUploadDestination> localVarResponse = CreateServiceDocumentUploadDestinationWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Upload document operation input details.</param>
        /// <returns>ApiResponse of CreateServiceDocumentUploadDestination</returns>
        public ApiResponse< CreateServiceDocumentUploadDestination > CreateServiceDocumentUploadDestinationWithHttpInfo (ServiceUploadDocument body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->CreateServiceDocumentUploadDestination");

            var localVarPath = "/service/v1/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateServiceDocumentUploadDestination", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateServiceDocumentUploadDestination>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateServiceDocumentUploadDestination) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateServiceDocumentUploadDestination)));
        }

        /// <summary>
        ///  Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Upload document operation input details.</param>
        /// <returns>Task of CreateServiceDocumentUploadDestination</returns>
        public async System.Threading.Tasks.Task<CreateServiceDocumentUploadDestination> CreateServiceDocumentUploadDestinationAsync (ServiceUploadDocument body)
        {
             ApiResponse<CreateServiceDocumentUploadDestination> localVarResponse = await CreateServiceDocumentUploadDestinationAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Upload document operation input details.</param>
        /// <returns>Task of ApiResponse (CreateServiceDocumentUploadDestination)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateServiceDocumentUploadDestination>> CreateServiceDocumentUploadDestinationAsyncWithHttpInfo (ServiceUploadDocument body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->CreateServiceDocumentUploadDestination");

            var localVarPath = "/service/v1/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateServiceDocumentUploadDestination", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateServiceDocumentUploadDestination>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateServiceDocumentUploadDestination) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateServiceDocumentUploadDestination)));
        }

        /// <summary>
        ///  Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">ASIN associated with the service.</param>
        /// <param name="storeId">Store identifier defining the region scope to retrive appointment slots.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace for which appointment slots are queried</param>
        /// <param name="startTime">A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)</param>
        /// <param name="endTime">A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)</param>
        /// <returns>GetAppointmentSlotsResponse</returns>
        public GetAppointmentSlotsResponse GetAppointmentSlots (string asin, string storeId, List<string> marketplaceIds, string startTime = null, string endTime = null)
        {
             ApiResponse<GetAppointmentSlotsResponse> localVarResponse = GetAppointmentSlotsWithHttpInfo(asin, storeId, marketplaceIds, startTime, endTime);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">ASIN associated with the service.</param>
        /// <param name="storeId">Store identifier defining the region scope to retrive appointment slots.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace for which appointment slots are queried</param>
        /// <param name="startTime">A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)</param>
        /// <param name="endTime">A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)</param>
        /// <returns>ApiResponse of GetAppointmentSlotsResponse</returns>
        public ApiResponse< GetAppointmentSlotsResponse > GetAppointmentSlotsWithHttpInfo (string asin, string storeId, List<string> marketplaceIds, string startTime = null, string endTime = null)
        {
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling ServiceApi->GetAppointmentSlots");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling ServiceApi->GetAppointmentSlots");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ServiceApi->GetAppointmentSlots");

            var localVarPath = "/service/v1/appointmentSlots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asin", asin)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (startTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTime", startTime)); // query parameter
            if (endTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTime", endTime)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppointmentSlots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAppointmentSlotsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAppointmentSlotsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAppointmentSlotsResponse)));
        }

        /// <summary>
        ///  Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">ASIN associated with the service.</param>
        /// <param name="storeId">Store identifier defining the region scope to retrive appointment slots.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace for which appointment slots are queried</param>
        /// <param name="startTime">A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)</param>
        /// <param name="endTime">A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)</param>
        /// <returns>Task of GetAppointmentSlotsResponse</returns>
        public async System.Threading.Tasks.Task<GetAppointmentSlotsResponse> GetAppointmentSlotsAsync (string asin, string storeId, List<string> marketplaceIds, string startTime = null, string endTime = null)
        {
             ApiResponse<GetAppointmentSlotsResponse> localVarResponse = await GetAppointmentSlotsAsyncWithHttpInfo(asin, storeId, marketplaceIds, startTime, endTime);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">ASIN associated with the service.</param>
        /// <param name="storeId">Store identifier defining the region scope to retrive appointment slots.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace for which appointment slots are queried</param>
        /// <param name="startTime">A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)</param>
        /// <param name="endTime">A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)</param>
        /// <returns>Task of ApiResponse (GetAppointmentSlotsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAppointmentSlotsResponse>> GetAppointmentSlotsAsyncWithHttpInfo (string asin, string storeId, List<string> marketplaceIds, string startTime = null, string endTime = null)
        {
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling ServiceApi->GetAppointmentSlots");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling ServiceApi->GetAppointmentSlots");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ServiceApi->GetAppointmentSlots");

            var localVarPath = "/service/v1/appointmentSlots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asin", asin)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (startTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTime", startTime)); // query parameter
            if (endTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTime", endTime)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppointmentSlots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAppointmentSlotsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAppointmentSlotsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAppointmentSlotsResponse)));
        }

        /// <summary>
        ///  Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier to retrive appointment slots for associated service.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="startTime">A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)</param>
        /// <param name="endTime">A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)</param>
        /// <returns>GetAppointmentSlotsResponse</returns>
        public GetAppointmentSlotsResponse GetAppointmmentSlotsByJobId (string serviceJobId, List<string> marketplaceIds, string startTime = null, string endTime = null)
        {
             ApiResponse<GetAppointmentSlotsResponse> localVarResponse = GetAppointmmentSlotsByJobIdWithHttpInfo(serviceJobId, marketplaceIds, startTime, endTime);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier to retrive appointment slots for associated service.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="startTime">A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)</param>
        /// <param name="endTime">A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)</param>
        /// <returns>ApiResponse of GetAppointmentSlotsResponse</returns>
        public ApiResponse< GetAppointmentSlotsResponse > GetAppointmmentSlotsByJobIdWithHttpInfo (string serviceJobId, List<string> marketplaceIds, string startTime = null, string endTime = null)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->GetAppointmmentSlotsByJobId");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ServiceApi->GetAppointmmentSlotsByJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/appointmentSlots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", this.Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (startTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTime", startTime)); // query parameter
            if (endTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTime", endTime)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppointmmentSlotsByJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAppointmentSlotsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAppointmentSlotsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAppointmentSlotsResponse)));
        }

        /// <summary>
        ///  Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier to retrive appointment slots for associated service.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="startTime">A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)</param>
        /// <param name="endTime">A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)</param>
        /// <returns>Task of GetAppointmentSlotsResponse</returns>
        public async System.Threading.Tasks.Task<GetAppointmentSlotsResponse> GetAppointmmentSlotsByJobIdAsync (string serviceJobId, List<string> marketplaceIds, string startTime = null, string endTime = null)
        {
             ApiResponse<GetAppointmentSlotsResponse> localVarResponse = await GetAppointmmentSlotsByJobIdAsyncWithHttpInfo(serviceJobId, marketplaceIds, startTime, endTime);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier to retrive appointment slots for associated service.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="startTime">A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)</param>
        /// <param name="endTime">A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)</param>
        /// <returns>Task of ApiResponse (GetAppointmentSlotsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAppointmentSlotsResponse>> GetAppointmmentSlotsByJobIdAsyncWithHttpInfo (string serviceJobId, List<string> marketplaceIds, string startTime = null, string endTime = null)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->GetAppointmmentSlotsByJobId");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ServiceApi->GetAppointmmentSlotsByJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/appointmentSlots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", this.Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (startTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTime", startTime)); // query parameter
            if (endTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTime", endTime)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppointmmentSlotsByJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAppointmentSlotsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAppointmentSlotsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAppointmentSlotsResponse)));
        }

        /// <summary>
        ///  Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource Identifier.</param>
        /// <param name="body">Request body.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="nextPageToken">Next page token returned in the response of your previous request. (optional)</param>
        /// <returns>FixedSlotCapacity</returns>
        public FixedSlotCapacity GetFixedSlotCapacity (string resourceId, FixedSlotCapacityQuery body, List<string> marketplaceIds, string nextPageToken = null)
        {
             ApiResponse<FixedSlotCapacity> localVarResponse = GetFixedSlotCapacityWithHttpInfo(resourceId, body, marketplaceIds, nextPageToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource Identifier.</param>
        /// <param name="body">Request body.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="nextPageToken">Next page token returned in the response of your previous request. (optional)</param>
        /// <returns>ApiResponse of FixedSlotCapacity</returns>
        public ApiResponse< FixedSlotCapacity > GetFixedSlotCapacityWithHttpInfo (string resourceId, FixedSlotCapacityQuery body, List<string> marketplaceIds, string nextPageToken = null)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling ServiceApi->GetFixedSlotCapacity");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->GetFixedSlotCapacity");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ServiceApi->GetFixedSlotCapacity");

            var localVarPath = "/service/v1/serviceResources/{resourceId}/capacity/fixed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (nextPageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageToken", nextPageToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFixedSlotCapacity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FixedSlotCapacity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FixedSlotCapacity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FixedSlotCapacity)));
        }

        /// <summary>
        ///  Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource Identifier.</param>
        /// <param name="body">Request body.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="nextPageToken">Next page token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of FixedSlotCapacity</returns>
        public async System.Threading.Tasks.Task<FixedSlotCapacity> GetFixedSlotCapacityAsync (string resourceId, FixedSlotCapacityQuery body, List<string> marketplaceIds, string nextPageToken = null)
        {
             ApiResponse<FixedSlotCapacity> localVarResponse = await GetFixedSlotCapacityAsyncWithHttpInfo(resourceId, body, marketplaceIds, nextPageToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource Identifier.</param>
        /// <param name="body">Request body.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="nextPageToken">Next page token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (FixedSlotCapacity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FixedSlotCapacity>> GetFixedSlotCapacityAsyncWithHttpInfo (string resourceId, FixedSlotCapacityQuery body, List<string> marketplaceIds, string nextPageToken = null)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling ServiceApi->GetFixedSlotCapacity");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->GetFixedSlotCapacity");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ServiceApi->GetFixedSlotCapacity");

            var localVarPath = "/service/v1/serviceResources/{resourceId}/capacity/fixed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (nextPageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageToken", nextPageToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFixedSlotCapacity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FixedSlotCapacity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FixedSlotCapacity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FixedSlotCapacity)));
        }

        /// <summary>
        ///  Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource Identifier.</param>
        /// <param name="body">Request body.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="nextPageToken">Next page token returned in the response of your previous request. (optional)</param>
        /// <returns>RangeSlotCapacity</returns>
        public RangeSlotCapacity GetRangeSlotCapacity (string resourceId, RangeSlotCapacityQuery body, List<string> marketplaceIds, string nextPageToken = null)
        {
             ApiResponse<RangeSlotCapacity> localVarResponse = GetRangeSlotCapacityWithHttpInfo(resourceId, body, marketplaceIds, nextPageToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource Identifier.</param>
        /// <param name="body">Request body.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="nextPageToken">Next page token returned in the response of your previous request. (optional)</param>
        /// <returns>ApiResponse of RangeSlotCapacity</returns>
        public ApiResponse< RangeSlotCapacity > GetRangeSlotCapacityWithHttpInfo (string resourceId, RangeSlotCapacityQuery body, List<string> marketplaceIds, string nextPageToken = null)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling ServiceApi->GetRangeSlotCapacity");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->GetRangeSlotCapacity");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ServiceApi->GetRangeSlotCapacity");

            var localVarPath = "/service/v1/serviceResources/{resourceId}/capacity/range";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (nextPageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageToken", nextPageToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRangeSlotCapacity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RangeSlotCapacity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RangeSlotCapacity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RangeSlotCapacity)));
        }

        /// <summary>
        ///  Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource Identifier.</param>
        /// <param name="body">Request body.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="nextPageToken">Next page token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of RangeSlotCapacity</returns>
        public async System.Threading.Tasks.Task<RangeSlotCapacity> GetRangeSlotCapacityAsync (string resourceId, RangeSlotCapacityQuery body, List<string> marketplaceIds, string nextPageToken = null)
        {
             ApiResponse<RangeSlotCapacity> localVarResponse = await GetRangeSlotCapacityAsyncWithHttpInfo(resourceId, body, marketplaceIds, nextPageToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource Identifier.</param>
        /// <param name="body">Request body.</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="nextPageToken">Next page token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (RangeSlotCapacity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RangeSlotCapacity>> GetRangeSlotCapacityAsyncWithHttpInfo (string resourceId, RangeSlotCapacityQuery body, List<string> marketplaceIds, string nextPageToken = null)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling ServiceApi->GetRangeSlotCapacity");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->GetRangeSlotCapacity");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ServiceApi->GetRangeSlotCapacity");

            var localVarPath = "/service/v1/serviceResources/{resourceId}/capacity/range";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (nextPageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageToken", nextPageToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRangeSlotCapacity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RangeSlotCapacity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RangeSlotCapacity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RangeSlotCapacity)));
        }

        /// <summary>
        ///  Gets details of service job indicated by the provided &#x60;serviceJobID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier.</param>
        /// <returns>GetServiceJobByServiceJobIdResponse</returns>
        public GetServiceJobByServiceJobIdResponse GetServiceJobByServiceJobId (string serviceJobId)
        {
             ApiResponse<GetServiceJobByServiceJobIdResponse> localVarResponse = GetServiceJobByServiceJobIdWithHttpInfo(serviceJobId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets details of service job indicated by the provided &#x60;serviceJobID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier.</param>
        /// <returns>ApiResponse of GetServiceJobByServiceJobIdResponse</returns>
        public ApiResponse< GetServiceJobByServiceJobIdResponse > GetServiceJobByServiceJobIdWithHttpInfo (string serviceJobId)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->GetServiceJobByServiceJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", this.Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServiceJobByServiceJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetServiceJobByServiceJobIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetServiceJobByServiceJobIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetServiceJobByServiceJobIdResponse)));
        }

        /// <summary>
        ///  Gets details of service job indicated by the provided &#x60;serviceJobID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier.</param>
        /// <returns>Task of GetServiceJobByServiceJobIdResponse</returns>
        public async System.Threading.Tasks.Task<GetServiceJobByServiceJobIdResponse> GetServiceJobByServiceJobIdAsync (string serviceJobId)
        {
             ApiResponse<GetServiceJobByServiceJobIdResponse> localVarResponse = await GetServiceJobByServiceJobIdAsyncWithHttpInfo(serviceJobId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets details of service job indicated by the provided &#x60;serviceJobID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier.</param>
        /// <returns>Task of ApiResponse (GetServiceJobByServiceJobIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetServiceJobByServiceJobIdResponse>> GetServiceJobByServiceJobIdAsyncWithHttpInfo (string serviceJobId)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->GetServiceJobByServiceJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", this.Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServiceJobByServiceJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetServiceJobByServiceJobIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetServiceJobByServiceJobIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetServiceJobByServiceJobIdResponse)));
        }

        /// <summary>
        ///  Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">Used to select jobs that were placed in the specified marketplaces.</param>
        /// <param name="serviceOrderIds">List of service order ids for the query you want to perform.Max values supported 20. (optional)</param>
        /// <param name="serviceJobStatus">A list of one or more job status by which to filter the list of jobs. (optional)</param>
        /// <param name="pageToken">String returned in the response of your previous request. (optional)</param>
        /// <param name="pageSize">A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. (optional, default to 20)</param>
        /// <param name="sortField">Sort fields on which you want to sort the output. (optional)</param>
        /// <param name="sortOrder">Sort order for the query you want to perform. (optional)</param>
        /// <param name="createdAfter">A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)</param>
        /// <param name="createdBefore">A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format. (optional)</param>
        /// <param name="scheduleStartDate">A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)</param>
        /// <param name="scheduleEndDate">A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)</param>
        /// <param name="asins">List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20. (optional)</param>
        /// <param name="requiredSkills">A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20. (optional)</param>
        /// <param name="storeIds">List of Amazon-defined identifiers for the region scope. Max values supported is 50. (optional)</param>
        /// <returns>GetServiceJobsResponse</returns>
        public GetServiceJobsResponse GetServiceJobs (List<string> marketplaceIds, List<string> serviceOrderIds = null, List<string> serviceJobStatus = null, string pageToken = null, int? pageSize = null, string sortField = null, string sortOrder = null, string createdAfter = null, string createdBefore = null, string lastUpdatedAfter = null, string lastUpdatedBefore = null, string scheduleStartDate = null, string scheduleEndDate = null, List<string> asins = null, List<string> requiredSkills = null, List<string> storeIds = null)
        {
             ApiResponse<GetServiceJobsResponse> localVarResponse = GetServiceJobsWithHttpInfo(marketplaceIds, serviceOrderIds, serviceJobStatus, pageToken, pageSize, sortField, sortOrder, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, scheduleStartDate, scheduleEndDate, asins, requiredSkills, storeIds);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">Used to select jobs that were placed in the specified marketplaces.</param>
        /// <param name="serviceOrderIds">List of service order ids for the query you want to perform.Max values supported 20. (optional)</param>
        /// <param name="serviceJobStatus">A list of one or more job status by which to filter the list of jobs. (optional)</param>
        /// <param name="pageToken">String returned in the response of your previous request. (optional)</param>
        /// <param name="pageSize">A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. (optional, default to 20)</param>
        /// <param name="sortField">Sort fields on which you want to sort the output. (optional)</param>
        /// <param name="sortOrder">Sort order for the query you want to perform. (optional)</param>
        /// <param name="createdAfter">A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)</param>
        /// <param name="createdBefore">A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format. (optional)</param>
        /// <param name="scheduleStartDate">A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)</param>
        /// <param name="scheduleEndDate">A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)</param>
        /// <param name="asins">List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20. (optional)</param>
        /// <param name="requiredSkills">A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20. (optional)</param>
        /// <param name="storeIds">List of Amazon-defined identifiers for the region scope. Max values supported is 50. (optional)</param>
        /// <returns>ApiResponse of GetServiceJobsResponse</returns>
        public ApiResponse< GetServiceJobsResponse > GetServiceJobsWithHttpInfo (List<string> marketplaceIds, List<string> serviceOrderIds = null, List<string> serviceJobStatus = null, string pageToken = null, int? pageSize = null, string sortField = null, string sortOrder = null, string createdAfter = null, string createdBefore = null, string lastUpdatedAfter = null, string lastUpdatedBefore = null, string scheduleStartDate = null, string scheduleEndDate = null, List<string> asins = null, List<string> requiredSkills = null, List<string> storeIds = null)
        {
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ServiceApi->GetServiceJobs");

            var localVarPath = "/service/v1/serviceJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "serviceOrderIds", serviceOrderIds)); // query parameter
            if (serviceJobStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "serviceJobStatus", serviceJobStatus)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortField", sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (lastUpdatedAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastUpdatedAfter", lastUpdatedAfter)); // query parameter
            if (lastUpdatedBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastUpdatedBefore", lastUpdatedBefore)); // query parameter
            if (scheduleStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduleStartDate", scheduleStartDate)); // query parameter
            if (scheduleEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduleEndDate", scheduleEndDate)); // query parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (asins != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "asins", asins)); // query parameter
            if (requiredSkills != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "requiredSkills", requiredSkills)); // query parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "storeIds", storeIds)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServiceJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetServiceJobsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetServiceJobsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetServiceJobsResponse)));
        }

        /// <summary>
        ///  Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">Used to select jobs that were placed in the specified marketplaces.</param>
        /// <param name="serviceOrderIds">List of service order ids for the query you want to perform.Max values supported 20. (optional)</param>
        /// <param name="serviceJobStatus">A list of one or more job status by which to filter the list of jobs. (optional)</param>
        /// <param name="pageToken">String returned in the response of your previous request. (optional)</param>
        /// <param name="pageSize">A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. (optional, default to 20)</param>
        /// <param name="sortField">Sort fields on which you want to sort the output. (optional)</param>
        /// <param name="sortOrder">Sort order for the query you want to perform. (optional)</param>
        /// <param name="createdAfter">A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)</param>
        /// <param name="createdBefore">A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format. (optional)</param>
        /// <param name="scheduleStartDate">A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)</param>
        /// <param name="scheduleEndDate">A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)</param>
        /// <param name="asins">List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20. (optional)</param>
        /// <param name="requiredSkills">A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20. (optional)</param>
        /// <param name="storeIds">List of Amazon-defined identifiers for the region scope. Max values supported is 50. (optional)</param>
        /// <returns>Task of GetServiceJobsResponse</returns>
        public async System.Threading.Tasks.Task<GetServiceJobsResponse> GetServiceJobsAsync (List<string> marketplaceIds, List<string> serviceOrderIds = null, List<string> serviceJobStatus = null, string pageToken = null, int? pageSize = null, string sortField = null, string sortOrder = null, string createdAfter = null, string createdBefore = null, string lastUpdatedAfter = null, string lastUpdatedBefore = null, string scheduleStartDate = null, string scheduleEndDate = null, List<string> asins = null, List<string> requiredSkills = null, List<string> storeIds = null)
        {
             ApiResponse<GetServiceJobsResponse> localVarResponse = await GetServiceJobsAsyncWithHttpInfo(marketplaceIds, serviceOrderIds, serviceJobStatus, pageToken, pageSize, sortField, sortOrder, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, scheduleStartDate, scheduleEndDate, asins, requiredSkills, storeIds);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">Used to select jobs that were placed in the specified marketplaces.</param>
        /// <param name="serviceOrderIds">List of service order ids for the query you want to perform.Max values supported 20. (optional)</param>
        /// <param name="serviceJobStatus">A list of one or more job status by which to filter the list of jobs. (optional)</param>
        /// <param name="pageToken">String returned in the response of your previous request. (optional)</param>
        /// <param name="pageSize">A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. (optional, default to 20)</param>
        /// <param name="sortField">Sort fields on which you want to sort the output. (optional)</param>
        /// <param name="sortOrder">Sort order for the query you want to perform. (optional)</param>
        /// <param name="createdAfter">A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)</param>
        /// <param name="createdBefore">A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format. (optional)</param>
        /// <param name="scheduleStartDate">A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)</param>
        /// <param name="scheduleEndDate">A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)</param>
        /// <param name="asins">List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20. (optional)</param>
        /// <param name="requiredSkills">A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20. (optional)</param>
        /// <param name="storeIds">List of Amazon-defined identifiers for the region scope. Max values supported is 50. (optional)</param>
        /// <returns>Task of ApiResponse (GetServiceJobsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetServiceJobsResponse>> GetServiceJobsAsyncWithHttpInfo (List<string> marketplaceIds, List<string> serviceOrderIds = null, List<string> serviceJobStatus = null, string pageToken = null, int? pageSize = null, string sortField = null, string sortOrder = null, string createdAfter = null, string createdBefore = null, string lastUpdatedAfter = null, string lastUpdatedBefore = null, string scheduleStartDate = null, string scheduleEndDate = null, List<string> asins = null, List<string> requiredSkills = null, List<string> storeIds = null)
        {
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ServiceApi->GetServiceJobs");

            var localVarPath = "/service/v1/serviceJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "serviceOrderIds", serviceOrderIds)); // query parameter
            if (serviceJobStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "serviceJobStatus", serviceJobStatus)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortField", sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (lastUpdatedAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastUpdatedAfter", lastUpdatedAfter)); // query parameter
            if (lastUpdatedBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastUpdatedBefore", lastUpdatedBefore)); // query parameter
            if (scheduleStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduleStartDate", scheduleStartDate)); // query parameter
            if (scheduleEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduleEndDate", scheduleEndDate)); // query parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (asins != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "asins", asins)); // query parameter
            if (requiredSkills != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "requiredSkills", requiredSkills)); // query parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "storeIds", storeIds)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServiceJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetServiceJobsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetServiceJobsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetServiceJobsResponse)));
        }

        /// <summary>
        ///  Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="appointmentId">An existing appointment identifier for the Service Job.</param>
        /// <param name="body">Reschedule appointment operation input details.</param>
        /// <returns>SetAppointmentResponse</returns>
        public SetAppointmentResponse RescheduleAppointmentForServiceJobByServiceJobId (string serviceJobId, string appointmentId, RescheduleAppointmentRequest body)
        {
             ApiResponse<SetAppointmentResponse> localVarResponse = RescheduleAppointmentForServiceJobByServiceJobIdWithHttpInfo(serviceJobId, appointmentId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="appointmentId">An existing appointment identifier for the Service Job.</param>
        /// <param name="body">Reschedule appointment operation input details.</param>
        /// <returns>ApiResponse of SetAppointmentResponse</returns>
        public ApiResponse< SetAppointmentResponse > RescheduleAppointmentForServiceJobByServiceJobIdWithHttpInfo (string serviceJobId, string appointmentId, RescheduleAppointmentRequest body)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->RescheduleAppointmentForServiceJobByServiceJobId");
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling ServiceApi->RescheduleAppointmentForServiceJobByServiceJobId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->RescheduleAppointmentForServiceJobByServiceJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", this.Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter
            if (appointmentId != null) localVarPathParams.Add("appointmentId", this.Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RescheduleAppointmentForServiceJobByServiceJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetAppointmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetAppointmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetAppointmentResponse)));
        }

        /// <summary>
        ///  Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="appointmentId">An existing appointment identifier for the Service Job.</param>
        /// <param name="body">Reschedule appointment operation input details.</param>
        /// <returns>Task of SetAppointmentResponse</returns>
        public async System.Threading.Tasks.Task<SetAppointmentResponse> RescheduleAppointmentForServiceJobByServiceJobIdAsync (string serviceJobId, string appointmentId, RescheduleAppointmentRequest body)
        {
             ApiResponse<SetAppointmentResponse> localVarResponse = await RescheduleAppointmentForServiceJobByServiceJobIdAsyncWithHttpInfo(serviceJobId, appointmentId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="appointmentId">An existing appointment identifier for the Service Job.</param>
        /// <param name="body">Reschedule appointment operation input details.</param>
        /// <returns>Task of ApiResponse (SetAppointmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SetAppointmentResponse>> RescheduleAppointmentForServiceJobByServiceJobIdAsyncWithHttpInfo (string serviceJobId, string appointmentId, RescheduleAppointmentRequest body)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->RescheduleAppointmentForServiceJobByServiceJobId");
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling ServiceApi->RescheduleAppointmentForServiceJobByServiceJobId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->RescheduleAppointmentForServiceJobByServiceJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", this.Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter
            if (appointmentId != null) localVarPathParams.Add("appointmentId", this.Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RescheduleAppointmentForServiceJobByServiceJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetAppointmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetAppointmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetAppointmentResponse)));
        }

        /// <summary>
        ///  Updates the appointment fulfillment data related to a given &#x60;jobID&#x60; and &#x60;appointmentID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.</param>
        /// <param name="appointmentId">An Amazon-defined identifier of active service job appointment.</param>
        /// <param name="body">Appointment fulfillment data collection details.</param>
        /// <returns>string</returns>
        public string SetAppointmentFulfillmentData (string serviceJobId, string appointmentId, SetAppointmentFulfillmentDataRequest body)
        {
             ApiResponse<string> localVarResponse = SetAppointmentFulfillmentDataWithHttpInfo(serviceJobId, appointmentId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates the appointment fulfillment data related to a given &#x60;jobID&#x60; and &#x60;appointmentID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.</param>
        /// <param name="appointmentId">An Amazon-defined identifier of active service job appointment.</param>
        /// <param name="body">Appointment fulfillment data collection details.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SetAppointmentFulfillmentDataWithHttpInfo (string serviceJobId, string appointmentId, SetAppointmentFulfillmentDataRequest body)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->SetAppointmentFulfillmentData");
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling ServiceApi->SetAppointmentFulfillmentData");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->SetAppointmentFulfillmentData");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", this.Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter
            if (appointmentId != null) localVarPathParams.Add("appointmentId", this.Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetAppointmentFulfillmentData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Updates the appointment fulfillment data related to a given &#x60;jobID&#x60; and &#x60;appointmentID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.</param>
        /// <param name="appointmentId">An Amazon-defined identifier of active service job appointment.</param>
        /// <param name="body">Appointment fulfillment data collection details.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SetAppointmentFulfillmentDataAsync (string serviceJobId, string appointmentId, SetAppointmentFulfillmentDataRequest body)
        {
             ApiResponse<string> localVarResponse = await SetAppointmentFulfillmentDataAsyncWithHttpInfo(serviceJobId, appointmentId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates the appointment fulfillment data related to a given &#x60;jobID&#x60; and &#x60;appointmentID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.</param>
        /// <param name="appointmentId">An Amazon-defined identifier of active service job appointment.</param>
        /// <param name="body">Appointment fulfillment data collection details.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SetAppointmentFulfillmentDataAsyncWithHttpInfo (string serviceJobId, string appointmentId, SetAppointmentFulfillmentDataRequest body)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->SetAppointmentFulfillmentData");
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling ServiceApi->SetAppointmentFulfillmentData");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->SetAppointmentFulfillmentData");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", this.Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter
            if (appointmentId != null) localVarPathParams.Add("appointmentId", this.Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetAppointmentFulfillmentData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reservationId">Reservation Identifier</param>
        /// <param name="body">Reservation details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>UpdateReservationResponse</returns>
        public UpdateReservationResponse UpdateReservation (string reservationId, UpdateReservationRequest body, List<string> marketplaceIds)
        {
             ApiResponse<UpdateReservationResponse> localVarResponse = UpdateReservationWithHttpInfo(reservationId, body, marketplaceIds);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reservationId">Reservation Identifier</param>
        /// <param name="body">Reservation details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>ApiResponse of UpdateReservationResponse</returns>
        public ApiResponse< UpdateReservationResponse > UpdateReservationWithHttpInfo (string reservationId, UpdateReservationRequest body, List<string> marketplaceIds)
        {
            // verify the required parameter 'reservationId' is set
            if (reservationId == null)
                throw new ApiException(400, "Missing required parameter 'reservationId' when calling ServiceApi->UpdateReservation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->UpdateReservation");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ServiceApi->UpdateReservation");

            var localVarPath = "/service/v1/reservation/{reservationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reservationId != null) localVarPathParams.Add("reservationId", this.Configuration.ApiClient.ParameterToString(reservationId)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReservation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateReservationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateReservationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateReservationResponse)));
        }

        /// <summary>
        ///  Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reservationId">Reservation Identifier</param>
        /// <param name="body">Reservation details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>Task of UpdateReservationResponse</returns>
        public async System.Threading.Tasks.Task<UpdateReservationResponse> UpdateReservationAsync (string reservationId, UpdateReservationRequest body, List<string> marketplaceIds)
        {
             ApiResponse<UpdateReservationResponse> localVarResponse = await UpdateReservationAsyncWithHttpInfo(reservationId, body, marketplaceIds);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reservationId">Reservation Identifier</param>
        /// <param name="body">Reservation details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>Task of ApiResponse (UpdateReservationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateReservationResponse>> UpdateReservationAsyncWithHttpInfo (string reservationId, UpdateReservationRequest body, List<string> marketplaceIds)
        {
            // verify the required parameter 'reservationId' is set
            if (reservationId == null)
                throw new ApiException(400, "Missing required parameter 'reservationId' when calling ServiceApi->UpdateReservation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->UpdateReservation");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ServiceApi->UpdateReservation");

            var localVarPath = "/service/v1/reservation/{reservationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reservationId != null) localVarPathParams.Add("reservationId", this.Configuration.ApiClient.ParameterToString(reservationId)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReservation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateReservationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateReservationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateReservationResponse)));
        }

        /// <summary>
        ///  Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource (store) Identifier</param>
        /// <param name="body">Schedule details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>UpdateScheduleResponse</returns>
        public UpdateScheduleResponse UpdateSchedule (string resourceId, UpdateScheduleRequest body, List<string> marketplaceIds)
        {
             ApiResponse<UpdateScheduleResponse> localVarResponse = UpdateScheduleWithHttpInfo(resourceId, body, marketplaceIds);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource (store) Identifier</param>
        /// <param name="body">Schedule details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>ApiResponse of UpdateScheduleResponse</returns>
        public ApiResponse< UpdateScheduleResponse > UpdateScheduleWithHttpInfo (string resourceId, UpdateScheduleRequest body, List<string> marketplaceIds)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling ServiceApi->UpdateSchedule");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->UpdateSchedule");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ServiceApi->UpdateSchedule");

            var localVarPath = "/service/v1/serviceResources/{resourceId}/schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateScheduleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateScheduleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateScheduleResponse)));
        }

        /// <summary>
        ///  Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource (store) Identifier</param>
        /// <param name="body">Schedule details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>Task of UpdateScheduleResponse</returns>
        public async System.Threading.Tasks.Task<UpdateScheduleResponse> UpdateScheduleAsync (string resourceId, UpdateScheduleRequest body, List<string> marketplaceIds)
        {
             ApiResponse<UpdateScheduleResponse> localVarResponse = await UpdateScheduleAsyncWithHttpInfo(resourceId, body, marketplaceIds);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">Resource (store) Identifier</param>
        /// <param name="body">Schedule details</param>
        /// <param name="marketplaceIds">An identifier for the marketplace in which the resource operates.</param>
        /// <returns>Task of ApiResponse (UpdateScheduleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateScheduleResponse>> UpdateScheduleAsyncWithHttpInfo (string resourceId, UpdateScheduleRequest body, List<string> marketplaceIds)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling ServiceApi->UpdateSchedule");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->UpdateSchedule");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ServiceApi->UpdateSchedule");

            var localVarPath = "/service/v1/serviceResources/{resourceId}/schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateScheduleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateScheduleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateScheduleResponse)));
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }
            
            
            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public ServiceApi Build() 
            {
                if (lwaAuthorizationCredentials == null) 
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }

                
                Amazon.SellingPartnerAPIAA.Clients.Client.Configuration configuration = new Amazon.SellingPartnerAPIAA.Clients.Client.Configuration()
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    RateLimitConfig = rateLimitConfiguration
                };

                // default HTTP connection timeout (in milliseconds)
                configuration.Timeout = 100000;

                return new ServiceApi(configuration);
            }
        }
    }
}
