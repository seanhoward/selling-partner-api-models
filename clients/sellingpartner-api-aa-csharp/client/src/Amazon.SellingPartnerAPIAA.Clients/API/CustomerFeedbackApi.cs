/* 
 * The Selling Partner API for CustomerFeedback
 *
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * OpenAPI spec version: 2024-06-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Amazon.SellingPartnerAPIAA.Clients.Client;
using Amazon.SellingPartnerAPIAA.Clients.Models.CustomerFeedback;
using RestSharp;

namespace Amazon.SellingPartnerAPIAA.Clients.API
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomerFeedbackApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the topics that customers mention when they return items in a browse node.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier for a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>BrowseNodeReturnTopicsResponse</returns>
        BrowseNodeReturnTopicsResponse GetBrowseNodeReturnTopics(string browseNodeId, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the topics that customers mention when they return items in a browse node.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier for a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>ApiResponse of BrowseNodeReturnTopicsResponse</returns>
        ApiResponse<BrowseNodeReturnTopicsResponse> GetBrowseNodeReturnTopicsWithHttpInfo(string browseNodeId, string marketplaceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the trends of topics that customers mention when they return items in a browse node.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>BrowseNodeReturnTrendsResponse</returns>
        BrowseNodeReturnTrendsResponse GetBrowseNodeReturnTrends(string browseNodeId, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the trends of topics that customers mention when they return items in a browse node.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>ApiResponse of BrowseNodeReturnTrendsResponse</returns>
        ApiResponse<BrowseNodeReturnTrendsResponse> GetBrowseNodeReturnTrendsWithHttpInfo(string browseNodeId, string marketplaceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a browse node&#39;s ten most positive and ten most negative review topics.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">The ID of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <param name="sortBy">The metric by which to sort the data in the response.</param>
        /// <returns>BrowseNodeReviewTopicsResponse</returns>
        BrowseNodeReviewTopicsResponse GetBrowseNodeReviewTopics(string browseNodeId, string marketplaceId, string sortBy);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a browse node&#39;s ten most positive and ten most negative review topics.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">The ID of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <param name="sortBy">The metric by which to sort the data in the response.</param>
        /// <returns>ApiResponse of BrowseNodeReviewTopicsResponse</returns>
        ApiResponse<BrowseNodeReviewTopicsResponse> GetBrowseNodeReviewTopicsWithHttpInfo(string browseNodeId, string marketplaceId, string sortBy);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the positive and negative review trends of items in a browse node for the past six months.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The marketplace ID is the globally unique identifier of a marketplace. For more information, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>BrowseNodeReviewTrendsResponse</returns>
        BrowseNodeReviewTrendsResponse GetBrowseNodeReviewTrends(string browseNodeId, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the positive and negative review trends of items in a browse node for the past six months.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The marketplace ID is the globally unique identifier of a marketplace. For more information, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>ApiResponse of BrowseNodeReviewTrendsResponse</returns>
        ApiResponse<BrowseNodeReviewTrendsResponse> GetBrowseNodeReviewTrendsWithHttpInfo(string browseNodeId, string marketplaceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API returns the associated browse node of the requested ASIN. A browse node is a location in a browse tree that is used for navigation, product classification, and website content on the Amazon retail website.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>BrowseNodeResponse</returns>
        BrowseNodeResponse GetItemBrowseNode(string asin, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API returns the associated browse node of the requested ASIN. A browse node is a location in a browse tree that is used for navigation, product classification, and website content on the Amazon retail website.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>ApiResponse of BrowseNodeResponse</returns>
        ApiResponse<BrowseNodeResponse> GetItemBrowseNodeWithHttpInfo(string asin, string marketplaceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve an item&#39;s ten most positive and ten most negative review topics.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. The value must be a child ASIN.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <param name="sortBy">The metric by which to sort data in the response.</param>
        /// <returns>ItemReviewTopicsResponse</returns>
        ItemReviewTopicsResponse GetItemReviewTopics(string asin, string marketplaceId, string sortBy);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve an item&#39;s ten most positive and ten most negative review topics.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. The value must be a child ASIN.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <param name="sortBy">The metric by which to sort data in the response.</param>
        /// <returns>ApiResponse of ItemReviewTopicsResponse</returns>
        ApiResponse<ItemReviewTopicsResponse> GetItemReviewTopicsWithHttpInfo(string asin, string marketplaceId, string sortBy);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve an item&#39;s positive and negative review trends for the past six months.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. This API takes child ASIN as an input.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>ItemReviewTrendsResponse</returns>
        ItemReviewTrendsResponse GetItemReviewTrends(string asin, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve an item&#39;s positive and negative review trends for the past six months.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. This API takes child ASIN as an input.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>ApiResponse of ItemReviewTrendsResponse</returns>
        ApiResponse<ItemReviewTrendsResponse> GetItemReviewTrendsWithHttpInfo(string asin, string marketplaceId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the topics that customers mention when they return items in a browse node.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier for a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>Task of BrowseNodeReturnTopicsResponse</returns>
        System.Threading.Tasks.Task<BrowseNodeReturnTopicsResponse> GetBrowseNodeReturnTopicsAsync(string browseNodeId, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the topics that customers mention when they return items in a browse node.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier for a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>Task of ApiResponse (BrowseNodeReturnTopicsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrowseNodeReturnTopicsResponse>> GetBrowseNodeReturnTopicsAsyncWithHttpInfo(string browseNodeId, string marketplaceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the trends of topics that customers mention when they return items in a browse node.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>Task of BrowseNodeReturnTrendsResponse</returns>
        System.Threading.Tasks.Task<BrowseNodeReturnTrendsResponse> GetBrowseNodeReturnTrendsAsync(string browseNodeId, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the trends of topics that customers mention when they return items in a browse node.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>Task of ApiResponse (BrowseNodeReturnTrendsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrowseNodeReturnTrendsResponse>> GetBrowseNodeReturnTrendsAsyncWithHttpInfo(string browseNodeId, string marketplaceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a browse node&#39;s ten most positive and ten most negative review topics.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">The ID of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <param name="sortBy">The metric by which to sort the data in the response.</param>
        /// <returns>Task of BrowseNodeReviewTopicsResponse</returns>
        System.Threading.Tasks.Task<BrowseNodeReviewTopicsResponse> GetBrowseNodeReviewTopicsAsync(string browseNodeId, string marketplaceId, string sortBy);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a browse node&#39;s ten most positive and ten most negative review topics.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">The ID of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <param name="sortBy">The metric by which to sort the data in the response.</param>
        /// <returns>Task of ApiResponse (BrowseNodeReviewTopicsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrowseNodeReviewTopicsResponse>> GetBrowseNodeReviewTopicsAsyncWithHttpInfo(string browseNodeId, string marketplaceId, string sortBy);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the positive and negative review trends of items in a browse node for the past six months.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The marketplace ID is the globally unique identifier of a marketplace. For more information, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>Task of BrowseNodeReviewTrendsResponse</returns>
        System.Threading.Tasks.Task<BrowseNodeReviewTrendsResponse> GetBrowseNodeReviewTrendsAsync(string browseNodeId, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the positive and negative review trends of items in a browse node for the past six months.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The marketplace ID is the globally unique identifier of a marketplace. For more information, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>Task of ApiResponse (BrowseNodeReviewTrendsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrowseNodeReviewTrendsResponse>> GetBrowseNodeReviewTrendsAsyncWithHttpInfo(string browseNodeId, string marketplaceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API returns the associated browse node of the requested ASIN. A browse node is a location in a browse tree that is used for navigation, product classification, and website content on the Amazon retail website.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>Task of BrowseNodeResponse</returns>
        System.Threading.Tasks.Task<BrowseNodeResponse> GetItemBrowseNodeAsync(string asin, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API returns the associated browse node of the requested ASIN. A browse node is a location in a browse tree that is used for navigation, product classification, and website content on the Amazon retail website.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>Task of ApiResponse (BrowseNodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrowseNodeResponse>> GetItemBrowseNodeAsyncWithHttpInfo(string asin, string marketplaceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve an item&#39;s ten most positive and ten most negative review topics.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. The value must be a child ASIN.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <param name="sortBy">The metric by which to sort data in the response.</param>
        /// <returns>Task of ItemReviewTopicsResponse</returns>
        System.Threading.Tasks.Task<ItemReviewTopicsResponse> GetItemReviewTopicsAsync(string asin, string marketplaceId, string sortBy);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve an item&#39;s ten most positive and ten most negative review topics.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. The value must be a child ASIN.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <param name="sortBy">The metric by which to sort data in the response.</param>
        /// <returns>Task of ApiResponse (ItemReviewTopicsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemReviewTopicsResponse>> GetItemReviewTopicsAsyncWithHttpInfo(string asin, string marketplaceId, string sortBy);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve an item&#39;s positive and negative review trends for the past six months.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. This API takes child ASIN as an input.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>Task of ItemReviewTrendsResponse</returns>
        System.Threading.Tasks.Task<ItemReviewTrendsResponse> GetItemReviewTrendsAsync(string asin, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve an item&#39;s positive and negative review trends for the past six months.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. This API takes child ASIN as an input.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>Task of ApiResponse (ItemReviewTrendsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemReviewTrendsResponse>> GetItemReviewTrendsAsyncWithHttpInfo(string asin, string marketplaceId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomerFeedbackApi : ICustomerFeedbackApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerFeedbackApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomerFeedbackApi(Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Retrieve the topics that customers mention when they return items in a browse node.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier for a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>BrowseNodeReturnTopicsResponse</returns>
        public BrowseNodeReturnTopicsResponse GetBrowseNodeReturnTopics(string browseNodeId, string marketplaceId)
        {
            ApiResponse<BrowseNodeReturnTopicsResponse> localVarResponse = GetBrowseNodeReturnTopicsWithHttpInfo(browseNodeId, marketplaceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve the topics that customers mention when they return items in a browse node.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier for a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>ApiResponse of BrowseNodeReturnTopicsResponse</returns>
        public ApiResponse<BrowseNodeReturnTopicsResponse> GetBrowseNodeReturnTopicsWithHttpInfo(string browseNodeId, string marketplaceId)
        {
            // verify the required parameter 'browseNodeId' is set
            if (browseNodeId == null)
                throw new ApiException(400, "Missing required parameter 'browseNodeId' when calling CustomerFeedbackApi->GetBrowseNodeReturnTopics");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling CustomerFeedbackApi->GetBrowseNodeReturnTopics");

            var localVarPath = "/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/returns/topics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (browseNodeId != null) localVarPathParams.Add("browseNodeId", this.Configuration.ApiClient.ParameterToString(browseNodeId)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrowseNodeReturnTopics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrowseNodeReturnTopicsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrowseNodeReturnTopicsResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrowseNodeReturnTopicsResponse)));
        }

        /// <summary>
        ///  Retrieve the topics that customers mention when they return items in a browse node.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier for a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>Task of BrowseNodeReturnTopicsResponse</returns>
        public async System.Threading.Tasks.Task<BrowseNodeReturnTopicsResponse> GetBrowseNodeReturnTopicsAsync(string browseNodeId, string marketplaceId)
        {
            ApiResponse<BrowseNodeReturnTopicsResponse> localVarResponse = await GetBrowseNodeReturnTopicsAsyncWithHttpInfo(browseNodeId, marketplaceId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve the topics that customers mention when they return items in a browse node.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier for a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>Task of ApiResponse (BrowseNodeReturnTopicsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrowseNodeReturnTopicsResponse>> GetBrowseNodeReturnTopicsAsyncWithHttpInfo(string browseNodeId, string marketplaceId)
        {
            // verify the required parameter 'browseNodeId' is set
            if (browseNodeId == null)
                throw new ApiException(400, "Missing required parameter 'browseNodeId' when calling CustomerFeedbackApi->GetBrowseNodeReturnTopics");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling CustomerFeedbackApi->GetBrowseNodeReturnTopics");

            var localVarPath = "/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/returns/topics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (browseNodeId != null) localVarPathParams.Add("browseNodeId", this.Configuration.ApiClient.ParameterToString(browseNodeId)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrowseNodeReturnTopics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrowseNodeReturnTopicsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrowseNodeReturnTopicsResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrowseNodeReturnTopicsResponse)));
        }

        /// <summary>
        ///  Retrieve the trends of topics that customers mention when they return items in a browse node.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>BrowseNodeReturnTrendsResponse</returns>
        public BrowseNodeReturnTrendsResponse GetBrowseNodeReturnTrends(string browseNodeId, string marketplaceId)
        {
            ApiResponse<BrowseNodeReturnTrendsResponse> localVarResponse = GetBrowseNodeReturnTrendsWithHttpInfo(browseNodeId, marketplaceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve the trends of topics that customers mention when they return items in a browse node.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>ApiResponse of BrowseNodeReturnTrendsResponse</returns>
        public ApiResponse<BrowseNodeReturnTrendsResponse> GetBrowseNodeReturnTrendsWithHttpInfo(string browseNodeId, string marketplaceId)
        {
            // verify the required parameter 'browseNodeId' is set
            if (browseNodeId == null)
                throw new ApiException(400, "Missing required parameter 'browseNodeId' when calling CustomerFeedbackApi->GetBrowseNodeReturnTrends");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling CustomerFeedbackApi->GetBrowseNodeReturnTrends");

            var localVarPath = "/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/returns/trends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (browseNodeId != null) localVarPathParams.Add("browseNodeId", this.Configuration.ApiClient.ParameterToString(browseNodeId)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrowseNodeReturnTrends", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrowseNodeReturnTrendsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrowseNodeReturnTrendsResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrowseNodeReturnTrendsResponse)));
        }

        /// <summary>
        ///  Retrieve the trends of topics that customers mention when they return items in a browse node.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>Task of BrowseNodeReturnTrendsResponse</returns>
        public async System.Threading.Tasks.Task<BrowseNodeReturnTrendsResponse> GetBrowseNodeReturnTrendsAsync(string browseNodeId, string marketplaceId)
        {
            ApiResponse<BrowseNodeReturnTrendsResponse> localVarResponse = await GetBrowseNodeReturnTrendsAsyncWithHttpInfo(browseNodeId, marketplaceId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve the trends of topics that customers mention when they return items in a browse node.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>Task of ApiResponse (BrowseNodeReturnTrendsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrowseNodeReturnTrendsResponse>> GetBrowseNodeReturnTrendsAsyncWithHttpInfo(string browseNodeId, string marketplaceId)
        {
            // verify the required parameter 'browseNodeId' is set
            if (browseNodeId == null)
                throw new ApiException(400, "Missing required parameter 'browseNodeId' when calling CustomerFeedbackApi->GetBrowseNodeReturnTrends");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling CustomerFeedbackApi->GetBrowseNodeReturnTrends");

            var localVarPath = "/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/returns/trends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (browseNodeId != null) localVarPathParams.Add("browseNodeId", this.Configuration.ApiClient.ParameterToString(browseNodeId)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrowseNodeReturnTrends", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrowseNodeReturnTrendsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrowseNodeReturnTrendsResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrowseNodeReturnTrendsResponse)));
        }

        /// <summary>
        ///  Retrieve a browse node&#39;s ten most positive and ten most negative review topics.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">The ID of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <param name="sortBy">The metric by which to sort the data in the response.</param>
        /// <returns>BrowseNodeReviewTopicsResponse</returns>
        public BrowseNodeReviewTopicsResponse GetBrowseNodeReviewTopics(string browseNodeId, string marketplaceId, string sortBy)
        {
            ApiResponse<BrowseNodeReviewTopicsResponse> localVarResponse = GetBrowseNodeReviewTopicsWithHttpInfo(browseNodeId, marketplaceId, sortBy);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve a browse node&#39;s ten most positive and ten most negative review topics.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">The ID of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <param name="sortBy">The metric by which to sort the data in the response.</param>
        /// <returns>ApiResponse of BrowseNodeReviewTopicsResponse</returns>
        public ApiResponse<BrowseNodeReviewTopicsResponse> GetBrowseNodeReviewTopicsWithHttpInfo(string browseNodeId, string marketplaceId, string sortBy)
        {
            // verify the required parameter 'browseNodeId' is set
            if (browseNodeId == null)
                throw new ApiException(400, "Missing required parameter 'browseNodeId' when calling CustomerFeedbackApi->GetBrowseNodeReviewTopics");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling CustomerFeedbackApi->GetBrowseNodeReviewTopics");
            // verify the required parameter 'sortBy' is set
            if (sortBy == null)
                throw new ApiException(400, "Missing required parameter 'sortBy' when calling CustomerFeedbackApi->GetBrowseNodeReviewTopics");

            var localVarPath = "/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/reviews/topics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (browseNodeId != null) localVarPathParams.Add("browseNodeId", this.Configuration.ApiClient.ParameterToString(browseNodeId)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrowseNodeReviewTopics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrowseNodeReviewTopicsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrowseNodeReviewTopicsResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrowseNodeReviewTopicsResponse)));
        }

        /// <summary>
        ///  Retrieve a browse node&#39;s ten most positive and ten most negative review topics.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">The ID of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <param name="sortBy">The metric by which to sort the data in the response.</param>
        /// <returns>Task of BrowseNodeReviewTopicsResponse</returns>
        public async System.Threading.Tasks.Task<BrowseNodeReviewTopicsResponse> GetBrowseNodeReviewTopicsAsync(string browseNodeId, string marketplaceId, string sortBy)
        {
            ApiResponse<BrowseNodeReviewTopicsResponse> localVarResponse = await GetBrowseNodeReviewTopicsAsyncWithHttpInfo(browseNodeId, marketplaceId, sortBy);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve a browse node&#39;s ten most positive and ten most negative review topics.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">The ID of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <param name="sortBy">The metric by which to sort the data in the response.</param>
        /// <returns>Task of ApiResponse (BrowseNodeReviewTopicsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrowseNodeReviewTopicsResponse>> GetBrowseNodeReviewTopicsAsyncWithHttpInfo(string browseNodeId, string marketplaceId, string sortBy)
        {
            // verify the required parameter 'browseNodeId' is set
            if (browseNodeId == null)
                throw new ApiException(400, "Missing required parameter 'browseNodeId' when calling CustomerFeedbackApi->GetBrowseNodeReviewTopics");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling CustomerFeedbackApi->GetBrowseNodeReviewTopics");
            // verify the required parameter 'sortBy' is set
            if (sortBy == null)
                throw new ApiException(400, "Missing required parameter 'sortBy' when calling CustomerFeedbackApi->GetBrowseNodeReviewTopics");

            var localVarPath = "/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/reviews/topics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (browseNodeId != null) localVarPathParams.Add("browseNodeId", this.Configuration.ApiClient.ParameterToString(browseNodeId)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrowseNodeReviewTopics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrowseNodeReviewTopicsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrowseNodeReviewTopicsResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrowseNodeReviewTopicsResponse)));
        }

        /// <summary>
        ///  Retrieve the positive and negative review trends of items in a browse node for the past six months.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The marketplace ID is the globally unique identifier of a marketplace. For more information, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>BrowseNodeReviewTrendsResponse</returns>
        public BrowseNodeReviewTrendsResponse GetBrowseNodeReviewTrends(string browseNodeId, string marketplaceId)
        {
            ApiResponse<BrowseNodeReviewTrendsResponse> localVarResponse = GetBrowseNodeReviewTrendsWithHttpInfo(browseNodeId, marketplaceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve the positive and negative review trends of items in a browse node for the past six months.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The marketplace ID is the globally unique identifier of a marketplace. For more information, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>ApiResponse of BrowseNodeReviewTrendsResponse</returns>
        public ApiResponse<BrowseNodeReviewTrendsResponse> GetBrowseNodeReviewTrendsWithHttpInfo(string browseNodeId, string marketplaceId)
        {
            // verify the required parameter 'browseNodeId' is set
            if (browseNodeId == null)
                throw new ApiException(400, "Missing required parameter 'browseNodeId' when calling CustomerFeedbackApi->GetBrowseNodeReviewTrends");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling CustomerFeedbackApi->GetBrowseNodeReviewTrends");

            var localVarPath = "/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/reviews/trends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (browseNodeId != null) localVarPathParams.Add("browseNodeId", this.Configuration.ApiClient.ParameterToString(browseNodeId)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrowseNodeReviewTrends", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrowseNodeReviewTrendsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrowseNodeReviewTrendsResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrowseNodeReviewTrendsResponse)));
        }

        /// <summary>
        ///  Retrieve the positive and negative review trends of items in a browse node for the past six months.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The marketplace ID is the globally unique identifier of a marketplace. For more information, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>Task of BrowseNodeReviewTrendsResponse</returns>
        public async System.Threading.Tasks.Task<BrowseNodeReviewTrendsResponse> GetBrowseNodeReviewTrendsAsync(string browseNodeId, string marketplaceId)
        {
            ApiResponse<BrowseNodeReviewTrendsResponse> localVarResponse = await GetBrowseNodeReviewTrendsAsyncWithHttpInfo(browseNodeId, marketplaceId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve the positive and negative review trends of items in a browse node for the past six months.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNodeId">A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.</param>
        /// <param name="marketplaceId">The marketplace ID is the globally unique identifier of a marketplace. For more information, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>Task of ApiResponse (BrowseNodeReviewTrendsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrowseNodeReviewTrendsResponse>> GetBrowseNodeReviewTrendsAsyncWithHttpInfo(string browseNodeId, string marketplaceId)
        {
            // verify the required parameter 'browseNodeId' is set
            if (browseNodeId == null)
                throw new ApiException(400, "Missing required parameter 'browseNodeId' when calling CustomerFeedbackApi->GetBrowseNodeReviewTrends");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling CustomerFeedbackApi->GetBrowseNodeReviewTrends");

            var localVarPath = "/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/reviews/trends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (browseNodeId != null) localVarPathParams.Add("browseNodeId", this.Configuration.ApiClient.ParameterToString(browseNodeId)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrowseNodeReviewTrends", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrowseNodeReviewTrendsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrowseNodeReviewTrendsResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrowseNodeReviewTrendsResponse)));
        }

        /// <summary>
        ///  This API returns the associated browse node of the requested ASIN. A browse node is a location in a browse tree that is used for navigation, product classification, and website content on the Amazon retail website.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>BrowseNodeResponse</returns>
        public BrowseNodeResponse GetItemBrowseNode(string asin, string marketplaceId)
        {
            ApiResponse<BrowseNodeResponse> localVarResponse = GetItemBrowseNodeWithHttpInfo(asin, marketplaceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  This API returns the associated browse node of the requested ASIN. A browse node is a location in a browse tree that is used for navigation, product classification, and website content on the Amazon retail website.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>ApiResponse of BrowseNodeResponse</returns>
        public ApiResponse<BrowseNodeResponse> GetItemBrowseNodeWithHttpInfo(string asin, string marketplaceId)
        {
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling CustomerFeedbackApi->GetItemBrowseNode");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling CustomerFeedbackApi->GetItemBrowseNode");

            var localVarPath = "/customerFeedback/2024-06-01/items/{asin}/browseNode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asin != null) localVarPathParams.Add("asin", this.Configuration.ApiClient.ParameterToString(asin)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemBrowseNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrowseNodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrowseNodeResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrowseNodeResponse)));
        }

        /// <summary>
        ///  This API returns the associated browse node of the requested ASIN. A browse node is a location in a browse tree that is used for navigation, product classification, and website content on the Amazon retail website.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>Task of BrowseNodeResponse</returns>
        public async System.Threading.Tasks.Task<BrowseNodeResponse> GetItemBrowseNodeAsync(string asin, string marketplaceId)
        {
            ApiResponse<BrowseNodeResponse> localVarResponse = await GetItemBrowseNodeAsyncWithHttpInfo(asin, marketplaceId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  This API returns the associated browse node of the requested ASIN. A browse node is a location in a browse tree that is used for navigation, product classification, and website content on the Amazon retail website.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>Task of ApiResponse (BrowseNodeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrowseNodeResponse>> GetItemBrowseNodeAsyncWithHttpInfo(string asin, string marketplaceId)
        {
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling CustomerFeedbackApi->GetItemBrowseNode");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling CustomerFeedbackApi->GetItemBrowseNode");

            var localVarPath = "/customerFeedback/2024-06-01/items/{asin}/browseNode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asin != null) localVarPathParams.Add("asin", this.Configuration.ApiClient.ParameterToString(asin)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemBrowseNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrowseNodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrowseNodeResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrowseNodeResponse)));
        }

        /// <summary>
        ///  Retrieve an item&#39;s ten most positive and ten most negative review topics.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. The value must be a child ASIN.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <param name="sortBy">The metric by which to sort data in the response.</param>
        /// <returns>ItemReviewTopicsResponse</returns>
        public ItemReviewTopicsResponse GetItemReviewTopics(string asin, string marketplaceId, string sortBy)
        {
            ApiResponse<ItemReviewTopicsResponse> localVarResponse = GetItemReviewTopicsWithHttpInfo(asin, marketplaceId, sortBy);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve an item&#39;s ten most positive and ten most negative review topics.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. The value must be a child ASIN.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <param name="sortBy">The metric by which to sort data in the response.</param>
        /// <returns>ApiResponse of ItemReviewTopicsResponse</returns>
        public ApiResponse<ItemReviewTopicsResponse> GetItemReviewTopicsWithHttpInfo(string asin, string marketplaceId, string sortBy)
        {
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling CustomerFeedbackApi->GetItemReviewTopics");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling CustomerFeedbackApi->GetItemReviewTopics");
            // verify the required parameter 'sortBy' is set
            if (sortBy == null)
                throw new ApiException(400, "Missing required parameter 'sortBy' when calling CustomerFeedbackApi->GetItemReviewTopics");

            var localVarPath = "/customerFeedback/2024-06-01/items/{asin}/reviews/topics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asin != null) localVarPathParams.Add("asin", this.Configuration.ApiClient.ParameterToString(asin)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemReviewTopics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemReviewTopicsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemReviewTopicsResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemReviewTopicsResponse)));
        }

        /// <summary>
        ///  Retrieve an item&#39;s ten most positive and ten most negative review topics.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. The value must be a child ASIN.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <param name="sortBy">The metric by which to sort data in the response.</param>
        /// <returns>Task of ItemReviewTopicsResponse</returns>
        public async System.Threading.Tasks.Task<ItemReviewTopicsResponse> GetItemReviewTopicsAsync(string asin, string marketplaceId, string sortBy)
        {
            ApiResponse<ItemReviewTopicsResponse> localVarResponse = await GetItemReviewTopicsAsyncWithHttpInfo(asin, marketplaceId, sortBy);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve an item&#39;s ten most positive and ten most negative review topics.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. The value must be a child ASIN.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <param name="sortBy">The metric by which to sort data in the response.</param>
        /// <returns>Task of ApiResponse (ItemReviewTopicsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemReviewTopicsResponse>> GetItemReviewTopicsAsyncWithHttpInfo(string asin, string marketplaceId, string sortBy)
        {
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling CustomerFeedbackApi->GetItemReviewTopics");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling CustomerFeedbackApi->GetItemReviewTopics");
            // verify the required parameter 'sortBy' is set
            if (sortBy == null)
                throw new ApiException(400, "Missing required parameter 'sortBy' when calling CustomerFeedbackApi->GetItemReviewTopics");

            var localVarPath = "/customerFeedback/2024-06-01/items/{asin}/reviews/topics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asin != null) localVarPathParams.Add("asin", this.Configuration.ApiClient.ParameterToString(asin)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemReviewTopics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemReviewTopicsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemReviewTopicsResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemReviewTopicsResponse)));
        }

        /// <summary>
        ///  Retrieve an item&#39;s positive and negative review trends for the past six months.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. This API takes child ASIN as an input.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>ItemReviewTrendsResponse</returns>
        public ItemReviewTrendsResponse GetItemReviewTrends(string asin, string marketplaceId)
        {
            ApiResponse<ItemReviewTrendsResponse> localVarResponse = GetItemReviewTrendsWithHttpInfo(asin, marketplaceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve an item&#39;s positive and negative review trends for the past six months.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. This API takes child ASIN as an input.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>ApiResponse of ItemReviewTrendsResponse</returns>
        public ApiResponse<ItemReviewTrendsResponse> GetItemReviewTrendsWithHttpInfo(string asin, string marketplaceId)
        {
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling CustomerFeedbackApi->GetItemReviewTrends");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling CustomerFeedbackApi->GetItemReviewTrends");

            var localVarPath = "/customerFeedback/2024-06-01/items/{asin}/reviews/trends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asin != null) localVarPathParams.Add("asin", this.Configuration.ApiClient.ParameterToString(asin)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemReviewTrends", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemReviewTrendsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemReviewTrendsResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemReviewTrendsResponse)));
        }

        /// <summary>
        ///  Retrieve an item&#39;s positive and negative review trends for the past six months.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. This API takes child ASIN as an input.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>Task of ItemReviewTrendsResponse</returns>
        public async System.Threading.Tasks.Task<ItemReviewTrendsResponse> GetItemReviewTrendsAsync(string asin, string marketplaceId)
        {
            ApiResponse<ItemReviewTrendsResponse> localVarResponse = await GetItemReviewTrendsAsyncWithHttpInfo(asin, marketplaceId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve an item&#39;s positive and negative review trends for the past six months.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. This API takes child ASIN as an input.</param>
        /// <param name="marketplaceId">The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.</param>
        /// <returns>Task of ApiResponse (ItemReviewTrendsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemReviewTrendsResponse>> GetItemReviewTrendsAsyncWithHttpInfo(string asin, string marketplaceId)
        {
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling CustomerFeedbackApi->GetItemReviewTrends");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling CustomerFeedbackApi->GetItemReviewTrends");

            var localVarPath = "/customerFeedback/2024-06-01/items/{asin}/reviews/trends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asin != null) localVarPathParams.Add("asin", this.Configuration.ApiClient.ParameterToString(asin)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemReviewTrends", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemReviewTrendsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemReviewTrendsResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemReviewTrendsResponse)));
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }


            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public CustomerFeedbackApi Build()
            {
                if (lwaAuthorizationCredentials == null)
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }


                Configuration configuration = new Configuration
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    RateLimitConfig = rateLimitConfiguration,
                    // default HTTP connection timeout (in milliseconds)
                    Timeout = 100000
                };

                return new CustomerFeedbackApi(configuration);
            }
        }
    }
}
