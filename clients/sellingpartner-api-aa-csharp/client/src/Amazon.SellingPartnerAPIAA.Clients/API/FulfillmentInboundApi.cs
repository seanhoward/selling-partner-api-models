/* 
 * Fulfillment Inbound v2024-03-20
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Amazon.SellingPartnerAPIAA.Clients.Client;
using Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentInbound;
using Amazon.SellingPartnerAPIAA;

namespace Amazon.SellingPartnerAPIAA.Clients.API
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFulfillmentInboundApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// cancelInboundPlan
        /// </summary>
        /// <remarks>
        /// Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>CancelInboundPlanResponse</returns>
        CancelInboundPlanResponse CancelInboundPlan (string inboundPlanId);

        /// <summary>
        /// cancelInboundPlan
        /// </summary>
        /// <remarks>
        /// Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>ApiResponse of CancelInboundPlanResponse</returns>
        ApiResponse<CancelInboundPlanResponse> CancelInboundPlanWithHttpInfo (string inboundPlanId);
        /// <summary>
        /// cancelSelfShipAppointment
        /// </summary>
        /// <remarks>
        /// Cancels a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;cancelSelfShipAppointment&#x60;.</param>
        /// <returns>CancelSelfShipAppointmentResponse</returns>
        CancelSelfShipAppointmentResponse CancelSelfShipAppointment (string inboundPlanId, string shipmentId, CancelSelfShipAppointmentRequest body);

        /// <summary>
        /// cancelSelfShipAppointment
        /// </summary>
        /// <remarks>
        /// Cancels a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;cancelSelfShipAppointment&#x60;.</param>
        /// <returns>ApiResponse of CancelSelfShipAppointmentResponse</returns>
        ApiResponse<CancelSelfShipAppointmentResponse> CancelSelfShipAppointmentWithHttpInfo (string inboundPlanId, string shipmentId, CancelSelfShipAppointmentRequest body);
        /// <summary>
        /// confirmDeliveryWindowOptions
        /// </summary>
        /// <remarks>
        /// Confirms the delivery window option for chosen shipment within an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new delivery window options cannot be generated, but the chosen delivery window option can be updated before shipment closure. The window is used to provide the expected time when a shipment will arrive at the warehouse. All transportation options which have the program &#x60;CONFIRMED_DELIVERY_WINDOW&#x60; require a delivery window to be confirmed prior to transportation option confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to confirm the delivery window option for.</param>
        /// <param name="deliveryWindowOptionId">The id of the delivery window option to be confirmed.</param>
        /// <returns>ConfirmDeliveryWindowOptionsResponse</returns>
        ConfirmDeliveryWindowOptionsResponse ConfirmDeliveryWindowOptions (string inboundPlanId, string shipmentId, string deliveryWindowOptionId);

        /// <summary>
        /// confirmDeliveryWindowOptions
        /// </summary>
        /// <remarks>
        /// Confirms the delivery window option for chosen shipment within an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new delivery window options cannot be generated, but the chosen delivery window option can be updated before shipment closure. The window is used to provide the expected time when a shipment will arrive at the warehouse. All transportation options which have the program &#x60;CONFIRMED_DELIVERY_WINDOW&#x60; require a delivery window to be confirmed prior to transportation option confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to confirm the delivery window option for.</param>
        /// <param name="deliveryWindowOptionId">The id of the delivery window option to be confirmed.</param>
        /// <returns>ApiResponse of ConfirmDeliveryWindowOptionsResponse</returns>
        ApiResponse<ConfirmDeliveryWindowOptionsResponse> ConfirmDeliveryWindowOptionsWithHttpInfo (string inboundPlanId, string shipmentId, string deliveryWindowOptionId);
        /// <summary>
        /// confirmPackingOption
        /// </summary>
        /// <remarks>
        /// Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingOptionId">Identifier of a packing option.</param>
        /// <returns>ConfirmPackingOptionResponse</returns>
        ConfirmPackingOptionResponse ConfirmPackingOption (string inboundPlanId, string packingOptionId);

        /// <summary>
        /// confirmPackingOption
        /// </summary>
        /// <remarks>
        /// Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingOptionId">Identifier of a packing option.</param>
        /// <returns>ApiResponse of ConfirmPackingOptionResponse</returns>
        ApiResponse<ConfirmPackingOptionResponse> ConfirmPackingOptionWithHttpInfo (string inboundPlanId, string packingOptionId);
        /// <summary>
        /// confirmPlacementOption
        /// </summary>
        /// <remarks>
        /// Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="placementOptionId">The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.</param>
        /// <returns>ConfirmPlacementOptionResponse</returns>
        ConfirmPlacementOptionResponse ConfirmPlacementOption (string inboundPlanId, string placementOptionId);

        /// <summary>
        /// confirmPlacementOption
        /// </summary>
        /// <remarks>
        /// Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="placementOptionId">The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.</param>
        /// <returns>ApiResponse of ConfirmPlacementOptionResponse</returns>
        ApiResponse<ConfirmPlacementOptionResponse> ConfirmPlacementOptionWithHttpInfo (string inboundPlanId, string placementOptionId);
        /// <summary>
        /// confirmShipmentContentUpdatePreview
        /// </summary>
        /// <remarks>
        /// Confirm a shipment content update preview and accept the changes in transportation cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="contentUpdatePreviewId">Identifier of a content update preview.</param>
        /// <returns>ConfirmShipmentContentUpdatePreviewResponse</returns>
        ConfirmShipmentContentUpdatePreviewResponse ConfirmShipmentContentUpdatePreview (string inboundPlanId, string shipmentId, string contentUpdatePreviewId);

        /// <summary>
        /// confirmShipmentContentUpdatePreview
        /// </summary>
        /// <remarks>
        /// Confirm a shipment content update preview and accept the changes in transportation cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="contentUpdatePreviewId">Identifier of a content update preview.</param>
        /// <returns>ApiResponse of ConfirmShipmentContentUpdatePreviewResponse</returns>
        ApiResponse<ConfirmShipmentContentUpdatePreviewResponse> ConfirmShipmentContentUpdatePreviewWithHttpInfo (string inboundPlanId, string shipmentId, string contentUpdatePreviewId);
        /// <summary>
        /// confirmTransportationOptions
        /// </summary>
        /// <remarks>
        /// Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;confirmTransportationOptions&#x60;.</param>
        /// <returns>ConfirmTransportationOptionsResponse</returns>
        ConfirmTransportationOptionsResponse ConfirmTransportationOptions (string inboundPlanId, ConfirmTransportationOptionsRequest body);

        /// <summary>
        /// confirmTransportationOptions
        /// </summary>
        /// <remarks>
        /// Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;confirmTransportationOptions&#x60;.</param>
        /// <returns>ApiResponse of ConfirmTransportationOptionsResponse</returns>
        ApiResponse<ConfirmTransportationOptionsResponse> ConfirmTransportationOptionsWithHttpInfo (string inboundPlanId, ConfirmTransportationOptionsRequest body);
        /// <summary>
        /// createInboundPlan
        /// </summary>
        /// <remarks>
        /// Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon&#39;s fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;createInboundPlan&#x60;.</param>
        /// <returns>CreateInboundPlanResponse</returns>
        CreateInboundPlanResponse CreateInboundPlan (CreateInboundPlanRequest body);

        /// <summary>
        /// createInboundPlan
        /// </summary>
        /// <remarks>
        /// Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon&#39;s fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;createInboundPlan&#x60;.</param>
        /// <returns>ApiResponse of CreateInboundPlanResponse</returns>
        ApiResponse<CreateInboundPlanResponse> CreateInboundPlanWithHttpInfo (CreateInboundPlanRequest body);
        /// <summary>
        /// createMarketplaceItemLabels
        /// </summary>
        /// <remarks>
        /// For a given marketplace - creates labels for a list of MSKUs.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;createMarketplaceItemLabels&#x60;.</param>
        /// <returns>CreateMarketplaceItemLabelsResponse</returns>
        CreateMarketplaceItemLabelsResponse CreateMarketplaceItemLabels (CreateMarketplaceItemLabelsRequest body);

        /// <summary>
        /// createMarketplaceItemLabels
        /// </summary>
        /// <remarks>
        /// For a given marketplace - creates labels for a list of MSKUs.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;createMarketplaceItemLabels&#x60;.</param>
        /// <returns>ApiResponse of CreateMarketplaceItemLabelsResponse</returns>
        ApiResponse<CreateMarketplaceItemLabelsResponse> CreateMarketplaceItemLabelsWithHttpInfo (CreateMarketplaceItemLabelsRequest body);
        /// <summary>
        /// generateDeliveryWindowOptions
        /// </summary>
        /// <remarks>
        /// Generates available delivery window options for a given shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to generate delivery window options for.</param>
        /// <returns>GenerateDeliveryWindowOptionsResponse</returns>
        GenerateDeliveryWindowOptionsResponse GenerateDeliveryWindowOptions (string inboundPlanId, string shipmentId);

        /// <summary>
        /// generateDeliveryWindowOptions
        /// </summary>
        /// <remarks>
        /// Generates available delivery window options for a given shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to generate delivery window options for.</param>
        /// <returns>ApiResponse of GenerateDeliveryWindowOptionsResponse</returns>
        ApiResponse<GenerateDeliveryWindowOptionsResponse> GenerateDeliveryWindowOptionsWithHttpInfo (string inboundPlanId, string shipmentId);
        /// <summary>
        /// generatePackingOptions
        /// </summary>
        /// <remarks>
        /// Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>GeneratePackingOptionsResponse</returns>
        GeneratePackingOptionsResponse GeneratePackingOptions (string inboundPlanId);

        /// <summary>
        /// generatePackingOptions
        /// </summary>
        /// <remarks>
        /// Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>ApiResponse of GeneratePackingOptionsResponse</returns>
        ApiResponse<GeneratePackingOptionsResponse> GeneratePackingOptionsWithHttpInfo (string inboundPlanId);
        /// <summary>
        /// generatePlacementOptions
        /// </summary>
        /// <remarks>
        /// Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;generatePlacementOptions&#x60;.</param>
        /// <returns>GeneratePlacementOptionsResponse</returns>
        GeneratePlacementOptionsResponse GeneratePlacementOptions (string inboundPlanId, GeneratePlacementOptionsRequest body);

        /// <summary>
        /// generatePlacementOptions
        /// </summary>
        /// <remarks>
        /// Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;generatePlacementOptions&#x60;.</param>
        /// <returns>ApiResponse of GeneratePlacementOptionsResponse</returns>
        ApiResponse<GeneratePlacementOptionsResponse> GeneratePlacementOptionsWithHttpInfo (string inboundPlanId, GeneratePlacementOptionsRequest body);
        /// <summary>
        /// generateSelfShipAppointmentSlots
        /// </summary>
        /// <remarks>
        /// Initiates the process of generating the appointment slots list.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;.</param>
        /// <returns>GenerateSelfShipAppointmentSlotsResponse</returns>
        GenerateSelfShipAppointmentSlotsResponse GenerateSelfShipAppointmentSlots (string inboundPlanId, string shipmentId, GenerateSelfShipAppointmentSlotsRequest body);

        /// <summary>
        /// generateSelfShipAppointmentSlots
        /// </summary>
        /// <remarks>
        /// Initiates the process of generating the appointment slots list.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;.</param>
        /// <returns>ApiResponse of GenerateSelfShipAppointmentSlotsResponse</returns>
        ApiResponse<GenerateSelfShipAppointmentSlotsResponse> GenerateSelfShipAppointmentSlotsWithHttpInfo (string inboundPlanId, string shipmentId, GenerateSelfShipAppointmentSlotsRequest body);
        /// <summary>
        /// generateShipmentContentUpdatePreviews
        /// </summary>
        /// <remarks>
        /// Generate a shipment content update preview given a set of intended boxes and/or items for a shipment with a confirmed carrier. The shipment content update preview will be viewable with the updated costs and contents prior to confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;.</param>
        /// <returns>GenerateShipmentContentUpdatePreviewsResponse</returns>
        GenerateShipmentContentUpdatePreviewsResponse GenerateShipmentContentUpdatePreviews (string inboundPlanId, string shipmentId, GenerateShipmentContentUpdatePreviewsRequest body);

        /// <summary>
        /// generateShipmentContentUpdatePreviews
        /// </summary>
        /// <remarks>
        /// Generate a shipment content update preview given a set of intended boxes and/or items for a shipment with a confirmed carrier. The shipment content update preview will be viewable with the updated costs and contents prior to confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;.</param>
        /// <returns>ApiResponse of GenerateShipmentContentUpdatePreviewsResponse</returns>
        ApiResponse<GenerateShipmentContentUpdatePreviewsResponse> GenerateShipmentContentUpdatePreviewsWithHttpInfo (string inboundPlanId, string shipmentId, GenerateShipmentContentUpdatePreviewsRequest body);
        /// <summary>
        /// generateTransportationOptions
        /// </summary>
        /// <remarks>
        /// Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;generateTransportationOptions&#x60;.</param>
        /// <returns>GenerateTransportationOptionsResponse</returns>
        GenerateTransportationOptionsResponse GenerateTransportationOptions (string inboundPlanId, GenerateTransportationOptionsRequest body);

        /// <summary>
        /// generateTransportationOptions
        /// </summary>
        /// <remarks>
        /// Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;generateTransportationOptions&#x60;.</param>
        /// <returns>ApiResponse of GenerateTransportationOptionsResponse</returns>
        ApiResponse<GenerateTransportationOptionsResponse> GenerateTransportationOptionsWithHttpInfo (string inboundPlanId, GenerateTransportationOptionsRequest body);
        /// <summary>
        /// getDeliveryChallanDocument
        /// </summary>
        /// <remarks>
        /// Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <returns>GetDeliveryChallanDocumentResponse</returns>
        GetDeliveryChallanDocumentResponse GetDeliveryChallanDocument (string inboundPlanId, string shipmentId);

        /// <summary>
        /// getDeliveryChallanDocument
        /// </summary>
        /// <remarks>
        /// Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <returns>ApiResponse of GetDeliveryChallanDocumentResponse</returns>
        ApiResponse<GetDeliveryChallanDocumentResponse> GetDeliveryChallanDocumentWithHttpInfo (string inboundPlanId, string shipmentId);
        /// <summary>
        /// getInboundOperationStatus
        /// </summary>
        /// <remarks>
        /// Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">Identifier of an asynchronous operation.</param>
        /// <returns>InboundOperationStatus</returns>
        InboundOperationStatus GetInboundOperationStatus (string operationId);

        /// <summary>
        /// getInboundOperationStatus
        /// </summary>
        /// <remarks>
        /// Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">Identifier of an asynchronous operation.</param>
        /// <returns>ApiResponse of InboundOperationStatus</returns>
        ApiResponse<InboundOperationStatus> GetInboundOperationStatusWithHttpInfo (string operationId);
        /// <summary>
        /// getInboundPlan
        /// </summary>
        /// <remarks>
        /// Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>InboundPlan</returns>
        InboundPlan GetInboundPlan (string inboundPlanId);

        /// <summary>
        /// getInboundPlan
        /// </summary>
        /// <remarks>
        /// Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>ApiResponse of InboundPlan</returns>
        ApiResponse<InboundPlan> GetInboundPlanWithHttpInfo (string inboundPlanId);
        /// <summary>
        /// getSelfShipAppointmentSlots
        /// </summary>
        /// <remarks>
        /// Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>GetSelfShipAppointmentSlotsResponse</returns>
        GetSelfShipAppointmentSlotsResponse GetSelfShipAppointmentSlots (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// getSelfShipAppointmentSlots
        /// </summary>
        /// <remarks>
        /// Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of GetSelfShipAppointmentSlotsResponse</returns>
        ApiResponse<GetSelfShipAppointmentSlotsResponse> GetSelfShipAppointmentSlotsWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// getShipment
        /// </summary>
        /// <remarks>
        /// Provides the full details for a specific shipment within an inbound plan. The &#x60;transportationOptionId&#x60; inside &#x60;acceptedTransportationSelection&#x60; can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <returns>Shipment</returns>
        Shipment GetShipment (string inboundPlanId, string shipmentId);

        /// <summary>
        /// getShipment
        /// </summary>
        /// <remarks>
        /// Provides the full details for a specific shipment within an inbound plan. The &#x60;transportationOptionId&#x60; inside &#x60;acceptedTransportationSelection&#x60; can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <returns>ApiResponse of Shipment</returns>
        ApiResponse<Shipment> GetShipmentWithHttpInfo (string inboundPlanId, string shipmentId);
        /// <summary>
        /// getShipmentContentUpdatePreview
        /// </summary>
        /// <remarks>
        /// Retrieve a shipment content update preview which provides a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="contentUpdatePreviewId">Identifier of a content update preview.</param>
        /// <returns>ContentUpdatePreview</returns>
        ContentUpdatePreview GetShipmentContentUpdatePreview (string inboundPlanId, string shipmentId, string contentUpdatePreviewId);

        /// <summary>
        /// getShipmentContentUpdatePreview
        /// </summary>
        /// <remarks>
        /// Retrieve a shipment content update preview which provides a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="contentUpdatePreviewId">Identifier of a content update preview.</param>
        /// <returns>ApiResponse of ContentUpdatePreview</returns>
        ApiResponse<ContentUpdatePreview> GetShipmentContentUpdatePreviewWithHttpInfo (string inboundPlanId, string shipmentId, string contentUpdatePreviewId);
        /// <summary>
        /// listDeliveryWindowOptions
        /// </summary>
        /// <remarks>
        /// Retrieves all delivery window options for a shipment. Delivery window options must first be generated by the &#x60;generateDeliveryWindowOptions&#x60; operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to get delivery window options for.</param>
        /// <param name="pageSize">The number of delivery window options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListDeliveryWindowOptionsResponse</returns>
        ListDeliveryWindowOptionsResponse ListDeliveryWindowOptions (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listDeliveryWindowOptions
        /// </summary>
        /// <remarks>
        /// Retrieves all delivery window options for a shipment. Delivery window options must first be generated by the &#x60;generateDeliveryWindowOptions&#x60; operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to get delivery window options for.</param>
        /// <param name="pageSize">The number of delivery window options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListDeliveryWindowOptionsResponse</returns>
        ApiResponse<ListDeliveryWindowOptionsResponse> ListDeliveryWindowOptionsWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listInboundPlanBoxes
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListInboundPlanBoxesResponse</returns>
        ListInboundPlanBoxesResponse ListInboundPlanBoxes (string inboundPlanId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listInboundPlanBoxes
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListInboundPlanBoxesResponse</returns>
        ApiResponse<ListInboundPlanBoxesResponse> ListInboundPlanBoxesWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listInboundPlanItems
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListInboundPlanItemsResponse</returns>
        ListInboundPlanItemsResponse ListInboundPlanItems (string inboundPlanId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listInboundPlanItems
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListInboundPlanItemsResponse</returns>
        ApiResponse<ListInboundPlanItemsResponse> ListInboundPlanItemsWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listInboundPlanPallets
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of pallets to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListInboundPlanPalletsResponse</returns>
        ListInboundPlanPalletsResponse ListInboundPlanPallets (string inboundPlanId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listInboundPlanPallets
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of pallets to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListInboundPlanPalletsResponse</returns>
        ApiResponse<ListInboundPlanPalletsResponse> ListInboundPlanPalletsWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listInboundPlans
        /// </summary>
        /// <remarks>
        /// Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of inbound plans to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <param name="status">The status of an inbound plan. (optional)</param>
        /// <param name="sortBy">Sort by field. (optional)</param>
        /// <param name="sortOrder">The sort order. (optional)</param>
        /// <returns>ListInboundPlansResponse</returns>
        ListInboundPlansResponse ListInboundPlans (int? pageSize = null, string paginationToken = null, string status = null, string sortBy = null, string sortOrder = null);

        /// <summary>
        /// listInboundPlans
        /// </summary>
        /// <remarks>
        /// Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of inbound plans to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <param name="status">The status of an inbound plan. (optional)</param>
        /// <param name="sortBy">Sort by field. (optional)</param>
        /// <param name="sortOrder">The sort order. (optional)</param>
        /// <returns>ApiResponse of ListInboundPlansResponse</returns>
        ApiResponse<ListInboundPlansResponse> ListInboundPlansWithHttpInfo (int? pageSize = null, string paginationToken = null, string status = null, string sortBy = null, string sortOrder = null);
        /// <summary>
        /// listItemComplianceDetails
        /// </summary>
        /// <remarks>
        /// List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mskus">A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.</param>
        /// <param name="marketplaceId">The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>ListItemComplianceDetailsResponse</returns>
        ListItemComplianceDetailsResponse ListItemComplianceDetails (List<string> mskus, string marketplaceId);

        /// <summary>
        /// listItemComplianceDetails
        /// </summary>
        /// <remarks>
        /// List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mskus">A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.</param>
        /// <param name="marketplaceId">The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>ApiResponse of ListItemComplianceDetailsResponse</returns>
        ApiResponse<ListItemComplianceDetailsResponse> ListItemComplianceDetailsWithHttpInfo (List<string> mskus, string marketplaceId);
        /// <summary>
        /// listPackingGroupBoxes
        /// </summary>
        /// <remarks>
        /// Retrieves a page of boxes from a given packing group. These boxes were previously provided through the &#x60;setPackingInformation&#x60; operation. This API is used for workflows where boxes are packed before Amazon determines shipment splits.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingGroupId">Identifier of a packing group.</param>
        /// <param name="pageSize">The number of packing group boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListPackingGroupBoxesResponse</returns>
        ListPackingGroupBoxesResponse ListPackingGroupBoxes (string inboundPlanId, string packingGroupId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listPackingGroupBoxes
        /// </summary>
        /// <remarks>
        /// Retrieves a page of boxes from a given packing group. These boxes were previously provided through the &#x60;setPackingInformation&#x60; operation. This API is used for workflows where boxes are packed before Amazon determines shipment splits.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingGroupId">Identifier of a packing group.</param>
        /// <param name="pageSize">The number of packing group boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListPackingGroupBoxesResponse</returns>
        ApiResponse<ListPackingGroupBoxesResponse> ListPackingGroupBoxesWithHttpInfo (string inboundPlanId, string packingGroupId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listPackingGroupItems
        /// </summary>
        /// <remarks>
        /// Retrieves a page of items in a given packing group. Packing options must first be generated by the corresponding operation before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingGroupId">Identifier of a packing group.</param>
        /// <param name="pageSize">The number of packing group items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListPackingGroupItemsResponse</returns>
        ListPackingGroupItemsResponse ListPackingGroupItems (string inboundPlanId, string packingGroupId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listPackingGroupItems
        /// </summary>
        /// <remarks>
        /// Retrieves a page of items in a given packing group. Packing options must first be generated by the corresponding operation before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingGroupId">Identifier of a packing group.</param>
        /// <param name="pageSize">The number of packing group items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListPackingGroupItemsResponse</returns>
        ApiResponse<ListPackingGroupItemsResponse> ListPackingGroupItemsWithHttpInfo (string inboundPlanId, string packingGroupId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listPackingOptions
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of packing options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListPackingOptionsResponse</returns>
        ListPackingOptionsResponse ListPackingOptions (string inboundPlanId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listPackingOptions
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of packing options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListPackingOptionsResponse</returns>
        ApiResponse<ListPackingOptionsResponse> ListPackingOptionsWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listPlacementOptions
        /// </summary>
        /// <remarks>
        /// Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of placement options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListPlacementOptionsResponse</returns>
        ListPlacementOptionsResponse ListPlacementOptions (string inboundPlanId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listPlacementOptions
        /// </summary>
        /// <remarks>
        /// Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of placement options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListPlacementOptionsResponse</returns>
        ApiResponse<ListPlacementOptionsResponse> ListPlacementOptionsWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listPrepDetails
        /// </summary>
        /// <remarks>
        /// Get preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <param name="mskus">A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.</param>
        /// <returns>ListPrepDetailsResponse</returns>
        ListPrepDetailsResponse ListPrepDetails (string marketplaceId, List<string> mskus);

        /// <summary>
        /// listPrepDetails
        /// </summary>
        /// <remarks>
        /// Get preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <param name="mskus">A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.</param>
        /// <returns>ApiResponse of ListPrepDetailsResponse</returns>
        ApiResponse<ListPrepDetailsResponse> ListPrepDetailsWithHttpInfo (string marketplaceId, List<string> mskus);
        /// <summary>
        /// listShipmentBoxes
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of box packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListShipmentBoxesResponse</returns>
        ListShipmentBoxesResponse ListShipmentBoxes (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listShipmentBoxes
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of box packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListShipmentBoxesResponse</returns>
        ApiResponse<ListShipmentBoxesResponse> ListShipmentBoxesWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listShipmentContentUpdatePreviews
        /// </summary>
        /// <remarks>
        /// Retrieve a paginated list of shipment content update previews for a given shipment. The shipment content update preview is a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of content update previews to return. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListShipmentContentUpdatePreviewsResponse</returns>
        ListShipmentContentUpdatePreviewsResponse ListShipmentContentUpdatePreviews (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listShipmentContentUpdatePreviews
        /// </summary>
        /// <remarks>
        /// Retrieve a paginated list of shipment content update previews for a given shipment. The shipment content update preview is a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of content update previews to return. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListShipmentContentUpdatePreviewsResponse</returns>
        ApiResponse<ListShipmentContentUpdatePreviewsResponse> ListShipmentContentUpdatePreviewsWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listShipmentItems
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of item packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListShipmentItemsResponse</returns>
        ListShipmentItemsResponse ListShipmentItems (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listShipmentItems
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of item packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListShipmentItemsResponse</returns>
        ApiResponse<ListShipmentItemsResponse> ListShipmentItemsWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listShipmentPallets
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of pallet packages in a shipment. A palletized shipment will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of pallets to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListShipmentPalletsResponse</returns>
        ListShipmentPalletsResponse ListShipmentPallets (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listShipmentPallets
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of pallet packages in a shipment. A palletized shipment will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of pallets to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListShipmentPalletsResponse</returns>
        ApiResponse<ListShipmentPalletsResponse> ListShipmentPalletsWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listTransportationOptions
        /// </summary>
        /// <remarks>
        /// Retrieves all transportation options for a shipment. Transportation options must first be generated by the &#x60;generateTransportationOptions&#x60; operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of transportation options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <param name="placementOptionId">The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)</param>
        /// <param name="shipmentId">The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)</param>
        /// <returns>ListTransportationOptionsResponse</returns>
        ListTransportationOptionsResponse ListTransportationOptions (string inboundPlanId, int? pageSize = null, string paginationToken = null, string placementOptionId = null, string shipmentId = null);

        /// <summary>
        /// listTransportationOptions
        /// </summary>
        /// <remarks>
        /// Retrieves all transportation options for a shipment. Transportation options must first be generated by the &#x60;generateTransportationOptions&#x60; operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of transportation options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <param name="placementOptionId">The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)</param>
        /// <param name="shipmentId">The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)</param>
        /// <returns>ApiResponse of ListTransportationOptionsResponse</returns>
        ApiResponse<ListTransportationOptionsResponse> ListTransportationOptionsWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null, string placementOptionId = null, string shipmentId = null);
        /// <summary>
        /// scheduleSelfShipAppointment
        /// </summary>
        /// <remarks>
        /// Confirms or reschedules a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="slotId">An identifier to a self-ship appointment slot.</param>
        /// <param name="body">The body of the request to &#x60;scheduleSelfShipAppointment&#x60;.</param>
        /// <returns>ScheduleSelfShipAppointmentResponse</returns>
        ScheduleSelfShipAppointmentResponse ScheduleSelfShipAppointment (string inboundPlanId, string shipmentId, string slotId, ScheduleSelfShipAppointmentRequest body);

        /// <summary>
        /// scheduleSelfShipAppointment
        /// </summary>
        /// <remarks>
        /// Confirms or reschedules a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="slotId">An identifier to a self-ship appointment slot.</param>
        /// <param name="body">The body of the request to &#x60;scheduleSelfShipAppointment&#x60;.</param>
        /// <returns>ApiResponse of ScheduleSelfShipAppointmentResponse</returns>
        ApiResponse<ScheduleSelfShipAppointmentResponse> ScheduleSelfShipAppointmentWithHttpInfo (string inboundPlanId, string shipmentId, string slotId, ScheduleSelfShipAppointmentRequest body);
        /// <summary>
        /// setPackingInformation
        /// </summary>
        /// <remarks>
        /// Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;setPackingInformation&#x60;.</param>
        /// <returns>SetPackingInformationResponse</returns>
        SetPackingInformationResponse SetPackingInformation (string inboundPlanId, SetPackingInformationRequest body);

        /// <summary>
        /// setPackingInformation
        /// </summary>
        /// <remarks>
        /// Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;setPackingInformation&#x60;.</param>
        /// <returns>ApiResponse of SetPackingInformationResponse</returns>
        ApiResponse<SetPackingInformationResponse> SetPackingInformationWithHttpInfo (string inboundPlanId, SetPackingInformationRequest body);
        /// <summary>
        /// setPrepDetails
        /// </summary>
        /// <remarks>
        /// Set the preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;setPrepDetails&#x60;.</param>
        /// <returns>SetPrepDetailsResponse</returns>
        SetPrepDetailsResponse SetPrepDetails (SetPrepDetailsRequest body);

        /// <summary>
        /// setPrepDetails
        /// </summary>
        /// <remarks>
        /// Set the preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;setPrepDetails&#x60;.</param>
        /// <returns>ApiResponse of SetPrepDetailsResponse</returns>
        ApiResponse<SetPrepDetailsResponse> SetPrepDetailsWithHttpInfo (SetPrepDetailsRequest body);
        /// <summary>
        /// updateInboundPlanName
        /// </summary>
        /// <remarks>
        /// Updates the name of an existing inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;updateInboundPlanName&#x60;.</param>
        /// <returns></returns>
        void UpdateInboundPlanName (string inboundPlanId, UpdateInboundPlanNameRequest body);

        /// <summary>
        /// updateInboundPlanName
        /// </summary>
        /// <remarks>
        /// Updates the name of an existing inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;updateInboundPlanName&#x60;.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateInboundPlanNameWithHttpInfo (string inboundPlanId, UpdateInboundPlanNameRequest body);
        /// <summary>
        /// updateItemComplianceDetails
        /// </summary>
        /// <remarks>
        /// Update compliance details for a list of MSKUs. The details provided here are only used for the India (IN - A21TJRUUN4KGV) marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <param name="body">The body of the request to &#x60;updateItemComplianceDetails&#x60;.</param>
        /// <returns>UpdateItemComplianceDetailsResponse</returns>
        UpdateItemComplianceDetailsResponse UpdateItemComplianceDetails (string marketplaceId, UpdateItemComplianceDetailsRequest body);

        /// <summary>
        /// updateItemComplianceDetails
        /// </summary>
        /// <remarks>
        /// Update compliance details for a list of MSKUs. The details provided here are only used for the India (IN - A21TJRUUN4KGV) marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <param name="body">The body of the request to &#x60;updateItemComplianceDetails&#x60;.</param>
        /// <returns>ApiResponse of UpdateItemComplianceDetailsResponse</returns>
        ApiResponse<UpdateItemComplianceDetailsResponse> UpdateItemComplianceDetailsWithHttpInfo (string marketplaceId, UpdateItemComplianceDetailsRequest body);
        /// <summary>
        /// updateShipmentName
        /// </summary>
        /// <remarks>
        /// Updates the name of an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentName&#x60;.</param>
        /// <returns></returns>
        void UpdateShipmentName (string inboundPlanId, string shipmentId, UpdateShipmentNameRequest body);

        /// <summary>
        /// updateShipmentName
        /// </summary>
        /// <remarks>
        /// Updates the name of an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentName&#x60;.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateShipmentNameWithHttpInfo (string inboundPlanId, string shipmentId, UpdateShipmentNameRequest body);
        /// <summary>
        /// updateShipmentSourceAddress
        /// </summary>
        /// <remarks>
        /// Updates the source address of an existing shipment. The shipment source address can only be updated prior to the confirmation of the shipment carriers. As a result of the updated source address, existing transportation options will be invalidated and will need to be regenerated to capture the potential difference in transportation options and quotes due to the new source address.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentSourceAddress&#x60;.</param>
        /// <returns>UpdateShipmentSourceAddressResponse</returns>
        UpdateShipmentSourceAddressResponse UpdateShipmentSourceAddress (string inboundPlanId, string shipmentId, UpdateShipmentSourceAddressRequest body);

        /// <summary>
        /// updateShipmentSourceAddress
        /// </summary>
        /// <remarks>
        /// Updates the source address of an existing shipment. The shipment source address can only be updated prior to the confirmation of the shipment carriers. As a result of the updated source address, existing transportation options will be invalidated and will need to be regenerated to capture the potential difference in transportation options and quotes due to the new source address.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentSourceAddress&#x60;.</param>
        /// <returns>ApiResponse of UpdateShipmentSourceAddressResponse</returns>
        ApiResponse<UpdateShipmentSourceAddressResponse> UpdateShipmentSourceAddressWithHttpInfo (string inboundPlanId, string shipmentId, UpdateShipmentSourceAddressRequest body);
        /// <summary>
        /// updateShipmentTrackingDetails
        /// </summary>
        /// <remarks>
        /// Updates a shipment&#39;s tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentTrackingDetails&#x60;.</param>
        /// <returns>UpdateShipmentTrackingDetailsResponse</returns>
        UpdateShipmentTrackingDetailsResponse UpdateShipmentTrackingDetails (string inboundPlanId, string shipmentId, UpdateShipmentTrackingDetailsRequest body);

        /// <summary>
        /// updateShipmentTrackingDetails
        /// </summary>
        /// <remarks>
        /// Updates a shipment&#39;s tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentTrackingDetails&#x60;.</param>
        /// <returns>ApiResponse of UpdateShipmentTrackingDetailsResponse</returns>
        ApiResponse<UpdateShipmentTrackingDetailsResponse> UpdateShipmentTrackingDetailsWithHttpInfo (string inboundPlanId, string shipmentId, UpdateShipmentTrackingDetailsRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// cancelInboundPlan
        /// </summary>
        /// <remarks>
        /// Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>Task of CancelInboundPlanResponse</returns>
        System.Threading.Tasks.Task<CancelInboundPlanResponse> CancelInboundPlanAsync (string inboundPlanId);

        /// <summary>
        /// cancelInboundPlan
        /// </summary>
        /// <remarks>
        /// Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>Task of ApiResponse (CancelInboundPlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelInboundPlanResponse>> CancelInboundPlanAsyncWithHttpInfo (string inboundPlanId);
        /// <summary>
        /// cancelSelfShipAppointment
        /// </summary>
        /// <remarks>
        /// Cancels a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;cancelSelfShipAppointment&#x60;.</param>
        /// <returns>Task of CancelSelfShipAppointmentResponse</returns>
        System.Threading.Tasks.Task<CancelSelfShipAppointmentResponse> CancelSelfShipAppointmentAsync (string inboundPlanId, string shipmentId, CancelSelfShipAppointmentRequest body);

        /// <summary>
        /// cancelSelfShipAppointment
        /// </summary>
        /// <remarks>
        /// Cancels a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;cancelSelfShipAppointment&#x60;.</param>
        /// <returns>Task of ApiResponse (CancelSelfShipAppointmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelSelfShipAppointmentResponse>> CancelSelfShipAppointmentAsyncWithHttpInfo (string inboundPlanId, string shipmentId, CancelSelfShipAppointmentRequest body);
        /// <summary>
        /// confirmDeliveryWindowOptions
        /// </summary>
        /// <remarks>
        /// Confirms the delivery window option for chosen shipment within an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new delivery window options cannot be generated, but the chosen delivery window option can be updated before shipment closure. The window is used to provide the expected time when a shipment will arrive at the warehouse. All transportation options which have the program &#x60;CONFIRMED_DELIVERY_WINDOW&#x60; require a delivery window to be confirmed prior to transportation option confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to confirm the delivery window option for.</param>
        /// <param name="deliveryWindowOptionId">The id of the delivery window option to be confirmed.</param>
        /// <returns>Task of ConfirmDeliveryWindowOptionsResponse</returns>
        System.Threading.Tasks.Task<ConfirmDeliveryWindowOptionsResponse> ConfirmDeliveryWindowOptionsAsync (string inboundPlanId, string shipmentId, string deliveryWindowOptionId);

        /// <summary>
        /// confirmDeliveryWindowOptions
        /// </summary>
        /// <remarks>
        /// Confirms the delivery window option for chosen shipment within an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new delivery window options cannot be generated, but the chosen delivery window option can be updated before shipment closure. The window is used to provide the expected time when a shipment will arrive at the warehouse. All transportation options which have the program &#x60;CONFIRMED_DELIVERY_WINDOW&#x60; require a delivery window to be confirmed prior to transportation option confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to confirm the delivery window option for.</param>
        /// <param name="deliveryWindowOptionId">The id of the delivery window option to be confirmed.</param>
        /// <returns>Task of ApiResponse (ConfirmDeliveryWindowOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfirmDeliveryWindowOptionsResponse>> ConfirmDeliveryWindowOptionsAsyncWithHttpInfo (string inboundPlanId, string shipmentId, string deliveryWindowOptionId);
        /// <summary>
        /// confirmPackingOption
        /// </summary>
        /// <remarks>
        /// Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingOptionId">Identifier of a packing option.</param>
        /// <returns>Task of ConfirmPackingOptionResponse</returns>
        System.Threading.Tasks.Task<ConfirmPackingOptionResponse> ConfirmPackingOptionAsync (string inboundPlanId, string packingOptionId);

        /// <summary>
        /// confirmPackingOption
        /// </summary>
        /// <remarks>
        /// Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingOptionId">Identifier of a packing option.</param>
        /// <returns>Task of ApiResponse (ConfirmPackingOptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfirmPackingOptionResponse>> ConfirmPackingOptionAsyncWithHttpInfo (string inboundPlanId, string packingOptionId);
        /// <summary>
        /// confirmPlacementOption
        /// </summary>
        /// <remarks>
        /// Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="placementOptionId">The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.</param>
        /// <returns>Task of ConfirmPlacementOptionResponse</returns>
        System.Threading.Tasks.Task<ConfirmPlacementOptionResponse> ConfirmPlacementOptionAsync (string inboundPlanId, string placementOptionId);

        /// <summary>
        /// confirmPlacementOption
        /// </summary>
        /// <remarks>
        /// Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="placementOptionId">The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.</param>
        /// <returns>Task of ApiResponse (ConfirmPlacementOptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfirmPlacementOptionResponse>> ConfirmPlacementOptionAsyncWithHttpInfo (string inboundPlanId, string placementOptionId);
        /// <summary>
        /// confirmShipmentContentUpdatePreview
        /// </summary>
        /// <remarks>
        /// Confirm a shipment content update preview and accept the changes in transportation cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="contentUpdatePreviewId">Identifier of a content update preview.</param>
        /// <returns>Task of ConfirmShipmentContentUpdatePreviewResponse</returns>
        System.Threading.Tasks.Task<ConfirmShipmentContentUpdatePreviewResponse> ConfirmShipmentContentUpdatePreviewAsync (string inboundPlanId, string shipmentId, string contentUpdatePreviewId);

        /// <summary>
        /// confirmShipmentContentUpdatePreview
        /// </summary>
        /// <remarks>
        /// Confirm a shipment content update preview and accept the changes in transportation cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="contentUpdatePreviewId">Identifier of a content update preview.</param>
        /// <returns>Task of ApiResponse (ConfirmShipmentContentUpdatePreviewResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfirmShipmentContentUpdatePreviewResponse>> ConfirmShipmentContentUpdatePreviewAsyncWithHttpInfo (string inboundPlanId, string shipmentId, string contentUpdatePreviewId);
        /// <summary>
        /// confirmTransportationOptions
        /// </summary>
        /// <remarks>
        /// Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;confirmTransportationOptions&#x60;.</param>
        /// <returns>Task of ConfirmTransportationOptionsResponse</returns>
        System.Threading.Tasks.Task<ConfirmTransportationOptionsResponse> ConfirmTransportationOptionsAsync (string inboundPlanId, ConfirmTransportationOptionsRequest body);

        /// <summary>
        /// confirmTransportationOptions
        /// </summary>
        /// <remarks>
        /// Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;confirmTransportationOptions&#x60;.</param>
        /// <returns>Task of ApiResponse (ConfirmTransportationOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfirmTransportationOptionsResponse>> ConfirmTransportationOptionsAsyncWithHttpInfo (string inboundPlanId, ConfirmTransportationOptionsRequest body);
        /// <summary>
        /// createInboundPlan
        /// </summary>
        /// <remarks>
        /// Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon&#39;s fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;createInboundPlan&#x60;.</param>
        /// <returns>Task of CreateInboundPlanResponse</returns>
        System.Threading.Tasks.Task<CreateInboundPlanResponse> CreateInboundPlanAsync (CreateInboundPlanRequest body);

        /// <summary>
        /// createInboundPlan
        /// </summary>
        /// <remarks>
        /// Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon&#39;s fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;createInboundPlan&#x60;.</param>
        /// <returns>Task of ApiResponse (CreateInboundPlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateInboundPlanResponse>> CreateInboundPlanAsyncWithHttpInfo (CreateInboundPlanRequest body);
        /// <summary>
        /// createMarketplaceItemLabels
        /// </summary>
        /// <remarks>
        /// For a given marketplace - creates labels for a list of MSKUs.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;createMarketplaceItemLabels&#x60;.</param>
        /// <returns>Task of CreateMarketplaceItemLabelsResponse</returns>
        System.Threading.Tasks.Task<CreateMarketplaceItemLabelsResponse> CreateMarketplaceItemLabelsAsync (CreateMarketplaceItemLabelsRequest body);

        /// <summary>
        /// createMarketplaceItemLabels
        /// </summary>
        /// <remarks>
        /// For a given marketplace - creates labels for a list of MSKUs.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;createMarketplaceItemLabels&#x60;.</param>
        /// <returns>Task of ApiResponse (CreateMarketplaceItemLabelsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateMarketplaceItemLabelsResponse>> CreateMarketplaceItemLabelsAsyncWithHttpInfo (CreateMarketplaceItemLabelsRequest body);
        /// <summary>
        /// generateDeliveryWindowOptions
        /// </summary>
        /// <remarks>
        /// Generates available delivery window options for a given shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to generate delivery window options for.</param>
        /// <returns>Task of GenerateDeliveryWindowOptionsResponse</returns>
        System.Threading.Tasks.Task<GenerateDeliveryWindowOptionsResponse> GenerateDeliveryWindowOptionsAsync (string inboundPlanId, string shipmentId);

        /// <summary>
        /// generateDeliveryWindowOptions
        /// </summary>
        /// <remarks>
        /// Generates available delivery window options for a given shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to generate delivery window options for.</param>
        /// <returns>Task of ApiResponse (GenerateDeliveryWindowOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateDeliveryWindowOptionsResponse>> GenerateDeliveryWindowOptionsAsyncWithHttpInfo (string inboundPlanId, string shipmentId);
        /// <summary>
        /// generatePackingOptions
        /// </summary>
        /// <remarks>
        /// Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>Task of GeneratePackingOptionsResponse</returns>
        System.Threading.Tasks.Task<GeneratePackingOptionsResponse> GeneratePackingOptionsAsync (string inboundPlanId);

        /// <summary>
        /// generatePackingOptions
        /// </summary>
        /// <remarks>
        /// Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>Task of ApiResponse (GeneratePackingOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeneratePackingOptionsResponse>> GeneratePackingOptionsAsyncWithHttpInfo (string inboundPlanId);
        /// <summary>
        /// generatePlacementOptions
        /// </summary>
        /// <remarks>
        /// Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;generatePlacementOptions&#x60;.</param>
        /// <returns>Task of GeneratePlacementOptionsResponse</returns>
        System.Threading.Tasks.Task<GeneratePlacementOptionsResponse> GeneratePlacementOptionsAsync (string inboundPlanId, GeneratePlacementOptionsRequest body);

        /// <summary>
        /// generatePlacementOptions
        /// </summary>
        /// <remarks>
        /// Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;generatePlacementOptions&#x60;.</param>
        /// <returns>Task of ApiResponse (GeneratePlacementOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeneratePlacementOptionsResponse>> GeneratePlacementOptionsAsyncWithHttpInfo (string inboundPlanId, GeneratePlacementOptionsRequest body);
        /// <summary>
        /// generateSelfShipAppointmentSlots
        /// </summary>
        /// <remarks>
        /// Initiates the process of generating the appointment slots list.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;.</param>
        /// <returns>Task of GenerateSelfShipAppointmentSlotsResponse</returns>
        System.Threading.Tasks.Task<GenerateSelfShipAppointmentSlotsResponse> GenerateSelfShipAppointmentSlotsAsync (string inboundPlanId, string shipmentId, GenerateSelfShipAppointmentSlotsRequest body);

        /// <summary>
        /// generateSelfShipAppointmentSlots
        /// </summary>
        /// <remarks>
        /// Initiates the process of generating the appointment slots list.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;.</param>
        /// <returns>Task of ApiResponse (GenerateSelfShipAppointmentSlotsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateSelfShipAppointmentSlotsResponse>> GenerateSelfShipAppointmentSlotsAsyncWithHttpInfo (string inboundPlanId, string shipmentId, GenerateSelfShipAppointmentSlotsRequest body);
        /// <summary>
        /// generateShipmentContentUpdatePreviews
        /// </summary>
        /// <remarks>
        /// Generate a shipment content update preview given a set of intended boxes and/or items for a shipment with a confirmed carrier. The shipment content update preview will be viewable with the updated costs and contents prior to confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;.</param>
        /// <returns>Task of GenerateShipmentContentUpdatePreviewsResponse</returns>
        System.Threading.Tasks.Task<GenerateShipmentContentUpdatePreviewsResponse> GenerateShipmentContentUpdatePreviewsAsync (string inboundPlanId, string shipmentId, GenerateShipmentContentUpdatePreviewsRequest body);

        /// <summary>
        /// generateShipmentContentUpdatePreviews
        /// </summary>
        /// <remarks>
        /// Generate a shipment content update preview given a set of intended boxes and/or items for a shipment with a confirmed carrier. The shipment content update preview will be viewable with the updated costs and contents prior to confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;.</param>
        /// <returns>Task of ApiResponse (GenerateShipmentContentUpdatePreviewsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateShipmentContentUpdatePreviewsResponse>> GenerateShipmentContentUpdatePreviewsAsyncWithHttpInfo (string inboundPlanId, string shipmentId, GenerateShipmentContentUpdatePreviewsRequest body);
        /// <summary>
        /// generateTransportationOptions
        /// </summary>
        /// <remarks>
        /// Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;generateTransportationOptions&#x60;.</param>
        /// <returns>Task of GenerateTransportationOptionsResponse</returns>
        System.Threading.Tasks.Task<GenerateTransportationOptionsResponse> GenerateTransportationOptionsAsync (string inboundPlanId, GenerateTransportationOptionsRequest body);

        /// <summary>
        /// generateTransportationOptions
        /// </summary>
        /// <remarks>
        /// Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;generateTransportationOptions&#x60;.</param>
        /// <returns>Task of ApiResponse (GenerateTransportationOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateTransportationOptionsResponse>> GenerateTransportationOptionsAsyncWithHttpInfo (string inboundPlanId, GenerateTransportationOptionsRequest body);
        /// <summary>
        /// getDeliveryChallanDocument
        /// </summary>
        /// <remarks>
        /// Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <returns>Task of GetDeliveryChallanDocumentResponse</returns>
        System.Threading.Tasks.Task<GetDeliveryChallanDocumentResponse> GetDeliveryChallanDocumentAsync (string inboundPlanId, string shipmentId);

        /// <summary>
        /// getDeliveryChallanDocument
        /// </summary>
        /// <remarks>
        /// Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <returns>Task of ApiResponse (GetDeliveryChallanDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDeliveryChallanDocumentResponse>> GetDeliveryChallanDocumentAsyncWithHttpInfo (string inboundPlanId, string shipmentId);
        /// <summary>
        /// getInboundOperationStatus
        /// </summary>
        /// <remarks>
        /// Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">Identifier of an asynchronous operation.</param>
        /// <returns>Task of InboundOperationStatus</returns>
        System.Threading.Tasks.Task<InboundOperationStatus> GetInboundOperationStatusAsync (string operationId);

        /// <summary>
        /// getInboundOperationStatus
        /// </summary>
        /// <remarks>
        /// Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">Identifier of an asynchronous operation.</param>
        /// <returns>Task of ApiResponse (InboundOperationStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboundOperationStatus>> GetInboundOperationStatusAsyncWithHttpInfo (string operationId);
        /// <summary>
        /// getInboundPlan
        /// </summary>
        /// <remarks>
        /// Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>Task of InboundPlan</returns>
        System.Threading.Tasks.Task<InboundPlan> GetInboundPlanAsync (string inboundPlanId);

        /// <summary>
        /// getInboundPlan
        /// </summary>
        /// <remarks>
        /// Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>Task of ApiResponse (InboundPlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboundPlan>> GetInboundPlanAsyncWithHttpInfo (string inboundPlanId);
        /// <summary>
        /// getSelfShipAppointmentSlots
        /// </summary>
        /// <remarks>
        /// Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of GetSelfShipAppointmentSlotsResponse</returns>
        System.Threading.Tasks.Task<GetSelfShipAppointmentSlotsResponse> GetSelfShipAppointmentSlotsAsync (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// getSelfShipAppointmentSlots
        /// </summary>
        /// <remarks>
        /// Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (GetSelfShipAppointmentSlotsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSelfShipAppointmentSlotsResponse>> GetSelfShipAppointmentSlotsAsyncWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// getShipment
        /// </summary>
        /// <remarks>
        /// Provides the full details for a specific shipment within an inbound plan. The &#x60;transportationOptionId&#x60; inside &#x60;acceptedTransportationSelection&#x60; can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <returns>Task of Shipment</returns>
        System.Threading.Tasks.Task<Shipment> GetShipmentAsync (string inboundPlanId, string shipmentId);

        /// <summary>
        /// getShipment
        /// </summary>
        /// <remarks>
        /// Provides the full details for a specific shipment within an inbound plan. The &#x60;transportationOptionId&#x60; inside &#x60;acceptedTransportationSelection&#x60; can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <returns>Task of ApiResponse (Shipment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Shipment>> GetShipmentAsyncWithHttpInfo (string inboundPlanId, string shipmentId);
        /// <summary>
        /// getShipmentContentUpdatePreview
        /// </summary>
        /// <remarks>
        /// Retrieve a shipment content update preview which provides a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="contentUpdatePreviewId">Identifier of a content update preview.</param>
        /// <returns>Task of ContentUpdatePreview</returns>
        System.Threading.Tasks.Task<ContentUpdatePreview> GetShipmentContentUpdatePreviewAsync (string inboundPlanId, string shipmentId, string contentUpdatePreviewId);

        /// <summary>
        /// getShipmentContentUpdatePreview
        /// </summary>
        /// <remarks>
        /// Retrieve a shipment content update preview which provides a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="contentUpdatePreviewId">Identifier of a content update preview.</param>
        /// <returns>Task of ApiResponse (ContentUpdatePreview)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentUpdatePreview>> GetShipmentContentUpdatePreviewAsyncWithHttpInfo (string inboundPlanId, string shipmentId, string contentUpdatePreviewId);
        /// <summary>
        /// listDeliveryWindowOptions
        /// </summary>
        /// <remarks>
        /// Retrieves all delivery window options for a shipment. Delivery window options must first be generated by the &#x60;generateDeliveryWindowOptions&#x60; operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to get delivery window options for.</param>
        /// <param name="pageSize">The number of delivery window options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListDeliveryWindowOptionsResponse</returns>
        System.Threading.Tasks.Task<ListDeliveryWindowOptionsResponse> ListDeliveryWindowOptionsAsync (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listDeliveryWindowOptions
        /// </summary>
        /// <remarks>
        /// Retrieves all delivery window options for a shipment. Delivery window options must first be generated by the &#x60;generateDeliveryWindowOptions&#x60; operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to get delivery window options for.</param>
        /// <param name="pageSize">The number of delivery window options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListDeliveryWindowOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDeliveryWindowOptionsResponse>> ListDeliveryWindowOptionsAsyncWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listInboundPlanBoxes
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListInboundPlanBoxesResponse</returns>
        System.Threading.Tasks.Task<ListInboundPlanBoxesResponse> ListInboundPlanBoxesAsync (string inboundPlanId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listInboundPlanBoxes
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListInboundPlanBoxesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListInboundPlanBoxesResponse>> ListInboundPlanBoxesAsyncWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listInboundPlanItems
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListInboundPlanItemsResponse</returns>
        System.Threading.Tasks.Task<ListInboundPlanItemsResponse> ListInboundPlanItemsAsync (string inboundPlanId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listInboundPlanItems
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListInboundPlanItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListInboundPlanItemsResponse>> ListInboundPlanItemsAsyncWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listInboundPlanPallets
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of pallets to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListInboundPlanPalletsResponse</returns>
        System.Threading.Tasks.Task<ListInboundPlanPalletsResponse> ListInboundPlanPalletsAsync (string inboundPlanId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listInboundPlanPallets
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of pallets to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListInboundPlanPalletsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListInboundPlanPalletsResponse>> ListInboundPlanPalletsAsyncWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listInboundPlans
        /// </summary>
        /// <remarks>
        /// Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of inbound plans to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <param name="status">The status of an inbound plan. (optional)</param>
        /// <param name="sortBy">Sort by field. (optional)</param>
        /// <param name="sortOrder">The sort order. (optional)</param>
        /// <returns>Task of ListInboundPlansResponse</returns>
        System.Threading.Tasks.Task<ListInboundPlansResponse> ListInboundPlansAsync (int? pageSize = null, string paginationToken = null, string status = null, string sortBy = null, string sortOrder = null);

        /// <summary>
        /// listInboundPlans
        /// </summary>
        /// <remarks>
        /// Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of inbound plans to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <param name="status">The status of an inbound plan. (optional)</param>
        /// <param name="sortBy">Sort by field. (optional)</param>
        /// <param name="sortOrder">The sort order. (optional)</param>
        /// <returns>Task of ApiResponse (ListInboundPlansResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListInboundPlansResponse>> ListInboundPlansAsyncWithHttpInfo (int? pageSize = null, string paginationToken = null, string status = null, string sortBy = null, string sortOrder = null);
        /// <summary>
        /// listItemComplianceDetails
        /// </summary>
        /// <remarks>
        /// List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mskus">A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.</param>
        /// <param name="marketplaceId">The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>Task of ListItemComplianceDetailsResponse</returns>
        System.Threading.Tasks.Task<ListItemComplianceDetailsResponse> ListItemComplianceDetailsAsync (List<string> mskus, string marketplaceId);

        /// <summary>
        /// listItemComplianceDetails
        /// </summary>
        /// <remarks>
        /// List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mskus">A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.</param>
        /// <param name="marketplaceId">The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>Task of ApiResponse (ListItemComplianceDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListItemComplianceDetailsResponse>> ListItemComplianceDetailsAsyncWithHttpInfo (List<string> mskus, string marketplaceId);
        /// <summary>
        /// listPackingGroupBoxes
        /// </summary>
        /// <remarks>
        /// Retrieves a page of boxes from a given packing group. These boxes were previously provided through the &#x60;setPackingInformation&#x60; operation. This API is used for workflows where boxes are packed before Amazon determines shipment splits.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingGroupId">Identifier of a packing group.</param>
        /// <param name="pageSize">The number of packing group boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListPackingGroupBoxesResponse</returns>
        System.Threading.Tasks.Task<ListPackingGroupBoxesResponse> ListPackingGroupBoxesAsync (string inboundPlanId, string packingGroupId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listPackingGroupBoxes
        /// </summary>
        /// <remarks>
        /// Retrieves a page of boxes from a given packing group. These boxes were previously provided through the &#x60;setPackingInformation&#x60; operation. This API is used for workflows where boxes are packed before Amazon determines shipment splits.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingGroupId">Identifier of a packing group.</param>
        /// <param name="pageSize">The number of packing group boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListPackingGroupBoxesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListPackingGroupBoxesResponse>> ListPackingGroupBoxesAsyncWithHttpInfo (string inboundPlanId, string packingGroupId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listPackingGroupItems
        /// </summary>
        /// <remarks>
        /// Retrieves a page of items in a given packing group. Packing options must first be generated by the corresponding operation before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingGroupId">Identifier of a packing group.</param>
        /// <param name="pageSize">The number of packing group items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListPackingGroupItemsResponse</returns>
        System.Threading.Tasks.Task<ListPackingGroupItemsResponse> ListPackingGroupItemsAsync (string inboundPlanId, string packingGroupId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listPackingGroupItems
        /// </summary>
        /// <remarks>
        /// Retrieves a page of items in a given packing group. Packing options must first be generated by the corresponding operation before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingGroupId">Identifier of a packing group.</param>
        /// <param name="pageSize">The number of packing group items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListPackingGroupItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListPackingGroupItemsResponse>> ListPackingGroupItemsAsyncWithHttpInfo (string inboundPlanId, string packingGroupId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listPackingOptions
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of packing options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListPackingOptionsResponse</returns>
        System.Threading.Tasks.Task<ListPackingOptionsResponse> ListPackingOptionsAsync (string inboundPlanId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listPackingOptions
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of packing options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListPackingOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListPackingOptionsResponse>> ListPackingOptionsAsyncWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listPlacementOptions
        /// </summary>
        /// <remarks>
        /// Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of placement options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListPlacementOptionsResponse</returns>
        System.Threading.Tasks.Task<ListPlacementOptionsResponse> ListPlacementOptionsAsync (string inboundPlanId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listPlacementOptions
        /// </summary>
        /// <remarks>
        /// Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of placement options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListPlacementOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListPlacementOptionsResponse>> ListPlacementOptionsAsyncWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listPrepDetails
        /// </summary>
        /// <remarks>
        /// Get preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <param name="mskus">A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.</param>
        /// <returns>Task of ListPrepDetailsResponse</returns>
        System.Threading.Tasks.Task<ListPrepDetailsResponse> ListPrepDetailsAsync (string marketplaceId, List<string> mskus);

        /// <summary>
        /// listPrepDetails
        /// </summary>
        /// <remarks>
        /// Get preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <param name="mskus">A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.</param>
        /// <returns>Task of ApiResponse (ListPrepDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListPrepDetailsResponse>> ListPrepDetailsAsyncWithHttpInfo (string marketplaceId, List<string> mskus);
        /// <summary>
        /// listShipmentBoxes
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of box packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListShipmentBoxesResponse</returns>
        System.Threading.Tasks.Task<ListShipmentBoxesResponse> ListShipmentBoxesAsync (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listShipmentBoxes
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of box packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListShipmentBoxesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListShipmentBoxesResponse>> ListShipmentBoxesAsyncWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listShipmentContentUpdatePreviews
        /// </summary>
        /// <remarks>
        /// Retrieve a paginated list of shipment content update previews for a given shipment. The shipment content update preview is a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of content update previews to return. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListShipmentContentUpdatePreviewsResponse</returns>
        System.Threading.Tasks.Task<ListShipmentContentUpdatePreviewsResponse> ListShipmentContentUpdatePreviewsAsync (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listShipmentContentUpdatePreviews
        /// </summary>
        /// <remarks>
        /// Retrieve a paginated list of shipment content update previews for a given shipment. The shipment content update preview is a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of content update previews to return. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListShipmentContentUpdatePreviewsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListShipmentContentUpdatePreviewsResponse>> ListShipmentContentUpdatePreviewsAsyncWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listShipmentItems
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of item packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListShipmentItemsResponse</returns>
        System.Threading.Tasks.Task<ListShipmentItemsResponse> ListShipmentItemsAsync (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listShipmentItems
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of item packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListShipmentItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListShipmentItemsResponse>> ListShipmentItemsAsyncWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listShipmentPallets
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of pallet packages in a shipment. A palletized shipment will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of pallets to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListShipmentPalletsResponse</returns>
        System.Threading.Tasks.Task<ListShipmentPalletsResponse> ListShipmentPalletsAsync (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);

        /// <summary>
        /// listShipmentPallets
        /// </summary>
        /// <remarks>
        /// Provides a paginated list of pallet packages in a shipment. A palletized shipment will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of pallets to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListShipmentPalletsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListShipmentPalletsResponse>> ListShipmentPalletsAsyncWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null);
        /// <summary>
        /// listTransportationOptions
        /// </summary>
        /// <remarks>
        /// Retrieves all transportation options for a shipment. Transportation options must first be generated by the &#x60;generateTransportationOptions&#x60; operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of transportation options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <param name="placementOptionId">The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)</param>
        /// <param name="shipmentId">The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)</param>
        /// <returns>Task of ListTransportationOptionsResponse</returns>
        System.Threading.Tasks.Task<ListTransportationOptionsResponse> ListTransportationOptionsAsync (string inboundPlanId, int? pageSize = null, string paginationToken = null, string placementOptionId = null, string shipmentId = null);

        /// <summary>
        /// listTransportationOptions
        /// </summary>
        /// <remarks>
        /// Retrieves all transportation options for a shipment. Transportation options must first be generated by the &#x60;generateTransportationOptions&#x60; operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of transportation options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <param name="placementOptionId">The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)</param>
        /// <param name="shipmentId">The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)</param>
        /// <returns>Task of ApiResponse (ListTransportationOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListTransportationOptionsResponse>> ListTransportationOptionsAsyncWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null, string placementOptionId = null, string shipmentId = null);
        /// <summary>
        /// scheduleSelfShipAppointment
        /// </summary>
        /// <remarks>
        /// Confirms or reschedules a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="slotId">An identifier to a self-ship appointment slot.</param>
        /// <param name="body">The body of the request to &#x60;scheduleSelfShipAppointment&#x60;.</param>
        /// <returns>Task of ScheduleSelfShipAppointmentResponse</returns>
        System.Threading.Tasks.Task<ScheduleSelfShipAppointmentResponse> ScheduleSelfShipAppointmentAsync (string inboundPlanId, string shipmentId, string slotId, ScheduleSelfShipAppointmentRequest body);

        /// <summary>
        /// scheduleSelfShipAppointment
        /// </summary>
        /// <remarks>
        /// Confirms or reschedules a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="slotId">An identifier to a self-ship appointment slot.</param>
        /// <param name="body">The body of the request to &#x60;scheduleSelfShipAppointment&#x60;.</param>
        /// <returns>Task of ApiResponse (ScheduleSelfShipAppointmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduleSelfShipAppointmentResponse>> ScheduleSelfShipAppointmentAsyncWithHttpInfo (string inboundPlanId, string shipmentId, string slotId, ScheduleSelfShipAppointmentRequest body);
        /// <summary>
        /// setPackingInformation
        /// </summary>
        /// <remarks>
        /// Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;setPackingInformation&#x60;.</param>
        /// <returns>Task of SetPackingInformationResponse</returns>
        System.Threading.Tasks.Task<SetPackingInformationResponse> SetPackingInformationAsync (string inboundPlanId, SetPackingInformationRequest body);

        /// <summary>
        /// setPackingInformation
        /// </summary>
        /// <remarks>
        /// Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;setPackingInformation&#x60;.</param>
        /// <returns>Task of ApiResponse (SetPackingInformationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetPackingInformationResponse>> SetPackingInformationAsyncWithHttpInfo (string inboundPlanId, SetPackingInformationRequest body);
        /// <summary>
        /// setPrepDetails
        /// </summary>
        /// <remarks>
        /// Set the preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;setPrepDetails&#x60;.</param>
        /// <returns>Task of SetPrepDetailsResponse</returns>
        System.Threading.Tasks.Task<SetPrepDetailsResponse> SetPrepDetailsAsync (SetPrepDetailsRequest body);

        /// <summary>
        /// setPrepDetails
        /// </summary>
        /// <remarks>
        /// Set the preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;setPrepDetails&#x60;.</param>
        /// <returns>Task of ApiResponse (SetPrepDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetPrepDetailsResponse>> SetPrepDetailsAsyncWithHttpInfo (SetPrepDetailsRequest body);
        /// <summary>
        /// updateInboundPlanName
        /// </summary>
        /// <remarks>
        /// Updates the name of an existing inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;updateInboundPlanName&#x60;.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateInboundPlanNameAsync (string inboundPlanId, UpdateInboundPlanNameRequest body);

        /// <summary>
        /// updateInboundPlanName
        /// </summary>
        /// <remarks>
        /// Updates the name of an existing inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;updateInboundPlanName&#x60;.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateInboundPlanNameAsyncWithHttpInfo (string inboundPlanId, UpdateInboundPlanNameRequest body);
        /// <summary>
        /// updateItemComplianceDetails
        /// </summary>
        /// <remarks>
        /// Update compliance details for a list of MSKUs. The details provided here are only used for the India (IN - A21TJRUUN4KGV) marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <param name="body">The body of the request to &#x60;updateItemComplianceDetails&#x60;.</param>
        /// <returns>Task of UpdateItemComplianceDetailsResponse</returns>
        System.Threading.Tasks.Task<UpdateItemComplianceDetailsResponse> UpdateItemComplianceDetailsAsync (string marketplaceId, UpdateItemComplianceDetailsRequest body);

        /// <summary>
        /// updateItemComplianceDetails
        /// </summary>
        /// <remarks>
        /// Update compliance details for a list of MSKUs. The details provided here are only used for the India (IN - A21TJRUUN4KGV) marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <param name="body">The body of the request to &#x60;updateItemComplianceDetails&#x60;.</param>
        /// <returns>Task of ApiResponse (UpdateItemComplianceDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateItemComplianceDetailsResponse>> UpdateItemComplianceDetailsAsyncWithHttpInfo (string marketplaceId, UpdateItemComplianceDetailsRequest body);
        /// <summary>
        /// updateShipmentName
        /// </summary>
        /// <remarks>
        /// Updates the name of an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentName&#x60;.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateShipmentNameAsync (string inboundPlanId, string shipmentId, UpdateShipmentNameRequest body);

        /// <summary>
        /// updateShipmentName
        /// </summary>
        /// <remarks>
        /// Updates the name of an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentName&#x60;.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateShipmentNameAsyncWithHttpInfo (string inboundPlanId, string shipmentId, UpdateShipmentNameRequest body);
        /// <summary>
        /// updateShipmentSourceAddress
        /// </summary>
        /// <remarks>
        /// Updates the source address of an existing shipment. The shipment source address can only be updated prior to the confirmation of the shipment carriers. As a result of the updated source address, existing transportation options will be invalidated and will need to be regenerated to capture the potential difference in transportation options and quotes due to the new source address.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentSourceAddress&#x60;.</param>
        /// <returns>Task of UpdateShipmentSourceAddressResponse</returns>
        System.Threading.Tasks.Task<UpdateShipmentSourceAddressResponse> UpdateShipmentSourceAddressAsync (string inboundPlanId, string shipmentId, UpdateShipmentSourceAddressRequest body);

        /// <summary>
        /// updateShipmentSourceAddress
        /// </summary>
        /// <remarks>
        /// Updates the source address of an existing shipment. The shipment source address can only be updated prior to the confirmation of the shipment carriers. As a result of the updated source address, existing transportation options will be invalidated and will need to be regenerated to capture the potential difference in transportation options and quotes due to the new source address.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentSourceAddress&#x60;.</param>
        /// <returns>Task of ApiResponse (UpdateShipmentSourceAddressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateShipmentSourceAddressResponse>> UpdateShipmentSourceAddressAsyncWithHttpInfo (string inboundPlanId, string shipmentId, UpdateShipmentSourceAddressRequest body);
        /// <summary>
        /// updateShipmentTrackingDetails
        /// </summary>
        /// <remarks>
        /// Updates a shipment&#39;s tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentTrackingDetails&#x60;.</param>
        /// <returns>Task of UpdateShipmentTrackingDetailsResponse</returns>
        System.Threading.Tasks.Task<UpdateShipmentTrackingDetailsResponse> UpdateShipmentTrackingDetailsAsync (string inboundPlanId, string shipmentId, UpdateShipmentTrackingDetailsRequest body);

        /// <summary>
        /// updateShipmentTrackingDetails
        /// </summary>
        /// <remarks>
        /// Updates a shipment&#39;s tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentTrackingDetails&#x60;.</param>
        /// <returns>Task of ApiResponse (UpdateShipmentTrackingDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateShipmentTrackingDetailsResponse>> UpdateShipmentTrackingDetailsAsyncWithHttpInfo (string inboundPlanId, string shipmentId, UpdateShipmentTrackingDetailsRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FulfillmentInboundApi : IFulfillmentInboundApi
    {
        private Amazon.SellingPartnerAPIAA.Clients.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentInboundApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FulfillmentInboundApi(Amazon.SellingPartnerAPIAA.Clients.Client.Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = Amazon.SellingPartnerAPIAA.Clients.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Amazon.SellingPartnerAPIAA.Clients.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Amazon.SellingPartnerAPIAA.Clients.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// cancelInboundPlan Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>CancelInboundPlanResponse</returns>
        public CancelInboundPlanResponse CancelInboundPlan (string inboundPlanId)
        {
             ApiResponse<CancelInboundPlanResponse> localVarResponse = CancelInboundPlanWithHttpInfo(inboundPlanId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// cancelInboundPlan Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>ApiResponse of CancelInboundPlanResponse</returns>
        public ApiResponse< CancelInboundPlanResponse > CancelInboundPlanWithHttpInfo (string inboundPlanId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->CancelInboundPlan");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/cancellation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelInboundPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelInboundPlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelInboundPlanResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelInboundPlanResponse)));
        }

        /// <summary>
        /// cancelInboundPlan Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>Task of CancelInboundPlanResponse</returns>
        public async System.Threading.Tasks.Task<CancelInboundPlanResponse> CancelInboundPlanAsync (string inboundPlanId)
        {
             ApiResponse<CancelInboundPlanResponse> localVarResponse = await CancelInboundPlanAsyncWithHttpInfo(inboundPlanId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// cancelInboundPlan Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>Task of ApiResponse (CancelInboundPlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelInboundPlanResponse>> CancelInboundPlanAsyncWithHttpInfo (string inboundPlanId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->CancelInboundPlan");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/cancellation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelInboundPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelInboundPlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelInboundPlanResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelInboundPlanResponse)));
        }

        /// <summary>
        /// cancelSelfShipAppointment Cancels a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;cancelSelfShipAppointment&#x60;.</param>
        /// <returns>CancelSelfShipAppointmentResponse</returns>
        public CancelSelfShipAppointmentResponse CancelSelfShipAppointment (string inboundPlanId, string shipmentId, CancelSelfShipAppointmentRequest body)
        {
             ApiResponse<CancelSelfShipAppointmentResponse> localVarResponse = CancelSelfShipAppointmentWithHttpInfo(inboundPlanId, shipmentId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// cancelSelfShipAppointment Cancels a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;cancelSelfShipAppointment&#x60;.</param>
        /// <returns>ApiResponse of CancelSelfShipAppointmentResponse</returns>
        public ApiResponse< CancelSelfShipAppointmentResponse > CancelSelfShipAppointmentWithHttpInfo (string inboundPlanId, string shipmentId, CancelSelfShipAppointmentRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->CancelSelfShipAppointment");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->CancelSelfShipAppointment");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->CancelSelfShipAppointment");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentCancellation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSelfShipAppointment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelSelfShipAppointmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelSelfShipAppointmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelSelfShipAppointmentResponse)));
        }

        /// <summary>
        /// cancelSelfShipAppointment Cancels a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;cancelSelfShipAppointment&#x60;.</param>
        /// <returns>Task of CancelSelfShipAppointmentResponse</returns>
        public async System.Threading.Tasks.Task<CancelSelfShipAppointmentResponse> CancelSelfShipAppointmentAsync (string inboundPlanId, string shipmentId, CancelSelfShipAppointmentRequest body)
        {
             ApiResponse<CancelSelfShipAppointmentResponse> localVarResponse = await CancelSelfShipAppointmentAsyncWithHttpInfo(inboundPlanId, shipmentId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// cancelSelfShipAppointment Cancels a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;cancelSelfShipAppointment&#x60;.</param>
        /// <returns>Task of ApiResponse (CancelSelfShipAppointmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelSelfShipAppointmentResponse>> CancelSelfShipAppointmentAsyncWithHttpInfo (string inboundPlanId, string shipmentId, CancelSelfShipAppointmentRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->CancelSelfShipAppointment");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->CancelSelfShipAppointment");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->CancelSelfShipAppointment");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentCancellation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSelfShipAppointment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelSelfShipAppointmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelSelfShipAppointmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelSelfShipAppointmentResponse)));
        }

        /// <summary>
        /// confirmDeliveryWindowOptions Confirms the delivery window option for chosen shipment within an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new delivery window options cannot be generated, but the chosen delivery window option can be updated before shipment closure. The window is used to provide the expected time when a shipment will arrive at the warehouse. All transportation options which have the program &#x60;CONFIRMED_DELIVERY_WINDOW&#x60; require a delivery window to be confirmed prior to transportation option confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to confirm the delivery window option for.</param>
        /// <param name="deliveryWindowOptionId">The id of the delivery window option to be confirmed.</param>
        /// <returns>ConfirmDeliveryWindowOptionsResponse</returns>
        public ConfirmDeliveryWindowOptionsResponse ConfirmDeliveryWindowOptions (string inboundPlanId, string shipmentId, string deliveryWindowOptionId)
        {
             ApiResponse<ConfirmDeliveryWindowOptionsResponse> localVarResponse = ConfirmDeliveryWindowOptionsWithHttpInfo(inboundPlanId, shipmentId, deliveryWindowOptionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// confirmDeliveryWindowOptions Confirms the delivery window option for chosen shipment within an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new delivery window options cannot be generated, but the chosen delivery window option can be updated before shipment closure. The window is used to provide the expected time when a shipment will arrive at the warehouse. All transportation options which have the program &#x60;CONFIRMED_DELIVERY_WINDOW&#x60; require a delivery window to be confirmed prior to transportation option confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to confirm the delivery window option for.</param>
        /// <param name="deliveryWindowOptionId">The id of the delivery window option to be confirmed.</param>
        /// <returns>ApiResponse of ConfirmDeliveryWindowOptionsResponse</returns>
        public ApiResponse< ConfirmDeliveryWindowOptionsResponse > ConfirmDeliveryWindowOptionsWithHttpInfo (string inboundPlanId, string shipmentId, string deliveryWindowOptionId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ConfirmDeliveryWindowOptions");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->ConfirmDeliveryWindowOptions");
            // verify the required parameter 'deliveryWindowOptionId' is set
            if (deliveryWindowOptionId == null)
                throw new ApiException(400, "Missing required parameter 'deliveryWindowOptionId' when calling FulfillmentInboundApi->ConfirmDeliveryWindowOptions");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (deliveryWindowOptionId != null) localVarPathParams.Add("deliveryWindowOptionId", this.Configuration.ApiClient.ParameterToString(deliveryWindowOptionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmDeliveryWindowOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmDeliveryWindowOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmDeliveryWindowOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmDeliveryWindowOptionsResponse)));
        }

        /// <summary>
        /// confirmDeliveryWindowOptions Confirms the delivery window option for chosen shipment within an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new delivery window options cannot be generated, but the chosen delivery window option can be updated before shipment closure. The window is used to provide the expected time when a shipment will arrive at the warehouse. All transportation options which have the program &#x60;CONFIRMED_DELIVERY_WINDOW&#x60; require a delivery window to be confirmed prior to transportation option confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to confirm the delivery window option for.</param>
        /// <param name="deliveryWindowOptionId">The id of the delivery window option to be confirmed.</param>
        /// <returns>Task of ConfirmDeliveryWindowOptionsResponse</returns>
        public async System.Threading.Tasks.Task<ConfirmDeliveryWindowOptionsResponse> ConfirmDeliveryWindowOptionsAsync (string inboundPlanId, string shipmentId, string deliveryWindowOptionId)
        {
             ApiResponse<ConfirmDeliveryWindowOptionsResponse> localVarResponse = await ConfirmDeliveryWindowOptionsAsyncWithHttpInfo(inboundPlanId, shipmentId, deliveryWindowOptionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// confirmDeliveryWindowOptions Confirms the delivery window option for chosen shipment within an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new delivery window options cannot be generated, but the chosen delivery window option can be updated before shipment closure. The window is used to provide the expected time when a shipment will arrive at the warehouse. All transportation options which have the program &#x60;CONFIRMED_DELIVERY_WINDOW&#x60; require a delivery window to be confirmed prior to transportation option confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to confirm the delivery window option for.</param>
        /// <param name="deliveryWindowOptionId">The id of the delivery window option to be confirmed.</param>
        /// <returns>Task of ApiResponse (ConfirmDeliveryWindowOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConfirmDeliveryWindowOptionsResponse>> ConfirmDeliveryWindowOptionsAsyncWithHttpInfo (string inboundPlanId, string shipmentId, string deliveryWindowOptionId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ConfirmDeliveryWindowOptions");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->ConfirmDeliveryWindowOptions");
            // verify the required parameter 'deliveryWindowOptionId' is set
            if (deliveryWindowOptionId == null)
                throw new ApiException(400, "Missing required parameter 'deliveryWindowOptionId' when calling FulfillmentInboundApi->ConfirmDeliveryWindowOptions");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (deliveryWindowOptionId != null) localVarPathParams.Add("deliveryWindowOptionId", this.Configuration.ApiClient.ParameterToString(deliveryWindowOptionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmDeliveryWindowOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmDeliveryWindowOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmDeliveryWindowOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmDeliveryWindowOptionsResponse)));
        }

        /// <summary>
        /// confirmPackingOption Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingOptionId">Identifier of a packing option.</param>
        /// <returns>ConfirmPackingOptionResponse</returns>
        public ConfirmPackingOptionResponse ConfirmPackingOption (string inboundPlanId, string packingOptionId)
        {
             ApiResponse<ConfirmPackingOptionResponse> localVarResponse = ConfirmPackingOptionWithHttpInfo(inboundPlanId, packingOptionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// confirmPackingOption Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingOptionId">Identifier of a packing option.</param>
        /// <returns>ApiResponse of ConfirmPackingOptionResponse</returns>
        public ApiResponse< ConfirmPackingOptionResponse > ConfirmPackingOptionWithHttpInfo (string inboundPlanId, string packingOptionId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ConfirmPackingOption");
            // verify the required parameter 'packingOptionId' is set
            if (packingOptionId == null)
                throw new ApiException(400, "Missing required parameter 'packingOptionId' when calling FulfillmentInboundApi->ConfirmPackingOption");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (packingOptionId != null) localVarPathParams.Add("packingOptionId", this.Configuration.ApiClient.ParameterToString(packingOptionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmPackingOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmPackingOptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmPackingOptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmPackingOptionResponse)));
        }

        /// <summary>
        /// confirmPackingOption Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingOptionId">Identifier of a packing option.</param>
        /// <returns>Task of ConfirmPackingOptionResponse</returns>
        public async System.Threading.Tasks.Task<ConfirmPackingOptionResponse> ConfirmPackingOptionAsync (string inboundPlanId, string packingOptionId)
        {
             ApiResponse<ConfirmPackingOptionResponse> localVarResponse = await ConfirmPackingOptionAsyncWithHttpInfo(inboundPlanId, packingOptionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// confirmPackingOption Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingOptionId">Identifier of a packing option.</param>
        /// <returns>Task of ApiResponse (ConfirmPackingOptionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConfirmPackingOptionResponse>> ConfirmPackingOptionAsyncWithHttpInfo (string inboundPlanId, string packingOptionId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ConfirmPackingOption");
            // verify the required parameter 'packingOptionId' is set
            if (packingOptionId == null)
                throw new ApiException(400, "Missing required parameter 'packingOptionId' when calling FulfillmentInboundApi->ConfirmPackingOption");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (packingOptionId != null) localVarPathParams.Add("packingOptionId", this.Configuration.ApiClient.ParameterToString(packingOptionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmPackingOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmPackingOptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmPackingOptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmPackingOptionResponse)));
        }

        /// <summary>
        /// confirmPlacementOption Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="placementOptionId">The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.</param>
        /// <returns>ConfirmPlacementOptionResponse</returns>
        public ConfirmPlacementOptionResponse ConfirmPlacementOption (string inboundPlanId, string placementOptionId)
        {
             ApiResponse<ConfirmPlacementOptionResponse> localVarResponse = ConfirmPlacementOptionWithHttpInfo(inboundPlanId, placementOptionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// confirmPlacementOption Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="placementOptionId">The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.</param>
        /// <returns>ApiResponse of ConfirmPlacementOptionResponse</returns>
        public ApiResponse< ConfirmPlacementOptionResponse > ConfirmPlacementOptionWithHttpInfo (string inboundPlanId, string placementOptionId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ConfirmPlacementOption");
            // verify the required parameter 'placementOptionId' is set
            if (placementOptionId == null)
                throw new ApiException(400, "Missing required parameter 'placementOptionId' when calling FulfillmentInboundApi->ConfirmPlacementOption");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (placementOptionId != null) localVarPathParams.Add("placementOptionId", this.Configuration.ApiClient.ParameterToString(placementOptionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmPlacementOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmPlacementOptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmPlacementOptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmPlacementOptionResponse)));
        }

        /// <summary>
        /// confirmPlacementOption Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="placementOptionId">The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.</param>
        /// <returns>Task of ConfirmPlacementOptionResponse</returns>
        public async System.Threading.Tasks.Task<ConfirmPlacementOptionResponse> ConfirmPlacementOptionAsync (string inboundPlanId, string placementOptionId)
        {
             ApiResponse<ConfirmPlacementOptionResponse> localVarResponse = await ConfirmPlacementOptionAsyncWithHttpInfo(inboundPlanId, placementOptionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// confirmPlacementOption Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="placementOptionId">The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.</param>
        /// <returns>Task of ApiResponse (ConfirmPlacementOptionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConfirmPlacementOptionResponse>> ConfirmPlacementOptionAsyncWithHttpInfo (string inboundPlanId, string placementOptionId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ConfirmPlacementOption");
            // verify the required parameter 'placementOptionId' is set
            if (placementOptionId == null)
                throw new ApiException(400, "Missing required parameter 'placementOptionId' when calling FulfillmentInboundApi->ConfirmPlacementOption");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (placementOptionId != null) localVarPathParams.Add("placementOptionId", this.Configuration.ApiClient.ParameterToString(placementOptionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmPlacementOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmPlacementOptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmPlacementOptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmPlacementOptionResponse)));
        }

        /// <summary>
        /// confirmShipmentContentUpdatePreview Confirm a shipment content update preview and accept the changes in transportation cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="contentUpdatePreviewId">Identifier of a content update preview.</param>
        /// <returns>ConfirmShipmentContentUpdatePreviewResponse</returns>
        public ConfirmShipmentContentUpdatePreviewResponse ConfirmShipmentContentUpdatePreview (string inboundPlanId, string shipmentId, string contentUpdatePreviewId)
        {
             ApiResponse<ConfirmShipmentContentUpdatePreviewResponse> localVarResponse = ConfirmShipmentContentUpdatePreviewWithHttpInfo(inboundPlanId, shipmentId, contentUpdatePreviewId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// confirmShipmentContentUpdatePreview Confirm a shipment content update preview and accept the changes in transportation cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="contentUpdatePreviewId">Identifier of a content update preview.</param>
        /// <returns>ApiResponse of ConfirmShipmentContentUpdatePreviewResponse</returns>
        public ApiResponse< ConfirmShipmentContentUpdatePreviewResponse > ConfirmShipmentContentUpdatePreviewWithHttpInfo (string inboundPlanId, string shipmentId, string contentUpdatePreviewId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ConfirmShipmentContentUpdatePreview");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->ConfirmShipmentContentUpdatePreview");
            // verify the required parameter 'contentUpdatePreviewId' is set
            if (contentUpdatePreviewId == null)
                throw new ApiException(400, "Missing required parameter 'contentUpdatePreviewId' when calling FulfillmentInboundApi->ConfirmShipmentContentUpdatePreview");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (contentUpdatePreviewId != null) localVarPathParams.Add("contentUpdatePreviewId", this.Configuration.ApiClient.ParameterToString(contentUpdatePreviewId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmShipmentContentUpdatePreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmShipmentContentUpdatePreviewResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmShipmentContentUpdatePreviewResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmShipmentContentUpdatePreviewResponse)));
        }

        /// <summary>
        /// confirmShipmentContentUpdatePreview Confirm a shipment content update preview and accept the changes in transportation cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="contentUpdatePreviewId">Identifier of a content update preview.</param>
        /// <returns>Task of ConfirmShipmentContentUpdatePreviewResponse</returns>
        public async System.Threading.Tasks.Task<ConfirmShipmentContentUpdatePreviewResponse> ConfirmShipmentContentUpdatePreviewAsync (string inboundPlanId, string shipmentId, string contentUpdatePreviewId)
        {
             ApiResponse<ConfirmShipmentContentUpdatePreviewResponse> localVarResponse = await ConfirmShipmentContentUpdatePreviewAsyncWithHttpInfo(inboundPlanId, shipmentId, contentUpdatePreviewId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// confirmShipmentContentUpdatePreview Confirm a shipment content update preview and accept the changes in transportation cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="contentUpdatePreviewId">Identifier of a content update preview.</param>
        /// <returns>Task of ApiResponse (ConfirmShipmentContentUpdatePreviewResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConfirmShipmentContentUpdatePreviewResponse>> ConfirmShipmentContentUpdatePreviewAsyncWithHttpInfo (string inboundPlanId, string shipmentId, string contentUpdatePreviewId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ConfirmShipmentContentUpdatePreview");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->ConfirmShipmentContentUpdatePreview");
            // verify the required parameter 'contentUpdatePreviewId' is set
            if (contentUpdatePreviewId == null)
                throw new ApiException(400, "Missing required parameter 'contentUpdatePreviewId' when calling FulfillmentInboundApi->ConfirmShipmentContentUpdatePreview");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (contentUpdatePreviewId != null) localVarPathParams.Add("contentUpdatePreviewId", this.Configuration.ApiClient.ParameterToString(contentUpdatePreviewId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmShipmentContentUpdatePreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmShipmentContentUpdatePreviewResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmShipmentContentUpdatePreviewResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmShipmentContentUpdatePreviewResponse)));
        }

        /// <summary>
        /// confirmTransportationOptions Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;confirmTransportationOptions&#x60;.</param>
        /// <returns>ConfirmTransportationOptionsResponse</returns>
        public ConfirmTransportationOptionsResponse ConfirmTransportationOptions (string inboundPlanId, ConfirmTransportationOptionsRequest body)
        {
             ApiResponse<ConfirmTransportationOptionsResponse> localVarResponse = ConfirmTransportationOptionsWithHttpInfo(inboundPlanId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// confirmTransportationOptions Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;confirmTransportationOptions&#x60;.</param>
        /// <returns>ApiResponse of ConfirmTransportationOptionsResponse</returns>
        public ApiResponse< ConfirmTransportationOptionsResponse > ConfirmTransportationOptionsWithHttpInfo (string inboundPlanId, ConfirmTransportationOptionsRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ConfirmTransportationOptions");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->ConfirmTransportationOptions");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmTransportationOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmTransportationOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmTransportationOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmTransportationOptionsResponse)));
        }

        /// <summary>
        /// confirmTransportationOptions Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;confirmTransportationOptions&#x60;.</param>
        /// <returns>Task of ConfirmTransportationOptionsResponse</returns>
        public async System.Threading.Tasks.Task<ConfirmTransportationOptionsResponse> ConfirmTransportationOptionsAsync (string inboundPlanId, ConfirmTransportationOptionsRequest body)
        {
             ApiResponse<ConfirmTransportationOptionsResponse> localVarResponse = await ConfirmTransportationOptionsAsyncWithHttpInfo(inboundPlanId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// confirmTransportationOptions Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;confirmTransportationOptions&#x60;.</param>
        /// <returns>Task of ApiResponse (ConfirmTransportationOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConfirmTransportationOptionsResponse>> ConfirmTransportationOptionsAsyncWithHttpInfo (string inboundPlanId, ConfirmTransportationOptionsRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ConfirmTransportationOptions");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->ConfirmTransportationOptions");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmTransportationOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmTransportationOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmTransportationOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmTransportationOptionsResponse)));
        }

        /// <summary>
        /// createInboundPlan Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon&#39;s fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;createInboundPlan&#x60;.</param>
        /// <returns>CreateInboundPlanResponse</returns>
        public CreateInboundPlanResponse CreateInboundPlan (CreateInboundPlanRequest body)
        {
             ApiResponse<CreateInboundPlanResponse> localVarResponse = CreateInboundPlanWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// createInboundPlan Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon&#39;s fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;createInboundPlan&#x60;.</param>
        /// <returns>ApiResponse of CreateInboundPlanResponse</returns>
        public ApiResponse< CreateInboundPlanResponse > CreateInboundPlanWithHttpInfo (CreateInboundPlanRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->CreateInboundPlan");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInboundPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateInboundPlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateInboundPlanResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateInboundPlanResponse)));
        }

        /// <summary>
        /// createInboundPlan Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon&#39;s fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;createInboundPlan&#x60;.</param>
        /// <returns>Task of CreateInboundPlanResponse</returns>
        public async System.Threading.Tasks.Task<CreateInboundPlanResponse> CreateInboundPlanAsync (CreateInboundPlanRequest body)
        {
             ApiResponse<CreateInboundPlanResponse> localVarResponse = await CreateInboundPlanAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// createInboundPlan Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon&#39;s fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;createInboundPlan&#x60;.</param>
        /// <returns>Task of ApiResponse (CreateInboundPlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateInboundPlanResponse>> CreateInboundPlanAsyncWithHttpInfo (CreateInboundPlanRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->CreateInboundPlan");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInboundPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateInboundPlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateInboundPlanResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateInboundPlanResponse)));
        }

        /// <summary>
        /// createMarketplaceItemLabels For a given marketplace - creates labels for a list of MSKUs.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;createMarketplaceItemLabels&#x60;.</param>
        /// <returns>CreateMarketplaceItemLabelsResponse</returns>
        public CreateMarketplaceItemLabelsResponse CreateMarketplaceItemLabels (CreateMarketplaceItemLabelsRequest body)
        {
             ApiResponse<CreateMarketplaceItemLabelsResponse> localVarResponse = CreateMarketplaceItemLabelsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// createMarketplaceItemLabels For a given marketplace - creates labels for a list of MSKUs.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;createMarketplaceItemLabels&#x60;.</param>
        /// <returns>ApiResponse of CreateMarketplaceItemLabelsResponse</returns>
        public ApiResponse< CreateMarketplaceItemLabelsResponse > CreateMarketplaceItemLabelsWithHttpInfo (CreateMarketplaceItemLabelsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->CreateMarketplaceItemLabels");

            var localVarPath = "/inbound/fba/2024-03-20/items/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMarketplaceItemLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateMarketplaceItemLabelsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateMarketplaceItemLabelsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateMarketplaceItemLabelsResponse)));
        }

        /// <summary>
        /// createMarketplaceItemLabels For a given marketplace - creates labels for a list of MSKUs.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;createMarketplaceItemLabels&#x60;.</param>
        /// <returns>Task of CreateMarketplaceItemLabelsResponse</returns>
        public async System.Threading.Tasks.Task<CreateMarketplaceItemLabelsResponse> CreateMarketplaceItemLabelsAsync (CreateMarketplaceItemLabelsRequest body)
        {
             ApiResponse<CreateMarketplaceItemLabelsResponse> localVarResponse = await CreateMarketplaceItemLabelsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// createMarketplaceItemLabels For a given marketplace - creates labels for a list of MSKUs.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;createMarketplaceItemLabels&#x60;.</param>
        /// <returns>Task of ApiResponse (CreateMarketplaceItemLabelsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateMarketplaceItemLabelsResponse>> CreateMarketplaceItemLabelsAsyncWithHttpInfo (CreateMarketplaceItemLabelsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->CreateMarketplaceItemLabels");

            var localVarPath = "/inbound/fba/2024-03-20/items/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMarketplaceItemLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateMarketplaceItemLabelsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateMarketplaceItemLabelsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateMarketplaceItemLabelsResponse)));
        }

        /// <summary>
        /// generateDeliveryWindowOptions Generates available delivery window options for a given shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to generate delivery window options for.</param>
        /// <returns>GenerateDeliveryWindowOptionsResponse</returns>
        public GenerateDeliveryWindowOptionsResponse GenerateDeliveryWindowOptions (string inboundPlanId, string shipmentId)
        {
             ApiResponse<GenerateDeliveryWindowOptionsResponse> localVarResponse = GenerateDeliveryWindowOptionsWithHttpInfo(inboundPlanId, shipmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// generateDeliveryWindowOptions Generates available delivery window options for a given shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to generate delivery window options for.</param>
        /// <returns>ApiResponse of GenerateDeliveryWindowOptionsResponse</returns>
        public ApiResponse< GenerateDeliveryWindowOptionsResponse > GenerateDeliveryWindowOptionsWithHttpInfo (string inboundPlanId, string shipmentId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GenerateDeliveryWindowOptions");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->GenerateDeliveryWindowOptions");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateDeliveryWindowOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenerateDeliveryWindowOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenerateDeliveryWindowOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenerateDeliveryWindowOptionsResponse)));
        }

        /// <summary>
        /// generateDeliveryWindowOptions Generates available delivery window options for a given shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to generate delivery window options for.</param>
        /// <returns>Task of GenerateDeliveryWindowOptionsResponse</returns>
        public async System.Threading.Tasks.Task<GenerateDeliveryWindowOptionsResponse> GenerateDeliveryWindowOptionsAsync (string inboundPlanId, string shipmentId)
        {
             ApiResponse<GenerateDeliveryWindowOptionsResponse> localVarResponse = await GenerateDeliveryWindowOptionsAsyncWithHttpInfo(inboundPlanId, shipmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// generateDeliveryWindowOptions Generates available delivery window options for a given shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to generate delivery window options for.</param>
        /// <returns>Task of ApiResponse (GenerateDeliveryWindowOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GenerateDeliveryWindowOptionsResponse>> GenerateDeliveryWindowOptionsAsyncWithHttpInfo (string inboundPlanId, string shipmentId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GenerateDeliveryWindowOptions");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->GenerateDeliveryWindowOptions");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateDeliveryWindowOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenerateDeliveryWindowOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenerateDeliveryWindowOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenerateDeliveryWindowOptionsResponse)));
        }

        /// <summary>
        /// generatePackingOptions Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>GeneratePackingOptionsResponse</returns>
        public GeneratePackingOptionsResponse GeneratePackingOptions (string inboundPlanId)
        {
             ApiResponse<GeneratePackingOptionsResponse> localVarResponse = GeneratePackingOptionsWithHttpInfo(inboundPlanId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// generatePackingOptions Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>ApiResponse of GeneratePackingOptionsResponse</returns>
        public ApiResponse< GeneratePackingOptionsResponse > GeneratePackingOptionsWithHttpInfo (string inboundPlanId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GeneratePackingOptions");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeneratePackingOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeneratePackingOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GeneratePackingOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeneratePackingOptionsResponse)));
        }

        /// <summary>
        /// generatePackingOptions Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>Task of GeneratePackingOptionsResponse</returns>
        public async System.Threading.Tasks.Task<GeneratePackingOptionsResponse> GeneratePackingOptionsAsync (string inboundPlanId)
        {
             ApiResponse<GeneratePackingOptionsResponse> localVarResponse = await GeneratePackingOptionsAsyncWithHttpInfo(inboundPlanId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// generatePackingOptions Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>Task of ApiResponse (GeneratePackingOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeneratePackingOptionsResponse>> GeneratePackingOptionsAsyncWithHttpInfo (string inboundPlanId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GeneratePackingOptions");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeneratePackingOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeneratePackingOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GeneratePackingOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeneratePackingOptionsResponse)));
        }

        /// <summary>
        /// generatePlacementOptions Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;generatePlacementOptions&#x60;.</param>
        /// <returns>GeneratePlacementOptionsResponse</returns>
        public GeneratePlacementOptionsResponse GeneratePlacementOptions (string inboundPlanId, GeneratePlacementOptionsRequest body)
        {
             ApiResponse<GeneratePlacementOptionsResponse> localVarResponse = GeneratePlacementOptionsWithHttpInfo(inboundPlanId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// generatePlacementOptions Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;generatePlacementOptions&#x60;.</param>
        /// <returns>ApiResponse of GeneratePlacementOptionsResponse</returns>
        public ApiResponse< GeneratePlacementOptionsResponse > GeneratePlacementOptionsWithHttpInfo (string inboundPlanId, GeneratePlacementOptionsRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GeneratePlacementOptions");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->GeneratePlacementOptions");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeneratePlacementOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeneratePlacementOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GeneratePlacementOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeneratePlacementOptionsResponse)));
        }

        /// <summary>
        /// generatePlacementOptions Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;generatePlacementOptions&#x60;.</param>
        /// <returns>Task of GeneratePlacementOptionsResponse</returns>
        public async System.Threading.Tasks.Task<GeneratePlacementOptionsResponse> GeneratePlacementOptionsAsync (string inboundPlanId, GeneratePlacementOptionsRequest body)
        {
             ApiResponse<GeneratePlacementOptionsResponse> localVarResponse = await GeneratePlacementOptionsAsyncWithHttpInfo(inboundPlanId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// generatePlacementOptions Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;generatePlacementOptions&#x60;.</param>
        /// <returns>Task of ApiResponse (GeneratePlacementOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeneratePlacementOptionsResponse>> GeneratePlacementOptionsAsyncWithHttpInfo (string inboundPlanId, GeneratePlacementOptionsRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GeneratePlacementOptions");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->GeneratePlacementOptions");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeneratePlacementOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeneratePlacementOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GeneratePlacementOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeneratePlacementOptionsResponse)));
        }

        /// <summary>
        /// generateSelfShipAppointmentSlots Initiates the process of generating the appointment slots list.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;.</param>
        /// <returns>GenerateSelfShipAppointmentSlotsResponse</returns>
        public GenerateSelfShipAppointmentSlotsResponse GenerateSelfShipAppointmentSlots (string inboundPlanId, string shipmentId, GenerateSelfShipAppointmentSlotsRequest body)
        {
             ApiResponse<GenerateSelfShipAppointmentSlotsResponse> localVarResponse = GenerateSelfShipAppointmentSlotsWithHttpInfo(inboundPlanId, shipmentId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// generateSelfShipAppointmentSlots Initiates the process of generating the appointment slots list.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;.</param>
        /// <returns>ApiResponse of GenerateSelfShipAppointmentSlotsResponse</returns>
        public ApiResponse< GenerateSelfShipAppointmentSlotsResponse > GenerateSelfShipAppointmentSlotsWithHttpInfo (string inboundPlanId, string shipmentId, GenerateSelfShipAppointmentSlotsRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GenerateSelfShipAppointmentSlots");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->GenerateSelfShipAppointmentSlots");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->GenerateSelfShipAppointmentSlots");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateSelfShipAppointmentSlots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenerateSelfShipAppointmentSlotsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenerateSelfShipAppointmentSlotsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenerateSelfShipAppointmentSlotsResponse)));
        }

        /// <summary>
        /// generateSelfShipAppointmentSlots Initiates the process of generating the appointment slots list.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;.</param>
        /// <returns>Task of GenerateSelfShipAppointmentSlotsResponse</returns>
        public async System.Threading.Tasks.Task<GenerateSelfShipAppointmentSlotsResponse> GenerateSelfShipAppointmentSlotsAsync (string inboundPlanId, string shipmentId, GenerateSelfShipAppointmentSlotsRequest body)
        {
             ApiResponse<GenerateSelfShipAppointmentSlotsResponse> localVarResponse = await GenerateSelfShipAppointmentSlotsAsyncWithHttpInfo(inboundPlanId, shipmentId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// generateSelfShipAppointmentSlots Initiates the process of generating the appointment slots list.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;.</param>
        /// <returns>Task of ApiResponse (GenerateSelfShipAppointmentSlotsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GenerateSelfShipAppointmentSlotsResponse>> GenerateSelfShipAppointmentSlotsAsyncWithHttpInfo (string inboundPlanId, string shipmentId, GenerateSelfShipAppointmentSlotsRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GenerateSelfShipAppointmentSlots");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->GenerateSelfShipAppointmentSlots");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->GenerateSelfShipAppointmentSlots");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateSelfShipAppointmentSlots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenerateSelfShipAppointmentSlotsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenerateSelfShipAppointmentSlotsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenerateSelfShipAppointmentSlotsResponse)));
        }

        /// <summary>
        /// generateShipmentContentUpdatePreviews Generate a shipment content update preview given a set of intended boxes and/or items for a shipment with a confirmed carrier. The shipment content update preview will be viewable with the updated costs and contents prior to confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;.</param>
        /// <returns>GenerateShipmentContentUpdatePreviewsResponse</returns>
        public GenerateShipmentContentUpdatePreviewsResponse GenerateShipmentContentUpdatePreviews (string inboundPlanId, string shipmentId, GenerateShipmentContentUpdatePreviewsRequest body)
        {
             ApiResponse<GenerateShipmentContentUpdatePreviewsResponse> localVarResponse = GenerateShipmentContentUpdatePreviewsWithHttpInfo(inboundPlanId, shipmentId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// generateShipmentContentUpdatePreviews Generate a shipment content update preview given a set of intended boxes and/or items for a shipment with a confirmed carrier. The shipment content update preview will be viewable with the updated costs and contents prior to confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;.</param>
        /// <returns>ApiResponse of GenerateShipmentContentUpdatePreviewsResponse</returns>
        public ApiResponse< GenerateShipmentContentUpdatePreviewsResponse > GenerateShipmentContentUpdatePreviewsWithHttpInfo (string inboundPlanId, string shipmentId, GenerateShipmentContentUpdatePreviewsRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GenerateShipmentContentUpdatePreviews");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->GenerateShipmentContentUpdatePreviews");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->GenerateShipmentContentUpdatePreviews");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateShipmentContentUpdatePreviews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenerateShipmentContentUpdatePreviewsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenerateShipmentContentUpdatePreviewsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenerateShipmentContentUpdatePreviewsResponse)));
        }

        /// <summary>
        /// generateShipmentContentUpdatePreviews Generate a shipment content update preview given a set of intended boxes and/or items for a shipment with a confirmed carrier. The shipment content update preview will be viewable with the updated costs and contents prior to confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;.</param>
        /// <returns>Task of GenerateShipmentContentUpdatePreviewsResponse</returns>
        public async System.Threading.Tasks.Task<GenerateShipmentContentUpdatePreviewsResponse> GenerateShipmentContentUpdatePreviewsAsync (string inboundPlanId, string shipmentId, GenerateShipmentContentUpdatePreviewsRequest body)
        {
             ApiResponse<GenerateShipmentContentUpdatePreviewsResponse> localVarResponse = await GenerateShipmentContentUpdatePreviewsAsyncWithHttpInfo(inboundPlanId, shipmentId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// generateShipmentContentUpdatePreviews Generate a shipment content update preview given a set of intended boxes and/or items for a shipment with a confirmed carrier. The shipment content update preview will be viewable with the updated costs and contents prior to confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;.</param>
        /// <returns>Task of ApiResponse (GenerateShipmentContentUpdatePreviewsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GenerateShipmentContentUpdatePreviewsResponse>> GenerateShipmentContentUpdatePreviewsAsyncWithHttpInfo (string inboundPlanId, string shipmentId, GenerateShipmentContentUpdatePreviewsRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GenerateShipmentContentUpdatePreviews");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->GenerateShipmentContentUpdatePreviews");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->GenerateShipmentContentUpdatePreviews");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateShipmentContentUpdatePreviews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenerateShipmentContentUpdatePreviewsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenerateShipmentContentUpdatePreviewsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenerateShipmentContentUpdatePreviewsResponse)));
        }

        /// <summary>
        /// generateTransportationOptions Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;generateTransportationOptions&#x60;.</param>
        /// <returns>GenerateTransportationOptionsResponse</returns>
        public GenerateTransportationOptionsResponse GenerateTransportationOptions (string inboundPlanId, GenerateTransportationOptionsRequest body)
        {
             ApiResponse<GenerateTransportationOptionsResponse> localVarResponse = GenerateTransportationOptionsWithHttpInfo(inboundPlanId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// generateTransportationOptions Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;generateTransportationOptions&#x60;.</param>
        /// <returns>ApiResponse of GenerateTransportationOptionsResponse</returns>
        public ApiResponse< GenerateTransportationOptionsResponse > GenerateTransportationOptionsWithHttpInfo (string inboundPlanId, GenerateTransportationOptionsRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GenerateTransportationOptions");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->GenerateTransportationOptions");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateTransportationOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenerateTransportationOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenerateTransportationOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenerateTransportationOptionsResponse)));
        }

        /// <summary>
        /// generateTransportationOptions Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;generateTransportationOptions&#x60;.</param>
        /// <returns>Task of GenerateTransportationOptionsResponse</returns>
        public async System.Threading.Tasks.Task<GenerateTransportationOptionsResponse> GenerateTransportationOptionsAsync (string inboundPlanId, GenerateTransportationOptionsRequest body)
        {
             ApiResponse<GenerateTransportationOptionsResponse> localVarResponse = await GenerateTransportationOptionsAsyncWithHttpInfo(inboundPlanId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// generateTransportationOptions Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;generateTransportationOptions&#x60;.</param>
        /// <returns>Task of ApiResponse (GenerateTransportationOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GenerateTransportationOptionsResponse>> GenerateTransportationOptionsAsyncWithHttpInfo (string inboundPlanId, GenerateTransportationOptionsRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GenerateTransportationOptions");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->GenerateTransportationOptions");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateTransportationOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenerateTransportationOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenerateTransportationOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenerateTransportationOptionsResponse)));
        }

        /// <summary>
        /// getDeliveryChallanDocument Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <returns>GetDeliveryChallanDocumentResponse</returns>
        public GetDeliveryChallanDocumentResponse GetDeliveryChallanDocument (string inboundPlanId, string shipmentId)
        {
             ApiResponse<GetDeliveryChallanDocumentResponse> localVarResponse = GetDeliveryChallanDocumentWithHttpInfo(inboundPlanId, shipmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getDeliveryChallanDocument Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <returns>ApiResponse of GetDeliveryChallanDocumentResponse</returns>
        public ApiResponse< GetDeliveryChallanDocumentResponse > GetDeliveryChallanDocumentWithHttpInfo (string inboundPlanId, string shipmentId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GetDeliveryChallanDocument");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->GetDeliveryChallanDocument");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryChallanDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeliveryChallanDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDeliveryChallanDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDeliveryChallanDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDeliveryChallanDocumentResponse)));
        }

        /// <summary>
        /// getDeliveryChallanDocument Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <returns>Task of GetDeliveryChallanDocumentResponse</returns>
        public async System.Threading.Tasks.Task<GetDeliveryChallanDocumentResponse> GetDeliveryChallanDocumentAsync (string inboundPlanId, string shipmentId)
        {
             ApiResponse<GetDeliveryChallanDocumentResponse> localVarResponse = await GetDeliveryChallanDocumentAsyncWithHttpInfo(inboundPlanId, shipmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getDeliveryChallanDocument Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <returns>Task of ApiResponse (GetDeliveryChallanDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDeliveryChallanDocumentResponse>> GetDeliveryChallanDocumentAsyncWithHttpInfo (string inboundPlanId, string shipmentId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GetDeliveryChallanDocument");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->GetDeliveryChallanDocument");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryChallanDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeliveryChallanDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDeliveryChallanDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDeliveryChallanDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDeliveryChallanDocumentResponse)));
        }

        /// <summary>
        /// getInboundOperationStatus Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">Identifier of an asynchronous operation.</param>
        /// <returns>InboundOperationStatus</returns>
        public InboundOperationStatus GetInboundOperationStatus (string operationId)
        {
             ApiResponse<InboundOperationStatus> localVarResponse = GetInboundOperationStatusWithHttpInfo(operationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getInboundOperationStatus Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">Identifier of an asynchronous operation.</param>
        /// <returns>ApiResponse of InboundOperationStatus</returns>
        public ApiResponse< InboundOperationStatus > GetInboundOperationStatusWithHttpInfo (string operationId)
        {
            // verify the required parameter 'operationId' is set
            if (operationId == null)
                throw new ApiException(400, "Missing required parameter 'operationId' when calling FulfillmentInboundApi->GetInboundOperationStatus");

            var localVarPath = "/inbound/fba/2024-03-20/operations/{operationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (operationId != null) localVarPathParams.Add("operationId", this.Configuration.ApiClient.ParameterToString(operationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundOperationStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InboundOperationStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InboundOperationStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InboundOperationStatus)));
        }

        /// <summary>
        /// getInboundOperationStatus Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">Identifier of an asynchronous operation.</param>
        /// <returns>Task of InboundOperationStatus</returns>
        public async System.Threading.Tasks.Task<InboundOperationStatus> GetInboundOperationStatusAsync (string operationId)
        {
             ApiResponse<InboundOperationStatus> localVarResponse = await GetInboundOperationStatusAsyncWithHttpInfo(operationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getInboundOperationStatus Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">Identifier of an asynchronous operation.</param>
        /// <returns>Task of ApiResponse (InboundOperationStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InboundOperationStatus>> GetInboundOperationStatusAsyncWithHttpInfo (string operationId)
        {
            // verify the required parameter 'operationId' is set
            if (operationId == null)
                throw new ApiException(400, "Missing required parameter 'operationId' when calling FulfillmentInboundApi->GetInboundOperationStatus");

            var localVarPath = "/inbound/fba/2024-03-20/operations/{operationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (operationId != null) localVarPathParams.Add("operationId", this.Configuration.ApiClient.ParameterToString(operationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundOperationStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InboundOperationStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InboundOperationStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InboundOperationStatus)));
        }

        /// <summary>
        /// getInboundPlan Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>InboundPlan</returns>
        public InboundPlan GetInboundPlan (string inboundPlanId)
        {
             ApiResponse<InboundPlan> localVarResponse = GetInboundPlanWithHttpInfo(inboundPlanId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getInboundPlan Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>ApiResponse of InboundPlan</returns>
        public ApiResponse< InboundPlan > GetInboundPlanWithHttpInfo (string inboundPlanId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GetInboundPlan");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InboundPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InboundPlan) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InboundPlan)));
        }

        /// <summary>
        /// getInboundPlan Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>Task of InboundPlan</returns>
        public async System.Threading.Tasks.Task<InboundPlan> GetInboundPlanAsync (string inboundPlanId)
        {
             ApiResponse<InboundPlan> localVarResponse = await GetInboundPlanAsyncWithHttpInfo(inboundPlanId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getInboundPlan Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <returns>Task of ApiResponse (InboundPlan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InboundPlan>> GetInboundPlanAsyncWithHttpInfo (string inboundPlanId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GetInboundPlan");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InboundPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InboundPlan) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InboundPlan)));
        }

        /// <summary>
        /// getSelfShipAppointmentSlots Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>GetSelfShipAppointmentSlotsResponse</returns>
        public GetSelfShipAppointmentSlotsResponse GetSelfShipAppointmentSlots (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<GetSelfShipAppointmentSlotsResponse> localVarResponse = GetSelfShipAppointmentSlotsWithHttpInfo(inboundPlanId, shipmentId, pageSize, paginationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSelfShipAppointmentSlots Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of GetSelfShipAppointmentSlotsResponse</returns>
        public ApiResponse< GetSelfShipAppointmentSlotsResponse > GetSelfShipAppointmentSlotsWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GetSelfShipAppointmentSlots");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->GetSelfShipAppointmentSlots");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSelfShipAppointmentSlots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSelfShipAppointmentSlotsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSelfShipAppointmentSlotsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSelfShipAppointmentSlotsResponse)));
        }

        /// <summary>
        /// getSelfShipAppointmentSlots Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of GetSelfShipAppointmentSlotsResponse</returns>
        public async System.Threading.Tasks.Task<GetSelfShipAppointmentSlotsResponse> GetSelfShipAppointmentSlotsAsync (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<GetSelfShipAppointmentSlotsResponse> localVarResponse = await GetSelfShipAppointmentSlotsAsyncWithHttpInfo(inboundPlanId, shipmentId, pageSize, paginationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSelfShipAppointmentSlots Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (GetSelfShipAppointmentSlotsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSelfShipAppointmentSlotsResponse>> GetSelfShipAppointmentSlotsAsyncWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GetSelfShipAppointmentSlots");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->GetSelfShipAppointmentSlots");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSelfShipAppointmentSlots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSelfShipAppointmentSlotsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSelfShipAppointmentSlotsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSelfShipAppointmentSlotsResponse)));
        }

        /// <summary>
        /// getShipment Provides the full details for a specific shipment within an inbound plan. The &#x60;transportationOptionId&#x60; inside &#x60;acceptedTransportationSelection&#x60; can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <returns>Shipment</returns>
        public Shipment GetShipment (string inboundPlanId, string shipmentId)
        {
             ApiResponse<Shipment> localVarResponse = GetShipmentWithHttpInfo(inboundPlanId, shipmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getShipment Provides the full details for a specific shipment within an inbound plan. The &#x60;transportationOptionId&#x60; inside &#x60;acceptedTransportationSelection&#x60; can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <returns>ApiResponse of Shipment</returns>
        public ApiResponse< Shipment > GetShipmentWithHttpInfo (string inboundPlanId, string shipmentId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GetShipment");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->GetShipment");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Shipment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Shipment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Shipment)));
        }

        /// <summary>
        /// getShipment Provides the full details for a specific shipment within an inbound plan. The &#x60;transportationOptionId&#x60; inside &#x60;acceptedTransportationSelection&#x60; can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <returns>Task of Shipment</returns>
        public async System.Threading.Tasks.Task<Shipment> GetShipmentAsync (string inboundPlanId, string shipmentId)
        {
             ApiResponse<Shipment> localVarResponse = await GetShipmentAsyncWithHttpInfo(inboundPlanId, shipmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getShipment Provides the full details for a specific shipment within an inbound plan. The &#x60;transportationOptionId&#x60; inside &#x60;acceptedTransportationSelection&#x60; can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <returns>Task of ApiResponse (Shipment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Shipment>> GetShipmentAsyncWithHttpInfo (string inboundPlanId, string shipmentId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GetShipment");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->GetShipment");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Shipment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Shipment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Shipment)));
        }

        /// <summary>
        /// getShipmentContentUpdatePreview Retrieve a shipment content update preview which provides a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="contentUpdatePreviewId">Identifier of a content update preview.</param>
        /// <returns>ContentUpdatePreview</returns>
        public ContentUpdatePreview GetShipmentContentUpdatePreview (string inboundPlanId, string shipmentId, string contentUpdatePreviewId)
        {
             ApiResponse<ContentUpdatePreview> localVarResponse = GetShipmentContentUpdatePreviewWithHttpInfo(inboundPlanId, shipmentId, contentUpdatePreviewId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getShipmentContentUpdatePreview Retrieve a shipment content update preview which provides a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="contentUpdatePreviewId">Identifier of a content update preview.</param>
        /// <returns>ApiResponse of ContentUpdatePreview</returns>
        public ApiResponse< ContentUpdatePreview > GetShipmentContentUpdatePreviewWithHttpInfo (string inboundPlanId, string shipmentId, string contentUpdatePreviewId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GetShipmentContentUpdatePreview");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->GetShipmentContentUpdatePreview");
            // verify the required parameter 'contentUpdatePreviewId' is set
            if (contentUpdatePreviewId == null)
                throw new ApiException(400, "Missing required parameter 'contentUpdatePreviewId' when calling FulfillmentInboundApi->GetShipmentContentUpdatePreview");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (contentUpdatePreviewId != null) localVarPathParams.Add("contentUpdatePreviewId", this.Configuration.ApiClient.ParameterToString(contentUpdatePreviewId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipmentContentUpdatePreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContentUpdatePreview>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContentUpdatePreview) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContentUpdatePreview)));
        }

        /// <summary>
        /// getShipmentContentUpdatePreview Retrieve a shipment content update preview which provides a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="contentUpdatePreviewId">Identifier of a content update preview.</param>
        /// <returns>Task of ContentUpdatePreview</returns>
        public async System.Threading.Tasks.Task<ContentUpdatePreview> GetShipmentContentUpdatePreviewAsync (string inboundPlanId, string shipmentId, string contentUpdatePreviewId)
        {
             ApiResponse<ContentUpdatePreview> localVarResponse = await GetShipmentContentUpdatePreviewAsyncWithHttpInfo(inboundPlanId, shipmentId, contentUpdatePreviewId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getShipmentContentUpdatePreview Retrieve a shipment content update preview which provides a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="contentUpdatePreviewId">Identifier of a content update preview.</param>
        /// <returns>Task of ApiResponse (ContentUpdatePreview)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContentUpdatePreview>> GetShipmentContentUpdatePreviewAsyncWithHttpInfo (string inboundPlanId, string shipmentId, string contentUpdatePreviewId)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->GetShipmentContentUpdatePreview");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->GetShipmentContentUpdatePreview");
            // verify the required parameter 'contentUpdatePreviewId' is set
            if (contentUpdatePreviewId == null)
                throw new ApiException(400, "Missing required parameter 'contentUpdatePreviewId' when calling FulfillmentInboundApi->GetShipmentContentUpdatePreview");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (contentUpdatePreviewId != null) localVarPathParams.Add("contentUpdatePreviewId", this.Configuration.ApiClient.ParameterToString(contentUpdatePreviewId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipmentContentUpdatePreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContentUpdatePreview>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContentUpdatePreview) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContentUpdatePreview)));
        }

        /// <summary>
        /// listDeliveryWindowOptions Retrieves all delivery window options for a shipment. Delivery window options must first be generated by the &#x60;generateDeliveryWindowOptions&#x60; operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to get delivery window options for.</param>
        /// <param name="pageSize">The number of delivery window options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListDeliveryWindowOptionsResponse</returns>
        public ListDeliveryWindowOptionsResponse ListDeliveryWindowOptions (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListDeliveryWindowOptionsResponse> localVarResponse = ListDeliveryWindowOptionsWithHttpInfo(inboundPlanId, shipmentId, pageSize, paginationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// listDeliveryWindowOptions Retrieves all delivery window options for a shipment. Delivery window options must first be generated by the &#x60;generateDeliveryWindowOptions&#x60; operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to get delivery window options for.</param>
        /// <param name="pageSize">The number of delivery window options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListDeliveryWindowOptionsResponse</returns>
        public ApiResponse< ListDeliveryWindowOptionsResponse > ListDeliveryWindowOptionsWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListDeliveryWindowOptions");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->ListDeliveryWindowOptions");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDeliveryWindowOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListDeliveryWindowOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListDeliveryWindowOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListDeliveryWindowOptionsResponse)));
        }

        /// <summary>
        /// listDeliveryWindowOptions Retrieves all delivery window options for a shipment. Delivery window options must first be generated by the &#x60;generateDeliveryWindowOptions&#x60; operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to get delivery window options for.</param>
        /// <param name="pageSize">The number of delivery window options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListDeliveryWindowOptionsResponse</returns>
        public async System.Threading.Tasks.Task<ListDeliveryWindowOptionsResponse> ListDeliveryWindowOptionsAsync (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListDeliveryWindowOptionsResponse> localVarResponse = await ListDeliveryWindowOptionsAsyncWithHttpInfo(inboundPlanId, shipmentId, pageSize, paginationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// listDeliveryWindowOptions Retrieves all delivery window options for a shipment. Delivery window options must first be generated by the &#x60;generateDeliveryWindowOptions&#x60; operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">The shipment to get delivery window options for.</param>
        /// <param name="pageSize">The number of delivery window options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListDeliveryWindowOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListDeliveryWindowOptionsResponse>> ListDeliveryWindowOptionsAsyncWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListDeliveryWindowOptions");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->ListDeliveryWindowOptions");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDeliveryWindowOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListDeliveryWindowOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListDeliveryWindowOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListDeliveryWindowOptionsResponse)));
        }

        /// <summary>
        /// listInboundPlanBoxes Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListInboundPlanBoxesResponse</returns>
        public ListInboundPlanBoxesResponse ListInboundPlanBoxes (string inboundPlanId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListInboundPlanBoxesResponse> localVarResponse = ListInboundPlanBoxesWithHttpInfo(inboundPlanId, pageSize, paginationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// listInboundPlanBoxes Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListInboundPlanBoxesResponse</returns>
        public ApiResponse< ListInboundPlanBoxesResponse > ListInboundPlanBoxesWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListInboundPlanBoxes");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInboundPlanBoxes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListInboundPlanBoxesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListInboundPlanBoxesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListInboundPlanBoxesResponse)));
        }

        /// <summary>
        /// listInboundPlanBoxes Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListInboundPlanBoxesResponse</returns>
        public async System.Threading.Tasks.Task<ListInboundPlanBoxesResponse> ListInboundPlanBoxesAsync (string inboundPlanId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListInboundPlanBoxesResponse> localVarResponse = await ListInboundPlanBoxesAsyncWithHttpInfo(inboundPlanId, pageSize, paginationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// listInboundPlanBoxes Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListInboundPlanBoxesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListInboundPlanBoxesResponse>> ListInboundPlanBoxesAsyncWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListInboundPlanBoxes");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInboundPlanBoxes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListInboundPlanBoxesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListInboundPlanBoxesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListInboundPlanBoxesResponse)));
        }

        /// <summary>
        /// listInboundPlanItems Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListInboundPlanItemsResponse</returns>
        public ListInboundPlanItemsResponse ListInboundPlanItems (string inboundPlanId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListInboundPlanItemsResponse> localVarResponse = ListInboundPlanItemsWithHttpInfo(inboundPlanId, pageSize, paginationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// listInboundPlanItems Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListInboundPlanItemsResponse</returns>
        public ApiResponse< ListInboundPlanItemsResponse > ListInboundPlanItemsWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListInboundPlanItems");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInboundPlanItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListInboundPlanItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListInboundPlanItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListInboundPlanItemsResponse)));
        }

        /// <summary>
        /// listInboundPlanItems Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListInboundPlanItemsResponse</returns>
        public async System.Threading.Tasks.Task<ListInboundPlanItemsResponse> ListInboundPlanItemsAsync (string inboundPlanId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListInboundPlanItemsResponse> localVarResponse = await ListInboundPlanItemsAsyncWithHttpInfo(inboundPlanId, pageSize, paginationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// listInboundPlanItems Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListInboundPlanItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListInboundPlanItemsResponse>> ListInboundPlanItemsAsyncWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListInboundPlanItems");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInboundPlanItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListInboundPlanItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListInboundPlanItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListInboundPlanItemsResponse)));
        }

        /// <summary>
        /// listInboundPlanPallets Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of pallets to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListInboundPlanPalletsResponse</returns>
        public ListInboundPlanPalletsResponse ListInboundPlanPallets (string inboundPlanId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListInboundPlanPalletsResponse> localVarResponse = ListInboundPlanPalletsWithHttpInfo(inboundPlanId, pageSize, paginationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// listInboundPlanPallets Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of pallets to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListInboundPlanPalletsResponse</returns>
        public ApiResponse< ListInboundPlanPalletsResponse > ListInboundPlanPalletsWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListInboundPlanPallets");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInboundPlanPallets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListInboundPlanPalletsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListInboundPlanPalletsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListInboundPlanPalletsResponse)));
        }

        /// <summary>
        /// listInboundPlanPallets Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of pallets to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListInboundPlanPalletsResponse</returns>
        public async System.Threading.Tasks.Task<ListInboundPlanPalletsResponse> ListInboundPlanPalletsAsync (string inboundPlanId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListInboundPlanPalletsResponse> localVarResponse = await ListInboundPlanPalletsAsyncWithHttpInfo(inboundPlanId, pageSize, paginationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// listInboundPlanPallets Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of pallets to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListInboundPlanPalletsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListInboundPlanPalletsResponse>> ListInboundPlanPalletsAsyncWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListInboundPlanPallets");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInboundPlanPallets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListInboundPlanPalletsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListInboundPlanPalletsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListInboundPlanPalletsResponse)));
        }

        /// <summary>
        /// listInboundPlans Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of inbound plans to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <param name="status">The status of an inbound plan. (optional)</param>
        /// <param name="sortBy">Sort by field. (optional)</param>
        /// <param name="sortOrder">The sort order. (optional)</param>
        /// <returns>ListInboundPlansResponse</returns>
        public ListInboundPlansResponse ListInboundPlans (int? pageSize = null, string paginationToken = null, string status = null, string sortBy = null, string sortOrder = null)
        {
             ApiResponse<ListInboundPlansResponse> localVarResponse = ListInboundPlansWithHttpInfo(pageSize, paginationToken, status, sortBy, sortOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// listInboundPlans Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of inbound plans to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <param name="status">The status of an inbound plan. (optional)</param>
        /// <param name="sortBy">Sort by field. (optional)</param>
        /// <param name="sortOrder">The sort order. (optional)</param>
        /// <returns>ApiResponse of ListInboundPlansResponse</returns>
        public ApiResponse< ListInboundPlansResponse > ListInboundPlansWithHttpInfo (int? pageSize = null, string paginationToken = null, string status = null, string sortBy = null, string sortOrder = null)
        {

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInboundPlans", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListInboundPlansResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListInboundPlansResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListInboundPlansResponse)));
        }

        /// <summary>
        /// listInboundPlans Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of inbound plans to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <param name="status">The status of an inbound plan. (optional)</param>
        /// <param name="sortBy">Sort by field. (optional)</param>
        /// <param name="sortOrder">The sort order. (optional)</param>
        /// <returns>Task of ListInboundPlansResponse</returns>
        public async System.Threading.Tasks.Task<ListInboundPlansResponse> ListInboundPlansAsync (int? pageSize = null, string paginationToken = null, string status = null, string sortBy = null, string sortOrder = null)
        {
             ApiResponse<ListInboundPlansResponse> localVarResponse = await ListInboundPlansAsyncWithHttpInfo(pageSize, paginationToken, status, sortBy, sortOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// listInboundPlans Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of inbound plans to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <param name="status">The status of an inbound plan. (optional)</param>
        /// <param name="sortBy">Sort by field. (optional)</param>
        /// <param name="sortOrder">The sort order. (optional)</param>
        /// <returns>Task of ApiResponse (ListInboundPlansResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListInboundPlansResponse>> ListInboundPlansAsyncWithHttpInfo (int? pageSize = null, string paginationToken = null, string status = null, string sortBy = null, string sortOrder = null)
        {

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInboundPlans", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListInboundPlansResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListInboundPlansResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListInboundPlansResponse)));
        }

        /// <summary>
        /// listItemComplianceDetails List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mskus">A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.</param>
        /// <param name="marketplaceId">The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>ListItemComplianceDetailsResponse</returns>
        public ListItemComplianceDetailsResponse ListItemComplianceDetails (List<string> mskus, string marketplaceId)
        {
             ApiResponse<ListItemComplianceDetailsResponse> localVarResponse = ListItemComplianceDetailsWithHttpInfo(mskus, marketplaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// listItemComplianceDetails List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mskus">A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.</param>
        /// <param name="marketplaceId">The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>ApiResponse of ListItemComplianceDetailsResponse</returns>
        public ApiResponse< ListItemComplianceDetailsResponse > ListItemComplianceDetailsWithHttpInfo (List<string> mskus, string marketplaceId)
        {
            // verify the required parameter 'mskus' is set
            if (mskus == null)
                throw new ApiException(400, "Missing required parameter 'mskus' when calling FulfillmentInboundApi->ListItemComplianceDetails");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FulfillmentInboundApi->ListItemComplianceDetails");

            var localVarPath = "/inbound/fba/2024-03-20/items/compliance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mskus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "mskus", mskus)); // query parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListItemComplianceDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListItemComplianceDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListItemComplianceDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListItemComplianceDetailsResponse)));
        }

        /// <summary>
        /// listItemComplianceDetails List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mskus">A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.</param>
        /// <param name="marketplaceId">The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>Task of ListItemComplianceDetailsResponse</returns>
        public async System.Threading.Tasks.Task<ListItemComplianceDetailsResponse> ListItemComplianceDetailsAsync (List<string> mskus, string marketplaceId)
        {
             ApiResponse<ListItemComplianceDetailsResponse> localVarResponse = await ListItemComplianceDetailsAsyncWithHttpInfo(mskus, marketplaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// listItemComplianceDetails List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mskus">A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.</param>
        /// <param name="marketplaceId">The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>Task of ApiResponse (ListItemComplianceDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListItemComplianceDetailsResponse>> ListItemComplianceDetailsAsyncWithHttpInfo (List<string> mskus, string marketplaceId)
        {
            // verify the required parameter 'mskus' is set
            if (mskus == null)
                throw new ApiException(400, "Missing required parameter 'mskus' when calling FulfillmentInboundApi->ListItemComplianceDetails");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FulfillmentInboundApi->ListItemComplianceDetails");

            var localVarPath = "/inbound/fba/2024-03-20/items/compliance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mskus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "mskus", mskus)); // query parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListItemComplianceDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListItemComplianceDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListItemComplianceDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListItemComplianceDetailsResponse)));
        }

        /// <summary>
        /// listPackingGroupBoxes Retrieves a page of boxes from a given packing group. These boxes were previously provided through the &#x60;setPackingInformation&#x60; operation. This API is used for workflows where boxes are packed before Amazon determines shipment splits.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingGroupId">Identifier of a packing group.</param>
        /// <param name="pageSize">The number of packing group boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListPackingGroupBoxesResponse</returns>
        public ListPackingGroupBoxesResponse ListPackingGroupBoxes (string inboundPlanId, string packingGroupId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListPackingGroupBoxesResponse> localVarResponse = ListPackingGroupBoxesWithHttpInfo(inboundPlanId, packingGroupId, pageSize, paginationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// listPackingGroupBoxes Retrieves a page of boxes from a given packing group. These boxes were previously provided through the &#x60;setPackingInformation&#x60; operation. This API is used for workflows where boxes are packed before Amazon determines shipment splits.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingGroupId">Identifier of a packing group.</param>
        /// <param name="pageSize">The number of packing group boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListPackingGroupBoxesResponse</returns>
        public ApiResponse< ListPackingGroupBoxesResponse > ListPackingGroupBoxesWithHttpInfo (string inboundPlanId, string packingGroupId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListPackingGroupBoxes");
            // verify the required parameter 'packingGroupId' is set
            if (packingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'packingGroupId' when calling FulfillmentInboundApi->ListPackingGroupBoxes");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (packingGroupId != null) localVarPathParams.Add("packingGroupId", this.Configuration.ApiClient.ParameterToString(packingGroupId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPackingGroupBoxes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPackingGroupBoxesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListPackingGroupBoxesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPackingGroupBoxesResponse)));
        }

        /// <summary>
        /// listPackingGroupBoxes Retrieves a page of boxes from a given packing group. These boxes were previously provided through the &#x60;setPackingInformation&#x60; operation. This API is used for workflows where boxes are packed before Amazon determines shipment splits.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingGroupId">Identifier of a packing group.</param>
        /// <param name="pageSize">The number of packing group boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListPackingGroupBoxesResponse</returns>
        public async System.Threading.Tasks.Task<ListPackingGroupBoxesResponse> ListPackingGroupBoxesAsync (string inboundPlanId, string packingGroupId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListPackingGroupBoxesResponse> localVarResponse = await ListPackingGroupBoxesAsyncWithHttpInfo(inboundPlanId, packingGroupId, pageSize, paginationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// listPackingGroupBoxes Retrieves a page of boxes from a given packing group. These boxes were previously provided through the &#x60;setPackingInformation&#x60; operation. This API is used for workflows where boxes are packed before Amazon determines shipment splits.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingGroupId">Identifier of a packing group.</param>
        /// <param name="pageSize">The number of packing group boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListPackingGroupBoxesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListPackingGroupBoxesResponse>> ListPackingGroupBoxesAsyncWithHttpInfo (string inboundPlanId, string packingGroupId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListPackingGroupBoxes");
            // verify the required parameter 'packingGroupId' is set
            if (packingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'packingGroupId' when calling FulfillmentInboundApi->ListPackingGroupBoxes");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (packingGroupId != null) localVarPathParams.Add("packingGroupId", this.Configuration.ApiClient.ParameterToString(packingGroupId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPackingGroupBoxes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPackingGroupBoxesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListPackingGroupBoxesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPackingGroupBoxesResponse)));
        }

        /// <summary>
        /// listPackingGroupItems Retrieves a page of items in a given packing group. Packing options must first be generated by the corresponding operation before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingGroupId">Identifier of a packing group.</param>
        /// <param name="pageSize">The number of packing group items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListPackingGroupItemsResponse</returns>
        public ListPackingGroupItemsResponse ListPackingGroupItems (string inboundPlanId, string packingGroupId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListPackingGroupItemsResponse> localVarResponse = ListPackingGroupItemsWithHttpInfo(inboundPlanId, packingGroupId, pageSize, paginationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// listPackingGroupItems Retrieves a page of items in a given packing group. Packing options must first be generated by the corresponding operation before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingGroupId">Identifier of a packing group.</param>
        /// <param name="pageSize">The number of packing group items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListPackingGroupItemsResponse</returns>
        public ApiResponse< ListPackingGroupItemsResponse > ListPackingGroupItemsWithHttpInfo (string inboundPlanId, string packingGroupId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListPackingGroupItems");
            // verify the required parameter 'packingGroupId' is set
            if (packingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'packingGroupId' when calling FulfillmentInboundApi->ListPackingGroupItems");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (packingGroupId != null) localVarPathParams.Add("packingGroupId", this.Configuration.ApiClient.ParameterToString(packingGroupId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPackingGroupItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPackingGroupItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListPackingGroupItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPackingGroupItemsResponse)));
        }

        /// <summary>
        /// listPackingGroupItems Retrieves a page of items in a given packing group. Packing options must first be generated by the corresponding operation before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingGroupId">Identifier of a packing group.</param>
        /// <param name="pageSize">The number of packing group items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListPackingGroupItemsResponse</returns>
        public async System.Threading.Tasks.Task<ListPackingGroupItemsResponse> ListPackingGroupItemsAsync (string inboundPlanId, string packingGroupId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListPackingGroupItemsResponse> localVarResponse = await ListPackingGroupItemsAsyncWithHttpInfo(inboundPlanId, packingGroupId, pageSize, paginationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// listPackingGroupItems Retrieves a page of items in a given packing group. Packing options must first be generated by the corresponding operation before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="packingGroupId">Identifier of a packing group.</param>
        /// <param name="pageSize">The number of packing group items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListPackingGroupItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListPackingGroupItemsResponse>> ListPackingGroupItemsAsyncWithHttpInfo (string inboundPlanId, string packingGroupId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListPackingGroupItems");
            // verify the required parameter 'packingGroupId' is set
            if (packingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'packingGroupId' when calling FulfillmentInboundApi->ListPackingGroupItems");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (packingGroupId != null) localVarPathParams.Add("packingGroupId", this.Configuration.ApiClient.ParameterToString(packingGroupId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPackingGroupItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPackingGroupItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListPackingGroupItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPackingGroupItemsResponse)));
        }

        /// <summary>
        /// listPackingOptions Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of packing options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListPackingOptionsResponse</returns>
        public ListPackingOptionsResponse ListPackingOptions (string inboundPlanId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListPackingOptionsResponse> localVarResponse = ListPackingOptionsWithHttpInfo(inboundPlanId, pageSize, paginationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// listPackingOptions Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of packing options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListPackingOptionsResponse</returns>
        public ApiResponse< ListPackingOptionsResponse > ListPackingOptionsWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListPackingOptions");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPackingOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPackingOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListPackingOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPackingOptionsResponse)));
        }

        /// <summary>
        /// listPackingOptions Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of packing options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListPackingOptionsResponse</returns>
        public async System.Threading.Tasks.Task<ListPackingOptionsResponse> ListPackingOptionsAsync (string inboundPlanId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListPackingOptionsResponse> localVarResponse = await ListPackingOptionsAsyncWithHttpInfo(inboundPlanId, pageSize, paginationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// listPackingOptions Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of packing options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListPackingOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListPackingOptionsResponse>> ListPackingOptionsAsyncWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListPackingOptions");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPackingOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPackingOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListPackingOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPackingOptionsResponse)));
        }

        /// <summary>
        /// listPlacementOptions Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of placement options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListPlacementOptionsResponse</returns>
        public ListPlacementOptionsResponse ListPlacementOptions (string inboundPlanId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListPlacementOptionsResponse> localVarResponse = ListPlacementOptionsWithHttpInfo(inboundPlanId, pageSize, paginationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// listPlacementOptions Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of placement options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListPlacementOptionsResponse</returns>
        public ApiResponse< ListPlacementOptionsResponse > ListPlacementOptionsWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListPlacementOptions");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPlacementOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPlacementOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListPlacementOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPlacementOptionsResponse)));
        }

        /// <summary>
        /// listPlacementOptions Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of placement options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListPlacementOptionsResponse</returns>
        public async System.Threading.Tasks.Task<ListPlacementOptionsResponse> ListPlacementOptionsAsync (string inboundPlanId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListPlacementOptionsResponse> localVarResponse = await ListPlacementOptionsAsyncWithHttpInfo(inboundPlanId, pageSize, paginationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// listPlacementOptions Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of placement options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListPlacementOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListPlacementOptionsResponse>> ListPlacementOptionsAsyncWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListPlacementOptions");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPlacementOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPlacementOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListPlacementOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPlacementOptionsResponse)));
        }

        /// <summary>
        /// listPrepDetails Get preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <param name="mskus">A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.</param>
        /// <returns>ListPrepDetailsResponse</returns>
        public ListPrepDetailsResponse ListPrepDetails (string marketplaceId, List<string> mskus)
        {
             ApiResponse<ListPrepDetailsResponse> localVarResponse = ListPrepDetailsWithHttpInfo(marketplaceId, mskus);
             return localVarResponse.Data;
        }

        /// <summary>
        /// listPrepDetails Get preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <param name="mskus">A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.</param>
        /// <returns>ApiResponse of ListPrepDetailsResponse</returns>
        public ApiResponse< ListPrepDetailsResponse > ListPrepDetailsWithHttpInfo (string marketplaceId, List<string> mskus)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FulfillmentInboundApi->ListPrepDetails");
            // verify the required parameter 'mskus' is set
            if (mskus == null)
                throw new ApiException(400, "Missing required parameter 'mskus' when calling FulfillmentInboundApi->ListPrepDetails");

            var localVarPath = "/inbound/fba/2024-03-20/items/prepDetails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (mskus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "mskus", mskus)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPrepDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPrepDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListPrepDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPrepDetailsResponse)));
        }

        /// <summary>
        /// listPrepDetails Get preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <param name="mskus">A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.</param>
        /// <returns>Task of ListPrepDetailsResponse</returns>
        public async System.Threading.Tasks.Task<ListPrepDetailsResponse> ListPrepDetailsAsync (string marketplaceId, List<string> mskus)
        {
             ApiResponse<ListPrepDetailsResponse> localVarResponse = await ListPrepDetailsAsyncWithHttpInfo(marketplaceId, mskus);
             return localVarResponse.Data;

        }

        /// <summary>
        /// listPrepDetails Get preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <param name="mskus">A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.</param>
        /// <returns>Task of ApiResponse (ListPrepDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListPrepDetailsResponse>> ListPrepDetailsAsyncWithHttpInfo (string marketplaceId, List<string> mskus)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FulfillmentInboundApi->ListPrepDetails");
            // verify the required parameter 'mskus' is set
            if (mskus == null)
                throw new ApiException(400, "Missing required parameter 'mskus' when calling FulfillmentInboundApi->ListPrepDetails");

            var localVarPath = "/inbound/fba/2024-03-20/items/prepDetails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (mskus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "mskus", mskus)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPrepDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPrepDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListPrepDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPrepDetailsResponse)));
        }

        /// <summary>
        /// listShipmentBoxes Provides a paginated list of box packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListShipmentBoxesResponse</returns>
        public ListShipmentBoxesResponse ListShipmentBoxes (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListShipmentBoxesResponse> localVarResponse = ListShipmentBoxesWithHttpInfo(inboundPlanId, shipmentId, pageSize, paginationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// listShipmentBoxes Provides a paginated list of box packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListShipmentBoxesResponse</returns>
        public ApiResponse< ListShipmentBoxesResponse > ListShipmentBoxesWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListShipmentBoxes");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->ListShipmentBoxes");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListShipmentBoxes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListShipmentBoxesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListShipmentBoxesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListShipmentBoxesResponse)));
        }

        /// <summary>
        /// listShipmentBoxes Provides a paginated list of box packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListShipmentBoxesResponse</returns>
        public async System.Threading.Tasks.Task<ListShipmentBoxesResponse> ListShipmentBoxesAsync (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListShipmentBoxesResponse> localVarResponse = await ListShipmentBoxesAsyncWithHttpInfo(inboundPlanId, shipmentId, pageSize, paginationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// listShipmentBoxes Provides a paginated list of box packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of boxes to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListShipmentBoxesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListShipmentBoxesResponse>> ListShipmentBoxesAsyncWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListShipmentBoxes");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->ListShipmentBoxes");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListShipmentBoxes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListShipmentBoxesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListShipmentBoxesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListShipmentBoxesResponse)));
        }

        /// <summary>
        /// listShipmentContentUpdatePreviews Retrieve a paginated list of shipment content update previews for a given shipment. The shipment content update preview is a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of content update previews to return. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListShipmentContentUpdatePreviewsResponse</returns>
        public ListShipmentContentUpdatePreviewsResponse ListShipmentContentUpdatePreviews (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListShipmentContentUpdatePreviewsResponse> localVarResponse = ListShipmentContentUpdatePreviewsWithHttpInfo(inboundPlanId, shipmentId, pageSize, paginationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// listShipmentContentUpdatePreviews Retrieve a paginated list of shipment content update previews for a given shipment. The shipment content update preview is a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of content update previews to return. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListShipmentContentUpdatePreviewsResponse</returns>
        public ApiResponse< ListShipmentContentUpdatePreviewsResponse > ListShipmentContentUpdatePreviewsWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListShipmentContentUpdatePreviews");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->ListShipmentContentUpdatePreviews");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListShipmentContentUpdatePreviews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListShipmentContentUpdatePreviewsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListShipmentContentUpdatePreviewsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListShipmentContentUpdatePreviewsResponse)));
        }

        /// <summary>
        /// listShipmentContentUpdatePreviews Retrieve a paginated list of shipment content update previews for a given shipment. The shipment content update preview is a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of content update previews to return. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListShipmentContentUpdatePreviewsResponse</returns>
        public async System.Threading.Tasks.Task<ListShipmentContentUpdatePreviewsResponse> ListShipmentContentUpdatePreviewsAsync (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListShipmentContentUpdatePreviewsResponse> localVarResponse = await ListShipmentContentUpdatePreviewsAsyncWithHttpInfo(inboundPlanId, shipmentId, pageSize, paginationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// listShipmentContentUpdatePreviews Retrieve a paginated list of shipment content update previews for a given shipment. The shipment content update preview is a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of content update previews to return. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListShipmentContentUpdatePreviewsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListShipmentContentUpdatePreviewsResponse>> ListShipmentContentUpdatePreviewsAsyncWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListShipmentContentUpdatePreviews");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->ListShipmentContentUpdatePreviews");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListShipmentContentUpdatePreviews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListShipmentContentUpdatePreviewsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListShipmentContentUpdatePreviewsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListShipmentContentUpdatePreviewsResponse)));
        }

        /// <summary>
        /// listShipmentItems Provides a paginated list of item packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListShipmentItemsResponse</returns>
        public ListShipmentItemsResponse ListShipmentItems (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListShipmentItemsResponse> localVarResponse = ListShipmentItemsWithHttpInfo(inboundPlanId, shipmentId, pageSize, paginationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// listShipmentItems Provides a paginated list of item packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListShipmentItemsResponse</returns>
        public ApiResponse< ListShipmentItemsResponse > ListShipmentItemsWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListShipmentItems");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->ListShipmentItems");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListShipmentItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListShipmentItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListShipmentItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListShipmentItemsResponse)));
        }

        /// <summary>
        /// listShipmentItems Provides a paginated list of item packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListShipmentItemsResponse</returns>
        public async System.Threading.Tasks.Task<ListShipmentItemsResponse> ListShipmentItemsAsync (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListShipmentItemsResponse> localVarResponse = await ListShipmentItemsAsyncWithHttpInfo(inboundPlanId, shipmentId, pageSize, paginationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// listShipmentItems Provides a paginated list of item packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of items to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListShipmentItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListShipmentItemsResponse>> ListShipmentItemsAsyncWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListShipmentItems");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->ListShipmentItems");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListShipmentItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListShipmentItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListShipmentItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListShipmentItemsResponse)));
        }

        /// <summary>
        /// listShipmentPallets Provides a paginated list of pallet packages in a shipment. A palletized shipment will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of pallets to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ListShipmentPalletsResponse</returns>
        public ListShipmentPalletsResponse ListShipmentPallets (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListShipmentPalletsResponse> localVarResponse = ListShipmentPalletsWithHttpInfo(inboundPlanId, shipmentId, pageSize, paginationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// listShipmentPallets Provides a paginated list of pallet packages in a shipment. A palletized shipment will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of pallets to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>ApiResponse of ListShipmentPalletsResponse</returns>
        public ApiResponse< ListShipmentPalletsResponse > ListShipmentPalletsWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListShipmentPallets");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->ListShipmentPallets");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/pallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListShipmentPallets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListShipmentPalletsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListShipmentPalletsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListShipmentPalletsResponse)));
        }

        /// <summary>
        /// listShipmentPallets Provides a paginated list of pallet packages in a shipment. A palletized shipment will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of pallets to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ListShipmentPalletsResponse</returns>
        public async System.Threading.Tasks.Task<ListShipmentPalletsResponse> ListShipmentPalletsAsync (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
             ApiResponse<ListShipmentPalletsResponse> localVarResponse = await ListShipmentPalletsAsyncWithHttpInfo(inboundPlanId, shipmentId, pageSize, paginationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// listShipmentPallets Provides a paginated list of pallet packages in a shipment. A palletized shipment will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="pageSize">The number of pallets to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <returns>Task of ApiResponse (ListShipmentPalletsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListShipmentPalletsResponse>> ListShipmentPalletsAsyncWithHttpInfo (string inboundPlanId, string shipmentId, int? pageSize = null, string paginationToken = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListShipmentPallets");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->ListShipmentPallets");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/pallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListShipmentPallets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListShipmentPalletsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListShipmentPalletsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListShipmentPalletsResponse)));
        }

        /// <summary>
        /// listTransportationOptions Retrieves all transportation options for a shipment. Transportation options must first be generated by the &#x60;generateTransportationOptions&#x60; operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of transportation options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <param name="placementOptionId">The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)</param>
        /// <param name="shipmentId">The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)</param>
        /// <returns>ListTransportationOptionsResponse</returns>
        public ListTransportationOptionsResponse ListTransportationOptions (string inboundPlanId, int? pageSize = null, string paginationToken = null, string placementOptionId = null, string shipmentId = null)
        {
             ApiResponse<ListTransportationOptionsResponse> localVarResponse = ListTransportationOptionsWithHttpInfo(inboundPlanId, pageSize, paginationToken, placementOptionId, shipmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// listTransportationOptions Retrieves all transportation options for a shipment. Transportation options must first be generated by the &#x60;generateTransportationOptions&#x60; operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of transportation options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <param name="placementOptionId">The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)</param>
        /// <param name="shipmentId">The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)</param>
        /// <returns>ApiResponse of ListTransportationOptionsResponse</returns>
        public ApiResponse< ListTransportationOptionsResponse > ListTransportationOptionsWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null, string placementOptionId = null, string shipmentId = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListTransportationOptions");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter
            if (placementOptionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "placementOptionId", placementOptionId)); // query parameter
            if (shipmentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipmentId", shipmentId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTransportationOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListTransportationOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListTransportationOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListTransportationOptionsResponse)));
        }

        /// <summary>
        /// listTransportationOptions Retrieves all transportation options for a shipment. Transportation options must first be generated by the &#x60;generateTransportationOptions&#x60; operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of transportation options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <param name="placementOptionId">The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)</param>
        /// <param name="shipmentId">The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)</param>
        /// <returns>Task of ListTransportationOptionsResponse</returns>
        public async System.Threading.Tasks.Task<ListTransportationOptionsResponse> ListTransportationOptionsAsync (string inboundPlanId, int? pageSize = null, string paginationToken = null, string placementOptionId = null, string shipmentId = null)
        {
             ApiResponse<ListTransportationOptionsResponse> localVarResponse = await ListTransportationOptionsAsyncWithHttpInfo(inboundPlanId, pageSize, paginationToken, placementOptionId, shipmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// listTransportationOptions Retrieves all transportation options for a shipment. Transportation options must first be generated by the &#x60;generateTransportationOptions&#x60; operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="pageSize">The number of transportation options to return in the response matching the given query. (optional, default to 10)</param>
        /// <param name="paginationToken">A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)</param>
        /// <param name="placementOptionId">The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)</param>
        /// <param name="shipmentId">The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)</param>
        /// <returns>Task of ApiResponse (ListTransportationOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListTransportationOptionsResponse>> ListTransportationOptionsAsyncWithHttpInfo (string inboundPlanId, int? pageSize = null, string paginationToken = null, string placementOptionId = null, string shipmentId = null)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ListTransportationOptions");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (paginationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationToken", paginationToken)); // query parameter
            if (placementOptionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "placementOptionId", placementOptionId)); // query parameter
            if (shipmentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipmentId", shipmentId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTransportationOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListTransportationOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListTransportationOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListTransportationOptionsResponse)));
        }

        /// <summary>
        /// scheduleSelfShipAppointment Confirms or reschedules a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="slotId">An identifier to a self-ship appointment slot.</param>
        /// <param name="body">The body of the request to &#x60;scheduleSelfShipAppointment&#x60;.</param>
        /// <returns>ScheduleSelfShipAppointmentResponse</returns>
        public ScheduleSelfShipAppointmentResponse ScheduleSelfShipAppointment (string inboundPlanId, string shipmentId, string slotId, ScheduleSelfShipAppointmentRequest body)
        {
             ApiResponse<ScheduleSelfShipAppointmentResponse> localVarResponse = ScheduleSelfShipAppointmentWithHttpInfo(inboundPlanId, shipmentId, slotId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// scheduleSelfShipAppointment Confirms or reschedules a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="slotId">An identifier to a self-ship appointment slot.</param>
        /// <param name="body">The body of the request to &#x60;scheduleSelfShipAppointment&#x60;.</param>
        /// <returns>ApiResponse of ScheduleSelfShipAppointmentResponse</returns>
        public ApiResponse< ScheduleSelfShipAppointmentResponse > ScheduleSelfShipAppointmentWithHttpInfo (string inboundPlanId, string shipmentId, string slotId, ScheduleSelfShipAppointmentRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ScheduleSelfShipAppointment");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->ScheduleSelfShipAppointment");
            // verify the required parameter 'slotId' is set
            if (slotId == null)
                throw new ApiException(400, "Missing required parameter 'slotId' when calling FulfillmentInboundApi->ScheduleSelfShipAppointment");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->ScheduleSelfShipAppointment");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots/{slotId}/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (slotId != null) localVarPathParams.Add("slotId", this.Configuration.ApiClient.ParameterToString(slotId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScheduleSelfShipAppointment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduleSelfShipAppointmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScheduleSelfShipAppointmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduleSelfShipAppointmentResponse)));
        }

        /// <summary>
        /// scheduleSelfShipAppointment Confirms or reschedules a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="slotId">An identifier to a self-ship appointment slot.</param>
        /// <param name="body">The body of the request to &#x60;scheduleSelfShipAppointment&#x60;.</param>
        /// <returns>Task of ScheduleSelfShipAppointmentResponse</returns>
        public async System.Threading.Tasks.Task<ScheduleSelfShipAppointmentResponse> ScheduleSelfShipAppointmentAsync (string inboundPlanId, string shipmentId, string slotId, ScheduleSelfShipAppointmentRequest body)
        {
             ApiResponse<ScheduleSelfShipAppointmentResponse> localVarResponse = await ScheduleSelfShipAppointmentAsyncWithHttpInfo(inboundPlanId, shipmentId, slotId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// scheduleSelfShipAppointment Confirms or reschedules a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="slotId">An identifier to a self-ship appointment slot.</param>
        /// <param name="body">The body of the request to &#x60;scheduleSelfShipAppointment&#x60;.</param>
        /// <returns>Task of ApiResponse (ScheduleSelfShipAppointmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScheduleSelfShipAppointmentResponse>> ScheduleSelfShipAppointmentAsyncWithHttpInfo (string inboundPlanId, string shipmentId, string slotId, ScheduleSelfShipAppointmentRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->ScheduleSelfShipAppointment");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->ScheduleSelfShipAppointment");
            // verify the required parameter 'slotId' is set
            if (slotId == null)
                throw new ApiException(400, "Missing required parameter 'slotId' when calling FulfillmentInboundApi->ScheduleSelfShipAppointment");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->ScheduleSelfShipAppointment");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots/{slotId}/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (slotId != null) localVarPathParams.Add("slotId", this.Configuration.ApiClient.ParameterToString(slotId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScheduleSelfShipAppointment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduleSelfShipAppointmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScheduleSelfShipAppointmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduleSelfShipAppointmentResponse)));
        }

        /// <summary>
        /// setPackingInformation Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;setPackingInformation&#x60;.</param>
        /// <returns>SetPackingInformationResponse</returns>
        public SetPackingInformationResponse SetPackingInformation (string inboundPlanId, SetPackingInformationRequest body)
        {
             ApiResponse<SetPackingInformationResponse> localVarResponse = SetPackingInformationWithHttpInfo(inboundPlanId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// setPackingInformation Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;setPackingInformation&#x60;.</param>
        /// <returns>ApiResponse of SetPackingInformationResponse</returns>
        public ApiResponse< SetPackingInformationResponse > SetPackingInformationWithHttpInfo (string inboundPlanId, SetPackingInformationRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->SetPackingInformation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->SetPackingInformation");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetPackingInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetPackingInformationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetPackingInformationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetPackingInformationResponse)));
        }

        /// <summary>
        /// setPackingInformation Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;setPackingInformation&#x60;.</param>
        /// <returns>Task of SetPackingInformationResponse</returns>
        public async System.Threading.Tasks.Task<SetPackingInformationResponse> SetPackingInformationAsync (string inboundPlanId, SetPackingInformationRequest body)
        {
             ApiResponse<SetPackingInformationResponse> localVarResponse = await SetPackingInformationAsyncWithHttpInfo(inboundPlanId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// setPackingInformation Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;setPackingInformation&#x60;.</param>
        /// <returns>Task of ApiResponse (SetPackingInformationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SetPackingInformationResponse>> SetPackingInformationAsyncWithHttpInfo (string inboundPlanId, SetPackingInformationRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->SetPackingInformation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->SetPackingInformation");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetPackingInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetPackingInformationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetPackingInformationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetPackingInformationResponse)));
        }

        /// <summary>
        /// setPrepDetails Set the preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;setPrepDetails&#x60;.</param>
        /// <returns>SetPrepDetailsResponse</returns>
        public SetPrepDetailsResponse SetPrepDetails (SetPrepDetailsRequest body)
        {
             ApiResponse<SetPrepDetailsResponse> localVarResponse = SetPrepDetailsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// setPrepDetails Set the preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;setPrepDetails&#x60;.</param>
        /// <returns>ApiResponse of SetPrepDetailsResponse</returns>
        public ApiResponse< SetPrepDetailsResponse > SetPrepDetailsWithHttpInfo (SetPrepDetailsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->SetPrepDetails");

            var localVarPath = "/inbound/fba/2024-03-20/items/prepDetails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetPrepDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetPrepDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetPrepDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetPrepDetailsResponse)));
        }

        /// <summary>
        /// setPrepDetails Set the preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;setPrepDetails&#x60;.</param>
        /// <returns>Task of SetPrepDetailsResponse</returns>
        public async System.Threading.Tasks.Task<SetPrepDetailsResponse> SetPrepDetailsAsync (SetPrepDetailsRequest body)
        {
             ApiResponse<SetPrepDetailsResponse> localVarResponse = await SetPrepDetailsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// setPrepDetails Set the preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The body of the request to &#x60;setPrepDetails&#x60;.</param>
        /// <returns>Task of ApiResponse (SetPrepDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SetPrepDetailsResponse>> SetPrepDetailsAsyncWithHttpInfo (SetPrepDetailsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->SetPrepDetails");

            var localVarPath = "/inbound/fba/2024-03-20/items/prepDetails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetPrepDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetPrepDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetPrepDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetPrepDetailsResponse)));
        }

        /// <summary>
        /// updateInboundPlanName Updates the name of an existing inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;updateInboundPlanName&#x60;.</param>
        /// <returns></returns>
        public void UpdateInboundPlanName (string inboundPlanId, UpdateInboundPlanNameRequest body)
        {
             UpdateInboundPlanNameWithHttpInfo(inboundPlanId, body);
        }

        /// <summary>
        /// updateInboundPlanName Updates the name of an existing inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;updateInboundPlanName&#x60;.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateInboundPlanNameWithHttpInfo (string inboundPlanId, UpdateInboundPlanNameRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->UpdateInboundPlanName");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->UpdateInboundPlanName");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInboundPlanName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// updateInboundPlanName Updates the name of an existing inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;updateInboundPlanName&#x60;.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateInboundPlanNameAsync (string inboundPlanId, UpdateInboundPlanNameRequest body)
        {
             await UpdateInboundPlanNameAsyncWithHttpInfo(inboundPlanId, body);

        }

        /// <summary>
        /// updateInboundPlanName Updates the name of an existing inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="body">The body of the request to &#x60;updateInboundPlanName&#x60;.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateInboundPlanNameAsyncWithHttpInfo (string inboundPlanId, UpdateInboundPlanNameRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->UpdateInboundPlanName");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->UpdateInboundPlanName");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInboundPlanName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// updateItemComplianceDetails Update compliance details for a list of MSKUs. The details provided here are only used for the India (IN - A21TJRUUN4KGV) marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <param name="body">The body of the request to &#x60;updateItemComplianceDetails&#x60;.</param>
        /// <returns>UpdateItemComplianceDetailsResponse</returns>
        public UpdateItemComplianceDetailsResponse UpdateItemComplianceDetails (string marketplaceId, UpdateItemComplianceDetailsRequest body)
        {
             ApiResponse<UpdateItemComplianceDetailsResponse> localVarResponse = UpdateItemComplianceDetailsWithHttpInfo(marketplaceId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// updateItemComplianceDetails Update compliance details for a list of MSKUs. The details provided here are only used for the India (IN - A21TJRUUN4KGV) marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <param name="body">The body of the request to &#x60;updateItemComplianceDetails&#x60;.</param>
        /// <returns>ApiResponse of UpdateItemComplianceDetailsResponse</returns>
        public ApiResponse< UpdateItemComplianceDetailsResponse > UpdateItemComplianceDetailsWithHttpInfo (string marketplaceId, UpdateItemComplianceDetailsRequest body)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FulfillmentInboundApi->UpdateItemComplianceDetails");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->UpdateItemComplianceDetails");

            var localVarPath = "/inbound/fba/2024-03-20/items/compliance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItemComplianceDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateItemComplianceDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateItemComplianceDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateItemComplianceDetailsResponse)));
        }

        /// <summary>
        /// updateItemComplianceDetails Update compliance details for a list of MSKUs. The details provided here are only used for the India (IN - A21TJRUUN4KGV) marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <param name="body">The body of the request to &#x60;updateItemComplianceDetails&#x60;.</param>
        /// <returns>Task of UpdateItemComplianceDetailsResponse</returns>
        public async System.Threading.Tasks.Task<UpdateItemComplianceDetailsResponse> UpdateItemComplianceDetailsAsync (string marketplaceId, UpdateItemComplianceDetailsRequest body)
        {
             ApiResponse<UpdateItemComplianceDetailsResponse> localVarResponse = await UpdateItemComplianceDetailsAsyncWithHttpInfo(marketplaceId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// updateItemComplianceDetails Update compliance details for a list of MSKUs. The details provided here are only used for the India (IN - A21TJRUUN4KGV) marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <param name="body">The body of the request to &#x60;updateItemComplianceDetails&#x60;.</param>
        /// <returns>Task of ApiResponse (UpdateItemComplianceDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateItemComplianceDetailsResponse>> UpdateItemComplianceDetailsAsyncWithHttpInfo (string marketplaceId, UpdateItemComplianceDetailsRequest body)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FulfillmentInboundApi->UpdateItemComplianceDetails");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->UpdateItemComplianceDetails");

            var localVarPath = "/inbound/fba/2024-03-20/items/compliance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItemComplianceDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateItemComplianceDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateItemComplianceDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateItemComplianceDetailsResponse)));
        }

        /// <summary>
        /// updateShipmentName Updates the name of an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentName&#x60;.</param>
        /// <returns></returns>
        public void UpdateShipmentName (string inboundPlanId, string shipmentId, UpdateShipmentNameRequest body)
        {
             UpdateShipmentNameWithHttpInfo(inboundPlanId, shipmentId, body);
        }

        /// <summary>
        /// updateShipmentName Updates the name of an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentName&#x60;.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateShipmentNameWithHttpInfo (string inboundPlanId, string shipmentId, UpdateShipmentNameRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->UpdateShipmentName");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->UpdateShipmentName");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->UpdateShipmentName");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateShipmentName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// updateShipmentName Updates the name of an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentName&#x60;.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateShipmentNameAsync (string inboundPlanId, string shipmentId, UpdateShipmentNameRequest body)
        {
             await UpdateShipmentNameAsyncWithHttpInfo(inboundPlanId, shipmentId, body);

        }

        /// <summary>
        /// updateShipmentName Updates the name of an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentName&#x60;.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateShipmentNameAsyncWithHttpInfo (string inboundPlanId, string shipmentId, UpdateShipmentNameRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->UpdateShipmentName");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->UpdateShipmentName");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->UpdateShipmentName");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateShipmentName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// updateShipmentSourceAddress Updates the source address of an existing shipment. The shipment source address can only be updated prior to the confirmation of the shipment carriers. As a result of the updated source address, existing transportation options will be invalidated and will need to be regenerated to capture the potential difference in transportation options and quotes due to the new source address.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentSourceAddress&#x60;.</param>
        /// <returns>UpdateShipmentSourceAddressResponse</returns>
        public UpdateShipmentSourceAddressResponse UpdateShipmentSourceAddress (string inboundPlanId, string shipmentId, UpdateShipmentSourceAddressRequest body)
        {
             ApiResponse<UpdateShipmentSourceAddressResponse> localVarResponse = UpdateShipmentSourceAddressWithHttpInfo(inboundPlanId, shipmentId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// updateShipmentSourceAddress Updates the source address of an existing shipment. The shipment source address can only be updated prior to the confirmation of the shipment carriers. As a result of the updated source address, existing transportation options will be invalidated and will need to be regenerated to capture the potential difference in transportation options and quotes due to the new source address.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentSourceAddress&#x60;.</param>
        /// <returns>ApiResponse of UpdateShipmentSourceAddressResponse</returns>
        public ApiResponse< UpdateShipmentSourceAddressResponse > UpdateShipmentSourceAddressWithHttpInfo (string inboundPlanId, string shipmentId, UpdateShipmentSourceAddressRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->UpdateShipmentSourceAddress");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->UpdateShipmentSourceAddress");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->UpdateShipmentSourceAddress");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateShipmentSourceAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateShipmentSourceAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateShipmentSourceAddressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateShipmentSourceAddressResponse)));
        }

        /// <summary>
        /// updateShipmentSourceAddress Updates the source address of an existing shipment. The shipment source address can only be updated prior to the confirmation of the shipment carriers. As a result of the updated source address, existing transportation options will be invalidated and will need to be regenerated to capture the potential difference in transportation options and quotes due to the new source address.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentSourceAddress&#x60;.</param>
        /// <returns>Task of UpdateShipmentSourceAddressResponse</returns>
        public async System.Threading.Tasks.Task<UpdateShipmentSourceAddressResponse> UpdateShipmentSourceAddressAsync (string inboundPlanId, string shipmentId, UpdateShipmentSourceAddressRequest body)
        {
             ApiResponse<UpdateShipmentSourceAddressResponse> localVarResponse = await UpdateShipmentSourceAddressAsyncWithHttpInfo(inboundPlanId, shipmentId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// updateShipmentSourceAddress Updates the source address of an existing shipment. The shipment source address can only be updated prior to the confirmation of the shipment carriers. As a result of the updated source address, existing transportation options will be invalidated and will need to be regenerated to capture the potential difference in transportation options and quotes due to the new source address.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentSourceAddress&#x60;.</param>
        /// <returns>Task of ApiResponse (UpdateShipmentSourceAddressResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateShipmentSourceAddressResponse>> UpdateShipmentSourceAddressAsyncWithHttpInfo (string inboundPlanId, string shipmentId, UpdateShipmentSourceAddressRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->UpdateShipmentSourceAddress");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->UpdateShipmentSourceAddress");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->UpdateShipmentSourceAddress");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateShipmentSourceAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateShipmentSourceAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateShipmentSourceAddressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateShipmentSourceAddressResponse)));
        }

        /// <summary>
        /// updateShipmentTrackingDetails Updates a shipment&#39;s tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentTrackingDetails&#x60;.</param>
        /// <returns>UpdateShipmentTrackingDetailsResponse</returns>
        public UpdateShipmentTrackingDetailsResponse UpdateShipmentTrackingDetails (string inboundPlanId, string shipmentId, UpdateShipmentTrackingDetailsRequest body)
        {
             ApiResponse<UpdateShipmentTrackingDetailsResponse> localVarResponse = UpdateShipmentTrackingDetailsWithHttpInfo(inboundPlanId, shipmentId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// updateShipmentTrackingDetails Updates a shipment&#39;s tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentTrackingDetails&#x60;.</param>
        /// <returns>ApiResponse of UpdateShipmentTrackingDetailsResponse</returns>
        public ApiResponse< UpdateShipmentTrackingDetailsResponse > UpdateShipmentTrackingDetailsWithHttpInfo (string inboundPlanId, string shipmentId, UpdateShipmentTrackingDetailsRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->UpdateShipmentTrackingDetails");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->UpdateShipmentTrackingDetails");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->UpdateShipmentTrackingDetails");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/trackingDetails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateShipmentTrackingDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateShipmentTrackingDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateShipmentTrackingDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateShipmentTrackingDetailsResponse)));
        }

        /// <summary>
        /// updateShipmentTrackingDetails Updates a shipment&#39;s tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentTrackingDetails&#x60;.</param>
        /// <returns>Task of UpdateShipmentTrackingDetailsResponse</returns>
        public async System.Threading.Tasks.Task<UpdateShipmentTrackingDetailsResponse> UpdateShipmentTrackingDetailsAsync (string inboundPlanId, string shipmentId, UpdateShipmentTrackingDetailsRequest body)
        {
             ApiResponse<UpdateShipmentTrackingDetailsResponse> localVarResponse = await UpdateShipmentTrackingDetailsAsyncWithHttpInfo(inboundPlanId, shipmentId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// updateShipmentTrackingDetails Updates a shipment&#39;s tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundPlanId">Identifier of an inbound plan.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded.</param>
        /// <param name="body">The body of the request to &#x60;updateShipmentTrackingDetails&#x60;.</param>
        /// <returns>Task of ApiResponse (UpdateShipmentTrackingDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateShipmentTrackingDetailsResponse>> UpdateShipmentTrackingDetailsAsyncWithHttpInfo (string inboundPlanId, string shipmentId, UpdateShipmentTrackingDetailsRequest body)
        {
            // verify the required parameter 'inboundPlanId' is set
            if (inboundPlanId == null)
                throw new ApiException(400, "Missing required parameter 'inboundPlanId' when calling FulfillmentInboundApi->UpdateShipmentTrackingDetails");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentInboundApi->UpdateShipmentTrackingDetails");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentInboundApi->UpdateShipmentTrackingDetails");

            var localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/trackingDetails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboundPlanId != null) localVarPathParams.Add("inboundPlanId", this.Configuration.ApiClient.ParameterToString(inboundPlanId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateShipmentTrackingDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateShipmentTrackingDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateShipmentTrackingDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateShipmentTrackingDetailsResponse)));
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }
            
            
            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public FulfillmentInboundApi Build() 
            {
                if (lwaAuthorizationCredentials == null) 
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }

                
                Amazon.SellingPartnerAPIAA.Clients.Client.Configuration configuration = new Amazon.SellingPartnerAPIAA.Clients.Client.Configuration()
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    RateLimitConfig = rateLimitConfiguration
                };

                // default HTTP connection timeout (in milliseconds)
                configuration.Timeout = 100000;

                return new FulfillmentInboundApi(configuration);
            }
        }
    }
}
