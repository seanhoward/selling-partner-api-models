/* 
 * Selling Partner API for FBA Inventory
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Amazon.SellingPartnerAPIAA.Clients.Client;
using Amazon.SellingPartnerAPIAA.Clients.Models.FbaInventory;
using Amazon.SellingPartnerAPIAA;

namespace Amazon.SellingPartnerAPIAA.Clients.API
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFbaInventoryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests that Amazon add items to the Sandbox Inventory with desired amount of quantity in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAmznIdempotencyToken">A unique token/requestId provided with each call to ensure idempotency.</param>
        /// <param name="addInventoryRequestBody">List of items to add to Sandbox inventory.</param>
        /// <returns>AddInventoryResponse</returns>
        AddInventoryResponse AddInventory (string xAmznIdempotencyToken, AddInventoryRequest addInventoryRequestBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests that Amazon add items to the Sandbox Inventory with desired amount of quantity in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAmznIdempotencyToken">A unique token/requestId provided with each call to ensure idempotency.</param>
        /// <param name="addInventoryRequestBody">List of items to add to Sandbox inventory.</param>
        /// <returns>ApiResponse of AddInventoryResponse</returns>
        ApiResponse<AddInventoryResponse> AddInventoryWithHttpInfo (string xAmznIdempotencyToken, AddInventoryRequest addInventoryRequestBody);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests that Amazon create product-details in the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInventoryItemRequestBody">CreateInventoryItem Request Body Parameter.</param>
        /// <returns>CreateInventoryItemResponse</returns>
        CreateInventoryItemResponse CreateInventoryItem (CreateInventoryItemRequest createInventoryItemRequestBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests that Amazon create product-details in the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInventoryItemRequestBody">CreateInventoryItem Request Body Parameter.</param>
        /// <returns>ApiResponse of CreateInventoryItemResponse</returns>
        ApiResponse<CreateInventoryItemResponse> CreateInventoryItemWithHttpInfo (CreateInventoryItemRequest createInventoryItemRequestBody);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests that Amazon Deletes an item from the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerSku">A single seller SKU used for querying the specified seller SKU inventory summaries.</param>
        /// <param name="marketplaceId">The marketplace ID for the marketplace for which the sellerSku is to be deleted.</param>
        /// <returns>DeleteInventoryItemResponse</returns>
        DeleteInventoryItemResponse DeleteInventoryItem (string sellerSku, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests that Amazon Deletes an item from the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerSku">A single seller SKU used for querying the specified seller SKU inventory summaries.</param>
        /// <param name="marketplaceId">The marketplace ID for the marketplace for which the sellerSku is to be deleted.</param>
        /// <returns>ApiResponse of DeleteInventoryItemResponse</returns>
        ApiResponse<DeleteInventoryItemResponse> DeleteInventoryItemWithHttpInfo (string sellerSku, string marketplaceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the startDateTime, sellerSkus and sellerSku parameters:  - All inventory summaries with available details are returned when the startDateTime, sellerSkus and sellerSku parameters are omitted. - When startDateTime is provided, the operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus and sellerSku parameters are ignored. Important: To avoid errors, use both startDateTime and nextToken to get the next page of inventory summaries that have changed after the date and time specified. - When the sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus. The sellerSku parameter is ignored. - When the sellerSku parameter is provided, the operation returns inventory summaries for only the specified sellerSku.  Note: The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  Usage Plan:  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularityType">The granularity type for the inventory aggregation level.</param>
        /// <param name="granularityId">The granularity ID for the inventory aggregation level.</param>
        /// <param name="marketplaceIds">The marketplace ID for the marketplace for which to return inventory summaries.</param>
        /// <param name="details">true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value). (optional, default to false)</param>
        /// <param name="startDateTime">A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected. (optional)</param>
        /// <param name="sellerSkus">A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs. (optional)</param>
        /// <param name="sellerSku">A single seller SKU used for querying the specified seller SKU inventory summaries. (optional)</param>
        /// <param name="nextToken">String token returned in the response of your previous request. The string token will expire 30 seconds after being created. (optional)</param>
        /// <returns>GetInventorySummariesResponse</returns>
        GetInventorySummariesResponse GetInventorySummaries (string granularityType, string granularityId, List<string> marketplaceIds, bool? details = null, DateTime? startDateTime = null, List<string> sellerSkus = null, string sellerSku = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the startDateTime, sellerSkus and sellerSku parameters:  - All inventory summaries with available details are returned when the startDateTime, sellerSkus and sellerSku parameters are omitted. - When startDateTime is provided, the operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus and sellerSku parameters are ignored. Important: To avoid errors, use both startDateTime and nextToken to get the next page of inventory summaries that have changed after the date and time specified. - When the sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus. The sellerSku parameter is ignored. - When the sellerSku parameter is provided, the operation returns inventory summaries for only the specified sellerSku.  Note: The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  Usage Plan:  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularityType">The granularity type for the inventory aggregation level.</param>
        /// <param name="granularityId">The granularity ID for the inventory aggregation level.</param>
        /// <param name="marketplaceIds">The marketplace ID for the marketplace for which to return inventory summaries.</param>
        /// <param name="details">true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value). (optional, default to false)</param>
        /// <param name="startDateTime">A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected. (optional)</param>
        /// <param name="sellerSkus">A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs. (optional)</param>
        /// <param name="sellerSku">A single seller SKU used for querying the specified seller SKU inventory summaries. (optional)</param>
        /// <param name="nextToken">String token returned in the response of your previous request. The string token will expire 30 seconds after being created. (optional)</param>
        /// <returns>ApiResponse of GetInventorySummariesResponse</returns>
        ApiResponse<GetInventorySummariesResponse> GetInventorySummariesWithHttpInfo (string granularityType, string granularityId, List<string> marketplaceIds, bool? details = null, DateTime? startDateTime = null, List<string> sellerSkus = null, string sellerSku = null, string nextToken = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests that Amazon add items to the Sandbox Inventory with desired amount of quantity in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAmznIdempotencyToken">A unique token/requestId provided with each call to ensure idempotency.</param>
        /// <param name="addInventoryRequestBody">List of items to add to Sandbox inventory.</param>
        /// <returns>Task of AddInventoryResponse</returns>
        System.Threading.Tasks.Task<AddInventoryResponse> AddInventoryAsync (string xAmznIdempotencyToken, AddInventoryRequest addInventoryRequestBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests that Amazon add items to the Sandbox Inventory with desired amount of quantity in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAmznIdempotencyToken">A unique token/requestId provided with each call to ensure idempotency.</param>
        /// <param name="addInventoryRequestBody">List of items to add to Sandbox inventory.</param>
        /// <returns>Task of ApiResponse (AddInventoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddInventoryResponse>> AddInventoryAsyncWithHttpInfo (string xAmznIdempotencyToken, AddInventoryRequest addInventoryRequestBody);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests that Amazon create product-details in the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInventoryItemRequestBody">CreateInventoryItem Request Body Parameter.</param>
        /// <returns>Task of CreateInventoryItemResponse</returns>
        System.Threading.Tasks.Task<CreateInventoryItemResponse> CreateInventoryItemAsync (CreateInventoryItemRequest createInventoryItemRequestBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests that Amazon create product-details in the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInventoryItemRequestBody">CreateInventoryItem Request Body Parameter.</param>
        /// <returns>Task of ApiResponse (CreateInventoryItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateInventoryItemResponse>> CreateInventoryItemAsyncWithHttpInfo (CreateInventoryItemRequest createInventoryItemRequestBody);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests that Amazon Deletes an item from the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerSku">A single seller SKU used for querying the specified seller SKU inventory summaries.</param>
        /// <param name="marketplaceId">The marketplace ID for the marketplace for which the sellerSku is to be deleted.</param>
        /// <returns>Task of DeleteInventoryItemResponse</returns>
        System.Threading.Tasks.Task<DeleteInventoryItemResponse> DeleteInventoryItemAsync (string sellerSku, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests that Amazon Deletes an item from the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerSku">A single seller SKU used for querying the specified seller SKU inventory summaries.</param>
        /// <param name="marketplaceId">The marketplace ID for the marketplace for which the sellerSku is to be deleted.</param>
        /// <returns>Task of ApiResponse (DeleteInventoryItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteInventoryItemResponse>> DeleteInventoryItemAsyncWithHttpInfo (string sellerSku, string marketplaceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the startDateTime, sellerSkus and sellerSku parameters:  - All inventory summaries with available details are returned when the startDateTime, sellerSkus and sellerSku parameters are omitted. - When startDateTime is provided, the operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus and sellerSku parameters are ignored. Important: To avoid errors, use both startDateTime and nextToken to get the next page of inventory summaries that have changed after the date and time specified. - When the sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus. The sellerSku parameter is ignored. - When the sellerSku parameter is provided, the operation returns inventory summaries for only the specified sellerSku.  Note: The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  Usage Plan:  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularityType">The granularity type for the inventory aggregation level.</param>
        /// <param name="granularityId">The granularity ID for the inventory aggregation level.</param>
        /// <param name="marketplaceIds">The marketplace ID for the marketplace for which to return inventory summaries.</param>
        /// <param name="details">true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value). (optional, default to false)</param>
        /// <param name="startDateTime">A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected. (optional)</param>
        /// <param name="sellerSkus">A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs. (optional)</param>
        /// <param name="sellerSku">A single seller SKU used for querying the specified seller SKU inventory summaries. (optional)</param>
        /// <param name="nextToken">String token returned in the response of your previous request. The string token will expire 30 seconds after being created. (optional)</param>
        /// <returns>Task of GetInventorySummariesResponse</returns>
        System.Threading.Tasks.Task<GetInventorySummariesResponse> GetInventorySummariesAsync (string granularityType, string granularityId, List<string> marketplaceIds, bool? details = null, DateTime? startDateTime = null, List<string> sellerSkus = null, string sellerSku = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the startDateTime, sellerSkus and sellerSku parameters:  - All inventory summaries with available details are returned when the startDateTime, sellerSkus and sellerSku parameters are omitted. - When startDateTime is provided, the operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus and sellerSku parameters are ignored. Important: To avoid errors, use both startDateTime and nextToken to get the next page of inventory summaries that have changed after the date and time specified. - When the sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus. The sellerSku parameter is ignored. - When the sellerSku parameter is provided, the operation returns inventory summaries for only the specified sellerSku.  Note: The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  Usage Plan:  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularityType">The granularity type for the inventory aggregation level.</param>
        /// <param name="granularityId">The granularity ID for the inventory aggregation level.</param>
        /// <param name="marketplaceIds">The marketplace ID for the marketplace for which to return inventory summaries.</param>
        /// <param name="details">true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value). (optional, default to false)</param>
        /// <param name="startDateTime">A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected. (optional)</param>
        /// <param name="sellerSkus">A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs. (optional)</param>
        /// <param name="sellerSku">A single seller SKU used for querying the specified seller SKU inventory summaries. (optional)</param>
        /// <param name="nextToken">String token returned in the response of your previous request. The string token will expire 30 seconds after being created. (optional)</param>
        /// <returns>Task of ApiResponse (GetInventorySummariesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInventorySummariesResponse>> GetInventorySummariesAsyncWithHttpInfo (string granularityType, string granularityId, List<string> marketplaceIds, bool? details = null, DateTime? startDateTime = null, List<string> sellerSkus = null, string sellerSku = null, string nextToken = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FbaInventoryApi : IFbaInventoryApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FbaInventoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FbaInventoryApi(Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = Amazon.SellingPartnerAPIAA.Clients.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Requests that Amazon add items to the Sandbox Inventory with desired amount of quantity in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAmznIdempotencyToken">A unique token/requestId provided with each call to ensure idempotency.</param>
        /// <param name="addInventoryRequestBody">List of items to add to Sandbox inventory.</param>
        /// <returns>AddInventoryResponse</returns>
        public AddInventoryResponse AddInventory (string xAmznIdempotencyToken, AddInventoryRequest addInventoryRequestBody)
        {
             ApiResponse<AddInventoryResponse> localVarResponse = AddInventoryWithHttpInfo(xAmznIdempotencyToken, addInventoryRequestBody);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Requests that Amazon add items to the Sandbox Inventory with desired amount of quantity in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAmznIdempotencyToken">A unique token/requestId provided with each call to ensure idempotency.</param>
        /// <param name="addInventoryRequestBody">List of items to add to Sandbox inventory.</param>
        /// <returns>ApiResponse of AddInventoryResponse</returns>
        public ApiResponse< AddInventoryResponse > AddInventoryWithHttpInfo (string xAmznIdempotencyToken, AddInventoryRequest addInventoryRequestBody)
        {
            // verify the required parameter 'xAmznIdempotencyToken' is set
            if (xAmznIdempotencyToken == null)
                throw new ApiException(400, "Missing required parameter 'xAmznIdempotencyToken' when calling FbaInventoryApi->AddInventory");
            // verify the required parameter 'addInventoryRequestBody' is set
            if (addInventoryRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addInventoryRequestBody' when calling FbaInventoryApi->AddInventory");

            var localVarPath = "/fba/inventory/v1/items/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznIdempotencyToken != null) localVarHeaderParams.Add("x-amzn-idempotency-token", this.Configuration.ApiClient.ParameterToString(xAmznIdempotencyToken)); // header parameter
            if (addInventoryRequestBody != null && addInventoryRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addInventoryRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addInventoryRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddInventoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddInventoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddInventoryResponse)));
        }

        /// <summary>
        ///  Requests that Amazon add items to the Sandbox Inventory with desired amount of quantity in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAmznIdempotencyToken">A unique token/requestId provided with each call to ensure idempotency.</param>
        /// <param name="addInventoryRequestBody">List of items to add to Sandbox inventory.</param>
        /// <returns>Task of AddInventoryResponse</returns>
        public async System.Threading.Tasks.Task<AddInventoryResponse> AddInventoryAsync (string xAmznIdempotencyToken, AddInventoryRequest addInventoryRequestBody)
        {
             ApiResponse<AddInventoryResponse> localVarResponse = await AddInventoryAsyncWithHttpInfo(xAmznIdempotencyToken, addInventoryRequestBody);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Requests that Amazon add items to the Sandbox Inventory with desired amount of quantity in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAmznIdempotencyToken">A unique token/requestId provided with each call to ensure idempotency.</param>
        /// <param name="addInventoryRequestBody">List of items to add to Sandbox inventory.</param>
        /// <returns>Task of ApiResponse (AddInventoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddInventoryResponse>> AddInventoryAsyncWithHttpInfo (string xAmznIdempotencyToken, AddInventoryRequest addInventoryRequestBody)
        {
            // verify the required parameter 'xAmznIdempotencyToken' is set
            if (xAmznIdempotencyToken == null)
                throw new ApiException(400, "Missing required parameter 'xAmznIdempotencyToken' when calling FbaInventoryApi->AddInventory");
            // verify the required parameter 'addInventoryRequestBody' is set
            if (addInventoryRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addInventoryRequestBody' when calling FbaInventoryApi->AddInventory");

            var localVarPath = "/fba/inventory/v1/items/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznIdempotencyToken != null) localVarHeaderParams.Add("x-amzn-idempotency-token", this.Configuration.ApiClient.ParameterToString(xAmznIdempotencyToken)); // header parameter
            if (addInventoryRequestBody != null && addInventoryRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addInventoryRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addInventoryRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddInventoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddInventoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddInventoryResponse)));
        }

        /// <summary>
        ///  Requests that Amazon create product-details in the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInventoryItemRequestBody">CreateInventoryItem Request Body Parameter.</param>
        /// <returns>CreateInventoryItemResponse</returns>
        public CreateInventoryItemResponse CreateInventoryItem (CreateInventoryItemRequest createInventoryItemRequestBody)
        {
             ApiResponse<CreateInventoryItemResponse> localVarResponse = CreateInventoryItemWithHttpInfo(createInventoryItemRequestBody);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Requests that Amazon create product-details in the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInventoryItemRequestBody">CreateInventoryItem Request Body Parameter.</param>
        /// <returns>ApiResponse of CreateInventoryItemResponse</returns>
        public ApiResponse< CreateInventoryItemResponse > CreateInventoryItemWithHttpInfo (CreateInventoryItemRequest createInventoryItemRequestBody)
        {
            // verify the required parameter 'createInventoryItemRequestBody' is set
            if (createInventoryItemRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'createInventoryItemRequestBody' when calling FbaInventoryApi->CreateInventoryItem");

            var localVarPath = "/fba/inventory/v1/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createInventoryItemRequestBody != null && createInventoryItemRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createInventoryItemRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createInventoryItemRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInventoryItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateInventoryItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateInventoryItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateInventoryItemResponse)));
        }

        /// <summary>
        ///  Requests that Amazon create product-details in the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInventoryItemRequestBody">CreateInventoryItem Request Body Parameter.</param>
        /// <returns>Task of CreateInventoryItemResponse</returns>
        public async System.Threading.Tasks.Task<CreateInventoryItemResponse> CreateInventoryItemAsync (CreateInventoryItemRequest createInventoryItemRequestBody)
        {
             ApiResponse<CreateInventoryItemResponse> localVarResponse = await CreateInventoryItemAsyncWithHttpInfo(createInventoryItemRequestBody);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Requests that Amazon create product-details in the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInventoryItemRequestBody">CreateInventoryItem Request Body Parameter.</param>
        /// <returns>Task of ApiResponse (CreateInventoryItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateInventoryItemResponse>> CreateInventoryItemAsyncWithHttpInfo (CreateInventoryItemRequest createInventoryItemRequestBody)
        {
            // verify the required parameter 'createInventoryItemRequestBody' is set
            if (createInventoryItemRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'createInventoryItemRequestBody' when calling FbaInventoryApi->CreateInventoryItem");

            var localVarPath = "/fba/inventory/v1/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createInventoryItemRequestBody != null && createInventoryItemRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createInventoryItemRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createInventoryItemRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInventoryItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateInventoryItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateInventoryItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateInventoryItemResponse)));
        }

        /// <summary>
        ///  Requests that Amazon Deletes an item from the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerSku">A single seller SKU used for querying the specified seller SKU inventory summaries.</param>
        /// <param name="marketplaceId">The marketplace ID for the marketplace for which the sellerSku is to be deleted.</param>
        /// <returns>DeleteInventoryItemResponse</returns>
        public DeleteInventoryItemResponse DeleteInventoryItem (string sellerSku, string marketplaceId)
        {
             ApiResponse<DeleteInventoryItemResponse> localVarResponse = DeleteInventoryItemWithHttpInfo(sellerSku, marketplaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Requests that Amazon Deletes an item from the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerSku">A single seller SKU used for querying the specified seller SKU inventory summaries.</param>
        /// <param name="marketplaceId">The marketplace ID for the marketplace for which the sellerSku is to be deleted.</param>
        /// <returns>ApiResponse of DeleteInventoryItemResponse</returns>
        public ApiResponse< DeleteInventoryItemResponse > DeleteInventoryItemWithHttpInfo (string sellerSku, string marketplaceId)
        {
            // verify the required parameter 'sellerSku' is set
            if (sellerSku == null)
                throw new ApiException(400, "Missing required parameter 'sellerSku' when calling FbaInventoryApi->DeleteInventoryItem");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FbaInventoryApi->DeleteInventoryItem");

            var localVarPath = "/fba/inventory/v1/items/{sellerSku}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerSku != null) localVarPathParams.Add("sellerSku", this.Configuration.ApiClient.ParameterToString(sellerSku)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInventoryItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteInventoryItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteInventoryItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteInventoryItemResponse)));
        }

        /// <summary>
        ///  Requests that Amazon Deletes an item from the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerSku">A single seller SKU used for querying the specified seller SKU inventory summaries.</param>
        /// <param name="marketplaceId">The marketplace ID for the marketplace for which the sellerSku is to be deleted.</param>
        /// <returns>Task of DeleteInventoryItemResponse</returns>
        public async System.Threading.Tasks.Task<DeleteInventoryItemResponse> DeleteInventoryItemAsync (string sellerSku, string marketplaceId)
        {
             ApiResponse<DeleteInventoryItemResponse> localVarResponse = await DeleteInventoryItemAsyncWithHttpInfo(sellerSku, marketplaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Requests that Amazon Deletes an item from the Sandbox Inventory in the sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerSku">A single seller SKU used for querying the specified seller SKU inventory summaries.</param>
        /// <param name="marketplaceId">The marketplace ID for the marketplace for which the sellerSku is to be deleted.</param>
        /// <returns>Task of ApiResponse (DeleteInventoryItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteInventoryItemResponse>> DeleteInventoryItemAsyncWithHttpInfo (string sellerSku, string marketplaceId)
        {
            // verify the required parameter 'sellerSku' is set
            if (sellerSku == null)
                throw new ApiException(400, "Missing required parameter 'sellerSku' when calling FbaInventoryApi->DeleteInventoryItem");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FbaInventoryApi->DeleteInventoryItem");

            var localVarPath = "/fba/inventory/v1/items/{sellerSku}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerSku != null) localVarPathParams.Add("sellerSku", this.Configuration.ApiClient.ParameterToString(sellerSku)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInventoryItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteInventoryItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteInventoryItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteInventoryItemResponse)));
        }

        /// <summary>
        ///  Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the startDateTime, sellerSkus and sellerSku parameters:  - All inventory summaries with available details are returned when the startDateTime, sellerSkus and sellerSku parameters are omitted. - When startDateTime is provided, the operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus and sellerSku parameters are ignored. Important: To avoid errors, use both startDateTime and nextToken to get the next page of inventory summaries that have changed after the date and time specified. - When the sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus. The sellerSku parameter is ignored. - When the sellerSku parameter is provided, the operation returns inventory summaries for only the specified sellerSku.  Note: The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  Usage Plan:  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularityType">The granularity type for the inventory aggregation level.</param>
        /// <param name="granularityId">The granularity ID for the inventory aggregation level.</param>
        /// <param name="marketplaceIds">The marketplace ID for the marketplace for which to return inventory summaries.</param>
        /// <param name="details">true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value). (optional, default to false)</param>
        /// <param name="startDateTime">A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected. (optional)</param>
        /// <param name="sellerSkus">A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs. (optional)</param>
        /// <param name="sellerSku">A single seller SKU used for querying the specified seller SKU inventory summaries. (optional)</param>
        /// <param name="nextToken">String token returned in the response of your previous request. The string token will expire 30 seconds after being created. (optional)</param>
        /// <returns>GetInventorySummariesResponse</returns>
        public GetInventorySummariesResponse GetInventorySummaries (string granularityType, string granularityId, List<string> marketplaceIds, bool? details = null, DateTime? startDateTime = null, List<string> sellerSkus = null, string sellerSku = null, string nextToken = null)
        {
             ApiResponse<GetInventorySummariesResponse> localVarResponse = GetInventorySummariesWithHttpInfo(granularityType, granularityId, marketplaceIds, details, startDateTime, sellerSkus, sellerSku, nextToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the startDateTime, sellerSkus and sellerSku parameters:  - All inventory summaries with available details are returned when the startDateTime, sellerSkus and sellerSku parameters are omitted. - When startDateTime is provided, the operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus and sellerSku parameters are ignored. Important: To avoid errors, use both startDateTime and nextToken to get the next page of inventory summaries that have changed after the date and time specified. - When the sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus. The sellerSku parameter is ignored. - When the sellerSku parameter is provided, the operation returns inventory summaries for only the specified sellerSku.  Note: The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  Usage Plan:  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularityType">The granularity type for the inventory aggregation level.</param>
        /// <param name="granularityId">The granularity ID for the inventory aggregation level.</param>
        /// <param name="marketplaceIds">The marketplace ID for the marketplace for which to return inventory summaries.</param>
        /// <param name="details">true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value). (optional, default to false)</param>
        /// <param name="startDateTime">A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected. (optional)</param>
        /// <param name="sellerSkus">A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs. (optional)</param>
        /// <param name="sellerSku">A single seller SKU used for querying the specified seller SKU inventory summaries. (optional)</param>
        /// <param name="nextToken">String token returned in the response of your previous request. The string token will expire 30 seconds after being created. (optional)</param>
        /// <returns>ApiResponse of GetInventorySummariesResponse</returns>
        public ApiResponse< GetInventorySummariesResponse > GetInventorySummariesWithHttpInfo (string granularityType, string granularityId, List<string> marketplaceIds, bool? details = null, DateTime? startDateTime = null, List<string> sellerSkus = null, string sellerSku = null, string nextToken = null)
        {
            // verify the required parameter 'granularityType' is set
            if (granularityType == null)
                throw new ApiException(400, "Missing required parameter 'granularityType' when calling FbaInventoryApi->GetInventorySummaries");
            // verify the required parameter 'granularityId' is set
            if (granularityId == null)
                throw new ApiException(400, "Missing required parameter 'granularityId' when calling FbaInventoryApi->GetInventorySummaries");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling FbaInventoryApi->GetInventorySummaries");

            var localVarPath = "/fba/inventory/v1/summaries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (granularityType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "granularityType", granularityType)); // query parameter
            if (granularityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "granularityId", granularityId)); // query parameter
            if (startDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDateTime", startDateTime)); // query parameter
            if (sellerSkus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "sellerSkus", sellerSkus)); // query parameter
            if (sellerSku != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sellerSku", sellerSku)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextToken", nextToken)); // query parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInventorySummaries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetInventorySummariesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetInventorySummariesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetInventorySummariesResponse)));
        }

        /// <summary>
        ///  Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the startDateTime, sellerSkus and sellerSku parameters:  - All inventory summaries with available details are returned when the startDateTime, sellerSkus and sellerSku parameters are omitted. - When startDateTime is provided, the operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus and sellerSku parameters are ignored. Important: To avoid errors, use both startDateTime and nextToken to get the next page of inventory summaries that have changed after the date and time specified. - When the sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus. The sellerSku parameter is ignored. - When the sellerSku parameter is provided, the operation returns inventory summaries for only the specified sellerSku.  Note: The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  Usage Plan:  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularityType">The granularity type for the inventory aggregation level.</param>
        /// <param name="granularityId">The granularity ID for the inventory aggregation level.</param>
        /// <param name="marketplaceIds">The marketplace ID for the marketplace for which to return inventory summaries.</param>
        /// <param name="details">true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value). (optional, default to false)</param>
        /// <param name="startDateTime">A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected. (optional)</param>
        /// <param name="sellerSkus">A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs. (optional)</param>
        /// <param name="sellerSku">A single seller SKU used for querying the specified seller SKU inventory summaries. (optional)</param>
        /// <param name="nextToken">String token returned in the response of your previous request. The string token will expire 30 seconds after being created. (optional)</param>
        /// <returns>Task of GetInventorySummariesResponse</returns>
        public async System.Threading.Tasks.Task<GetInventorySummariesResponse> GetInventorySummariesAsync (string granularityType, string granularityId, List<string> marketplaceIds, bool? details = null, DateTime? startDateTime = null, List<string> sellerSkus = null, string sellerSku = null, string nextToken = null)
        {
             ApiResponse<GetInventorySummariesResponse> localVarResponse = await GetInventorySummariesAsyncWithHttpInfo(granularityType, granularityId, marketplaceIds, details, startDateTime, sellerSkus, sellerSku, nextToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the startDateTime, sellerSkus and sellerSku parameters:  - All inventory summaries with available details are returned when the startDateTime, sellerSkus and sellerSku parameters are omitted. - When startDateTime is provided, the operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus and sellerSku parameters are ignored. Important: To avoid errors, use both startDateTime and nextToken to get the next page of inventory summaries that have changed after the date and time specified. - When the sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus. The sellerSku parameter is ignored. - When the sellerSku parameter is provided, the operation returns inventory summaries for only the specified sellerSku.  Note: The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  Usage Plan:  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 2 |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularityType">The granularity type for the inventory aggregation level.</param>
        /// <param name="granularityId">The granularity ID for the inventory aggregation level.</param>
        /// <param name="marketplaceIds">The marketplace ID for the marketplace for which to return inventory summaries.</param>
        /// <param name="details">true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value). (optional, default to false)</param>
        /// <param name="startDateTime">A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected. (optional)</param>
        /// <param name="sellerSkus">A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs. (optional)</param>
        /// <param name="sellerSku">A single seller SKU used for querying the specified seller SKU inventory summaries. (optional)</param>
        /// <param name="nextToken">String token returned in the response of your previous request. The string token will expire 30 seconds after being created. (optional)</param>
        /// <returns>Task of ApiResponse (GetInventorySummariesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetInventorySummariesResponse>> GetInventorySummariesAsyncWithHttpInfo (string granularityType, string granularityId, List<string> marketplaceIds, bool? details = null, DateTime? startDateTime = null, List<string> sellerSkus = null, string sellerSku = null, string nextToken = null)
        {
            // verify the required parameter 'granularityType' is set
            if (granularityType == null)
                throw new ApiException(400, "Missing required parameter 'granularityType' when calling FbaInventoryApi->GetInventorySummaries");
            // verify the required parameter 'granularityId' is set
            if (granularityId == null)
                throw new ApiException(400, "Missing required parameter 'granularityId' when calling FbaInventoryApi->GetInventorySummaries");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling FbaInventoryApi->GetInventorySummaries");

            var localVarPath = "/fba/inventory/v1/summaries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (granularityType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "granularityType", granularityType)); // query parameter
            if (granularityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "granularityId", granularityId)); // query parameter
            if (startDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDateTime", startDateTime)); // query parameter
            if (sellerSkus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "sellerSkus", sellerSkus)); // query parameter
            if (sellerSku != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sellerSku", sellerSku)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextToken", nextToken)); // query parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInventorySummaries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetInventorySummariesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetInventorySummariesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetInventorySummariesResponse)));
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }
            
            
            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public FbaInventoryApi Build() 
            {
                if (lwaAuthorizationCredentials == null) 
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }


                Configuration configuration = new Configuration
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    RateLimitConfig = rateLimitConfiguration,
                    // default HTTP connection timeout (in milliseconds)
                    Timeout = 100000
                };

                return new FbaInventoryApi(configuration);
            }
        }
    }
}
