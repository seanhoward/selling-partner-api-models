/* 
 * Listings Items v2021-08-01
 *
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-use-case-guide).
 *
 * OpenAPI spec version: 2021-08-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Amazon.SellingPartnerAPIAA.Clients.Client;
using Amazon.SellingPartnerAPIAA.Clients.Models.ListingsItems;
using Amazon.SellingPartnerAPIAA;

namespace Amazon.SellingPartnerAPIAA.Clients.API
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListingsItemsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// deleteListingsItem
        /// </summary>
        /// <remarks>
        /// Delete a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>ListingsItemSubmissionResponse</returns>
        ListingsItemSubmissionResponse DeleteListingsItem (string sellerId, string sku, List<string> marketplaceIds, string issueLocale = null);

        /// <summary>
        /// deleteListingsItem
        /// </summary>
        /// <remarks>
        /// Delete a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>ApiResponse of ListingsItemSubmissionResponse</returns>
        ApiResponse<ListingsItemSubmissionResponse> DeleteListingsItemWithHttpInfo (string sellerId, string sku, List<string> marketplaceIds, string issueLocale = null);
        /// <summary>
        /// getListingsItem
        /// </summary>
        /// <remarks>
        /// Returns details about a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <returns>Item</returns>
        Item GetListingsItem (string sellerId, string sku, List<string> marketplaceIds, string issueLocale = null, List<string> includedData = null);

        /// <summary>
        /// getListingsItem
        /// </summary>
        /// <remarks>
        /// Returns details about a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <returns>ApiResponse of Item</returns>
        ApiResponse<Item> GetListingsItemWithHttpInfo (string sellerId, string sku, List<string> marketplaceIds, string issueLocale = null, List<string> includedData = null);
        /// <summary>
        /// patchListingsItem
        /// </summary>
        /// <remarks>
        /// Partially update (patch) a listings item for a selling partner. Only top-level listings item attributes can be patched. Patching nested attributes is not supported.  **Note:** This operation has a throttling rate of one request per second when &#x60;mode&#x60; is &#x60;VALIDATION_PREVIEW&#x60;.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="body">The request body schema for the &#x60;patchListingsItem&#x60; operation.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;issues&#x60;. (optional, default to [&quot;issues&quot;])</param>
        /// <param name="mode">The mode of operation for the request. (optional)</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>ListingsItemSubmissionResponse</returns>
        ListingsItemSubmissionResponse PatchListingsItem (string sellerId, string sku, List<string> marketplaceIds, ListingsItemPatchRequest body, List<string> includedData = null, string mode = null, string issueLocale = null);

        /// <summary>
        /// patchListingsItem
        /// </summary>
        /// <remarks>
        /// Partially update (patch) a listings item for a selling partner. Only top-level listings item attributes can be patched. Patching nested attributes is not supported.  **Note:** This operation has a throttling rate of one request per second when &#x60;mode&#x60; is &#x60;VALIDATION_PREVIEW&#x60;.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="body">The request body schema for the &#x60;patchListingsItem&#x60; operation.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;issues&#x60;. (optional, default to [&quot;issues&quot;])</param>
        /// <param name="mode">The mode of operation for the request. (optional)</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>ApiResponse of ListingsItemSubmissionResponse</returns>
        ApiResponse<ListingsItemSubmissionResponse> PatchListingsItemWithHttpInfo (string sellerId, string sku, List<string> marketplaceIds, ListingsItemPatchRequest body, List<string> includedData = null, string mode = null, string issueLocale = null);
        /// <summary>
        /// putListingsItem
        /// </summary>
        /// <remarks>
        /// Creates or fully updates an existing listings item for a selling partner.  **Note:** This operation has a throttling rate of one request per second when &#x60;mode&#x60; is &#x60;VALIDATION_PREVIEW&#x60;.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="body">The request body schema for the &#x60;putListingsItem&#x60; operation.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;issues&#x60;. (optional, default to [&quot;issues&quot;])</param>
        /// <param name="mode">The mode of operation for the request. (optional)</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>ListingsItemSubmissionResponse</returns>
        ListingsItemSubmissionResponse PutListingsItem (string sellerId, string sku, List<string> marketplaceIds, ListingsItemPutRequest body, List<string> includedData = null, string mode = null, string issueLocale = null);

        /// <summary>
        /// putListingsItem
        /// </summary>
        /// <remarks>
        /// Creates or fully updates an existing listings item for a selling partner.  **Note:** This operation has a throttling rate of one request per second when &#x60;mode&#x60; is &#x60;VALIDATION_PREVIEW&#x60;.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="body">The request body schema for the &#x60;putListingsItem&#x60; operation.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;issues&#x60;. (optional, default to [&quot;issues&quot;])</param>
        /// <param name="mode">The mode of operation for the request. (optional)</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>ApiResponse of ListingsItemSubmissionResponse</returns>
        ApiResponse<ListingsItemSubmissionResponse> PutListingsItemWithHttpInfo (string sellerId, string sku, List<string> marketplaceIds, ListingsItemPutRequest body, List<string> includedData = null, string mode = null, string issueLocale = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// deleteListingsItem
        /// </summary>
        /// <remarks>
        /// Delete a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>Task of ListingsItemSubmissionResponse</returns>
        System.Threading.Tasks.Task<ListingsItemSubmissionResponse> DeleteListingsItemAsync (string sellerId, string sku, List<string> marketplaceIds, string issueLocale = null);

        /// <summary>
        /// deleteListingsItem
        /// </summary>
        /// <remarks>
        /// Delete a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>Task of ApiResponse (ListingsItemSubmissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingsItemSubmissionResponse>> DeleteListingsItemAsyncWithHttpInfo (string sellerId, string sku, List<string> marketplaceIds, string issueLocale = null);
        /// <summary>
        /// getListingsItem
        /// </summary>
        /// <remarks>
        /// Returns details about a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <returns>Task of Item</returns>
        System.Threading.Tasks.Task<Item> GetListingsItemAsync (string sellerId, string sku, List<string> marketplaceIds, string issueLocale = null, List<string> includedData = null);

        /// <summary>
        /// getListingsItem
        /// </summary>
        /// <remarks>
        /// Returns details about a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<Item>> GetListingsItemAsyncWithHttpInfo (string sellerId, string sku, List<string> marketplaceIds, string issueLocale = null, List<string> includedData = null);
        /// <summary>
        /// patchListingsItem
        /// </summary>
        /// <remarks>
        /// Partially update (patch) a listings item for a selling partner. Only top-level listings item attributes can be patched. Patching nested attributes is not supported.  **Note:** This operation has a throttling rate of one request per second when &#x60;mode&#x60; is &#x60;VALIDATION_PREVIEW&#x60;.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="body">The request body schema for the &#x60;patchListingsItem&#x60; operation.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;issues&#x60;. (optional, default to [&quot;issues&quot;])</param>
        /// <param name="mode">The mode of operation for the request. (optional)</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>Task of ListingsItemSubmissionResponse</returns>
        System.Threading.Tasks.Task<ListingsItemSubmissionResponse> PatchListingsItemAsync (string sellerId, string sku, List<string> marketplaceIds, ListingsItemPatchRequest body, List<string> includedData = null, string mode = null, string issueLocale = null);

        /// <summary>
        /// patchListingsItem
        /// </summary>
        /// <remarks>
        /// Partially update (patch) a listings item for a selling partner. Only top-level listings item attributes can be patched. Patching nested attributes is not supported.  **Note:** This operation has a throttling rate of one request per second when &#x60;mode&#x60; is &#x60;VALIDATION_PREVIEW&#x60;.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="body">The request body schema for the &#x60;patchListingsItem&#x60; operation.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;issues&#x60;. (optional, default to [&quot;issues&quot;])</param>
        /// <param name="mode">The mode of operation for the request. (optional)</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>Task of ApiResponse (ListingsItemSubmissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingsItemSubmissionResponse>> PatchListingsItemAsyncWithHttpInfo (string sellerId, string sku, List<string> marketplaceIds, ListingsItemPatchRequest body, List<string> includedData = null, string mode = null, string issueLocale = null);
        /// <summary>
        /// putListingsItem
        /// </summary>
        /// <remarks>
        /// Creates or fully updates an existing listings item for a selling partner.  **Note:** This operation has a throttling rate of one request per second when &#x60;mode&#x60; is &#x60;VALIDATION_PREVIEW&#x60;.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="body">The request body schema for the &#x60;putListingsItem&#x60; operation.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;issues&#x60;. (optional, default to [&quot;issues&quot;])</param>
        /// <param name="mode">The mode of operation for the request. (optional)</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>Task of ListingsItemSubmissionResponse</returns>
        System.Threading.Tasks.Task<ListingsItemSubmissionResponse> PutListingsItemAsync (string sellerId, string sku, List<string> marketplaceIds, ListingsItemPutRequest body, List<string> includedData = null, string mode = null, string issueLocale = null);

        /// <summary>
        /// putListingsItem
        /// </summary>
        /// <remarks>
        /// Creates or fully updates an existing listings item for a selling partner.  **Note:** This operation has a throttling rate of one request per second when &#x60;mode&#x60; is &#x60;VALIDATION_PREVIEW&#x60;.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="body">The request body schema for the &#x60;putListingsItem&#x60; operation.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;issues&#x60;. (optional, default to [&quot;issues&quot;])</param>
        /// <param name="mode">The mode of operation for the request. (optional)</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>Task of ApiResponse (ListingsItemSubmissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingsItemSubmissionResponse>> PutListingsItemAsyncWithHttpInfo (string sellerId, string sku, List<string> marketplaceIds, ListingsItemPutRequest body, List<string> includedData = null, string mode = null, string issueLocale = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ListingsItemsApi : IListingsItemsApi
    {
        private Amazon.SellingPartnerAPIAA.Clients.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsItemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ListingsItemsApi(Amazon.SellingPartnerAPIAA.Clients.Client.Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = Amazon.SellingPartnerAPIAA.Clients.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Amazon.SellingPartnerAPIAA.Clients.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Amazon.SellingPartnerAPIAA.Clients.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// deleteListingsItem Delete a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>ListingsItemSubmissionResponse</returns>
        public ListingsItemSubmissionResponse DeleteListingsItem (string sellerId, string sku, List<string> marketplaceIds, string issueLocale = null)
        {
             ApiResponse<ListingsItemSubmissionResponse> localVarResponse = DeleteListingsItemWithHttpInfo(sellerId, sku, marketplaceIds, issueLocale);
             return localVarResponse.Data;
        }

        /// <summary>
        /// deleteListingsItem Delete a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>ApiResponse of ListingsItemSubmissionResponse</returns>
        public ApiResponse< ListingsItemSubmissionResponse > DeleteListingsItemWithHttpInfo (string sellerId, string sku, List<string> marketplaceIds, string issueLocale = null)
        {
            // verify the required parameter 'sellerId' is set
            if (sellerId == null)
                throw new ApiException(400, "Missing required parameter 'sellerId' when calling ListingsItemsApi->DeleteListingsItem");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling ListingsItemsApi->DeleteListingsItem");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ListingsItemsApi->DeleteListingsItem");

            var localVarPath = "/listings/2021-08-01/items/{sellerId}/{sku}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerId != null) localVarPathParams.Add("sellerId", this.Configuration.ApiClient.ParameterToString(sellerId)); // path parameter
            if (sku != null) localVarPathParams.Add("sku", this.Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (issueLocale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "issueLocale", issueLocale)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListingsItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingsItemSubmissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListingsItemSubmissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingsItemSubmissionResponse)));
        }

        /// <summary>
        /// deleteListingsItem Delete a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>Task of ListingsItemSubmissionResponse</returns>
        public async System.Threading.Tasks.Task<ListingsItemSubmissionResponse> DeleteListingsItemAsync (string sellerId, string sku, List<string> marketplaceIds, string issueLocale = null)
        {
             ApiResponse<ListingsItemSubmissionResponse> localVarResponse = await DeleteListingsItemAsyncWithHttpInfo(sellerId, sku, marketplaceIds, issueLocale);
             return localVarResponse.Data;

        }

        /// <summary>
        /// deleteListingsItem Delete a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>Task of ApiResponse (ListingsItemSubmissionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListingsItemSubmissionResponse>> DeleteListingsItemAsyncWithHttpInfo (string sellerId, string sku, List<string> marketplaceIds, string issueLocale = null)
        {
            // verify the required parameter 'sellerId' is set
            if (sellerId == null)
                throw new ApiException(400, "Missing required parameter 'sellerId' when calling ListingsItemsApi->DeleteListingsItem");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling ListingsItemsApi->DeleteListingsItem");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ListingsItemsApi->DeleteListingsItem");

            var localVarPath = "/listings/2021-08-01/items/{sellerId}/{sku}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerId != null) localVarPathParams.Add("sellerId", this.Configuration.ApiClient.ParameterToString(sellerId)); // path parameter
            if (sku != null) localVarPathParams.Add("sku", this.Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (issueLocale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "issueLocale", issueLocale)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListingsItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingsItemSubmissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListingsItemSubmissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingsItemSubmissionResponse)));
        }

        /// <summary>
        /// getListingsItem Returns details about a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <returns>Item</returns>
        public Item GetListingsItem (string sellerId, string sku, List<string> marketplaceIds, string issueLocale = null, List<string> includedData = null)
        {
             ApiResponse<Item> localVarResponse = GetListingsItemWithHttpInfo(sellerId, sku, marketplaceIds, issueLocale, includedData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getListingsItem Returns details about a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <returns>ApiResponse of Item</returns>
        public ApiResponse< Item > GetListingsItemWithHttpInfo (string sellerId, string sku, List<string> marketplaceIds, string issueLocale = null, List<string> includedData = null)
        {
            // verify the required parameter 'sellerId' is set
            if (sellerId == null)
                throw new ApiException(400, "Missing required parameter 'sellerId' when calling ListingsItemsApi->GetListingsItem");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling ListingsItemsApi->GetListingsItem");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ListingsItemsApi->GetListingsItem");

            var localVarPath = "/listings/2021-08-01/items/{sellerId}/{sku}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerId != null) localVarPathParams.Add("sellerId", this.Configuration.ApiClient.ParameterToString(sellerId)); // path parameter
            if (sku != null) localVarPathParams.Add("sku", this.Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (issueLocale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "issueLocale", issueLocale)); // query parameter
            if (includedData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "includedData", includedData)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListingsItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Item) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Item)));
        }

        /// <summary>
        /// getListingsItem Returns details about a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <returns>Task of Item</returns>
        public async System.Threading.Tasks.Task<Item> GetListingsItemAsync (string sellerId, string sku, List<string> marketplaceIds, string issueLocale = null, List<string> includedData = null)
        {
             ApiResponse<Item> localVarResponse = await GetListingsItemAsyncWithHttpInfo(sellerId, sku, marketplaceIds, issueLocale, includedData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getListingsItem Returns details about a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Item>> GetListingsItemAsyncWithHttpInfo (string sellerId, string sku, List<string> marketplaceIds, string issueLocale = null, List<string> includedData = null)
        {
            // verify the required parameter 'sellerId' is set
            if (sellerId == null)
                throw new ApiException(400, "Missing required parameter 'sellerId' when calling ListingsItemsApi->GetListingsItem");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling ListingsItemsApi->GetListingsItem");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ListingsItemsApi->GetListingsItem");

            var localVarPath = "/listings/2021-08-01/items/{sellerId}/{sku}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerId != null) localVarPathParams.Add("sellerId", this.Configuration.ApiClient.ParameterToString(sellerId)); // path parameter
            if (sku != null) localVarPathParams.Add("sku", this.Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (issueLocale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "issueLocale", issueLocale)); // query parameter
            if (includedData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "includedData", includedData)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListingsItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Item) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Item)));
        }

        /// <summary>
        /// patchListingsItem Partially update (patch) a listings item for a selling partner. Only top-level listings item attributes can be patched. Patching nested attributes is not supported.  **Note:** This operation has a throttling rate of one request per second when &#x60;mode&#x60; is &#x60;VALIDATION_PREVIEW&#x60;.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="body">The request body schema for the &#x60;patchListingsItem&#x60; operation.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;issues&#x60;. (optional, default to [&quot;issues&quot;])</param>
        /// <param name="mode">The mode of operation for the request. (optional)</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>ListingsItemSubmissionResponse</returns>
        public ListingsItemSubmissionResponse PatchListingsItem (string sellerId, string sku, List<string> marketplaceIds, ListingsItemPatchRequest body, List<string> includedData = null, string mode = null, string issueLocale = null)
        {
             ApiResponse<ListingsItemSubmissionResponse> localVarResponse = PatchListingsItemWithHttpInfo(sellerId, sku, marketplaceIds, body, includedData, mode, issueLocale);
             return localVarResponse.Data;
        }

        /// <summary>
        /// patchListingsItem Partially update (patch) a listings item for a selling partner. Only top-level listings item attributes can be patched. Patching nested attributes is not supported.  **Note:** This operation has a throttling rate of one request per second when &#x60;mode&#x60; is &#x60;VALIDATION_PREVIEW&#x60;.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="body">The request body schema for the &#x60;patchListingsItem&#x60; operation.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;issues&#x60;. (optional, default to [&quot;issues&quot;])</param>
        /// <param name="mode">The mode of operation for the request. (optional)</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>ApiResponse of ListingsItemSubmissionResponse</returns>
        public ApiResponse< ListingsItemSubmissionResponse > PatchListingsItemWithHttpInfo (string sellerId, string sku, List<string> marketplaceIds, ListingsItemPatchRequest body, List<string> includedData = null, string mode = null, string issueLocale = null)
        {
            // verify the required parameter 'sellerId' is set
            if (sellerId == null)
                throw new ApiException(400, "Missing required parameter 'sellerId' when calling ListingsItemsApi->PatchListingsItem");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling ListingsItemsApi->PatchListingsItem");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ListingsItemsApi->PatchListingsItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ListingsItemsApi->PatchListingsItem");

            var localVarPath = "/listings/2021-08-01/items/{sellerId}/{sku}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerId != null) localVarPathParams.Add("sellerId", this.Configuration.ApiClient.ParameterToString(sellerId)); // path parameter
            if (sku != null) localVarPathParams.Add("sku", this.Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (includedData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "includedData", includedData)); // query parameter
            if (mode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mode", mode)); // query parameter
            if (issueLocale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "issueLocale", issueLocale)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchListingsItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingsItemSubmissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListingsItemSubmissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingsItemSubmissionResponse)));
        }

        /// <summary>
        /// patchListingsItem Partially update (patch) a listings item for a selling partner. Only top-level listings item attributes can be patched. Patching nested attributes is not supported.  **Note:** This operation has a throttling rate of one request per second when &#x60;mode&#x60; is &#x60;VALIDATION_PREVIEW&#x60;.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="body">The request body schema for the &#x60;patchListingsItem&#x60; operation.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;issues&#x60;. (optional, default to [&quot;issues&quot;])</param>
        /// <param name="mode">The mode of operation for the request. (optional)</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>Task of ListingsItemSubmissionResponse</returns>
        public async System.Threading.Tasks.Task<ListingsItemSubmissionResponse> PatchListingsItemAsync (string sellerId, string sku, List<string> marketplaceIds, ListingsItemPatchRequest body, List<string> includedData = null, string mode = null, string issueLocale = null)
        {
             ApiResponse<ListingsItemSubmissionResponse> localVarResponse = await PatchListingsItemAsyncWithHttpInfo(sellerId, sku, marketplaceIds, body, includedData, mode, issueLocale);
             return localVarResponse.Data;

        }

        /// <summary>
        /// patchListingsItem Partially update (patch) a listings item for a selling partner. Only top-level listings item attributes can be patched. Patching nested attributes is not supported.  **Note:** This operation has a throttling rate of one request per second when &#x60;mode&#x60; is &#x60;VALIDATION_PREVIEW&#x60;.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="body">The request body schema for the &#x60;patchListingsItem&#x60; operation.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;issues&#x60;. (optional, default to [&quot;issues&quot;])</param>
        /// <param name="mode">The mode of operation for the request. (optional)</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>Task of ApiResponse (ListingsItemSubmissionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListingsItemSubmissionResponse>> PatchListingsItemAsyncWithHttpInfo (string sellerId, string sku, List<string> marketplaceIds, ListingsItemPatchRequest body, List<string> includedData = null, string mode = null, string issueLocale = null)
        {
            // verify the required parameter 'sellerId' is set
            if (sellerId == null)
                throw new ApiException(400, "Missing required parameter 'sellerId' when calling ListingsItemsApi->PatchListingsItem");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling ListingsItemsApi->PatchListingsItem");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ListingsItemsApi->PatchListingsItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ListingsItemsApi->PatchListingsItem");

            var localVarPath = "/listings/2021-08-01/items/{sellerId}/{sku}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerId != null) localVarPathParams.Add("sellerId", this.Configuration.ApiClient.ParameterToString(sellerId)); // path parameter
            if (sku != null) localVarPathParams.Add("sku", this.Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (includedData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "includedData", includedData)); // query parameter
            if (mode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mode", mode)); // query parameter
            if (issueLocale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "issueLocale", issueLocale)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchListingsItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingsItemSubmissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListingsItemSubmissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingsItemSubmissionResponse)));
        }

        /// <summary>
        /// putListingsItem Creates or fully updates an existing listings item for a selling partner.  **Note:** This operation has a throttling rate of one request per second when &#x60;mode&#x60; is &#x60;VALIDATION_PREVIEW&#x60;.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="body">The request body schema for the &#x60;putListingsItem&#x60; operation.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;issues&#x60;. (optional, default to [&quot;issues&quot;])</param>
        /// <param name="mode">The mode of operation for the request. (optional)</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>ListingsItemSubmissionResponse</returns>
        public ListingsItemSubmissionResponse PutListingsItem (string sellerId, string sku, List<string> marketplaceIds, ListingsItemPutRequest body, List<string> includedData = null, string mode = null, string issueLocale = null)
        {
             ApiResponse<ListingsItemSubmissionResponse> localVarResponse = PutListingsItemWithHttpInfo(sellerId, sku, marketplaceIds, body, includedData, mode, issueLocale);
             return localVarResponse.Data;
        }

        /// <summary>
        /// putListingsItem Creates or fully updates an existing listings item for a selling partner.  **Note:** This operation has a throttling rate of one request per second when &#x60;mode&#x60; is &#x60;VALIDATION_PREVIEW&#x60;.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="body">The request body schema for the &#x60;putListingsItem&#x60; operation.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;issues&#x60;. (optional, default to [&quot;issues&quot;])</param>
        /// <param name="mode">The mode of operation for the request. (optional)</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>ApiResponse of ListingsItemSubmissionResponse</returns>
        public ApiResponse< ListingsItemSubmissionResponse > PutListingsItemWithHttpInfo (string sellerId, string sku, List<string> marketplaceIds, ListingsItemPutRequest body, List<string> includedData = null, string mode = null, string issueLocale = null)
        {
            // verify the required parameter 'sellerId' is set
            if (sellerId == null)
                throw new ApiException(400, "Missing required parameter 'sellerId' when calling ListingsItemsApi->PutListingsItem");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling ListingsItemsApi->PutListingsItem");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ListingsItemsApi->PutListingsItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ListingsItemsApi->PutListingsItem");

            var localVarPath = "/listings/2021-08-01/items/{sellerId}/{sku}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerId != null) localVarPathParams.Add("sellerId", this.Configuration.ApiClient.ParameterToString(sellerId)); // path parameter
            if (sku != null) localVarPathParams.Add("sku", this.Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (includedData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "includedData", includedData)); // query parameter
            if (mode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mode", mode)); // query parameter
            if (issueLocale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "issueLocale", issueLocale)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutListingsItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingsItemSubmissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListingsItemSubmissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingsItemSubmissionResponse)));
        }

        /// <summary>
        /// putListingsItem Creates or fully updates an existing listings item for a selling partner.  **Note:** This operation has a throttling rate of one request per second when &#x60;mode&#x60; is &#x60;VALIDATION_PREVIEW&#x60;.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="body">The request body schema for the &#x60;putListingsItem&#x60; operation.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;issues&#x60;. (optional, default to [&quot;issues&quot;])</param>
        /// <param name="mode">The mode of operation for the request. (optional)</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>Task of ListingsItemSubmissionResponse</returns>
        public async System.Threading.Tasks.Task<ListingsItemSubmissionResponse> PutListingsItemAsync (string sellerId, string sku, List<string> marketplaceIds, ListingsItemPutRequest body, List<string> includedData = null, string mode = null, string issueLocale = null)
        {
             ApiResponse<ListingsItemSubmissionResponse> localVarResponse = await PutListingsItemAsyncWithHttpInfo(sellerId, sku, marketplaceIds, body, includedData, mode, issueLocale);
             return localVarResponse.Data;

        }

        /// <summary>
        /// putListingsItem Creates or fully updates an existing listings item for a selling partner.  **Note:** This operation has a throttling rate of one request per second when &#x60;mode&#x60; is &#x60;VALIDATION_PREVIEW&#x60;.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerId">A selling partner identifier, such as a merchant account or vendor code.</param>
        /// <param name="sku">A selling partner provided identifier for an Amazon listing.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="body">The request body schema for the &#x60;putListingsItem&#x60; operation.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;issues&#x60;. (optional, default to [&quot;issues&quot;])</param>
        /// <param name="mode">The mode of operation for the request. (optional)</param>
        /// <param name="issueLocale">A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale. (optional)</param>
        /// <returns>Task of ApiResponse (ListingsItemSubmissionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListingsItemSubmissionResponse>> PutListingsItemAsyncWithHttpInfo (string sellerId, string sku, List<string> marketplaceIds, ListingsItemPutRequest body, List<string> includedData = null, string mode = null, string issueLocale = null)
        {
            // verify the required parameter 'sellerId' is set
            if (sellerId == null)
                throw new ApiException(400, "Missing required parameter 'sellerId' when calling ListingsItemsApi->PutListingsItem");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling ListingsItemsApi->PutListingsItem");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ListingsItemsApi->PutListingsItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ListingsItemsApi->PutListingsItem");

            var localVarPath = "/listings/2021-08-01/items/{sellerId}/{sku}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerId != null) localVarPathParams.Add("sellerId", this.Configuration.ApiClient.ParameterToString(sellerId)); // path parameter
            if (sku != null) localVarPathParams.Add("sku", this.Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (includedData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "includedData", includedData)); // query parameter
            if (mode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mode", mode)); // query parameter
            if (issueLocale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "issueLocale", issueLocale)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutListingsItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingsItemSubmissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListingsItemSubmissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingsItemSubmissionResponse)));
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }
            
            
            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public ListingsItemsApi Build() 
            {
                if (lwaAuthorizationCredentials == null) 
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }

                
                Amazon.SellingPartnerAPIAA.Clients.Client.Configuration configuration = new Amazon.SellingPartnerAPIAA.Clients.Client.Configuration()
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    RateLimitConfig = rateLimitConfiguration
                };

                // default HTTP connection timeout (in milliseconds)
                configuration.Timeout = 100000;

                return new ListingsItemsApi(configuration);
            }
        }
    }
}
