/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Amazon.SellingPartnerAPIAA.Clients.Client;
using Amazon.SellingPartnerAPIAA.Clients.Models.AplusContent;
using Amazon.SellingPartnerAPIAA;

namespace Amazon.SellingPartnerAPIAA.Clients.API
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAplusContentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>PostContentDocumentResponse</returns>
        PostContentDocumentResponse CreateContentDocument (string marketplaceId, PostContentDocumentRequest postContentDocumentRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>ApiResponse of PostContentDocumentResponse</returns>
        ApiResponse<PostContentDocumentResponse> CreateContentDocumentWithHttpInfo (string marketplaceId, PostContentDocumentRequest postContentDocumentRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns an A+ Content document, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response.</param>
        /// <returns>GetContentDocumentResponse</returns>
        GetContentDocumentResponse GetContentDocument (string contentReferenceKey, string marketplaceId, List<string> includedDataSet);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns an A+ Content document, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response.</param>
        /// <returns>ApiResponse of GetContentDocumentResponse</returns>
        ApiResponse<GetContentDocumentResponse> GetContentDocumentWithHttpInfo (string contentReferenceKey, string marketplaceId, List<string> includedDataSet);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of ASINs related to the specified A+ Content document, if available. If you do not include the asinSet parameter, the operation returns all ASINs related to the content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata. (optional)</param>
        /// <param name="asinSet">The set of ASINs. (optional)</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>ListContentDocumentAsinRelationsResponse</returns>
        ListContentDocumentAsinRelationsResponse ListContentDocumentAsinRelations (string contentReferenceKey, string marketplaceId, List<string> includedDataSet = null, List<string> asinSet = null, string pageToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of ASINs related to the specified A+ Content document, if available. If you do not include the asinSet parameter, the operation returns all ASINs related to the content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata. (optional)</param>
        /// <param name="asinSet">The set of ASINs. (optional)</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>ApiResponse of ListContentDocumentAsinRelationsResponse</returns>
        ApiResponse<ListContentDocumentAsinRelationsResponse> ListContentDocumentAsinRelationsWithHttpInfo (string contentReferenceKey, string marketplaceId, List<string> includedDataSet = null, List<string> asinSet = null, string pageToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits an A+ Content document for review, approval, and publishing.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>PostContentDocumentApprovalSubmissionResponse</returns>
        PostContentDocumentApprovalSubmissionResponse PostContentDocumentApprovalSubmission (string contentReferenceKey, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits an A+ Content document for review, approval, and publishing.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>ApiResponse of PostContentDocumentApprovalSubmissionResponse</returns>
        ApiResponse<PostContentDocumentApprovalSubmissionResponse> PostContentDocumentApprovalSubmissionWithHttpInfo (string contentReferenceKey, string marketplaceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Replaces all ASINs related to the specified A+ Content document, if available. This may add or remove ASINs, depending on the current set of related ASINs. Removing an ASIN has the side effect of suspending the content document from that ASIN.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentAsinRelationsRequest">The content document ASIN relations request details.</param>
        /// <returns>PostContentDocumentAsinRelationsResponse</returns>
        PostContentDocumentAsinRelationsResponse PostContentDocumentAsinRelations (string contentReferenceKey, string marketplaceId, PostContentDocumentAsinRelationsRequest postContentDocumentAsinRelationsRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Replaces all ASINs related to the specified A+ Content document, if available. This may add or remove ASINs, depending on the current set of related ASINs. Removing an ASIN has the side effect of suspending the content document from that ASIN.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentAsinRelationsRequest">The content document ASIN relations request details.</param>
        /// <returns>ApiResponse of PostContentDocumentAsinRelationsResponse</returns>
        ApiResponse<PostContentDocumentAsinRelationsResponse> PostContentDocumentAsinRelationsWithHttpInfo (string contentReferenceKey, string marketplaceId, PostContentDocumentAsinRelationsRequest postContentDocumentAsinRelationsRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits a request to suspend visible A+ Content. This neither deletes the content document nor the ASIN relations.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>PostContentDocumentSuspendSubmissionResponse</returns>
        PostContentDocumentSuspendSubmissionResponse PostContentDocumentSuspendSubmission (string contentReferenceKey, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits a request to suspend visible A+ Content. This neither deletes the content document nor the ASIN relations.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>ApiResponse of PostContentDocumentSuspendSubmissionResponse</returns>
        ApiResponse<PostContentDocumentSuspendSubmissionResponse> PostContentDocumentSuspendSubmissionWithHttpInfo (string contentReferenceKey, string marketplaceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all A+ Content documents assigned to a selling partner. This operation returns only the metadata of the A+ Content documents. Call the getContentDocument operation to get the actual contents of the A+ Content documents.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>SearchContentDocumentsResponse</returns>
        SearchContentDocumentsResponse SearchContentDocuments (string marketplaceId, string pageToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all A+ Content documents assigned to a selling partner. This operation returns only the metadata of the A+ Content documents. Call the getContentDocument operation to get the actual contents of the A+ Content documents.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>ApiResponse of SearchContentDocumentsResponse</returns>
        ApiResponse<SearchContentDocumentsResponse> SearchContentDocumentsWithHttpInfo (string marketplaceId, string pageToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for A+ Content publishing records, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN).</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>SearchContentPublishRecordsResponse</returns>
        SearchContentPublishRecordsResponse SearchContentPublishRecords (string marketplaceId, string asin, string pageToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for A+ Content publishing records, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN).</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>ApiResponse of SearchContentPublishRecordsResponse</returns>
        ApiResponse<SearchContentPublishRecordsResponse> SearchContentPublishRecordsWithHttpInfo (string marketplaceId, string asin, string pageToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>PostContentDocumentResponse</returns>
        PostContentDocumentResponse UpdateContentDocument (string contentReferenceKey, string marketplaceId, PostContentDocumentRequest postContentDocumentRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>ApiResponse of PostContentDocumentResponse</returns>
        ApiResponse<PostContentDocumentResponse> UpdateContentDocumentWithHttpInfo (string contentReferenceKey, string marketplaceId, PostContentDocumentRequest postContentDocumentRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Checks if the A+ Content document is valid for use on a set of ASINs.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <param name="asinSet">The set of ASINs. (optional)</param>
        /// <returns>ValidateContentDocumentAsinRelationsResponse</returns>
        ValidateContentDocumentAsinRelationsResponse ValidateContentDocumentAsinRelations (string marketplaceId, PostContentDocumentRequest postContentDocumentRequest, List<string> asinSet = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Checks if the A+ Content document is valid for use on a set of ASINs.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <param name="asinSet">The set of ASINs. (optional)</param>
        /// <returns>ApiResponse of ValidateContentDocumentAsinRelationsResponse</returns>
        ApiResponse<ValidateContentDocumentAsinRelationsResponse> ValidateContentDocumentAsinRelationsWithHttpInfo (string marketplaceId, PostContentDocumentRequest postContentDocumentRequest, List<string> asinSet = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>Task of PostContentDocumentResponse</returns>
        System.Threading.Tasks.Task<PostContentDocumentResponse> CreateContentDocumentAsync (string marketplaceId, PostContentDocumentRequest postContentDocumentRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>Task of ApiResponse (PostContentDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostContentDocumentResponse>> CreateContentDocumentAsyncWithHttpInfo (string marketplaceId, PostContentDocumentRequest postContentDocumentRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns an A+ Content document, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response.</param>
        /// <returns>Task of GetContentDocumentResponse</returns>
        System.Threading.Tasks.Task<GetContentDocumentResponse> GetContentDocumentAsync (string contentReferenceKey, string marketplaceId, List<string> includedDataSet);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns an A+ Content document, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response.</param>
        /// <returns>Task of ApiResponse (GetContentDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContentDocumentResponse>> GetContentDocumentAsyncWithHttpInfo (string contentReferenceKey, string marketplaceId, List<string> includedDataSet);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of ASINs related to the specified A+ Content document, if available. If you do not include the asinSet parameter, the operation returns all ASINs related to the content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata. (optional)</param>
        /// <param name="asinSet">The set of ASINs. (optional)</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>Task of ListContentDocumentAsinRelationsResponse</returns>
        System.Threading.Tasks.Task<ListContentDocumentAsinRelationsResponse> ListContentDocumentAsinRelationsAsync (string contentReferenceKey, string marketplaceId, List<string> includedDataSet = null, List<string> asinSet = null, string pageToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of ASINs related to the specified A+ Content document, if available. If you do not include the asinSet parameter, the operation returns all ASINs related to the content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata. (optional)</param>
        /// <param name="asinSet">The set of ASINs. (optional)</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>Task of ApiResponse (ListContentDocumentAsinRelationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListContentDocumentAsinRelationsResponse>> ListContentDocumentAsinRelationsAsyncWithHttpInfo (string contentReferenceKey, string marketplaceId, List<string> includedDataSet = null, List<string> asinSet = null, string pageToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits an A+ Content document for review, approval, and publishing.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>Task of PostContentDocumentApprovalSubmissionResponse</returns>
        System.Threading.Tasks.Task<PostContentDocumentApprovalSubmissionResponse> PostContentDocumentApprovalSubmissionAsync (string contentReferenceKey, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits an A+ Content document for review, approval, and publishing.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>Task of ApiResponse (PostContentDocumentApprovalSubmissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostContentDocumentApprovalSubmissionResponse>> PostContentDocumentApprovalSubmissionAsyncWithHttpInfo (string contentReferenceKey, string marketplaceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Replaces all ASINs related to the specified A+ Content document, if available. This may add or remove ASINs, depending on the current set of related ASINs. Removing an ASIN has the side effect of suspending the content document from that ASIN.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentAsinRelationsRequest">The content document ASIN relations request details.</param>
        /// <returns>Task of PostContentDocumentAsinRelationsResponse</returns>
        System.Threading.Tasks.Task<PostContentDocumentAsinRelationsResponse> PostContentDocumentAsinRelationsAsync (string contentReferenceKey, string marketplaceId, PostContentDocumentAsinRelationsRequest postContentDocumentAsinRelationsRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Replaces all ASINs related to the specified A+ Content document, if available. This may add or remove ASINs, depending on the current set of related ASINs. Removing an ASIN has the side effect of suspending the content document from that ASIN.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentAsinRelationsRequest">The content document ASIN relations request details.</param>
        /// <returns>Task of ApiResponse (PostContentDocumentAsinRelationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostContentDocumentAsinRelationsResponse>> PostContentDocumentAsinRelationsAsyncWithHttpInfo (string contentReferenceKey, string marketplaceId, PostContentDocumentAsinRelationsRequest postContentDocumentAsinRelationsRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits a request to suspend visible A+ Content. This neither deletes the content document nor the ASIN relations.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>Task of PostContentDocumentSuspendSubmissionResponse</returns>
        System.Threading.Tasks.Task<PostContentDocumentSuspendSubmissionResponse> PostContentDocumentSuspendSubmissionAsync (string contentReferenceKey, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits a request to suspend visible A+ Content. This neither deletes the content document nor the ASIN relations.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>Task of ApiResponse (PostContentDocumentSuspendSubmissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostContentDocumentSuspendSubmissionResponse>> PostContentDocumentSuspendSubmissionAsyncWithHttpInfo (string contentReferenceKey, string marketplaceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all A+ Content documents assigned to a selling partner. This operation returns only the metadata of the A+ Content documents. Call the getContentDocument operation to get the actual contents of the A+ Content documents.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>Task of SearchContentDocumentsResponse</returns>
        System.Threading.Tasks.Task<SearchContentDocumentsResponse> SearchContentDocumentsAsync (string marketplaceId, string pageToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all A+ Content documents assigned to a selling partner. This operation returns only the metadata of the A+ Content documents. Call the getContentDocument operation to get the actual contents of the A+ Content documents.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>Task of ApiResponse (SearchContentDocumentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchContentDocumentsResponse>> SearchContentDocumentsAsyncWithHttpInfo (string marketplaceId, string pageToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for A+ Content publishing records, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN).</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>Task of SearchContentPublishRecordsResponse</returns>
        System.Threading.Tasks.Task<SearchContentPublishRecordsResponse> SearchContentPublishRecordsAsync (string marketplaceId, string asin, string pageToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for A+ Content publishing records, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN).</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>Task of ApiResponse (SearchContentPublishRecordsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchContentPublishRecordsResponse>> SearchContentPublishRecordsAsyncWithHttpInfo (string marketplaceId, string asin, string pageToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>Task of PostContentDocumentResponse</returns>
        System.Threading.Tasks.Task<PostContentDocumentResponse> UpdateContentDocumentAsync (string contentReferenceKey, string marketplaceId, PostContentDocumentRequest postContentDocumentRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>Task of ApiResponse (PostContentDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostContentDocumentResponse>> UpdateContentDocumentAsyncWithHttpInfo (string contentReferenceKey, string marketplaceId, PostContentDocumentRequest postContentDocumentRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Checks if the A+ Content document is valid for use on a set of ASINs.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <param name="asinSet">The set of ASINs. (optional)</param>
        /// <returns>Task of ValidateContentDocumentAsinRelationsResponse</returns>
        System.Threading.Tasks.Task<ValidateContentDocumentAsinRelationsResponse> ValidateContentDocumentAsinRelationsAsync (string marketplaceId, PostContentDocumentRequest postContentDocumentRequest, List<string> asinSet = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Checks if the A+ Content document is valid for use on a set of ASINs.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <param name="asinSet">The set of ASINs. (optional)</param>
        /// <returns>Task of ApiResponse (ValidateContentDocumentAsinRelationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateContentDocumentAsinRelationsResponse>> ValidateContentDocumentAsinRelationsAsyncWithHttpInfo (string marketplaceId, PostContentDocumentRequest postContentDocumentRequest, List<string> asinSet = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AplusContentApi : IAplusContentApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AplusContentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AplusContentApi(Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = Amazon.SellingPartnerAPIAA.Clients.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Creates a new A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>PostContentDocumentResponse</returns>
        public PostContentDocumentResponse CreateContentDocument (string marketplaceId, PostContentDocumentRequest postContentDocumentRequest)
        {
             ApiResponse<PostContentDocumentResponse> localVarResponse = CreateContentDocumentWithHttpInfo(marketplaceId, postContentDocumentRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>ApiResponse of PostContentDocumentResponse</returns>
        public ApiResponse< PostContentDocumentResponse > CreateContentDocumentWithHttpInfo (string marketplaceId, PostContentDocumentRequest postContentDocumentRequest)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AplusContentApi->CreateContentDocument");
            // verify the required parameter 'postContentDocumentRequest' is set
            if (postContentDocumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'postContentDocumentRequest' when calling AplusContentApi->CreateContentDocument");

            var localVarPath = "/aplus/2020-11-01/contentDocuments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (postContentDocumentRequest != null && postContentDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postContentDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postContentDocumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContentDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostContentDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostContentDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostContentDocumentResponse)));
        }

        /// <summary>
        ///  Creates a new A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>Task of PostContentDocumentResponse</returns>
        public async System.Threading.Tasks.Task<PostContentDocumentResponse> CreateContentDocumentAsync (string marketplaceId, PostContentDocumentRequest postContentDocumentRequest)
        {
             ApiResponse<PostContentDocumentResponse> localVarResponse = await CreateContentDocumentAsyncWithHttpInfo(marketplaceId, postContentDocumentRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a new A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>Task of ApiResponse (PostContentDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostContentDocumentResponse>> CreateContentDocumentAsyncWithHttpInfo (string marketplaceId, PostContentDocumentRequest postContentDocumentRequest)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AplusContentApi->CreateContentDocument");
            // verify the required parameter 'postContentDocumentRequest' is set
            if (postContentDocumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'postContentDocumentRequest' when calling AplusContentApi->CreateContentDocument");

            var localVarPath = "/aplus/2020-11-01/contentDocuments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (postContentDocumentRequest != null && postContentDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postContentDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postContentDocumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContentDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostContentDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostContentDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostContentDocumentResponse)));
        }

        /// <summary>
        ///  Returns an A+ Content document, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response.</param>
        /// <returns>GetContentDocumentResponse</returns>
        public GetContentDocumentResponse GetContentDocument (string contentReferenceKey, string marketplaceId, List<string> includedDataSet)
        {
             ApiResponse<GetContentDocumentResponse> localVarResponse = GetContentDocumentWithHttpInfo(contentReferenceKey, marketplaceId, includedDataSet);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns an A+ Content document, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response.</param>
        /// <returns>ApiResponse of GetContentDocumentResponse</returns>
        public ApiResponse< GetContentDocumentResponse > GetContentDocumentWithHttpInfo (string contentReferenceKey, string marketplaceId, List<string> includedDataSet)
        {
            // verify the required parameter 'contentReferenceKey' is set
            if (contentReferenceKey == null)
                throw new ApiException(400, "Missing required parameter 'contentReferenceKey' when calling AplusContentApi->GetContentDocument");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AplusContentApi->GetContentDocument");
            // verify the required parameter 'includedDataSet' is set
            if (includedDataSet == null)
                throw new ApiException(400, "Missing required parameter 'includedDataSet' when calling AplusContentApi->GetContentDocument");

            var localVarPath = "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentReferenceKey != null) localVarPathParams.Add("contentReferenceKey", this.Configuration.ApiClient.ParameterToString(contentReferenceKey)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (includedDataSet != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "includedDataSet", includedDataSet)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContentDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContentDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContentDocumentResponse)));
        }

        /// <summary>
        ///  Returns an A+ Content document, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response.</param>
        /// <returns>Task of GetContentDocumentResponse</returns>
        public async System.Threading.Tasks.Task<GetContentDocumentResponse> GetContentDocumentAsync (string contentReferenceKey, string marketplaceId, List<string> includedDataSet)
        {
             ApiResponse<GetContentDocumentResponse> localVarResponse = await GetContentDocumentAsyncWithHttpInfo(contentReferenceKey, marketplaceId, includedDataSet);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns an A+ Content document, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response.</param>
        /// <returns>Task of ApiResponse (GetContentDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContentDocumentResponse>> GetContentDocumentAsyncWithHttpInfo (string contentReferenceKey, string marketplaceId, List<string> includedDataSet)
        {
            // verify the required parameter 'contentReferenceKey' is set
            if (contentReferenceKey == null)
                throw new ApiException(400, "Missing required parameter 'contentReferenceKey' when calling AplusContentApi->GetContentDocument");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AplusContentApi->GetContentDocument");
            // verify the required parameter 'includedDataSet' is set
            if (includedDataSet == null)
                throw new ApiException(400, "Missing required parameter 'includedDataSet' when calling AplusContentApi->GetContentDocument");

            var localVarPath = "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentReferenceKey != null) localVarPathParams.Add("contentReferenceKey", this.Configuration.ApiClient.ParameterToString(contentReferenceKey)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (includedDataSet != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "includedDataSet", includedDataSet)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContentDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContentDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContentDocumentResponse)));
        }

        /// <summary>
        ///  Returns a list of ASINs related to the specified A+ Content document, if available. If you do not include the asinSet parameter, the operation returns all ASINs related to the content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata. (optional)</param>
        /// <param name="asinSet">The set of ASINs. (optional)</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>ListContentDocumentAsinRelationsResponse</returns>
        public ListContentDocumentAsinRelationsResponse ListContentDocumentAsinRelations (string contentReferenceKey, string marketplaceId, List<string> includedDataSet = null, List<string> asinSet = null, string pageToken = null)
        {
             ApiResponse<ListContentDocumentAsinRelationsResponse> localVarResponse = ListContentDocumentAsinRelationsWithHttpInfo(contentReferenceKey, marketplaceId, includedDataSet, asinSet, pageToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of ASINs related to the specified A+ Content document, if available. If you do not include the asinSet parameter, the operation returns all ASINs related to the content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata. (optional)</param>
        /// <param name="asinSet">The set of ASINs. (optional)</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>ApiResponse of ListContentDocumentAsinRelationsResponse</returns>
        public ApiResponse< ListContentDocumentAsinRelationsResponse > ListContentDocumentAsinRelationsWithHttpInfo (string contentReferenceKey, string marketplaceId, List<string> includedDataSet = null, List<string> asinSet = null, string pageToken = null)
        {
            // verify the required parameter 'contentReferenceKey' is set
            if (contentReferenceKey == null)
                throw new ApiException(400, "Missing required parameter 'contentReferenceKey' when calling AplusContentApi->ListContentDocumentAsinRelations");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AplusContentApi->ListContentDocumentAsinRelations");

            var localVarPath = "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentReferenceKey != null) localVarPathParams.Add("contentReferenceKey", this.Configuration.ApiClient.ParameterToString(contentReferenceKey)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (includedDataSet != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "includedDataSet", includedDataSet)); // query parameter
            if (asinSet != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "asinSet", asinSet)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListContentDocumentAsinRelations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListContentDocumentAsinRelationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListContentDocumentAsinRelationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListContentDocumentAsinRelationsResponse)));
        }

        /// <summary>
        ///  Returns a list of ASINs related to the specified A+ Content document, if available. If you do not include the asinSet parameter, the operation returns all ASINs related to the content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata. (optional)</param>
        /// <param name="asinSet">The set of ASINs. (optional)</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>Task of ListContentDocumentAsinRelationsResponse</returns>
        public async System.Threading.Tasks.Task<ListContentDocumentAsinRelationsResponse> ListContentDocumentAsinRelationsAsync (string contentReferenceKey, string marketplaceId, List<string> includedDataSet = null, List<string> asinSet = null, string pageToken = null)
        {
             ApiResponse<ListContentDocumentAsinRelationsResponse> localVarResponse = await ListContentDocumentAsinRelationsAsyncWithHttpInfo(contentReferenceKey, marketplaceId, includedDataSet, asinSet, pageToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of ASINs related to the specified A+ Content document, if available. If you do not include the asinSet parameter, the operation returns all ASINs related to the content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata. (optional)</param>
        /// <param name="asinSet">The set of ASINs. (optional)</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>Task of ApiResponse (ListContentDocumentAsinRelationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListContentDocumentAsinRelationsResponse>> ListContentDocumentAsinRelationsAsyncWithHttpInfo (string contentReferenceKey, string marketplaceId, List<string> includedDataSet = null, List<string> asinSet = null, string pageToken = null)
        {
            // verify the required parameter 'contentReferenceKey' is set
            if (contentReferenceKey == null)
                throw new ApiException(400, "Missing required parameter 'contentReferenceKey' when calling AplusContentApi->ListContentDocumentAsinRelations");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AplusContentApi->ListContentDocumentAsinRelations");

            var localVarPath = "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentReferenceKey != null) localVarPathParams.Add("contentReferenceKey", this.Configuration.ApiClient.ParameterToString(contentReferenceKey)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (includedDataSet != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "includedDataSet", includedDataSet)); // query parameter
            if (asinSet != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "asinSet", asinSet)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListContentDocumentAsinRelations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListContentDocumentAsinRelationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListContentDocumentAsinRelationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListContentDocumentAsinRelationsResponse)));
        }

        /// <summary>
        ///  Submits an A+ Content document for review, approval, and publishing.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>PostContentDocumentApprovalSubmissionResponse</returns>
        public PostContentDocumentApprovalSubmissionResponse PostContentDocumentApprovalSubmission (string contentReferenceKey, string marketplaceId)
        {
             ApiResponse<PostContentDocumentApprovalSubmissionResponse> localVarResponse = PostContentDocumentApprovalSubmissionWithHttpInfo(contentReferenceKey, marketplaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Submits an A+ Content document for review, approval, and publishing.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>ApiResponse of PostContentDocumentApprovalSubmissionResponse</returns>
        public ApiResponse< PostContentDocumentApprovalSubmissionResponse > PostContentDocumentApprovalSubmissionWithHttpInfo (string contentReferenceKey, string marketplaceId)
        {
            // verify the required parameter 'contentReferenceKey' is set
            if (contentReferenceKey == null)
                throw new ApiException(400, "Missing required parameter 'contentReferenceKey' when calling AplusContentApi->PostContentDocumentApprovalSubmission");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AplusContentApi->PostContentDocumentApprovalSubmission");

            var localVarPath = "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/approvalSubmissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentReferenceKey != null) localVarPathParams.Add("contentReferenceKey", this.Configuration.ApiClient.ParameterToString(contentReferenceKey)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostContentDocumentApprovalSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostContentDocumentApprovalSubmissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostContentDocumentApprovalSubmissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostContentDocumentApprovalSubmissionResponse)));
        }

        /// <summary>
        ///  Submits an A+ Content document for review, approval, and publishing.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>Task of PostContentDocumentApprovalSubmissionResponse</returns>
        public async System.Threading.Tasks.Task<PostContentDocumentApprovalSubmissionResponse> PostContentDocumentApprovalSubmissionAsync (string contentReferenceKey, string marketplaceId)
        {
             ApiResponse<PostContentDocumentApprovalSubmissionResponse> localVarResponse = await PostContentDocumentApprovalSubmissionAsyncWithHttpInfo(contentReferenceKey, marketplaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Submits an A+ Content document for review, approval, and publishing.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>Task of ApiResponse (PostContentDocumentApprovalSubmissionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostContentDocumentApprovalSubmissionResponse>> PostContentDocumentApprovalSubmissionAsyncWithHttpInfo (string contentReferenceKey, string marketplaceId)
        {
            // verify the required parameter 'contentReferenceKey' is set
            if (contentReferenceKey == null)
                throw new ApiException(400, "Missing required parameter 'contentReferenceKey' when calling AplusContentApi->PostContentDocumentApprovalSubmission");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AplusContentApi->PostContentDocumentApprovalSubmission");

            var localVarPath = "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/approvalSubmissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentReferenceKey != null) localVarPathParams.Add("contentReferenceKey", this.Configuration.ApiClient.ParameterToString(contentReferenceKey)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostContentDocumentApprovalSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostContentDocumentApprovalSubmissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostContentDocumentApprovalSubmissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostContentDocumentApprovalSubmissionResponse)));
        }

        /// <summary>
        ///  Replaces all ASINs related to the specified A+ Content document, if available. This may add or remove ASINs, depending on the current set of related ASINs. Removing an ASIN has the side effect of suspending the content document from that ASIN.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentAsinRelationsRequest">The content document ASIN relations request details.</param>
        /// <returns>PostContentDocumentAsinRelationsResponse</returns>
        public PostContentDocumentAsinRelationsResponse PostContentDocumentAsinRelations (string contentReferenceKey, string marketplaceId, PostContentDocumentAsinRelationsRequest postContentDocumentAsinRelationsRequest)
        {
             ApiResponse<PostContentDocumentAsinRelationsResponse> localVarResponse = PostContentDocumentAsinRelationsWithHttpInfo(contentReferenceKey, marketplaceId, postContentDocumentAsinRelationsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Replaces all ASINs related to the specified A+ Content document, if available. This may add or remove ASINs, depending on the current set of related ASINs. Removing an ASIN has the side effect of suspending the content document from that ASIN.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentAsinRelationsRequest">The content document ASIN relations request details.</param>
        /// <returns>ApiResponse of PostContentDocumentAsinRelationsResponse</returns>
        public ApiResponse< PostContentDocumentAsinRelationsResponse > PostContentDocumentAsinRelationsWithHttpInfo (string contentReferenceKey, string marketplaceId, PostContentDocumentAsinRelationsRequest postContentDocumentAsinRelationsRequest)
        {
            // verify the required parameter 'contentReferenceKey' is set
            if (contentReferenceKey == null)
                throw new ApiException(400, "Missing required parameter 'contentReferenceKey' when calling AplusContentApi->PostContentDocumentAsinRelations");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AplusContentApi->PostContentDocumentAsinRelations");
            // verify the required parameter 'postContentDocumentAsinRelationsRequest' is set
            if (postContentDocumentAsinRelationsRequest == null)
                throw new ApiException(400, "Missing required parameter 'postContentDocumentAsinRelationsRequest' when calling AplusContentApi->PostContentDocumentAsinRelations");

            var localVarPath = "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentReferenceKey != null) localVarPathParams.Add("contentReferenceKey", this.Configuration.ApiClient.ParameterToString(contentReferenceKey)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (postContentDocumentAsinRelationsRequest != null && postContentDocumentAsinRelationsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postContentDocumentAsinRelationsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postContentDocumentAsinRelationsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostContentDocumentAsinRelations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostContentDocumentAsinRelationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostContentDocumentAsinRelationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostContentDocumentAsinRelationsResponse)));
        }

        /// <summary>
        ///  Replaces all ASINs related to the specified A+ Content document, if available. This may add or remove ASINs, depending on the current set of related ASINs. Removing an ASIN has the side effect of suspending the content document from that ASIN.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentAsinRelationsRequest">The content document ASIN relations request details.</param>
        /// <returns>Task of PostContentDocumentAsinRelationsResponse</returns>
        public async System.Threading.Tasks.Task<PostContentDocumentAsinRelationsResponse> PostContentDocumentAsinRelationsAsync (string contentReferenceKey, string marketplaceId, PostContentDocumentAsinRelationsRequest postContentDocumentAsinRelationsRequest)
        {
             ApiResponse<PostContentDocumentAsinRelationsResponse> localVarResponse = await PostContentDocumentAsinRelationsAsyncWithHttpInfo(contentReferenceKey, marketplaceId, postContentDocumentAsinRelationsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Replaces all ASINs related to the specified A+ Content document, if available. This may add or remove ASINs, depending on the current set of related ASINs. Removing an ASIN has the side effect of suspending the content document from that ASIN.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentAsinRelationsRequest">The content document ASIN relations request details.</param>
        /// <returns>Task of ApiResponse (PostContentDocumentAsinRelationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostContentDocumentAsinRelationsResponse>> PostContentDocumentAsinRelationsAsyncWithHttpInfo (string contentReferenceKey, string marketplaceId, PostContentDocumentAsinRelationsRequest postContentDocumentAsinRelationsRequest)
        {
            // verify the required parameter 'contentReferenceKey' is set
            if (contentReferenceKey == null)
                throw new ApiException(400, "Missing required parameter 'contentReferenceKey' when calling AplusContentApi->PostContentDocumentAsinRelations");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AplusContentApi->PostContentDocumentAsinRelations");
            // verify the required parameter 'postContentDocumentAsinRelationsRequest' is set
            if (postContentDocumentAsinRelationsRequest == null)
                throw new ApiException(400, "Missing required parameter 'postContentDocumentAsinRelationsRequest' when calling AplusContentApi->PostContentDocumentAsinRelations");

            var localVarPath = "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentReferenceKey != null) localVarPathParams.Add("contentReferenceKey", this.Configuration.ApiClient.ParameterToString(contentReferenceKey)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (postContentDocumentAsinRelationsRequest != null && postContentDocumentAsinRelationsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postContentDocumentAsinRelationsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postContentDocumentAsinRelationsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostContentDocumentAsinRelations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostContentDocumentAsinRelationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostContentDocumentAsinRelationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostContentDocumentAsinRelationsResponse)));
        }

        /// <summary>
        ///  Submits a request to suspend visible A+ Content. This neither deletes the content document nor the ASIN relations.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>PostContentDocumentSuspendSubmissionResponse</returns>
        public PostContentDocumentSuspendSubmissionResponse PostContentDocumentSuspendSubmission (string contentReferenceKey, string marketplaceId)
        {
             ApiResponse<PostContentDocumentSuspendSubmissionResponse> localVarResponse = PostContentDocumentSuspendSubmissionWithHttpInfo(contentReferenceKey, marketplaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Submits a request to suspend visible A+ Content. This neither deletes the content document nor the ASIN relations.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>ApiResponse of PostContentDocumentSuspendSubmissionResponse</returns>
        public ApiResponse< PostContentDocumentSuspendSubmissionResponse > PostContentDocumentSuspendSubmissionWithHttpInfo (string contentReferenceKey, string marketplaceId)
        {
            // verify the required parameter 'contentReferenceKey' is set
            if (contentReferenceKey == null)
                throw new ApiException(400, "Missing required parameter 'contentReferenceKey' when calling AplusContentApi->PostContentDocumentSuspendSubmission");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AplusContentApi->PostContentDocumentSuspendSubmission");

            var localVarPath = "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentReferenceKey != null) localVarPathParams.Add("contentReferenceKey", this.Configuration.ApiClient.ParameterToString(contentReferenceKey)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostContentDocumentSuspendSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostContentDocumentSuspendSubmissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostContentDocumentSuspendSubmissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostContentDocumentSuspendSubmissionResponse)));
        }

        /// <summary>
        ///  Submits a request to suspend visible A+ Content. This neither deletes the content document nor the ASIN relations.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>Task of PostContentDocumentSuspendSubmissionResponse</returns>
        public async System.Threading.Tasks.Task<PostContentDocumentSuspendSubmissionResponse> PostContentDocumentSuspendSubmissionAsync (string contentReferenceKey, string marketplaceId)
        {
             ApiResponse<PostContentDocumentSuspendSubmissionResponse> localVarResponse = await PostContentDocumentSuspendSubmissionAsyncWithHttpInfo(contentReferenceKey, marketplaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Submits a request to suspend visible A+ Content. This neither deletes the content document nor the ASIN relations.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>Task of ApiResponse (PostContentDocumentSuspendSubmissionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostContentDocumentSuspendSubmissionResponse>> PostContentDocumentSuspendSubmissionAsyncWithHttpInfo (string contentReferenceKey, string marketplaceId)
        {
            // verify the required parameter 'contentReferenceKey' is set
            if (contentReferenceKey == null)
                throw new ApiException(400, "Missing required parameter 'contentReferenceKey' when calling AplusContentApi->PostContentDocumentSuspendSubmission");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AplusContentApi->PostContentDocumentSuspendSubmission");

            var localVarPath = "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentReferenceKey != null) localVarPathParams.Add("contentReferenceKey", this.Configuration.ApiClient.ParameterToString(contentReferenceKey)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostContentDocumentSuspendSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostContentDocumentSuspendSubmissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostContentDocumentSuspendSubmissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostContentDocumentSuspendSubmissionResponse)));
        }

        /// <summary>
        ///  Returns a list of all A+ Content documents assigned to a selling partner. This operation returns only the metadata of the A+ Content documents. Call the getContentDocument operation to get the actual contents of the A+ Content documents.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>SearchContentDocumentsResponse</returns>
        public SearchContentDocumentsResponse SearchContentDocuments (string marketplaceId, string pageToken = null)
        {
             ApiResponse<SearchContentDocumentsResponse> localVarResponse = SearchContentDocumentsWithHttpInfo(marketplaceId, pageToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of all A+ Content documents assigned to a selling partner. This operation returns only the metadata of the A+ Content documents. Call the getContentDocument operation to get the actual contents of the A+ Content documents.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>ApiResponse of SearchContentDocumentsResponse</returns>
        public ApiResponse< SearchContentDocumentsResponse > SearchContentDocumentsWithHttpInfo (string marketplaceId, string pageToken = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AplusContentApi->SearchContentDocuments");

            var localVarPath = "/aplus/2020-11-01/contentDocuments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchContentDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchContentDocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchContentDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchContentDocumentsResponse)));
        }

        /// <summary>
        ///  Returns a list of all A+ Content documents assigned to a selling partner. This operation returns only the metadata of the A+ Content documents. Call the getContentDocument operation to get the actual contents of the A+ Content documents.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>Task of SearchContentDocumentsResponse</returns>
        public async System.Threading.Tasks.Task<SearchContentDocumentsResponse> SearchContentDocumentsAsync (string marketplaceId, string pageToken = null)
        {
             ApiResponse<SearchContentDocumentsResponse> localVarResponse = await SearchContentDocumentsAsyncWithHttpInfo(marketplaceId, pageToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of all A+ Content documents assigned to a selling partner. This operation returns only the metadata of the A+ Content documents. Call the getContentDocument operation to get the actual contents of the A+ Content documents.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>Task of ApiResponse (SearchContentDocumentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchContentDocumentsResponse>> SearchContentDocumentsAsyncWithHttpInfo (string marketplaceId, string pageToken = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AplusContentApi->SearchContentDocuments");

            var localVarPath = "/aplus/2020-11-01/contentDocuments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchContentDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchContentDocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchContentDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchContentDocumentsResponse)));
        }

        /// <summary>
        ///  Searches for A+ Content publishing records, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN).</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>SearchContentPublishRecordsResponse</returns>
        public SearchContentPublishRecordsResponse SearchContentPublishRecords (string marketplaceId, string asin, string pageToken = null)
        {
             ApiResponse<SearchContentPublishRecordsResponse> localVarResponse = SearchContentPublishRecordsWithHttpInfo(marketplaceId, asin, pageToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Searches for A+ Content publishing records, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN).</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>ApiResponse of SearchContentPublishRecordsResponse</returns>
        public ApiResponse< SearchContentPublishRecordsResponse > SearchContentPublishRecordsWithHttpInfo (string marketplaceId, string asin, string pageToken = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AplusContentApi->SearchContentPublishRecords");
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling AplusContentApi->SearchContentPublishRecords");

            var localVarPath = "/aplus/2020-11-01/contentPublishRecords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (asin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asin", asin)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchContentPublishRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchContentPublishRecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchContentPublishRecordsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchContentPublishRecordsResponse)));
        }

        /// <summary>
        ///  Searches for A+ Content publishing records, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN).</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>Task of SearchContentPublishRecordsResponse</returns>
        public async System.Threading.Tasks.Task<SearchContentPublishRecordsResponse> SearchContentPublishRecordsAsync (string marketplaceId, string asin, string pageToken = null)
        {
             ApiResponse<SearchContentPublishRecordsResponse> localVarResponse = await SearchContentPublishRecordsAsyncWithHttpInfo(marketplaceId, asin, pageToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Searches for A+ Content publishing records, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN).</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)</param>
        /// <returns>Task of ApiResponse (SearchContentPublishRecordsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchContentPublishRecordsResponse>> SearchContentPublishRecordsAsyncWithHttpInfo (string marketplaceId, string asin, string pageToken = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AplusContentApi->SearchContentPublishRecords");
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling AplusContentApi->SearchContentPublishRecords");

            var localVarPath = "/aplus/2020-11-01/contentPublishRecords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (asin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asin", asin)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchContentPublishRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchContentPublishRecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchContentPublishRecordsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchContentPublishRecordsResponse)));
        }

        /// <summary>
        ///  Updates an existing A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>PostContentDocumentResponse</returns>
        public PostContentDocumentResponse UpdateContentDocument (string contentReferenceKey, string marketplaceId, PostContentDocumentRequest postContentDocumentRequest)
        {
             ApiResponse<PostContentDocumentResponse> localVarResponse = UpdateContentDocumentWithHttpInfo(contentReferenceKey, marketplaceId, postContentDocumentRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>ApiResponse of PostContentDocumentResponse</returns>
        public ApiResponse< PostContentDocumentResponse > UpdateContentDocumentWithHttpInfo (string contentReferenceKey, string marketplaceId, PostContentDocumentRequest postContentDocumentRequest)
        {
            // verify the required parameter 'contentReferenceKey' is set
            if (contentReferenceKey == null)
                throw new ApiException(400, "Missing required parameter 'contentReferenceKey' when calling AplusContentApi->UpdateContentDocument");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AplusContentApi->UpdateContentDocument");
            // verify the required parameter 'postContentDocumentRequest' is set
            if (postContentDocumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'postContentDocumentRequest' when calling AplusContentApi->UpdateContentDocument");

            var localVarPath = "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentReferenceKey != null) localVarPathParams.Add("contentReferenceKey", this.Configuration.ApiClient.ParameterToString(contentReferenceKey)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (postContentDocumentRequest != null && postContentDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postContentDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postContentDocumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContentDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostContentDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostContentDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostContentDocumentResponse)));
        }

        /// <summary>
        ///  Updates an existing A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>Task of PostContentDocumentResponse</returns>
        public async System.Threading.Tasks.Task<PostContentDocumentResponse> UpdateContentDocumentAsync (string contentReferenceKey, string marketplaceId, PostContentDocumentRequest postContentDocumentRequest)
        {
             ApiResponse<PostContentDocumentResponse> localVarResponse = await UpdateContentDocumentAsyncWithHttpInfo(contentReferenceKey, marketplaceId, postContentDocumentRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates an existing A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>Task of ApiResponse (PostContentDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostContentDocumentResponse>> UpdateContentDocumentAsyncWithHttpInfo (string contentReferenceKey, string marketplaceId, PostContentDocumentRequest postContentDocumentRequest)
        {
            // verify the required parameter 'contentReferenceKey' is set
            if (contentReferenceKey == null)
                throw new ApiException(400, "Missing required parameter 'contentReferenceKey' when calling AplusContentApi->UpdateContentDocument");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AplusContentApi->UpdateContentDocument");
            // verify the required parameter 'postContentDocumentRequest' is set
            if (postContentDocumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'postContentDocumentRequest' when calling AplusContentApi->UpdateContentDocument");

            var localVarPath = "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentReferenceKey != null) localVarPathParams.Add("contentReferenceKey", this.Configuration.ApiClient.ParameterToString(contentReferenceKey)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (postContentDocumentRequest != null && postContentDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postContentDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postContentDocumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContentDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostContentDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostContentDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostContentDocumentResponse)));
        }

        /// <summary>
        ///  Checks if the A+ Content document is valid for use on a set of ASINs.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <param name="asinSet">The set of ASINs. (optional)</param>
        /// <returns>ValidateContentDocumentAsinRelationsResponse</returns>
        public ValidateContentDocumentAsinRelationsResponse ValidateContentDocumentAsinRelations (string marketplaceId, PostContentDocumentRequest postContentDocumentRequest, List<string> asinSet = null)
        {
             ApiResponse<ValidateContentDocumentAsinRelationsResponse> localVarResponse = ValidateContentDocumentAsinRelationsWithHttpInfo(marketplaceId, postContentDocumentRequest, asinSet);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Checks if the A+ Content document is valid for use on a set of ASINs.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <param name="asinSet">The set of ASINs. (optional)</param>
        /// <returns>ApiResponse of ValidateContentDocumentAsinRelationsResponse</returns>
        public ApiResponse< ValidateContentDocumentAsinRelationsResponse > ValidateContentDocumentAsinRelationsWithHttpInfo (string marketplaceId, PostContentDocumentRequest postContentDocumentRequest, List<string> asinSet = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AplusContentApi->ValidateContentDocumentAsinRelations");
            // verify the required parameter 'postContentDocumentRequest' is set
            if (postContentDocumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'postContentDocumentRequest' when calling AplusContentApi->ValidateContentDocumentAsinRelations");

            var localVarPath = "/aplus/2020-11-01/contentAsinValidations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (asinSet != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "asinSet", asinSet)); // query parameter
            if (postContentDocumentRequest != null && postContentDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postContentDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postContentDocumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateContentDocumentAsinRelations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateContentDocumentAsinRelationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateContentDocumentAsinRelationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateContentDocumentAsinRelationsResponse)));
        }

        /// <summary>
        ///  Checks if the A+ Content document is valid for use on a set of ASINs.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <param name="asinSet">The set of ASINs. (optional)</param>
        /// <returns>Task of ValidateContentDocumentAsinRelationsResponse</returns>
        public async System.Threading.Tasks.Task<ValidateContentDocumentAsinRelationsResponse> ValidateContentDocumentAsinRelationsAsync (string marketplaceId, PostContentDocumentRequest postContentDocumentRequest, List<string> asinSet = null)
        {
             ApiResponse<ValidateContentDocumentAsinRelationsResponse> localVarResponse = await ValidateContentDocumentAsinRelationsAsyncWithHttpInfo(marketplaceId, postContentDocumentRequest, asinSet);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Checks if the A+ Content document is valid for use on a set of ASINs.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <param name="asinSet">The set of ASINs. (optional)</param>
        /// <returns>Task of ApiResponse (ValidateContentDocumentAsinRelationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidateContentDocumentAsinRelationsResponse>> ValidateContentDocumentAsinRelationsAsyncWithHttpInfo (string marketplaceId, PostContentDocumentRequest postContentDocumentRequest, List<string> asinSet = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AplusContentApi->ValidateContentDocumentAsinRelations");
            // verify the required parameter 'postContentDocumentRequest' is set
            if (postContentDocumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'postContentDocumentRequest' when calling AplusContentApi->ValidateContentDocumentAsinRelations");

            var localVarPath = "/aplus/2020-11-01/contentAsinValidations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (asinSet != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "asinSet", asinSet)); // query parameter
            if (postContentDocumentRequest != null && postContentDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postContentDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postContentDocumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateContentDocumentAsinRelations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateContentDocumentAsinRelationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateContentDocumentAsinRelationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateContentDocumentAsinRelationsResponse)));
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }
            
            
            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public AplusContentApi Build() 
            {
                if (lwaAuthorizationCredentials == null) 
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }


                Configuration configuration = new Configuration
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    RateLimitConfig = rateLimitConfiguration,
                    // default HTTP connection timeout (in milliseconds)
                    Timeout = 100000
                };

                return new AplusContentApi(configuration);
            }
        }
    }
}
