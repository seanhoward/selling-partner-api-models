/* 
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Amazon.SellingPartnerAPIAA.Clients.Client;
using Amazon.SellingPartnerAPIAA.Clients.Models.SellerWallet;
using RestSharp;

namespace Amazon.SellingPartnerAPIAA.Clients.API
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransferScheduleApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a transfer schedule request from Amazon Seller Wallet account to another customer-provided account
        /// </summary>
        /// <remarks>
        /// Create a transfer schedule request from an Amazon Seller Wallet account to another customer-provided account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the request.</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>TransferSchedule</returns>
        TransferSchedule CreateTransferSchedule(TransferScheduleRequest body, string destAccountDigitalSignature, string amountDigitalSignature);

        /// <summary>
        /// Create a transfer schedule request from Amazon Seller Wallet account to another customer-provided account
        /// </summary>
        /// <remarks>
        /// Create a transfer schedule request from an Amazon Seller Wallet account to another customer-provided account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the request.</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>ApiResponse of TransferSchedule</returns>
        ApiResponse<TransferSchedule> CreateTransferScheduleWithHttpInfo(TransferScheduleRequest body, string destAccountDigitalSignature, string amountDigitalSignature);
        /// <summary>
        /// Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account
        /// </summary>
        /// <remarks>
        /// Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferScheduleId">A unique reference ID for a scheduled transfer.</param>
        /// <returns>DeleteTransferSchedule</returns>
        DeleteTransferSchedule DeleteScheduleTransaction(string transferScheduleId);

        /// <summary>
        /// Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account
        /// </summary>
        /// <remarks>
        /// Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferScheduleId">A unique reference ID for a scheduled transfer.</param>
        /// <returns>ApiResponse of DeleteTransferSchedule</returns>
        ApiResponse<DeleteTransferSchedule> DeleteScheduleTransactionWithHttpInfo(string transferScheduleId);
        /// <summary>
        /// Find particular Amazon Seller Wallet account transfer schedule by Amazon transfer schedule identifier
        /// </summary>
        /// <remarks>
        /// Find a particular Amazon Seller Wallet account transfer schedule.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferScheduleId">The schedule ID of the Amazon Seller Wallet transfer.</param>
        /// <returns>TransferSchedule</returns>
        TransferSchedule GetTransferSchedule(string transferScheduleId);

        /// <summary>
        /// Find particular Amazon Seller Wallet account transfer schedule by Amazon transfer schedule identifier
        /// </summary>
        /// <remarks>
        /// Find a particular Amazon Seller Wallet account transfer schedule.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferScheduleId">The schedule ID of the Amazon Seller Wallet transfer.</param>
        /// <returns>ApiResponse of TransferSchedule</returns>
        ApiResponse<TransferSchedule> GetTransferScheduleWithHttpInfo(string transferScheduleId);
        /// <summary>
        /// The API will return all the transfer schedules for a given Amazon Seller Wallet account
        /// </summary>
        /// <remarks>
        /// Returns all transfer schedules of a given Amazon Seller Wallet bank account with the schedule ID in response if present.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the Amazon Seller Wallet account.</param>
        /// <param name="nextPageToken">A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)</param>
        /// <returns>TransferScheduleListing</returns>
        TransferScheduleListing ListTransferSchedules(string accountId, string nextPageToken = null);

        /// <summary>
        /// The API will return all the transfer schedules for a given Amazon Seller Wallet account
        /// </summary>
        /// <remarks>
        /// Returns all transfer schedules of a given Amazon Seller Wallet bank account with the schedule ID in response if present.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the Amazon Seller Wallet account.</param>
        /// <param name="nextPageToken">A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)</param>
        /// <returns>ApiResponse of TransferScheduleListing</returns>
        ApiResponse<TransferScheduleListing> ListTransferSchedulesWithHttpInfo(string accountId, string nextPageToken = null);
        /// <summary>
        /// Update a transfer schedule information. Only fields (i.e; transferScheduleInformation, paymentPreference, transferScheduleStatus) in the request body can be updated.
        /// </summary>
        /// <remarks>
        /// Update transfer schedule information. Returns a transfer belonging to the updated scheduled transfer request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the scheduled transfer request that is to be updated.</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>TransferSchedule</returns>
        TransferSchedule UpdateTransferSchedule(TransferSchedule body, string destAccountDigitalSignature, string amountDigitalSignature);

        /// <summary>
        /// Update a transfer schedule information. Only fields (i.e; transferScheduleInformation, paymentPreference, transferScheduleStatus) in the request body can be updated.
        /// </summary>
        /// <remarks>
        /// Update transfer schedule information. Returns a transfer belonging to the updated scheduled transfer request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the scheduled transfer request that is to be updated.</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>ApiResponse of TransferSchedule</returns>
        ApiResponse<TransferSchedule> UpdateTransferScheduleWithHttpInfo(TransferSchedule body, string destAccountDigitalSignature, string amountDigitalSignature);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a transfer schedule request from Amazon Seller Wallet account to another customer-provided account
        /// </summary>
        /// <remarks>
        /// Create a transfer schedule request from an Amazon Seller Wallet account to another customer-provided account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the request.</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>Task of TransferSchedule</returns>
        System.Threading.Tasks.Task<TransferSchedule> CreateTransferScheduleAsync(TransferScheduleRequest body, string destAccountDigitalSignature, string amountDigitalSignature);

        /// <summary>
        /// Create a transfer schedule request from Amazon Seller Wallet account to another customer-provided account
        /// </summary>
        /// <remarks>
        /// Create a transfer schedule request from an Amazon Seller Wallet account to another customer-provided account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the request.</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>Task of ApiResponse (TransferSchedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferSchedule>> CreateTransferScheduleAsyncWithHttpInfo(TransferScheduleRequest body, string destAccountDigitalSignature, string amountDigitalSignature);
        /// <summary>
        /// Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account
        /// </summary>
        /// <remarks>
        /// Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferScheduleId">A unique reference ID for a scheduled transfer.</param>
        /// <returns>Task of DeleteTransferSchedule</returns>
        System.Threading.Tasks.Task<DeleteTransferSchedule> DeleteScheduleTransactionAsync(string transferScheduleId);

        /// <summary>
        /// Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account
        /// </summary>
        /// <remarks>
        /// Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferScheduleId">A unique reference ID for a scheduled transfer.</param>
        /// <returns>Task of ApiResponse (DeleteTransferSchedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteTransferSchedule>> DeleteScheduleTransactionAsyncWithHttpInfo(string transferScheduleId);
        /// <summary>
        /// Find particular Amazon Seller Wallet account transfer schedule by Amazon transfer schedule identifier
        /// </summary>
        /// <remarks>
        /// Find a particular Amazon Seller Wallet account transfer schedule.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferScheduleId">The schedule ID of the Amazon Seller Wallet transfer.</param>
        /// <returns>Task of TransferSchedule</returns>
        System.Threading.Tasks.Task<TransferSchedule> GetTransferScheduleAsync(string transferScheduleId);

        /// <summary>
        /// Find particular Amazon Seller Wallet account transfer schedule by Amazon transfer schedule identifier
        /// </summary>
        /// <remarks>
        /// Find a particular Amazon Seller Wallet account transfer schedule.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferScheduleId">The schedule ID of the Amazon Seller Wallet transfer.</param>
        /// <returns>Task of ApiResponse (TransferSchedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferSchedule>> GetTransferScheduleAsyncWithHttpInfo(string transferScheduleId);
        /// <summary>
        /// The API will return all the transfer schedules for a given Amazon Seller Wallet account
        /// </summary>
        /// <remarks>
        /// Returns all transfer schedules of a given Amazon Seller Wallet bank account with the schedule ID in response if present.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the Amazon Seller Wallet account.</param>
        /// <param name="nextPageToken">A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)</param>
        /// <returns>Task of TransferScheduleListing</returns>
        System.Threading.Tasks.Task<TransferScheduleListing> ListTransferSchedulesAsync(string accountId, string nextPageToken = null);

        /// <summary>
        /// The API will return all the transfer schedules for a given Amazon Seller Wallet account
        /// </summary>
        /// <remarks>
        /// Returns all transfer schedules of a given Amazon Seller Wallet bank account with the schedule ID in response if present.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the Amazon Seller Wallet account.</param>
        /// <param name="nextPageToken">A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)</param>
        /// <returns>Task of ApiResponse (TransferScheduleListing)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferScheduleListing>> ListTransferSchedulesAsyncWithHttpInfo(string accountId, string nextPageToken = null);
        /// <summary>
        /// Update a transfer schedule information. Only fields (i.e; transferScheduleInformation, paymentPreference, transferScheduleStatus) in the request body can be updated.
        /// </summary>
        /// <remarks>
        /// Update transfer schedule information. Returns a transfer belonging to the updated scheduled transfer request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the scheduled transfer request that is to be updated.</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>Task of TransferSchedule</returns>
        System.Threading.Tasks.Task<TransferSchedule> UpdateTransferScheduleAsync(TransferSchedule body, string destAccountDigitalSignature, string amountDigitalSignature);

        /// <summary>
        /// Update a transfer schedule information. Only fields (i.e; transferScheduleInformation, paymentPreference, transferScheduleStatus) in the request body can be updated.
        /// </summary>
        /// <remarks>
        /// Update transfer schedule information. Returns a transfer belonging to the updated scheduled transfer request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the scheduled transfer request that is to be updated.</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>Task of ApiResponse (TransferSchedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferSchedule>> UpdateTransferScheduleAsyncWithHttpInfo(TransferSchedule body, string destAccountDigitalSignature, string amountDigitalSignature);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransferScheduleApi : ITransferScheduleApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransferScheduleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransferScheduleApi(Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a transfer schedule request from Amazon Seller Wallet account to another customer-provided account Create a transfer schedule request from an Amazon Seller Wallet account to another customer-provided account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the request.</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>TransferSchedule</returns>
        public TransferSchedule CreateTransferSchedule(TransferScheduleRequest body, string destAccountDigitalSignature, string amountDigitalSignature)
        {
            ApiResponse<TransferSchedule> localVarResponse = CreateTransferScheduleWithHttpInfo(body, destAccountDigitalSignature, amountDigitalSignature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a transfer schedule request from Amazon Seller Wallet account to another customer-provided account Create a transfer schedule request from an Amazon Seller Wallet account to another customer-provided account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the request.</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>ApiResponse of TransferSchedule</returns>
        public ApiResponse<TransferSchedule> CreateTransferScheduleWithHttpInfo(TransferScheduleRequest body, string destAccountDigitalSignature, string amountDigitalSignature)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransferScheduleApi->CreateTransferSchedule");
            // verify the required parameter 'destAccountDigitalSignature' is set
            if (destAccountDigitalSignature == null)
                throw new ApiException(400, "Missing required parameter 'destAccountDigitalSignature' when calling TransferScheduleApi->CreateTransferSchedule");
            // verify the required parameter 'amountDigitalSignature' is set
            if (amountDigitalSignature == null)
                throw new ApiException(400, "Missing required parameter 'amountDigitalSignature' when calling TransferScheduleApi->CreateTransferSchedule");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/transferSchedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destAccountDigitalSignature != null) localVarHeaderParams.Add("destAccountDigitalSignature", this.Configuration.ApiClient.ParameterToString(destAccountDigitalSignature)); // header parameter
            if (amountDigitalSignature != null) localVarHeaderParams.Add("amountDigitalSignature", this.Configuration.ApiClient.ParameterToString(amountDigitalSignature)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTransferSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransferSchedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransferSchedule)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransferSchedule)));
        }

        /// <summary>
        /// Create a transfer schedule request from Amazon Seller Wallet account to another customer-provided account Create a transfer schedule request from an Amazon Seller Wallet account to another customer-provided account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the request.</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>Task of TransferSchedule</returns>
        public async System.Threading.Tasks.Task<TransferSchedule> CreateTransferScheduleAsync(TransferScheduleRequest body, string destAccountDigitalSignature, string amountDigitalSignature)
        {
            ApiResponse<TransferSchedule> localVarResponse = await CreateTransferScheduleAsyncWithHttpInfo(body, destAccountDigitalSignature, amountDigitalSignature);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Create a transfer schedule request from Amazon Seller Wallet account to another customer-provided account Create a transfer schedule request from an Amazon Seller Wallet account to another customer-provided account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the request.</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>Task of ApiResponse (TransferSchedule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransferSchedule>> CreateTransferScheduleAsyncWithHttpInfo(TransferScheduleRequest body, string destAccountDigitalSignature, string amountDigitalSignature)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransferScheduleApi->CreateTransferSchedule");
            // verify the required parameter 'destAccountDigitalSignature' is set
            if (destAccountDigitalSignature == null)
                throw new ApiException(400, "Missing required parameter 'destAccountDigitalSignature' when calling TransferScheduleApi->CreateTransferSchedule");
            // verify the required parameter 'amountDigitalSignature' is set
            if (amountDigitalSignature == null)
                throw new ApiException(400, "Missing required parameter 'amountDigitalSignature' when calling TransferScheduleApi->CreateTransferSchedule");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/transferSchedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destAccountDigitalSignature != null) localVarHeaderParams.Add("destAccountDigitalSignature", this.Configuration.ApiClient.ParameterToString(destAccountDigitalSignature)); // header parameter
            if (amountDigitalSignature != null) localVarHeaderParams.Add("amountDigitalSignature", this.Configuration.ApiClient.ParameterToString(amountDigitalSignature)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTransferSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransferSchedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransferSchedule)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransferSchedule)));
        }

        /// <summary>
        /// Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferScheduleId">A unique reference ID for a scheduled transfer.</param>
        /// <returns>DeleteTransferSchedule</returns>
        public DeleteTransferSchedule DeleteScheduleTransaction(string transferScheduleId)
        {
            ApiResponse<DeleteTransferSchedule> localVarResponse = DeleteScheduleTransactionWithHttpInfo(transferScheduleId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferScheduleId">A unique reference ID for a scheduled transfer.</param>
        /// <returns>ApiResponse of DeleteTransferSchedule</returns>
        public ApiResponse<DeleteTransferSchedule> DeleteScheduleTransactionWithHttpInfo(string transferScheduleId)
        {
            // verify the required parameter 'transferScheduleId' is set
            if (transferScheduleId == null)
                throw new ApiException(400, "Missing required parameter 'transferScheduleId' when calling TransferScheduleApi->DeleteScheduleTransaction");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/transferSchedules/{transferScheduleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transferScheduleId != null) localVarPathParams.Add("transferScheduleId", this.Configuration.ApiClient.ParameterToString(transferScheduleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScheduleTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteTransferSchedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteTransferSchedule)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteTransferSchedule)));
        }

        /// <summary>
        /// Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferScheduleId">A unique reference ID for a scheduled transfer.</param>
        /// <returns>Task of DeleteTransferSchedule</returns>
        public async System.Threading.Tasks.Task<DeleteTransferSchedule> DeleteScheduleTransactionAsync(string transferScheduleId)
        {
            ApiResponse<DeleteTransferSchedule> localVarResponse = await DeleteScheduleTransactionAsyncWithHttpInfo(transferScheduleId);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferScheduleId">A unique reference ID for a scheduled transfer.</param>
        /// <returns>Task of ApiResponse (DeleteTransferSchedule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteTransferSchedule>> DeleteScheduleTransactionAsyncWithHttpInfo(string transferScheduleId)
        {
            // verify the required parameter 'transferScheduleId' is set
            if (transferScheduleId == null)
                throw new ApiException(400, "Missing required parameter 'transferScheduleId' when calling TransferScheduleApi->DeleteScheduleTransaction");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/transferSchedules/{transferScheduleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transferScheduleId != null) localVarPathParams.Add("transferScheduleId", this.Configuration.ApiClient.ParameterToString(transferScheduleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScheduleTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteTransferSchedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteTransferSchedule)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteTransferSchedule)));
        }

        /// <summary>
        /// Find particular Amazon Seller Wallet account transfer schedule by Amazon transfer schedule identifier Find a particular Amazon Seller Wallet account transfer schedule.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferScheduleId">The schedule ID of the Amazon Seller Wallet transfer.</param>
        /// <returns>TransferSchedule</returns>
        public TransferSchedule GetTransferSchedule(string transferScheduleId)
        {
            ApiResponse<TransferSchedule> localVarResponse = GetTransferScheduleWithHttpInfo(transferScheduleId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find particular Amazon Seller Wallet account transfer schedule by Amazon transfer schedule identifier Find a particular Amazon Seller Wallet account transfer schedule.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferScheduleId">The schedule ID of the Amazon Seller Wallet transfer.</param>
        /// <returns>ApiResponse of TransferSchedule</returns>
        public ApiResponse<TransferSchedule> GetTransferScheduleWithHttpInfo(string transferScheduleId)
        {
            // verify the required parameter 'transferScheduleId' is set
            if (transferScheduleId == null)
                throw new ApiException(400, "Missing required parameter 'transferScheduleId' when calling TransferScheduleApi->GetTransferSchedule");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/transferSchedules/{transferScheduleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transferScheduleId != null) localVarPathParams.Add("transferScheduleId", this.Configuration.ApiClient.ParameterToString(transferScheduleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransferSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransferSchedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransferSchedule)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransferSchedule)));
        }

        /// <summary>
        /// Find particular Amazon Seller Wallet account transfer schedule by Amazon transfer schedule identifier Find a particular Amazon Seller Wallet account transfer schedule.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferScheduleId">The schedule ID of the Amazon Seller Wallet transfer.</param>
        /// <returns>Task of TransferSchedule</returns>
        public async System.Threading.Tasks.Task<TransferSchedule> GetTransferScheduleAsync(string transferScheduleId)
        {
            ApiResponse<TransferSchedule> localVarResponse = await GetTransferScheduleAsyncWithHttpInfo(transferScheduleId);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Find particular Amazon Seller Wallet account transfer schedule by Amazon transfer schedule identifier Find a particular Amazon Seller Wallet account transfer schedule.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferScheduleId">The schedule ID of the Amazon Seller Wallet transfer.</param>
        /// <returns>Task of ApiResponse (TransferSchedule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransferSchedule>> GetTransferScheduleAsyncWithHttpInfo(string transferScheduleId)
        {
            // verify the required parameter 'transferScheduleId' is set
            if (transferScheduleId == null)
                throw new ApiException(400, "Missing required parameter 'transferScheduleId' when calling TransferScheduleApi->GetTransferSchedule");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/transferSchedules/{transferScheduleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transferScheduleId != null) localVarPathParams.Add("transferScheduleId", this.Configuration.ApiClient.ParameterToString(transferScheduleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransferSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransferSchedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransferSchedule)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransferSchedule)));
        }

        /// <summary>
        /// The API will return all the transfer schedules for a given Amazon Seller Wallet account Returns all transfer schedules of a given Amazon Seller Wallet bank account with the schedule ID in response if present.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the Amazon Seller Wallet account.</param>
        /// <param name="nextPageToken">A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)</param>
        /// <returns>TransferScheduleListing</returns>
        public TransferScheduleListing ListTransferSchedules(string accountId, string nextPageToken = null)
        {
            ApiResponse<TransferScheduleListing> localVarResponse = ListTransferSchedulesWithHttpInfo(accountId, nextPageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The API will return all the transfer schedules for a given Amazon Seller Wallet account Returns all transfer schedules of a given Amazon Seller Wallet bank account with the schedule ID in response if present.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the Amazon Seller Wallet account.</param>
        /// <param name="nextPageToken">A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)</param>
        /// <returns>ApiResponse of TransferScheduleListing</returns>
        public ApiResponse<TransferScheduleListing> ListTransferSchedulesWithHttpInfo(string accountId, string nextPageToken = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TransferScheduleApi->ListTransferSchedules");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/transferSchedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter
            if (nextPageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageToken", nextPageToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTransferSchedules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransferScheduleListing>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransferScheduleListing)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransferScheduleListing)));
        }

        /// <summary>
        /// The API will return all the transfer schedules for a given Amazon Seller Wallet account Returns all transfer schedules of a given Amazon Seller Wallet bank account with the schedule ID in response if present.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the Amazon Seller Wallet account.</param>
        /// <param name="nextPageToken">A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)</param>
        /// <returns>Task of TransferScheduleListing</returns>
        public async System.Threading.Tasks.Task<TransferScheduleListing> ListTransferSchedulesAsync(string accountId, string nextPageToken = null)
        {
            ApiResponse<TransferScheduleListing> localVarResponse = await ListTransferSchedulesAsyncWithHttpInfo(accountId, nextPageToken);
            return localVarResponse.Data;

        }

        /// <summary>
        /// The API will return all the transfer schedules for a given Amazon Seller Wallet account Returns all transfer schedules of a given Amazon Seller Wallet bank account with the schedule ID in response if present.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the Amazon Seller Wallet account.</param>
        /// <param name="nextPageToken">A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)</param>
        /// <returns>Task of ApiResponse (TransferScheduleListing)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransferScheduleListing>> ListTransferSchedulesAsyncWithHttpInfo(string accountId, string nextPageToken = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TransferScheduleApi->ListTransferSchedules");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/transferSchedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter
            if (nextPageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageToken", nextPageToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTransferSchedules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransferScheduleListing>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransferScheduleListing)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransferScheduleListing)));
        }

        /// <summary>
        /// Update a transfer schedule information. Only fields (i.e; transferScheduleInformation, paymentPreference, transferScheduleStatus) in the request body can be updated. Update transfer schedule information. Returns a transfer belonging to the updated scheduled transfer request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the scheduled transfer request that is to be updated.</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>TransferSchedule</returns>
        public TransferSchedule UpdateTransferSchedule(TransferSchedule body, string destAccountDigitalSignature, string amountDigitalSignature)
        {
            ApiResponse<TransferSchedule> localVarResponse = UpdateTransferScheduleWithHttpInfo(body, destAccountDigitalSignature, amountDigitalSignature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a transfer schedule information. Only fields (i.e; transferScheduleInformation, paymentPreference, transferScheduleStatus) in the request body can be updated. Update transfer schedule information. Returns a transfer belonging to the updated scheduled transfer request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the scheduled transfer request that is to be updated.</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>ApiResponse of TransferSchedule</returns>
        public ApiResponse<TransferSchedule> UpdateTransferScheduleWithHttpInfo(TransferSchedule body, string destAccountDigitalSignature, string amountDigitalSignature)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransferScheduleApi->UpdateTransferSchedule");
            // verify the required parameter 'destAccountDigitalSignature' is set
            if (destAccountDigitalSignature == null)
                throw new ApiException(400, "Missing required parameter 'destAccountDigitalSignature' when calling TransferScheduleApi->UpdateTransferSchedule");
            // verify the required parameter 'amountDigitalSignature' is set
            if (amountDigitalSignature == null)
                throw new ApiException(400, "Missing required parameter 'amountDigitalSignature' when calling TransferScheduleApi->UpdateTransferSchedule");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/transferSchedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destAccountDigitalSignature != null) localVarHeaderParams.Add("destAccountDigitalSignature", this.Configuration.ApiClient.ParameterToString(destAccountDigitalSignature)); // header parameter
            if (amountDigitalSignature != null) localVarHeaderParams.Add("amountDigitalSignature", this.Configuration.ApiClient.ParameterToString(amountDigitalSignature)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTransferSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransferSchedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransferSchedule)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransferSchedule)));
        }

        /// <summary>
        /// Update a transfer schedule information. Only fields (i.e; transferScheduleInformation, paymentPreference, transferScheduleStatus) in the request body can be updated. Update transfer schedule information. Returns a transfer belonging to the updated scheduled transfer request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the scheduled transfer request that is to be updated.</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>Task of TransferSchedule</returns>
        public async System.Threading.Tasks.Task<TransferSchedule> UpdateTransferScheduleAsync(TransferSchedule body, string destAccountDigitalSignature, string amountDigitalSignature)
        {
            ApiResponse<TransferSchedule> localVarResponse = await UpdateTransferScheduleAsyncWithHttpInfo(body, destAccountDigitalSignature, amountDigitalSignature);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Update a transfer schedule information. Only fields (i.e; transferScheduleInformation, paymentPreference, transferScheduleStatus) in the request body can be updated. Update transfer schedule information. Returns a transfer belonging to the updated scheduled transfer request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The payload of the scheduled transfer request that is to be updated.</param>
        /// <param name="destAccountDigitalSignature">Digital signature for the destination bank account details.</param>
        /// <param name="amountDigitalSignature">Digital signature for the source currency transaction amount.</param>
        /// <returns>Task of ApiResponse (TransferSchedule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransferSchedule>> UpdateTransferScheduleAsyncWithHttpInfo(TransferSchedule body, string destAccountDigitalSignature, string amountDigitalSignature)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransferScheduleApi->UpdateTransferSchedule");
            // verify the required parameter 'destAccountDigitalSignature' is set
            if (destAccountDigitalSignature == null)
                throw new ApiException(400, "Missing required parameter 'destAccountDigitalSignature' when calling TransferScheduleApi->UpdateTransferSchedule");
            // verify the required parameter 'amountDigitalSignature' is set
            if (amountDigitalSignature == null)
                throw new ApiException(400, "Missing required parameter 'amountDigitalSignature' when calling TransferScheduleApi->UpdateTransferSchedule");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/transferSchedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destAccountDigitalSignature != null) localVarHeaderParams.Add("destAccountDigitalSignature", this.Configuration.ApiClient.ParameterToString(destAccountDigitalSignature)); // header parameter
            if (amountDigitalSignature != null) localVarHeaderParams.Add("amountDigitalSignature", this.Configuration.ApiClient.ParameterToString(amountDigitalSignature)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTransferSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransferSchedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransferSchedule)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransferSchedule)));
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }


            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public TransferScheduleApi Build()
            {
                if (lwaAuthorizationCredentials == null)
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }


                Configuration configuration = new Configuration
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    RateLimitConfig = rateLimitConfiguration,
                    // default HTTP connection timeout (in milliseconds)
                    Timeout = 100000
                };

                return new TransferScheduleApi(configuration);
            }
        }
    }
}
