/* 
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Amazon.SellingPartnerAPIAA.Clients.Client;
using Amazon.SellingPartnerAPIAA.Clients.Models.VendorOrders;
using Amazon.SellingPartnerAPIAA;

namespace Amazon.SellingPartnerAPIAA.Clients.API
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVendorOrdersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a purchase order based on the &#x60;purchaseOrderNumber&#x60; value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code.</param>
        /// <returns>GetPurchaseOrderResponse</returns>
        GetPurchaseOrderResponse GetPurchaseOrder (string purchaseOrderNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a purchase order based on the &#x60;purchaseOrderNumber&#x60; value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code.</param>
        /// <returns>ApiResponse of GetPurchaseOrderResponse</returns>
        ApiResponse<GetPurchaseOrderResponse> GetPurchaseOrderWithHttpInfo (string purchaseOrderNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the &#x60;createdAfter&#x60;, &#x60;createdBefore&#x60;, &#x60;changedAfter&#x60; and &#x60;changedBefore&#x60; parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting &#x60;includeDetails&#x60; to false. You can then use the &#x60;getPurchaseOrder&#x60; operation to receive details for a specific purchase order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The limit to the number of records returned. Default value is 100 records. (optional)</param>
        /// <param name="createdAfter">Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="createdBefore">Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="sortOrder">Sort in ascending or descending order by purchase order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call (optional)</param>
        /// <param name="includeDetails">When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true. (optional)</param>
        /// <param name="changedAfter">Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="changedBefore">Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="poItemState">Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero. (optional)</param>
        /// <param name="isPOChanged">When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false. (optional)</param>
        /// <param name="purchaseOrderState">Filters purchase orders based on the purchase order state. (optional)</param>
        /// <param name="orderingVendorCode">Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned. (optional)</param>
        /// <returns>GetPurchaseOrdersResponse</returns>
        GetPurchaseOrdersResponse GetPurchaseOrders (long? limit = null, DateTime? createdAfter = null, DateTime? createdBefore = null, string sortOrder = null, string nextToken = null, string includeDetails = null, DateTime? changedAfter = null, DateTime? changedBefore = null, string poItemState = null, string isPOChanged = null, string purchaseOrderState = null, string orderingVendorCode = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the &#x60;createdAfter&#x60;, &#x60;createdBefore&#x60;, &#x60;changedAfter&#x60; and &#x60;changedBefore&#x60; parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting &#x60;includeDetails&#x60; to false. You can then use the &#x60;getPurchaseOrder&#x60; operation to receive details for a specific purchase order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The limit to the number of records returned. Default value is 100 records. (optional)</param>
        /// <param name="createdAfter">Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="createdBefore">Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="sortOrder">Sort in ascending or descending order by purchase order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call (optional)</param>
        /// <param name="includeDetails">When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true. (optional)</param>
        /// <param name="changedAfter">Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="changedBefore">Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="poItemState">Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero. (optional)</param>
        /// <param name="isPOChanged">When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false. (optional)</param>
        /// <param name="purchaseOrderState">Filters purchase orders based on the purchase order state. (optional)</param>
        /// <param name="orderingVendorCode">Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned. (optional)</param>
        /// <returns>ApiResponse of GetPurchaseOrdersResponse</returns>
        ApiResponse<GetPurchaseOrdersResponse> GetPurchaseOrdersWithHttpInfo (long? limit = null, DateTime? createdAfter = null, DateTime? createdBefore = null, string sortOrder = null, string nextToken = null, string includeDetails = null, DateTime? changedAfter = null, DateTime? changedBefore = null, string poItemState = null, string isPOChanged = null, string purchaseOrderState = null, string orderingVendorCode = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The limit to the number of records returned. Default value is 100 records. (optional)</param>
        /// <param name="sortOrder">Sort in ascending or descending order by purchase order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more purchase orders than the specified result size limit. (optional)</param>
        /// <param name="createdAfter">Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="createdBefore">Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="updatedAfter">Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="updatedBefore">Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="purchaseOrderNumber">Provides purchase order status for the specified purchase order number. (optional)</param>
        /// <param name="purchaseOrderStatus">Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses. (optional)</param>
        /// <param name="itemConfirmationStatus">Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included. (optional)</param>
        /// <param name="itemReceiveStatus">Filters purchase orders based on the purchase order&#39;s item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included. (optional)</param>
        /// <param name="orderingVendorCode">Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned. (optional)</param>
        /// <param name="shipToPartyId">Filters purchase orders for a specific buyer&#39;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as &#39;shipToParty.partyId&#39; in the purchase order. If not included in filter, this will return purchase orders for all the buyer&#39;s warehouses used for vendor group purchase orders. (optional)</param>
        /// <returns>GetPurchaseOrdersStatusResponse</returns>
        GetPurchaseOrdersStatusResponse GetPurchaseOrdersStatus (long? limit = null, string sortOrder = null, string nextToken = null, DateTime? createdAfter = null, DateTime? createdBefore = null, DateTime? updatedAfter = null, DateTime? updatedBefore = null, string purchaseOrderNumber = null, string purchaseOrderStatus = null, string itemConfirmationStatus = null, string itemReceiveStatus = null, string orderingVendorCode = null, string shipToPartyId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The limit to the number of records returned. Default value is 100 records. (optional)</param>
        /// <param name="sortOrder">Sort in ascending or descending order by purchase order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more purchase orders than the specified result size limit. (optional)</param>
        /// <param name="createdAfter">Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="createdBefore">Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="updatedAfter">Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="updatedBefore">Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="purchaseOrderNumber">Provides purchase order status for the specified purchase order number. (optional)</param>
        /// <param name="purchaseOrderStatus">Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses. (optional)</param>
        /// <param name="itemConfirmationStatus">Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included. (optional)</param>
        /// <param name="itemReceiveStatus">Filters purchase orders based on the purchase order&#39;s item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included. (optional)</param>
        /// <param name="orderingVendorCode">Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned. (optional)</param>
        /// <param name="shipToPartyId">Filters purchase orders for a specific buyer&#39;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as &#39;shipToParty.partyId&#39; in the purchase order. If not included in filter, this will return purchase orders for all the buyer&#39;s warehouses used for vendor group purchase orders. (optional)</param>
        /// <returns>ApiResponse of GetPurchaseOrdersStatusResponse</returns>
        ApiResponse<GetPurchaseOrdersStatusResponse> GetPurchaseOrdersStatusWithHttpInfo (long? limit = null, string sortOrder = null, string nextToken = null, DateTime? createdAfter = null, DateTime? createdBefore = null, DateTime? updatedAfter = null, DateTime? updatedBefore = null, string purchaseOrderNumber = null, string purchaseOrderStatus = null, string itemConfirmationStatus = null, string itemReceiveStatus = null, string orderingVendorCode = null, string shipToPartyId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submits acknowledgements for one or more purchase orders from a vendor.</param>
        /// <returns>SubmitAcknowledgementResponse</returns>
        SubmitAcknowledgementResponse SubmitAcknowledgement (SubmitAcknowledgementRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submits acknowledgements for one or more purchase orders from a vendor.</param>
        /// <returns>ApiResponse of SubmitAcknowledgementResponse</returns>
        ApiResponse<SubmitAcknowledgementResponse> SubmitAcknowledgementWithHttpInfo (SubmitAcknowledgementRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a purchase order based on the &#x60;purchaseOrderNumber&#x60; value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code.</param>
        /// <returns>Task of GetPurchaseOrderResponse</returns>
        System.Threading.Tasks.Task<GetPurchaseOrderResponse> GetPurchaseOrderAsync (string purchaseOrderNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a purchase order based on the &#x60;purchaseOrderNumber&#x60; value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code.</param>
        /// <returns>Task of ApiResponse (GetPurchaseOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPurchaseOrderResponse>> GetPurchaseOrderAsyncWithHttpInfo (string purchaseOrderNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the &#x60;createdAfter&#x60;, &#x60;createdBefore&#x60;, &#x60;changedAfter&#x60; and &#x60;changedBefore&#x60; parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting &#x60;includeDetails&#x60; to false. You can then use the &#x60;getPurchaseOrder&#x60; operation to receive details for a specific purchase order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The limit to the number of records returned. Default value is 100 records. (optional)</param>
        /// <param name="createdAfter">Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="createdBefore">Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="sortOrder">Sort in ascending or descending order by purchase order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call (optional)</param>
        /// <param name="includeDetails">When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true. (optional)</param>
        /// <param name="changedAfter">Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="changedBefore">Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="poItemState">Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero. (optional)</param>
        /// <param name="isPOChanged">When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false. (optional)</param>
        /// <param name="purchaseOrderState">Filters purchase orders based on the purchase order state. (optional)</param>
        /// <param name="orderingVendorCode">Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned. (optional)</param>
        /// <returns>Task of GetPurchaseOrdersResponse</returns>
        System.Threading.Tasks.Task<GetPurchaseOrdersResponse> GetPurchaseOrdersAsync (long? limit = null, DateTime? createdAfter = null, DateTime? createdBefore = null, string sortOrder = null, string nextToken = null, string includeDetails = null, DateTime? changedAfter = null, DateTime? changedBefore = null, string poItemState = null, string isPOChanged = null, string purchaseOrderState = null, string orderingVendorCode = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the &#x60;createdAfter&#x60;, &#x60;createdBefore&#x60;, &#x60;changedAfter&#x60; and &#x60;changedBefore&#x60; parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting &#x60;includeDetails&#x60; to false. You can then use the &#x60;getPurchaseOrder&#x60; operation to receive details for a specific purchase order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The limit to the number of records returned. Default value is 100 records. (optional)</param>
        /// <param name="createdAfter">Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="createdBefore">Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="sortOrder">Sort in ascending or descending order by purchase order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call (optional)</param>
        /// <param name="includeDetails">When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true. (optional)</param>
        /// <param name="changedAfter">Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="changedBefore">Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="poItemState">Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero. (optional)</param>
        /// <param name="isPOChanged">When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false. (optional)</param>
        /// <param name="purchaseOrderState">Filters purchase orders based on the purchase order state. (optional)</param>
        /// <param name="orderingVendorCode">Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned. (optional)</param>
        /// <returns>Task of ApiResponse (GetPurchaseOrdersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPurchaseOrdersResponse>> GetPurchaseOrdersAsyncWithHttpInfo (long? limit = null, DateTime? createdAfter = null, DateTime? createdBefore = null, string sortOrder = null, string nextToken = null, string includeDetails = null, DateTime? changedAfter = null, DateTime? changedBefore = null, string poItemState = null, string isPOChanged = null, string purchaseOrderState = null, string orderingVendorCode = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The limit to the number of records returned. Default value is 100 records. (optional)</param>
        /// <param name="sortOrder">Sort in ascending or descending order by purchase order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more purchase orders than the specified result size limit. (optional)</param>
        /// <param name="createdAfter">Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="createdBefore">Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="updatedAfter">Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="updatedBefore">Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="purchaseOrderNumber">Provides purchase order status for the specified purchase order number. (optional)</param>
        /// <param name="purchaseOrderStatus">Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses. (optional)</param>
        /// <param name="itemConfirmationStatus">Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included. (optional)</param>
        /// <param name="itemReceiveStatus">Filters purchase orders based on the purchase order&#39;s item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included. (optional)</param>
        /// <param name="orderingVendorCode">Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned. (optional)</param>
        /// <param name="shipToPartyId">Filters purchase orders for a specific buyer&#39;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as &#39;shipToParty.partyId&#39; in the purchase order. If not included in filter, this will return purchase orders for all the buyer&#39;s warehouses used for vendor group purchase orders. (optional)</param>
        /// <returns>Task of GetPurchaseOrdersStatusResponse</returns>
        System.Threading.Tasks.Task<GetPurchaseOrdersStatusResponse> GetPurchaseOrdersStatusAsync (long? limit = null, string sortOrder = null, string nextToken = null, DateTime? createdAfter = null, DateTime? createdBefore = null, DateTime? updatedAfter = null, DateTime? updatedBefore = null, string purchaseOrderNumber = null, string purchaseOrderStatus = null, string itemConfirmationStatus = null, string itemReceiveStatus = null, string orderingVendorCode = null, string shipToPartyId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The limit to the number of records returned. Default value is 100 records. (optional)</param>
        /// <param name="sortOrder">Sort in ascending or descending order by purchase order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more purchase orders than the specified result size limit. (optional)</param>
        /// <param name="createdAfter">Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="createdBefore">Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="updatedAfter">Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="updatedBefore">Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="purchaseOrderNumber">Provides purchase order status for the specified purchase order number. (optional)</param>
        /// <param name="purchaseOrderStatus">Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses. (optional)</param>
        /// <param name="itemConfirmationStatus">Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included. (optional)</param>
        /// <param name="itemReceiveStatus">Filters purchase orders based on the purchase order&#39;s item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included. (optional)</param>
        /// <param name="orderingVendorCode">Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned. (optional)</param>
        /// <param name="shipToPartyId">Filters purchase orders for a specific buyer&#39;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as &#39;shipToParty.partyId&#39; in the purchase order. If not included in filter, this will return purchase orders for all the buyer&#39;s warehouses used for vendor group purchase orders. (optional)</param>
        /// <returns>Task of ApiResponse (GetPurchaseOrdersStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPurchaseOrdersStatusResponse>> GetPurchaseOrdersStatusAsyncWithHttpInfo (long? limit = null, string sortOrder = null, string nextToken = null, DateTime? createdAfter = null, DateTime? createdBefore = null, DateTime? updatedAfter = null, DateTime? updatedBefore = null, string purchaseOrderNumber = null, string purchaseOrderStatus = null, string itemConfirmationStatus = null, string itemReceiveStatus = null, string orderingVendorCode = null, string shipToPartyId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submits acknowledgements for one or more purchase orders from a vendor.</param>
        /// <returns>Task of SubmitAcknowledgementResponse</returns>
        System.Threading.Tasks.Task<SubmitAcknowledgementResponse> SubmitAcknowledgementAsync (SubmitAcknowledgementRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submits acknowledgements for one or more purchase orders from a vendor.</param>
        /// <returns>Task of ApiResponse (SubmitAcknowledgementResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmitAcknowledgementResponse>> SubmitAcknowledgementAsyncWithHttpInfo (SubmitAcknowledgementRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VendorOrdersApi : IVendorOrdersApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VendorOrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VendorOrdersApi(Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = Amazon.SellingPartnerAPIAA.Clients.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns a purchase order based on the &#x60;purchaseOrderNumber&#x60; value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code.</param>
        /// <returns>GetPurchaseOrderResponse</returns>
        public GetPurchaseOrderResponse GetPurchaseOrder (string purchaseOrderNumber)
        {
             ApiResponse<GetPurchaseOrderResponse> localVarResponse = GetPurchaseOrderWithHttpInfo(purchaseOrderNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a purchase order based on the &#x60;purchaseOrderNumber&#x60; value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code.</param>
        /// <returns>ApiResponse of GetPurchaseOrderResponse</returns>
        public ApiResponse< GetPurchaseOrderResponse > GetPurchaseOrderWithHttpInfo (string purchaseOrderNumber)
        {
            // verify the required parameter 'purchaseOrderNumber' is set
            if (purchaseOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderNumber' when calling VendorOrdersApi->GetPurchaseOrder");

            var localVarPath = "/vendor/orders/v1/purchaseOrders/{purchaseOrderNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (purchaseOrderNumber != null) localVarPathParams.Add("purchaseOrderNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPurchaseOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPurchaseOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPurchaseOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPurchaseOrderResponse)));
        }

        /// <summary>
        ///  Returns a purchase order based on the &#x60;purchaseOrderNumber&#x60; value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code.</param>
        /// <returns>Task of GetPurchaseOrderResponse</returns>
        public async System.Threading.Tasks.Task<GetPurchaseOrderResponse> GetPurchaseOrderAsync (string purchaseOrderNumber)
        {
             ApiResponse<GetPurchaseOrderResponse> localVarResponse = await GetPurchaseOrderAsyncWithHttpInfo(purchaseOrderNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a purchase order based on the &#x60;purchaseOrderNumber&#x60; value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code.</param>
        /// <returns>Task of ApiResponse (GetPurchaseOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPurchaseOrderResponse>> GetPurchaseOrderAsyncWithHttpInfo (string purchaseOrderNumber)
        {
            // verify the required parameter 'purchaseOrderNumber' is set
            if (purchaseOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderNumber' when calling VendorOrdersApi->GetPurchaseOrder");

            var localVarPath = "/vendor/orders/v1/purchaseOrders/{purchaseOrderNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (purchaseOrderNumber != null) localVarPathParams.Add("purchaseOrderNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPurchaseOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPurchaseOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPurchaseOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPurchaseOrderResponse)));
        }

        /// <summary>
        ///  Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the &#x60;createdAfter&#x60;, &#x60;createdBefore&#x60;, &#x60;changedAfter&#x60; and &#x60;changedBefore&#x60; parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting &#x60;includeDetails&#x60; to false. You can then use the &#x60;getPurchaseOrder&#x60; operation to receive details for a specific purchase order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The limit to the number of records returned. Default value is 100 records. (optional)</param>
        /// <param name="createdAfter">Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="createdBefore">Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="sortOrder">Sort in ascending or descending order by purchase order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call (optional)</param>
        /// <param name="includeDetails">When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true. (optional)</param>
        /// <param name="changedAfter">Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="changedBefore">Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="poItemState">Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero. (optional)</param>
        /// <param name="isPOChanged">When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false. (optional)</param>
        /// <param name="purchaseOrderState">Filters purchase orders based on the purchase order state. (optional)</param>
        /// <param name="orderingVendorCode">Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned. (optional)</param>
        /// <returns>GetPurchaseOrdersResponse</returns>
        public GetPurchaseOrdersResponse GetPurchaseOrders (long? limit = null, DateTime? createdAfter = null, DateTime? createdBefore = null, string sortOrder = null, string nextToken = null, string includeDetails = null, DateTime? changedAfter = null, DateTime? changedBefore = null, string poItemState = null, string isPOChanged = null, string purchaseOrderState = null, string orderingVendorCode = null)
        {
             ApiResponse<GetPurchaseOrdersResponse> localVarResponse = GetPurchaseOrdersWithHttpInfo(limit, createdAfter, createdBefore, sortOrder, nextToken, includeDetails, changedAfter, changedBefore, poItemState, isPOChanged, purchaseOrderState, orderingVendorCode);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the &#x60;createdAfter&#x60;, &#x60;createdBefore&#x60;, &#x60;changedAfter&#x60; and &#x60;changedBefore&#x60; parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting &#x60;includeDetails&#x60; to false. You can then use the &#x60;getPurchaseOrder&#x60; operation to receive details for a specific purchase order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The limit to the number of records returned. Default value is 100 records. (optional)</param>
        /// <param name="createdAfter">Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="createdBefore">Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="sortOrder">Sort in ascending or descending order by purchase order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call (optional)</param>
        /// <param name="includeDetails">When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true. (optional)</param>
        /// <param name="changedAfter">Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="changedBefore">Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="poItemState">Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero. (optional)</param>
        /// <param name="isPOChanged">When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false. (optional)</param>
        /// <param name="purchaseOrderState">Filters purchase orders based on the purchase order state. (optional)</param>
        /// <param name="orderingVendorCode">Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned. (optional)</param>
        /// <returns>ApiResponse of GetPurchaseOrdersResponse</returns>
        public ApiResponse< GetPurchaseOrdersResponse > GetPurchaseOrdersWithHttpInfo (long? limit = null, DateTime? createdAfter = null, DateTime? createdBefore = null, string sortOrder = null, string nextToken = null, string includeDetails = null, DateTime? changedAfter = null, DateTime? changedBefore = null, string poItemState = null, string isPOChanged = null, string purchaseOrderState = null, string orderingVendorCode = null)
        {

            var localVarPath = "/vendor/orders/v1/purchaseOrders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextToken", nextToken)); // query parameter
            if (includeDetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDetails", includeDetails)); // query parameter
            if (changedAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "changedAfter", changedAfter)); // query parameter
            if (changedBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "changedBefore", changedBefore)); // query parameter
            if (poItemState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "poItemState", poItemState)); // query parameter
            if (isPOChanged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isPOChanged", isPOChanged)); // query parameter
            if (purchaseOrderState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderState", purchaseOrderState)); // query parameter
            if (orderingVendorCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderingVendorCode", orderingVendorCode)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPurchaseOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPurchaseOrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPurchaseOrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPurchaseOrdersResponse)));
        }

        /// <summary>
        ///  Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the &#x60;createdAfter&#x60;, &#x60;createdBefore&#x60;, &#x60;changedAfter&#x60; and &#x60;changedBefore&#x60; parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting &#x60;includeDetails&#x60; to false. You can then use the &#x60;getPurchaseOrder&#x60; operation to receive details for a specific purchase order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The limit to the number of records returned. Default value is 100 records. (optional)</param>
        /// <param name="createdAfter">Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="createdBefore">Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="sortOrder">Sort in ascending or descending order by purchase order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call (optional)</param>
        /// <param name="includeDetails">When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true. (optional)</param>
        /// <param name="changedAfter">Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="changedBefore">Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="poItemState">Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero. (optional)</param>
        /// <param name="isPOChanged">When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false. (optional)</param>
        /// <param name="purchaseOrderState">Filters purchase orders based on the purchase order state. (optional)</param>
        /// <param name="orderingVendorCode">Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned. (optional)</param>
        /// <returns>Task of GetPurchaseOrdersResponse</returns>
        public async System.Threading.Tasks.Task<GetPurchaseOrdersResponse> GetPurchaseOrdersAsync (long? limit = null, DateTime? createdAfter = null, DateTime? createdBefore = null, string sortOrder = null, string nextToken = null, string includeDetails = null, DateTime? changedAfter = null, DateTime? changedBefore = null, string poItemState = null, string isPOChanged = null, string purchaseOrderState = null, string orderingVendorCode = null)
        {
             ApiResponse<GetPurchaseOrdersResponse> localVarResponse = await GetPurchaseOrdersAsyncWithHttpInfo(limit, createdAfter, createdBefore, sortOrder, nextToken, includeDetails, changedAfter, changedBefore, poItemState, isPOChanged, purchaseOrderState, orderingVendorCode);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the &#x60;createdAfter&#x60;, &#x60;createdBefore&#x60;, &#x60;changedAfter&#x60; and &#x60;changedBefore&#x60; parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting &#x60;includeDetails&#x60; to false. You can then use the &#x60;getPurchaseOrder&#x60; operation to receive details for a specific purchase order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The limit to the number of records returned. Default value is 100 records. (optional)</param>
        /// <param name="createdAfter">Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="createdBefore">Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="sortOrder">Sort in ascending or descending order by purchase order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call (optional)</param>
        /// <param name="includeDetails">When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true. (optional)</param>
        /// <param name="changedAfter">Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="changedBefore">Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="poItemState">Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero. (optional)</param>
        /// <param name="isPOChanged">When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false. (optional)</param>
        /// <param name="purchaseOrderState">Filters purchase orders based on the purchase order state. (optional)</param>
        /// <param name="orderingVendorCode">Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned. (optional)</param>
        /// <returns>Task of ApiResponse (GetPurchaseOrdersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPurchaseOrdersResponse>> GetPurchaseOrdersAsyncWithHttpInfo (long? limit = null, DateTime? createdAfter = null, DateTime? createdBefore = null, string sortOrder = null, string nextToken = null, string includeDetails = null, DateTime? changedAfter = null, DateTime? changedBefore = null, string poItemState = null, string isPOChanged = null, string purchaseOrderState = null, string orderingVendorCode = null)
        {

            var localVarPath = "/vendor/orders/v1/purchaseOrders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextToken", nextToken)); // query parameter
            if (includeDetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDetails", includeDetails)); // query parameter
            if (changedAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "changedAfter", changedAfter)); // query parameter
            if (changedBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "changedBefore", changedBefore)); // query parameter
            if (poItemState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "poItemState", poItemState)); // query parameter
            if (isPOChanged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isPOChanged", isPOChanged)); // query parameter
            if (purchaseOrderState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderState", purchaseOrderState)); // query parameter
            if (orderingVendorCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderingVendorCode", orderingVendorCode)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPurchaseOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPurchaseOrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPurchaseOrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPurchaseOrdersResponse)));
        }

        /// <summary>
        ///  Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The limit to the number of records returned. Default value is 100 records. (optional)</param>
        /// <param name="sortOrder">Sort in ascending or descending order by purchase order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more purchase orders than the specified result size limit. (optional)</param>
        /// <param name="createdAfter">Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="createdBefore">Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="updatedAfter">Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="updatedBefore">Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="purchaseOrderNumber">Provides purchase order status for the specified purchase order number. (optional)</param>
        /// <param name="purchaseOrderStatus">Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses. (optional)</param>
        /// <param name="itemConfirmationStatus">Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included. (optional)</param>
        /// <param name="itemReceiveStatus">Filters purchase orders based on the purchase order&#39;s item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included. (optional)</param>
        /// <param name="orderingVendorCode">Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned. (optional)</param>
        /// <param name="shipToPartyId">Filters purchase orders for a specific buyer&#39;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as &#39;shipToParty.partyId&#39; in the purchase order. If not included in filter, this will return purchase orders for all the buyer&#39;s warehouses used for vendor group purchase orders. (optional)</param>
        /// <returns>GetPurchaseOrdersStatusResponse</returns>
        public GetPurchaseOrdersStatusResponse GetPurchaseOrdersStatus (long? limit = null, string sortOrder = null, string nextToken = null, DateTime? createdAfter = null, DateTime? createdBefore = null, DateTime? updatedAfter = null, DateTime? updatedBefore = null, string purchaseOrderNumber = null, string purchaseOrderStatus = null, string itemConfirmationStatus = null, string itemReceiveStatus = null, string orderingVendorCode = null, string shipToPartyId = null)
        {
             ApiResponse<GetPurchaseOrdersStatusResponse> localVarResponse = GetPurchaseOrdersStatusWithHttpInfo(limit, sortOrder, nextToken, createdAfter, createdBefore, updatedAfter, updatedBefore, purchaseOrderNumber, purchaseOrderStatus, itemConfirmationStatus, itemReceiveStatus, orderingVendorCode, shipToPartyId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The limit to the number of records returned. Default value is 100 records. (optional)</param>
        /// <param name="sortOrder">Sort in ascending or descending order by purchase order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more purchase orders than the specified result size limit. (optional)</param>
        /// <param name="createdAfter">Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="createdBefore">Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="updatedAfter">Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="updatedBefore">Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="purchaseOrderNumber">Provides purchase order status for the specified purchase order number. (optional)</param>
        /// <param name="purchaseOrderStatus">Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses. (optional)</param>
        /// <param name="itemConfirmationStatus">Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included. (optional)</param>
        /// <param name="itemReceiveStatus">Filters purchase orders based on the purchase order&#39;s item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included. (optional)</param>
        /// <param name="orderingVendorCode">Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned. (optional)</param>
        /// <param name="shipToPartyId">Filters purchase orders for a specific buyer&#39;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as &#39;shipToParty.partyId&#39; in the purchase order. If not included in filter, this will return purchase orders for all the buyer&#39;s warehouses used for vendor group purchase orders. (optional)</param>
        /// <returns>ApiResponse of GetPurchaseOrdersStatusResponse</returns>
        public ApiResponse< GetPurchaseOrdersStatusResponse > GetPurchaseOrdersStatusWithHttpInfo (long? limit = null, string sortOrder = null, string nextToken = null, DateTime? createdAfter = null, DateTime? createdBefore = null, DateTime? updatedAfter = null, DateTime? updatedBefore = null, string purchaseOrderNumber = null, string purchaseOrderStatus = null, string itemConfirmationStatus = null, string itemReceiveStatus = null, string orderingVendorCode = null, string shipToPartyId = null)
        {

            var localVarPath = "/vendor/orders/v1/purchaseOrdersStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextToken", nextToken)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (updatedAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updatedAfter", updatedAfter)); // query parameter
            if (updatedBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updatedBefore", updatedBefore)); // query parameter
            if (purchaseOrderNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderNumber", purchaseOrderNumber)); // query parameter
            if (purchaseOrderStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderStatus", purchaseOrderStatus)); // query parameter
            if (itemConfirmationStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemConfirmationStatus", itemConfirmationStatus)); // query parameter
            if (itemReceiveStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemReceiveStatus", itemReceiveStatus)); // query parameter
            if (orderingVendorCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderingVendorCode", orderingVendorCode)); // query parameter
            if (shipToPartyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipToPartyId", shipToPartyId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPurchaseOrdersStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPurchaseOrdersStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPurchaseOrdersStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPurchaseOrdersStatusResponse)));
        }

        /// <summary>
        ///  Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The limit to the number of records returned. Default value is 100 records. (optional)</param>
        /// <param name="sortOrder">Sort in ascending or descending order by purchase order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more purchase orders than the specified result size limit. (optional)</param>
        /// <param name="createdAfter">Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="createdBefore">Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="updatedAfter">Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="updatedBefore">Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="purchaseOrderNumber">Provides purchase order status for the specified purchase order number. (optional)</param>
        /// <param name="purchaseOrderStatus">Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses. (optional)</param>
        /// <param name="itemConfirmationStatus">Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included. (optional)</param>
        /// <param name="itemReceiveStatus">Filters purchase orders based on the purchase order&#39;s item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included. (optional)</param>
        /// <param name="orderingVendorCode">Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned. (optional)</param>
        /// <param name="shipToPartyId">Filters purchase orders for a specific buyer&#39;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as &#39;shipToParty.partyId&#39; in the purchase order. If not included in filter, this will return purchase orders for all the buyer&#39;s warehouses used for vendor group purchase orders. (optional)</param>
        /// <returns>Task of GetPurchaseOrdersStatusResponse</returns>
        public async System.Threading.Tasks.Task<GetPurchaseOrdersStatusResponse> GetPurchaseOrdersStatusAsync (long? limit = null, string sortOrder = null, string nextToken = null, DateTime? createdAfter = null, DateTime? createdBefore = null, DateTime? updatedAfter = null, DateTime? updatedBefore = null, string purchaseOrderNumber = null, string purchaseOrderStatus = null, string itemConfirmationStatus = null, string itemReceiveStatus = null, string orderingVendorCode = null, string shipToPartyId = null)
        {
             ApiResponse<GetPurchaseOrdersStatusResponse> localVarResponse = await GetPurchaseOrdersStatusAsyncWithHttpInfo(limit, sortOrder, nextToken, createdAfter, createdBefore, updatedAfter, updatedBefore, purchaseOrderNumber, purchaseOrderStatus, itemConfirmationStatus, itemReceiveStatus, orderingVendorCode, shipToPartyId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The limit to the number of records returned. Default value is 100 records. (optional)</param>
        /// <param name="sortOrder">Sort in ascending or descending order by purchase order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more purchase orders than the specified result size limit. (optional)</param>
        /// <param name="createdAfter">Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="createdBefore">Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="updatedAfter">Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="updatedBefore">Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)</param>
        /// <param name="purchaseOrderNumber">Provides purchase order status for the specified purchase order number. (optional)</param>
        /// <param name="purchaseOrderStatus">Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses. (optional)</param>
        /// <param name="itemConfirmationStatus">Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included. (optional)</param>
        /// <param name="itemReceiveStatus">Filters purchase orders based on the purchase order&#39;s item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included. (optional)</param>
        /// <param name="orderingVendorCode">Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned. (optional)</param>
        /// <param name="shipToPartyId">Filters purchase orders for a specific buyer&#39;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as &#39;shipToParty.partyId&#39; in the purchase order. If not included in filter, this will return purchase orders for all the buyer&#39;s warehouses used for vendor group purchase orders. (optional)</param>
        /// <returns>Task of ApiResponse (GetPurchaseOrdersStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPurchaseOrdersStatusResponse>> GetPurchaseOrdersStatusAsyncWithHttpInfo (long? limit = null, string sortOrder = null, string nextToken = null, DateTime? createdAfter = null, DateTime? createdBefore = null, DateTime? updatedAfter = null, DateTime? updatedBefore = null, string purchaseOrderNumber = null, string purchaseOrderStatus = null, string itemConfirmationStatus = null, string itemReceiveStatus = null, string orderingVendorCode = null, string shipToPartyId = null)
        {

            var localVarPath = "/vendor/orders/v1/purchaseOrdersStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextToken", nextToken)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (updatedAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updatedAfter", updatedAfter)); // query parameter
            if (updatedBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updatedBefore", updatedBefore)); // query parameter
            if (purchaseOrderNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderNumber", purchaseOrderNumber)); // query parameter
            if (purchaseOrderStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderStatus", purchaseOrderStatus)); // query parameter
            if (itemConfirmationStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemConfirmationStatus", itemConfirmationStatus)); // query parameter
            if (itemReceiveStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemReceiveStatus", itemReceiveStatus)); // query parameter
            if (orderingVendorCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderingVendorCode", orderingVendorCode)); // query parameter
            if (shipToPartyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipToPartyId", shipToPartyId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPurchaseOrdersStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPurchaseOrdersStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPurchaseOrdersStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPurchaseOrdersStatusResponse)));
        }

        /// <summary>
        ///  Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submits acknowledgements for one or more purchase orders from a vendor.</param>
        /// <returns>SubmitAcknowledgementResponse</returns>
        public SubmitAcknowledgementResponse SubmitAcknowledgement (SubmitAcknowledgementRequest body)
        {
             ApiResponse<SubmitAcknowledgementResponse> localVarResponse = SubmitAcknowledgementWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submits acknowledgements for one or more purchase orders from a vendor.</param>
        /// <returns>ApiResponse of SubmitAcknowledgementResponse</returns>
        public ApiResponse< SubmitAcknowledgementResponse > SubmitAcknowledgementWithHttpInfo (SubmitAcknowledgementRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VendorOrdersApi->SubmitAcknowledgement");

            var localVarPath = "/vendor/orders/v1/acknowledgements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitAcknowledgement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmitAcknowledgementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubmitAcknowledgementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmitAcknowledgementResponse)));
        }

        /// <summary>
        ///  Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submits acknowledgements for one or more purchase orders from a vendor.</param>
        /// <returns>Task of SubmitAcknowledgementResponse</returns>
        public async System.Threading.Tasks.Task<SubmitAcknowledgementResponse> SubmitAcknowledgementAsync (SubmitAcknowledgementRequest body)
        {
             ApiResponse<SubmitAcknowledgementResponse> localVarResponse = await SubmitAcknowledgementAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submits acknowledgements for one or more purchase orders from a vendor.</param>
        /// <returns>Task of ApiResponse (SubmitAcknowledgementResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmitAcknowledgementResponse>> SubmitAcknowledgementAsyncWithHttpInfo (SubmitAcknowledgementRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VendorOrdersApi->SubmitAcknowledgement");

            var localVarPath = "/vendor/orders/v1/acknowledgements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitAcknowledgement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmitAcknowledgementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubmitAcknowledgementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmitAcknowledgementResponse)));
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }
            
            
            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public VendorOrdersApi Build() 
            {
                if (lwaAuthorizationCredentials == null) 
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }


                Configuration configuration = new Configuration
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    RateLimitConfig = rateLimitConfiguration,
                    // default HTTP connection timeout (in milliseconds)
                    Timeout = 100000
                };

                return new VendorOrdersApi(configuration);
            }
        }
    }
}
