/* 
 * Selling Partner API for Supply Sources
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Amazon.SellingPartnerAPIAA.Clients.Client;
using Amazon.SellingPartnerAPIAA.Clients.Models.SupplySources;
using Amazon.SellingPartnerAPIAA;

namespace Amazon.SellingPartnerAPIAA.Clients.API
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISupplySourcesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Archive a supply source, making it inactive. Cannot be undone.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <returns>ErrorList</returns>
        ErrorList ArchiveSupplySource (string supplySourceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Archive a supply source, making it inactive. Cannot be undone.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <returns>ApiResponse of ErrorList</returns>
        ApiResponse<ErrorList> ArchiveSupplySourceWithHttpInfo (string supplySourceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new supply source.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A request to create a supply source.</param>
        /// <returns>CreateSupplySourceResponse</returns>
        CreateSupplySourceResponse CreateSupplySource (CreateSupplySourceRequest payload);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new supply source.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A request to create a supply source.</param>
        /// <returns>ApiResponse of CreateSupplySourceResponse</returns>
        ApiResponse<CreateSupplySourceResponse> CreateSupplySourceWithHttpInfo (CreateSupplySourceRequest payload);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a supply source.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <returns>SupplySource</returns>
        SupplySource GetSupplySource (string supplySourceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a supply source.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <returns>ApiResponse of SupplySource</returns>
        ApiResponse<SupplySource> GetSupplySourceWithHttpInfo (string supplySourceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// The path to retrieve paginated supply sources.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageToken">The pagination token to retrieve a specific page of results. (optional)</param>
        /// <param name="pageSize">The number of supply sources to return per paginated request. (optional, default to 10)</param>
        /// <returns>GetSupplySourcesResponse</returns>
        GetSupplySourcesResponse GetSupplySources (string nextPageToken = null, decimal? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// The path to retrieve paginated supply sources.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageToken">The pagination token to retrieve a specific page of results. (optional)</param>
        /// <param name="pageSize">The number of supply sources to return per paginated request. (optional, default to 10)</param>
        /// <returns>ApiResponse of GetSupplySourcesResponse</returns>
        ApiResponse<GetSupplySourcesResponse> GetSupplySourcesWithHttpInfo (string nextPageToken = null, decimal? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the configuration and capabilities of a supply source.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identitier of a supply source.</param>
        /// <param name="payload"> (optional)</param>
        /// <returns>ErrorList</returns>
        ErrorList UpdateSupplySource (string supplySourceId, UpdateSupplySourceRequest payload = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the configuration and capabilities of a supply source.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identitier of a supply source.</param>
        /// <param name="payload"> (optional)</param>
        /// <returns>ApiResponse of ErrorList</returns>
        ApiResponse<ErrorList> UpdateSupplySourceWithHttpInfo (string supplySourceId, UpdateSupplySourceRequest payload = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the status of a supply source.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <param name="payload"> (optional)</param>
        /// <returns>ErrorList</returns>
        ErrorList UpdateSupplySourceStatus (string supplySourceId, UpdateSupplySourceStatusRequest payload = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the status of a supply source.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <param name="payload"> (optional)</param>
        /// <returns>ApiResponse of ErrorList</returns>
        ApiResponse<ErrorList> UpdateSupplySourceStatusWithHttpInfo (string supplySourceId, UpdateSupplySourceStatusRequest payload = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Archive a supply source, making it inactive. Cannot be undone.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <returns>Task of ErrorList</returns>
        System.Threading.Tasks.Task<ErrorList> ArchiveSupplySourceAsync (string supplySourceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Archive a supply source, making it inactive. Cannot be undone.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <returns>Task of ApiResponse (ErrorList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ErrorList>> ArchiveSupplySourceAsyncWithHttpInfo (string supplySourceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new supply source.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A request to create a supply source.</param>
        /// <returns>Task of CreateSupplySourceResponse</returns>
        System.Threading.Tasks.Task<CreateSupplySourceResponse> CreateSupplySourceAsync (CreateSupplySourceRequest payload);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new supply source.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A request to create a supply source.</param>
        /// <returns>Task of ApiResponse (CreateSupplySourceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSupplySourceResponse>> CreateSupplySourceAsyncWithHttpInfo (CreateSupplySourceRequest payload);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a supply source.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <returns>Task of SupplySource</returns>
        System.Threading.Tasks.Task<SupplySource> GetSupplySourceAsync (string supplySourceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a supply source.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <returns>Task of ApiResponse (SupplySource)</returns>
        System.Threading.Tasks.Task<ApiResponse<SupplySource>> GetSupplySourceAsyncWithHttpInfo (string supplySourceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// The path to retrieve paginated supply sources.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageToken">The pagination token to retrieve a specific page of results. (optional)</param>
        /// <param name="pageSize">The number of supply sources to return per paginated request. (optional, default to 10)</param>
        /// <returns>Task of GetSupplySourcesResponse</returns>
        System.Threading.Tasks.Task<GetSupplySourcesResponse> GetSupplySourcesAsync (string nextPageToken = null, decimal? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// The path to retrieve paginated supply sources.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageToken">The pagination token to retrieve a specific page of results. (optional)</param>
        /// <param name="pageSize">The number of supply sources to return per paginated request. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetSupplySourcesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSupplySourcesResponse>> GetSupplySourcesAsyncWithHttpInfo (string nextPageToken = null, decimal? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the configuration and capabilities of a supply source.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identitier of a supply source.</param>
        /// <param name="payload"> (optional)</param>
        /// <returns>Task of ErrorList</returns>
        System.Threading.Tasks.Task<ErrorList> UpdateSupplySourceAsync (string supplySourceId, UpdateSupplySourceRequest payload = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the configuration and capabilities of a supply source.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identitier of a supply source.</param>
        /// <param name="payload"> (optional)</param>
        /// <returns>Task of ApiResponse (ErrorList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ErrorList>> UpdateSupplySourceAsyncWithHttpInfo (string supplySourceId, UpdateSupplySourceRequest payload = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the status of a supply source.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <param name="payload"> (optional)</param>
        /// <returns>Task of ErrorList</returns>
        System.Threading.Tasks.Task<ErrorList> UpdateSupplySourceStatusAsync (string supplySourceId, UpdateSupplySourceStatusRequest payload = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the status of a supply source.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <param name="payload"> (optional)</param>
        /// <returns>Task of ApiResponse (ErrorList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ErrorList>> UpdateSupplySourceStatusAsyncWithHttpInfo (string supplySourceId, UpdateSupplySourceStatusRequest payload = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SupplySourcesApi : ISupplySourcesApi
    {
        private Amazon.SellingPartnerAPIAA.Clients.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SupplySourcesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SupplySourcesApi(Amazon.SellingPartnerAPIAA.Clients.Client.Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = Amazon.SellingPartnerAPIAA.Clients.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Amazon.SellingPartnerAPIAA.Clients.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Amazon.SellingPartnerAPIAA.Clients.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Archive a supply source, making it inactive. Cannot be undone.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <returns>ErrorList</returns>
        public ErrorList ArchiveSupplySource (string supplySourceId)
        {
             ApiResponse<ErrorList> localVarResponse = ArchiveSupplySourceWithHttpInfo(supplySourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Archive a supply source, making it inactive. Cannot be undone.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <returns>ApiResponse of ErrorList</returns>
        public ApiResponse< ErrorList > ArchiveSupplySourceWithHttpInfo (string supplySourceId)
        {
            // verify the required parameter 'supplySourceId' is set
            if (supplySourceId == null)
                throw new ApiException(400, "Missing required parameter 'supplySourceId' when calling SupplySourcesApi->ArchiveSupplySource");

            var localVarPath = "/supplySources/2020-07-01/supplySources/{supplySourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplySourceId != null) localVarPathParams.Add("supplySourceId", this.Configuration.ApiClient.ParameterToString(supplySourceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArchiveSupplySource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ErrorList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ErrorList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ErrorList)));
        }

        /// <summary>
        ///  Archive a supply source, making it inactive. Cannot be undone.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <returns>Task of ErrorList</returns>
        public async System.Threading.Tasks.Task<ErrorList> ArchiveSupplySourceAsync (string supplySourceId)
        {
             ApiResponse<ErrorList> localVarResponse = await ArchiveSupplySourceAsyncWithHttpInfo(supplySourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Archive a supply source, making it inactive. Cannot be undone.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <returns>Task of ApiResponse (ErrorList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ErrorList>> ArchiveSupplySourceAsyncWithHttpInfo (string supplySourceId)
        {
            // verify the required parameter 'supplySourceId' is set
            if (supplySourceId == null)
                throw new ApiException(400, "Missing required parameter 'supplySourceId' when calling SupplySourcesApi->ArchiveSupplySource");

            var localVarPath = "/supplySources/2020-07-01/supplySources/{supplySourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplySourceId != null) localVarPathParams.Add("supplySourceId", this.Configuration.ApiClient.ParameterToString(supplySourceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArchiveSupplySource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ErrorList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ErrorList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ErrorList)));
        }

        /// <summary>
        ///  Create a new supply source.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A request to create a supply source.</param>
        /// <returns>CreateSupplySourceResponse</returns>
        public CreateSupplySourceResponse CreateSupplySource (CreateSupplySourceRequest payload)
        {
             ApiResponse<CreateSupplySourceResponse> localVarResponse = CreateSupplySourceWithHttpInfo(payload);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new supply source.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A request to create a supply source.</param>
        /// <returns>ApiResponse of CreateSupplySourceResponse</returns>
        public ApiResponse< CreateSupplySourceResponse > CreateSupplySourceWithHttpInfo (CreateSupplySourceRequest payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling SupplySourcesApi->CreateSupplySource");

            var localVarPath = "/supplySources/2020-07-01/supplySources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSupplySource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSupplySourceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateSupplySourceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSupplySourceResponse)));
        }

        /// <summary>
        ///  Create a new supply source.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A request to create a supply source.</param>
        /// <returns>Task of CreateSupplySourceResponse</returns>
        public async System.Threading.Tasks.Task<CreateSupplySourceResponse> CreateSupplySourceAsync (CreateSupplySourceRequest payload)
        {
             ApiResponse<CreateSupplySourceResponse> localVarResponse = await CreateSupplySourceAsyncWithHttpInfo(payload);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create a new supply source.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A request to create a supply source.</param>
        /// <returns>Task of ApiResponse (CreateSupplySourceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateSupplySourceResponse>> CreateSupplySourceAsyncWithHttpInfo (CreateSupplySourceRequest payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling SupplySourcesApi->CreateSupplySource");

            var localVarPath = "/supplySources/2020-07-01/supplySources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSupplySource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSupplySourceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateSupplySourceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSupplySourceResponse)));
        }

        /// <summary>
        ///  Retrieve a supply source.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <returns>SupplySource</returns>
        public SupplySource GetSupplySource (string supplySourceId)
        {
             ApiResponse<SupplySource> localVarResponse = GetSupplySourceWithHttpInfo(supplySourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve a supply source.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <returns>ApiResponse of SupplySource</returns>
        public ApiResponse< SupplySource > GetSupplySourceWithHttpInfo (string supplySourceId)
        {
            // verify the required parameter 'supplySourceId' is set
            if (supplySourceId == null)
                throw new ApiException(400, "Missing required parameter 'supplySourceId' when calling SupplySourcesApi->GetSupplySource");

            var localVarPath = "/supplySources/2020-07-01/supplySources/{supplySourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplySourceId != null) localVarPathParams.Add("supplySourceId", this.Configuration.ApiClient.ParameterToString(supplySourceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupplySource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SupplySource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SupplySource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SupplySource)));
        }

        /// <summary>
        ///  Retrieve a supply source.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <returns>Task of SupplySource</returns>
        public async System.Threading.Tasks.Task<SupplySource> GetSupplySourceAsync (string supplySourceId)
        {
             ApiResponse<SupplySource> localVarResponse = await GetSupplySourceAsyncWithHttpInfo(supplySourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve a supply source.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <returns>Task of ApiResponse (SupplySource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SupplySource>> GetSupplySourceAsyncWithHttpInfo (string supplySourceId)
        {
            // verify the required parameter 'supplySourceId' is set
            if (supplySourceId == null)
                throw new ApiException(400, "Missing required parameter 'supplySourceId' when calling SupplySourcesApi->GetSupplySource");

            var localVarPath = "/supplySources/2020-07-01/supplySources/{supplySourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplySourceId != null) localVarPathParams.Add("supplySourceId", this.Configuration.ApiClient.ParameterToString(supplySourceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupplySource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SupplySource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SupplySource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SupplySource)));
        }

        /// <summary>
        ///  The path to retrieve paginated supply sources.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageToken">The pagination token to retrieve a specific page of results. (optional)</param>
        /// <param name="pageSize">The number of supply sources to return per paginated request. (optional, default to 10)</param>
        /// <returns>GetSupplySourcesResponse</returns>
        public GetSupplySourcesResponse GetSupplySources (string nextPageToken = null, decimal? pageSize = null)
        {
             ApiResponse<GetSupplySourcesResponse> localVarResponse = GetSupplySourcesWithHttpInfo(nextPageToken, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  The path to retrieve paginated supply sources.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageToken">The pagination token to retrieve a specific page of results. (optional)</param>
        /// <param name="pageSize">The number of supply sources to return per paginated request. (optional, default to 10)</param>
        /// <returns>ApiResponse of GetSupplySourcesResponse</returns>
        public ApiResponse< GetSupplySourcesResponse > GetSupplySourcesWithHttpInfo (string nextPageToken = null, decimal? pageSize = null)
        {

            var localVarPath = "/supplySources/2020-07-01/supplySources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextPageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageToken", nextPageToken)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupplySources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSupplySourcesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSupplySourcesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSupplySourcesResponse)));
        }

        /// <summary>
        ///  The path to retrieve paginated supply sources.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageToken">The pagination token to retrieve a specific page of results. (optional)</param>
        /// <param name="pageSize">The number of supply sources to return per paginated request. (optional, default to 10)</param>
        /// <returns>Task of GetSupplySourcesResponse</returns>
        public async System.Threading.Tasks.Task<GetSupplySourcesResponse> GetSupplySourcesAsync (string nextPageToken = null, decimal? pageSize = null)
        {
             ApiResponse<GetSupplySourcesResponse> localVarResponse = await GetSupplySourcesAsyncWithHttpInfo(nextPageToken, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  The path to retrieve paginated supply sources.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageToken">The pagination token to retrieve a specific page of results. (optional)</param>
        /// <param name="pageSize">The number of supply sources to return per paginated request. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetSupplySourcesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSupplySourcesResponse>> GetSupplySourcesAsyncWithHttpInfo (string nextPageToken = null, decimal? pageSize = null)
        {

            var localVarPath = "/supplySources/2020-07-01/supplySources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextPageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageToken", nextPageToken)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupplySources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSupplySourcesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSupplySourcesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSupplySourcesResponse)));
        }

        /// <summary>
        ///  Update the configuration and capabilities of a supply source.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identitier of a supply source.</param>
        /// <param name="payload"> (optional)</param>
        /// <returns>ErrorList</returns>
        public ErrorList UpdateSupplySource (string supplySourceId, UpdateSupplySourceRequest payload = null)
        {
             ApiResponse<ErrorList> localVarResponse = UpdateSupplySourceWithHttpInfo(supplySourceId, payload);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update the configuration and capabilities of a supply source.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identitier of a supply source.</param>
        /// <param name="payload"> (optional)</param>
        /// <returns>ApiResponse of ErrorList</returns>
        public ApiResponse< ErrorList > UpdateSupplySourceWithHttpInfo (string supplySourceId, UpdateSupplySourceRequest payload = null)
        {
            // verify the required parameter 'supplySourceId' is set
            if (supplySourceId == null)
                throw new ApiException(400, "Missing required parameter 'supplySourceId' when calling SupplySourcesApi->UpdateSupplySource");

            var localVarPath = "/supplySources/2020-07-01/supplySources/{supplySourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplySourceId != null) localVarPathParams.Add("supplySourceId", this.Configuration.ApiClient.ParameterToString(supplySourceId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSupplySource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ErrorList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ErrorList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ErrorList)));
        }

        /// <summary>
        ///  Update the configuration and capabilities of a supply source.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identitier of a supply source.</param>
        /// <param name="payload"> (optional)</param>
        /// <returns>Task of ErrorList</returns>
        public async System.Threading.Tasks.Task<ErrorList> UpdateSupplySourceAsync (string supplySourceId, UpdateSupplySourceRequest payload = null)
        {
             ApiResponse<ErrorList> localVarResponse = await UpdateSupplySourceAsyncWithHttpInfo(supplySourceId, payload);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update the configuration and capabilities of a supply source.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identitier of a supply source.</param>
        /// <param name="payload"> (optional)</param>
        /// <returns>Task of ApiResponse (ErrorList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ErrorList>> UpdateSupplySourceAsyncWithHttpInfo (string supplySourceId, UpdateSupplySourceRequest payload = null)
        {
            // verify the required parameter 'supplySourceId' is set
            if (supplySourceId == null)
                throw new ApiException(400, "Missing required parameter 'supplySourceId' when calling SupplySourcesApi->UpdateSupplySource");

            var localVarPath = "/supplySources/2020-07-01/supplySources/{supplySourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplySourceId != null) localVarPathParams.Add("supplySourceId", this.Configuration.ApiClient.ParameterToString(supplySourceId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSupplySource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ErrorList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ErrorList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ErrorList)));
        }

        /// <summary>
        ///  Update the status of a supply source.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <param name="payload"> (optional)</param>
        /// <returns>ErrorList</returns>
        public ErrorList UpdateSupplySourceStatus (string supplySourceId, UpdateSupplySourceStatusRequest payload = null)
        {
             ApiResponse<ErrorList> localVarResponse = UpdateSupplySourceStatusWithHttpInfo(supplySourceId, payload);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update the status of a supply source.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <param name="payload"> (optional)</param>
        /// <returns>ApiResponse of ErrorList</returns>
        public ApiResponse< ErrorList > UpdateSupplySourceStatusWithHttpInfo (string supplySourceId, UpdateSupplySourceStatusRequest payload = null)
        {
            // verify the required parameter 'supplySourceId' is set
            if (supplySourceId == null)
                throw new ApiException(400, "Missing required parameter 'supplySourceId' when calling SupplySourcesApi->UpdateSupplySourceStatus");

            var localVarPath = "/supplySources/2020-07-01/supplySources/{supplySourceId}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplySourceId != null) localVarPathParams.Add("supplySourceId", this.Configuration.ApiClient.ParameterToString(supplySourceId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSupplySourceStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ErrorList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ErrorList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ErrorList)));
        }

        /// <summary>
        ///  Update the status of a supply source.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <param name="payload"> (optional)</param>
        /// <returns>Task of ErrorList</returns>
        public async System.Threading.Tasks.Task<ErrorList> UpdateSupplySourceStatusAsync (string supplySourceId, UpdateSupplySourceStatusRequest payload = null)
        {
             ApiResponse<ErrorList> localVarResponse = await UpdateSupplySourceStatusAsyncWithHttpInfo(supplySourceId, payload);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update the status of a supply source.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplySourceId">The unique identifier of a supply source.</param>
        /// <param name="payload"> (optional)</param>
        /// <returns>Task of ApiResponse (ErrorList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ErrorList>> UpdateSupplySourceStatusAsyncWithHttpInfo (string supplySourceId, UpdateSupplySourceStatusRequest payload = null)
        {
            // verify the required parameter 'supplySourceId' is set
            if (supplySourceId == null)
                throw new ApiException(400, "Missing required parameter 'supplySourceId' when calling SupplySourcesApi->UpdateSupplySourceStatus");

            var localVarPath = "/supplySources/2020-07-01/supplySources/{supplySourceId}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplySourceId != null) localVarPathParams.Add("supplySourceId", this.Configuration.ApiClient.ParameterToString(supplySourceId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSupplySourceStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ErrorList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ErrorList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ErrorList)));
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }
            
            
            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public SupplySourcesApi Build() 
            {
                if (lwaAuthorizationCredentials == null) 
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }

                
                Amazon.SellingPartnerAPIAA.Clients.Client.Configuration configuration = new Amazon.SellingPartnerAPIAA.Clients.Client.Configuration()
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    RateLimitConfig = rateLimitConfiguration
                };

                // default HTTP connection timeout (in milliseconds)
                configuration.Timeout = 100000;

                return new SupplySourcesApi(configuration);
            }
        }
    }
}
