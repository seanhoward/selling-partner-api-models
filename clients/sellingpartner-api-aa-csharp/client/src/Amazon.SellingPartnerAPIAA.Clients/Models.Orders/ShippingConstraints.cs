/* 
 * Orders v0
 *
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Orders
{
    /// <summary>
    /// Delivery constraints applicable to this order.
    /// </summary>
    [DataContract]
    public partial class ShippingConstraints :  IEquatable<ShippingConstraints>, IValidatableObject
    {
        /// <summary>
        /// Indicates if the line item needs to be delivered by pallet.
        /// </summary>
        /// <value>Indicates if the line item needs to be delivered by pallet.</value>
        [DataMember(Name="PalletDelivery", EmitDefaultValue=false)]
        public ConstraintType? PalletDelivery { get; set; }
        /// <summary>
        /// Indicates that the recipient of the line item must sign to confirm its delivery.
        /// </summary>
        /// <value>Indicates that the recipient of the line item must sign to confirm its delivery.</value>
        [DataMember(Name="SignatureConfirmation", EmitDefaultValue=false)]
        public ConstraintType? SignatureConfirmation { get; set; }
        /// <summary>
        /// Indicates that the person receiving the line item must be the same as the intended recipient of the order.
        /// </summary>
        /// <value>Indicates that the person receiving the line item must be the same as the intended recipient of the order.</value>
        [DataMember(Name="RecipientIdentityVerification", EmitDefaultValue=false)]
        public ConstraintType? RecipientIdentityVerification { get; set; }
        /// <summary>
        /// Indicates that the carrier must confirm the recipient is of the legal age to receive the line item upon delivery.
        /// </summary>
        /// <value>Indicates that the carrier must confirm the recipient is of the legal age to receive the line item upon delivery.</value>
        [DataMember(Name="RecipientAgeVerification", EmitDefaultValue=false)]
        public ConstraintType? RecipientAgeVerification { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingConstraints" /> class.
        /// </summary>
        /// <param name="palletDelivery">Indicates if the line item needs to be delivered by pallet..</param>
        /// <param name="signatureConfirmation">Indicates that the recipient of the line item must sign to confirm its delivery..</param>
        /// <param name="recipientIdentityVerification">Indicates that the person receiving the line item must be the same as the intended recipient of the order..</param>
        /// <param name="recipientAgeVerification">Indicates that the carrier must confirm the recipient is of the legal age to receive the line item upon delivery..</param>
        public ShippingConstraints(ConstraintType? palletDelivery = default, ConstraintType? signatureConfirmation = default, ConstraintType? recipientIdentityVerification = default, ConstraintType? recipientAgeVerification = default)
        {
            this.PalletDelivery = palletDelivery;
            this.SignatureConfirmation = signatureConfirmation;
            this.RecipientIdentityVerification = recipientIdentityVerification;
            this.RecipientAgeVerification = recipientAgeVerification;
        }
        




        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShippingConstraints {\n");
            sb.Append("  PalletDelivery: ").Append(PalletDelivery).Append("\n");
            sb.Append("  SignatureConfirmation: ").Append(SignatureConfirmation).Append("\n");
            sb.Append("  RecipientIdentityVerification: ").Append(RecipientIdentityVerification).Append("\n");
            sb.Append("  RecipientAgeVerification: ").Append(RecipientAgeVerification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShippingConstraints);
        }

        /// <summary>
        /// Returns true if ShippingConstraints instances are equal
        /// </summary>
        /// <param name="input">Instance of ShippingConstraints to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShippingConstraints input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PalletDelivery == input.PalletDelivery ||
                    (this.PalletDelivery != null &&
                    this.PalletDelivery.Equals(input.PalletDelivery))
                ) && 
                (
                    this.SignatureConfirmation == input.SignatureConfirmation ||
                    (this.SignatureConfirmation != null &&
                    this.SignatureConfirmation.Equals(input.SignatureConfirmation))
                ) && 
                (
                    this.RecipientIdentityVerification == input.RecipientIdentityVerification ||
                    (this.RecipientIdentityVerification != null &&
                    this.RecipientIdentityVerification.Equals(input.RecipientIdentityVerification))
                ) && 
                (
                    this.RecipientAgeVerification == input.RecipientAgeVerification ||
                    (this.RecipientAgeVerification != null &&
                    this.RecipientAgeVerification.Equals(input.RecipientAgeVerification))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PalletDelivery != null)
                    hashCode = hashCode * 59 + this.PalletDelivery.GetHashCode();
                if (this.SignatureConfirmation != null)
                    hashCode = hashCode * 59 + this.SignatureConfirmation.GetHashCode();
                if (this.RecipientIdentityVerification != null)
                    hashCode = hashCode * 59 + this.RecipientIdentityVerification.GetHashCode();
                if (this.RecipientAgeVerification != null)
                    hashCode = hashCode * 59 + this.RecipientAgeVerification.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
