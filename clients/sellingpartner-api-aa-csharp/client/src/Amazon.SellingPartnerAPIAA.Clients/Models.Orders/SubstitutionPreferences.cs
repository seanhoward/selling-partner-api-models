/* 
 * Orders v0
 *
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Orders
{
    /// <summary>
    /// Substitution preferences for an order item.
    /// </summary>
    [DataContract]
    public partial class SubstitutionPreferences :  IEquatable<SubstitutionPreferences>, IValidatableObject
    {
        /// <summary>
        /// The type of substitution that these preferences represent.
        /// </summary>
        /// <value>The type of substitution that these preferences represent.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubstitutionTypeEnum
        {
            
            /// <summary>
            /// Enum CUSTOMERPREFERENCE for value: CUSTOMER_PREFERENCE
            /// </summary>
            [EnumMember(Value = "CUSTOMER_PREFERENCE")]
            CUSTOMERPREFERENCE = 1,
            
            /// <summary>
            /// Enum AMAZONRECOMMENDED for value: AMAZON_RECOMMENDED
            /// </summary>
            [EnumMember(Value = "AMAZON_RECOMMENDED")]
            AMAZONRECOMMENDED = 2,
            
            /// <summary>
            /// Enum DONOTSUBSTITUTE for value: DO_NOT_SUBSTITUTE
            /// </summary>
            [EnumMember(Value = "DO_NOT_SUBSTITUTE")]
            DONOTSUBSTITUTE = 3
        }

        /// <summary>
        /// The type of substitution that these preferences represent.
        /// </summary>
        /// <value>The type of substitution that these preferences represent.</value>
        [DataMember(Name="SubstitutionType", EmitDefaultValue=false)]
        public SubstitutionTypeEnum SubstitutionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubstitutionPreferences" /> class.
        /// </summary>
        [JsonConstructor]
        protected SubstitutionPreferences() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubstitutionPreferences" /> class.
        /// </summary>
        /// <param name="substitutionType">The type of substitution that these preferences represent. (required).</param>
        /// <param name="substitutionOptions">Substitution options for the order item..</param>
        public SubstitutionPreferences(SubstitutionTypeEnum substitutionType = default, SubstitutionOptionList substitutionOptions = default)
        {
            // to ensure "substitutionType" is required (not null)
            if (substitutionType == null)
            {
                throw new InvalidDataException("substitutionType is a required property for SubstitutionPreferences and cannot be null");
            }
            else
            {
                this.SubstitutionType = substitutionType;
            }
            this.SubstitutionOptions = substitutionOptions;
        }
        

        /// <summary>
        /// Substitution options for the order item.
        /// </summary>
        /// <value>Substitution options for the order item.</value>
        [DataMember(Name="SubstitutionOptions", EmitDefaultValue=false)]
        public SubstitutionOptionList SubstitutionOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubstitutionPreferences {\n");
            sb.Append("  SubstitutionType: ").Append(SubstitutionType).Append("\n");
            sb.Append("  SubstitutionOptions: ").Append(SubstitutionOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubstitutionPreferences);
        }

        /// <summary>
        /// Returns true if SubstitutionPreferences instances are equal
        /// </summary>
        /// <param name="input">Instance of SubstitutionPreferences to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubstitutionPreferences input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SubstitutionType == input.SubstitutionType ||
                    (this.SubstitutionType != null &&
                    this.SubstitutionType.Equals(input.SubstitutionType))
                ) && 
                (
                    this.SubstitutionOptions == input.SubstitutionOptions ||
                    (this.SubstitutionOptions != null &&
                    this.SubstitutionOptions.Equals(input.SubstitutionOptions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SubstitutionType != null)
                    hashCode = hashCode * 59 + this.SubstitutionType.GetHashCode();
                if (this.SubstitutionOptions != null)
                    hashCode = hashCode * 59 + this.SubstitutionOptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
