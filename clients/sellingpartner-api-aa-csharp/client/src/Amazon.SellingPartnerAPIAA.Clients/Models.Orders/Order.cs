/* 
 * Selling Partner API for Orders
 *
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Orders
{
    /// <summary>
    /// Order information.
    /// </summary>
    [DataContract]
    public partial class Order : IEquatable<Order>, IValidatableObject
    {
        /// <summary>
        /// The current order status.
        /// </summary>
        /// <value>The current order status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderStatusEnum
        {

            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 1,

            /// <summary>
            /// Enum Unshipped for value: Unshipped
            /// </summary>
            [EnumMember(Value = "Unshipped")]
            Unshipped = 2,

            /// <summary>
            /// Enum PartiallyShipped for value: PartiallyShipped
            /// </summary>
            [EnumMember(Value = "PartiallyShipped")]
            PartiallyShipped = 3,

            /// <summary>
            /// Enum Shipped for value: Shipped
            /// </summary>
            [EnumMember(Value = "Shipped")]
            Shipped = 4,

            /// <summary>
            /// Enum Canceled for value: Canceled
            /// </summary>
            [EnumMember(Value = "Canceled")]
            Canceled = 5,

            /// <summary>
            /// Enum Unfulfillable for value: Unfulfillable
            /// </summary>
            [EnumMember(Value = "Unfulfillable")]
            Unfulfillable = 6,

            /// <summary>
            /// Enum InvoiceUnconfirmed for value: InvoiceUnconfirmed
            /// </summary>
            [EnumMember(Value = "InvoiceUnconfirmed")]
            InvoiceUnconfirmed = 7,

            /// <summary>
            /// Enum PendingAvailability for value: PendingAvailability
            /// </summary>
            [EnumMember(Value = "PendingAvailability")]
            PendingAvailability = 8
        }

        /// <summary>
        /// The current order status.
        /// </summary>
        /// <value>The current order status.</value>
        [DataMember(Name = "OrderStatus", EmitDefaultValue = false)]
        public OrderStatusEnum OrderStatus { get; set; }
        /// <summary>
        /// Whether the order was fulfilled by Amazon (&#x60;AFN&#x60;) or by the seller (&#x60;MFN&#x60;).
        /// </summary>
        /// <value>Whether the order was fulfilled by Amazon (&#x60;AFN&#x60;) or by the seller (&#x60;MFN&#x60;).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FulfillmentChannelEnum
        {

            /// <summary>
            /// Enum MFN for value: MFN
            /// </summary>
            [EnumMember(Value = "MFN")]
            MFN = 1,

            /// <summary>
            /// Enum AFN for value: AFN
            /// </summary>
            [EnumMember(Value = "AFN")]
            AFN = 2
        }

        /// <summary>
        /// Whether the order was fulfilled by Amazon (&#x60;AFN&#x60;) or by the seller (&#x60;MFN&#x60;).
        /// </summary>
        /// <value>Whether the order was fulfilled by Amazon (&#x60;AFN&#x60;) or by the seller (&#x60;MFN&#x60;).</value>
        [DataMember(Name = "FulfillmentChannel", EmitDefaultValue = false)]
        public FulfillmentChannelEnum? FulfillmentChannel { get; set; }
        /// <summary>
        /// The payment method for the order. This property is limited to COD and CVS payment methods. Unless you need the specific COD payment information provided by the &#x60;PaymentExecutionDetailItem&#x60; object, we recommend using the &#x60;PaymentMethodDetails&#x60; property to get payment method information.
        /// </summary>
        /// <value>The payment method for the order. This property is limited to COD and CVS payment methods. Unless you need the specific COD payment information provided by the &#x60;PaymentExecutionDetailItem&#x60; object, we recommend using the &#x60;PaymentMethodDetails&#x60; property to get payment method information.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentMethodEnum
        {

            /// <summary>
            /// Enum COD for value: COD
            /// </summary>
            [EnumMember(Value = "COD")]
            COD = 1,

            /// <summary>
            /// Enum CVS for value: CVS
            /// </summary>
            [EnumMember(Value = "CVS")]
            CVS = 2,

            /// <summary>
            /// Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")]
            Other = 3
        }

        /// <summary>
        /// The payment method for the order. This property is limited to COD and CVS payment methods. Unless you need the specific COD payment information provided by the &#x60;PaymentExecutionDetailItem&#x60; object, we recommend using the &#x60;PaymentMethodDetails&#x60; property to get payment method information.
        /// </summary>
        /// <value>The payment method for the order. This property is limited to COD and CVS payment methods. Unless you need the specific COD payment information provided by the &#x60;PaymentExecutionDetailItem&#x60; object, we recommend using the &#x60;PaymentMethodDetails&#x60; property to get payment method information.</value>
        [DataMember(Name = "PaymentMethod", EmitDefaultValue = false)]
        public PaymentMethodEnum? PaymentMethod { get; set; }
        /// <summary>
        /// The status of the Amazon Easy Ship order. This property is only included for Amazon Easy Ship orders.
        /// </summary>
        /// <value>The status of the Amazon Easy Ship order. This property is only included for Amazon Easy Ship orders.</value>
        [DataMember(Name = "EasyShipShipmentStatus", EmitDefaultValue = false)]
        public EasyShipShipmentStatus? EasyShipShipmentStatus { get; set; }
        /// <summary>
        /// The order&#39;s type.
        /// </summary>
        /// <value>The order&#39;s type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderTypeEnum
        {

            /// <summary>
            /// Enum StandardOrder for value: StandardOrder
            /// </summary>
            [EnumMember(Value = "StandardOrder")]
            StandardOrder = 1,

            /// <summary>
            /// Enum LongLeadTimeOrder for value: LongLeadTimeOrder
            /// </summary>
            [EnumMember(Value = "LongLeadTimeOrder")]
            LongLeadTimeOrder = 2,

            /// <summary>
            /// Enum Preorder for value: Preorder
            /// </summary>
            [EnumMember(Value = "Preorder")]
            Preorder = 3,

            /// <summary>
            /// Enum BackOrder for value: BackOrder
            /// </summary>
            [EnumMember(Value = "BackOrder")]
            BackOrder = 4,

            /// <summary>
            /// Enum SourcingOnDemandOrder for value: SourcingOnDemandOrder
            /// </summary>
            [EnumMember(Value = "SourcingOnDemandOrder")]
            SourcingOnDemandOrder = 5
        }

        /// <summary>
        /// The order&#39;s type.
        /// </summary>
        /// <value>The order&#39;s type.</value>
        [DataMember(Name = "OrderType", EmitDefaultValue = false)]
        public OrderTypeEnum? OrderType { get; set; }
        /// <summary>
        /// The buyer&#39;s invoicing preference. Sellers can use this data to issue electronic invoices for orders in Turkey.  **Note**: This attribute is only available in the Turkey marketplace.
        /// </summary>
        /// <value>The buyer&#39;s invoicing preference. Sellers can use this data to issue electronic invoices for orders in Turkey.  **Note**: This attribute is only available in the Turkey marketplace.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BuyerInvoicePreferenceEnum
        {

            /// <summary>
            /// Enum INDIVIDUAL for value: INDIVIDUAL
            /// </summary>
            [EnumMember(Value = "INDIVIDUAL")]
            INDIVIDUAL = 1,

            /// <summary>
            /// Enum BUSINESS for value: BUSINESS
            /// </summary>
            [EnumMember(Value = "BUSINESS")]
            BUSINESS = 2
        }

        /// <summary>
        /// The buyer&#39;s invoicing preference. Sellers can use this data to issue electronic invoices for orders in Turkey.  **Note**: This attribute is only available in the Turkey marketplace.
        /// </summary>
        /// <value>The buyer&#39;s invoicing preference. Sellers can use this data to issue electronic invoices for orders in Turkey.  **Note**: This attribute is only available in the Turkey marketplace.</value>
        [DataMember(Name = "BuyerInvoicePreference", EmitDefaultValue = false)]
        public BuyerInvoicePreferenceEnum? BuyerInvoicePreference { get; set; }
        /// <summary>
        /// The status of the electronic invoice.
        /// </summary>
        /// <value>The status of the electronic invoice.</value>
        [DataMember(Name = "ElectronicInvoiceStatus", EmitDefaultValue = false)]
        public ElectronicInvoiceStatus? ElectronicInvoiceStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        [JsonConstructor]
        protected Order() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="amazonOrderId">An Amazon-defined order identifier, in 3-7-7 format. (required).</param>
        /// <param name="sellerOrderId">A seller-defined order identifier..</param>
        /// <param name="purchaseDate">The date when the order was created. (required).</param>
        /// <param name="lastUpdateDate">The date when the order was last updated.  __Note__: &#x60;LastUpdateDate&#x60; is returned with an incorrect date for orders that were last updated before 2009-04-01. (required).</param>
        /// <param name="orderStatus">The current order status. (required).</param>
        /// <param name="fulfillmentChannel">Whether the order was fulfilled by Amazon (&#x60;AFN&#x60;) or by the seller (&#x60;MFN&#x60;)..</param>
        /// <param name="salesChannel">The sales channel for the first item in the order..</param>
        /// <param name="orderChannel">The order channel for the first item in the order..</param>
        /// <param name="shipServiceLevel">The order&#39;s shipment service level..</param>
        /// <param name="orderTotal">The total charge for this order..</param>
        /// <param name="numberOfItemsShipped">The number of items shipped..</param>
        /// <param name="numberOfItemsUnshipped">The number of items unshipped..</param>
        /// <param name="paymentExecutionDetail">Information about sub-payment methods for a cash-on-delivery (COD) order.  __Note__: For a COD order that is paid for using one sub-payment method, one &#x60;PaymentExecutionDetailItem&#x60; object is returned, with &#x60;PaymentExecutionDetailItem&#x60;/&#x60;PaymentMethod &#x3D; COD&#x60;. For a COD order that is paid for using multiple sub-payment methods, two or more &#x60;PaymentExecutionDetailItem&#x60; objects are returned..</param>
        /// <param name="paymentMethod">The payment method for the order. This property is limited to COD and CVS payment methods. Unless you need the specific COD payment information provided by the &#x60;PaymentExecutionDetailItem&#x60; object, we recommend using the &#x60;PaymentMethodDetails&#x60; property to get payment method information..</param>
        /// <param name="paymentMethodDetails">A list of payment methods for the order..</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the order was placed..</param>
        /// <param name="shipmentServiceLevelCategory">The shipment service level category for the order.  **Possible values**: &#x60;Expedited&#x60;, &#x60;FreeEconomy&#x60;, &#x60;NextDay&#x60;, &#x60;Priority&#x60;, &#x60;SameDay&#x60;, &#x60;SecondDay&#x60;, &#x60;Scheduled&#x60;, and &#x60;Standard&#x60;..</param>
        /// <param name="easyShipShipmentStatus">The status of the Amazon Easy Ship order. This property is only included for Amazon Easy Ship orders..</param>
        /// <param name="cbaDisplayableShippingLabel">Custom ship label for Checkout by Amazon (CBA)..</param>
        /// <param name="orderType">The order&#39;s type..</param>
        /// <param name="earliestShipDate">The start of the time period within which you have committed to ship the order. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. Only returned for seller-fulfilled orders.  __Note__: &#x60;EarliestShipDate&#x60; might not be returned for orders placed before February 1, 2013..</param>
        /// <param name="latestShipDate">The end of the time period within which you have committed to ship the order. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. Only returned for seller-fulfilled orders.  __Note__: &#x60;LatestShipDate&#x60; might not be returned for orders placed before February 1, 2013..</param>
        /// <param name="earliestDeliveryDate">The start of the time period within which you have committed to fulfill the order. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. Only returned for seller-fulfilled orders..</param>
        /// <param name="latestDeliveryDate">The end of the time period within which you have committed to fulfill the order. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. Only returned for seller-fulfilled orders that do not have a &#x60;PendingAvailability&#x60;, &#x60;Pending&#x60;, or &#x60;Canceled&#x60; status..</param>
        /// <param name="isBusinessOrder">When true, the order is an Amazon Business order. An Amazon Business order is an order where the buyer is a Verified Business Buyer..</param>
        /// <param name="isPrime">When true, the order is a seller-fulfilled Amazon Prime order..</param>
        /// <param name="isPremiumOrder">When true, the order has a Premium Shipping Service Level Agreement. For more information about Premium Shipping orders, refer to \&quot;Premium Shipping Options\&quot; in the Seller Central Help for your marketplace..</param>
        /// <param name="isGlobalExpressEnabled">When true, the order is a &#x60;GlobalExpress&#x60; order..</param>
        /// <param name="replacedOrderId">The order ID value for the order that is being replaced. Returned only if IsReplacementOrder &#x3D; true..</param>
        /// <param name="isReplacementOrder">When true, this is a replacement order..</param>
        /// <param name="promiseResponseDueDate">Indicates the date by which the seller must respond to the buyer with an estimated ship date. Only returned for Sourcing on Demand orders..</param>
        /// <param name="isEstimatedShipDateSet">When true, the estimated ship date is set for the order. Only returned for Sourcing on Demand orders..</param>
        /// <param name="isSoldByAB">When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller..</param>
        /// <param name="isIBA">When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller..</param>
        /// <param name="defaultShipFromLocationAddress">The recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location..</param>
        /// <param name="buyerInvoicePreference">The buyer&#39;s invoicing preference. Sellers can use this data to issue electronic invoices for orders in Turkey.  **Note**: This attribute is only available in the Turkey marketplace..</param>
        /// <param name="buyerTaxInformation">Contains the business invoice tax information. Sellers could use this data to issue electronic invoices for business orders in Turkey.  **Note**: 1. This attribute is only available in the Turkey marketplace for the orders that &#x60;BuyerInvoicePreference&#x60; is BUSINESS. 2. The &#x60;BuyerTaxInformation&#x60; is a restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access this restricted data..</param>
        /// <param name="fulfillmentInstruction">Contains the instructions about the fulfillment, such as the location from where you want the order filled..</param>
        /// <param name="isISPU">When true, this order is marked to be picked up from a store rather than delivered..</param>
        /// <param name="isAccessPointOrder">When true, this order is marked to be delivered to an Access Point. The access location is chosen by the customer. Access Points include Amazon Hub Lockers, Amazon Hub Counters, and pickup points operated by carriers..</param>
        /// <param name="marketplaceTaxInfo">Tax information about the marketplace where the sale took place. Sellers can use this data to issue electronic invoices for orders in Brazil.  **Note**: This attribute is only available in the Brazil marketplace for the orders with &#x60;Pending&#x60; or &#x60;Unshipped&#x60; status..</param>
        /// <param name="sellerDisplayName">The seller’s friendly name registered in the marketplace where the sale took place. Sellers can use this data to issue electronic invoices for orders in Brazil.  **Note**: This attribute is only available in the Brazil marketplace for the orders with &#x60;Pending&#x60; or &#x60;Unshipped&#x60; status..</param>
        /// <param name="shippingAddress">The shipping address for the order.  **Note**: 1. &#x60;ShippingAddress&#x60; is only available for orders with the following status values: Unshipped, &#x60;PartiallyShipped&#x60;, Shipped and &#x60;InvoiceUnconfirmed&#x60;. 2. The &#x60;ShippingAddress&#x60; contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in &#x60;ShippingAddress&#x60;. For example, &#x60;Name&#x60;, &#x60;AddressLine1&#x60;, &#x60;AddressLine2&#x60;, &#x60;AddressLine3&#x60;, &#x60;Phone&#x60;, &#x60;AddressType&#x60;, and &#x60;ExtendedFields&#x60;..</param>
        /// <param name="buyerInfo">Buyer information.  **Note**: The &#x60;BuyerInfo&#x60; contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in &#x60;BuyerInfo&#x60;. For example, &#x60;BuyerName&#x60;, &#x60;BuyerTaxInfo&#x60;, and &#x60;PurchaseOrderNumber&#x60;..</param>
        /// <param name="automatedShippingSettings">Contains information regarding the Shipping Settings Automaton program, such as whether the order&#39;s shipping settings were generated automatically, and what those settings are..</param>
        /// <param name="hasRegulatedItems">Whether the order contains regulated items which may require additional approval steps before being fulfilled..</param>
        /// <param name="electronicInvoiceStatus">The status of the electronic invoice..</param>
        public Order(string amazonOrderId = default, string sellerOrderId = default, string purchaseDate = default, string lastUpdateDate = default, OrderStatusEnum orderStatus = default, FulfillmentChannelEnum? fulfillmentChannel = default, string salesChannel = default, string orderChannel = default, string shipServiceLevel = default, Money orderTotal = default, int? numberOfItemsShipped = default, int? numberOfItemsUnshipped = default, PaymentExecutionDetailItemList paymentExecutionDetail = default, PaymentMethodEnum? paymentMethod = default, PaymentMethodDetailItemList paymentMethodDetails = default, string marketplaceId = default, string shipmentServiceLevelCategory = default, EasyShipShipmentStatus? easyShipShipmentStatus = default, string cbaDisplayableShippingLabel = default, OrderTypeEnum? orderType = default, string earliestShipDate = default, string latestShipDate = default, string earliestDeliveryDate = default, string latestDeliveryDate = default, bool? isBusinessOrder = default, bool? isPrime = default, bool? isPremiumOrder = default, bool? isGlobalExpressEnabled = default, string replacedOrderId = default, bool? isReplacementOrder = default, string promiseResponseDueDate = default, bool? isEstimatedShipDateSet = default, bool? isSoldByAB = default, bool? isIBA = default, Address defaultShipFromLocationAddress = default, BuyerInvoicePreferenceEnum? buyerInvoicePreference = default, BuyerTaxInformation buyerTaxInformation = default, FulfillmentInstruction fulfillmentInstruction = default, bool? isISPU = default, bool? isAccessPointOrder = default, MarketplaceTaxInfo marketplaceTaxInfo = default, string sellerDisplayName = default, Address shippingAddress = default, BuyerInfo buyerInfo = default, AutomatedShippingSettings automatedShippingSettings = default, bool? hasRegulatedItems = default, ElectronicInvoiceStatus? electronicInvoiceStatus = default)
        {
            // to ensure "amazonOrderId" is required (not null)
            if (amazonOrderId == null)
            {
                throw new InvalidDataException("amazonOrderId is a required property for Order and cannot be null");
            }
            else
            {
                this.AmazonOrderId = amazonOrderId;
            }
            // to ensure "purchaseDate" is required (not null)
            if (purchaseDate == null)
            {
                throw new InvalidDataException("purchaseDate is a required property for Order and cannot be null");
            }
            else
            {
                this.PurchaseDate = purchaseDate;
            }
            // to ensure "lastUpdateDate" is required (not null)
            if (lastUpdateDate == null)
            {
                throw new InvalidDataException("lastUpdateDate is a required property for Order and cannot be null");
            }
            else
            {
                this.LastUpdateDate = lastUpdateDate;
            }
            // to ensure "orderStatus" is required (not null)
            if (orderStatus == null)
            {
                throw new InvalidDataException("orderStatus is a required property for Order and cannot be null");
            }
            else
            {
                this.OrderStatus = orderStatus;
            }
            this.SellerOrderId = sellerOrderId;
            this.FulfillmentChannel = fulfillmentChannel;
            this.SalesChannel = salesChannel;
            this.OrderChannel = orderChannel;
            this.ShipServiceLevel = shipServiceLevel;
            this.OrderTotal = orderTotal;
            this.NumberOfItemsShipped = numberOfItemsShipped;
            this.NumberOfItemsUnshipped = numberOfItemsUnshipped;
            this.PaymentExecutionDetail = paymentExecutionDetail;
            this.PaymentMethod = paymentMethod;
            this.PaymentMethodDetails = paymentMethodDetails;
            this.MarketplaceId = marketplaceId;
            this.ShipmentServiceLevelCategory = shipmentServiceLevelCategory;
            this.EasyShipShipmentStatus = easyShipShipmentStatus;
            this.CbaDisplayableShippingLabel = cbaDisplayableShippingLabel;
            this.OrderType = orderType;
            this.EarliestShipDate = earliestShipDate;
            this.LatestShipDate = latestShipDate;
            this.EarliestDeliveryDate = earliestDeliveryDate;
            this.LatestDeliveryDate = latestDeliveryDate;
            this.IsBusinessOrder = isBusinessOrder;
            this.IsPrime = isPrime;
            this.IsPremiumOrder = isPremiumOrder;
            this.IsGlobalExpressEnabled = isGlobalExpressEnabled;
            this.ReplacedOrderId = replacedOrderId;
            this.IsReplacementOrder = isReplacementOrder;
            this.PromiseResponseDueDate = promiseResponseDueDate;
            this.IsEstimatedShipDateSet = isEstimatedShipDateSet;
            this.IsSoldByAB = isSoldByAB;
            this.IsIBA = isIBA;
            this.DefaultShipFromLocationAddress = defaultShipFromLocationAddress;
            this.BuyerInvoicePreference = buyerInvoicePreference;
            this.BuyerTaxInformation = buyerTaxInformation;
            this.FulfillmentInstruction = fulfillmentInstruction;
            this.IsISPU = isISPU;
            this.IsAccessPointOrder = isAccessPointOrder;
            this.MarketplaceTaxInfo = marketplaceTaxInfo;
            this.SellerDisplayName = sellerDisplayName;
            this.ShippingAddress = shippingAddress;
            this.BuyerInfo = buyerInfo;
            this.AutomatedShippingSettings = automatedShippingSettings;
            this.HasRegulatedItems = hasRegulatedItems;
            this.ElectronicInvoiceStatus = electronicInvoiceStatus;
        }

        /// <summary>
        /// An Amazon-defined order identifier, in 3-7-7 format.
        /// </summary>
        /// <value>An Amazon-defined order identifier, in 3-7-7 format.</value>
        [DataMember(Name = "AmazonOrderId", EmitDefaultValue = false)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        /// A seller-defined order identifier.
        /// </summary>
        /// <value>A seller-defined order identifier.</value>
        [DataMember(Name = "SellerOrderId", EmitDefaultValue = false)]
        public string SellerOrderId { get; set; }

        /// <summary>
        /// The date when the order was created.
        /// </summary>
        /// <value>The date when the order was created.</value>
        [DataMember(Name = "PurchaseDate", EmitDefaultValue = false)]
        public string PurchaseDate { get; set; }

        /// <summary>
        /// The date when the order was last updated.  __Note__: &#x60;LastUpdateDate&#x60; is returned with an incorrect date for orders that were last updated before 2009-04-01.
        /// </summary>
        /// <value>The date when the order was last updated.  __Note__: &#x60;LastUpdateDate&#x60; is returned with an incorrect date for orders that were last updated before 2009-04-01.</value>
        [DataMember(Name = "LastUpdateDate", EmitDefaultValue = false)]
        public string LastUpdateDate { get; set; }



        /// <summary>
        /// The sales channel for the first item in the order.
        /// </summary>
        /// <value>The sales channel for the first item in the order.</value>
        [DataMember(Name = "SalesChannel", EmitDefaultValue = false)]
        public string SalesChannel { get; set; }

        /// <summary>
        /// The order channel for the first item in the order.
        /// </summary>
        /// <value>The order channel for the first item in the order.</value>
        [DataMember(Name = "OrderChannel", EmitDefaultValue = false)]
        public string OrderChannel { get; set; }

        /// <summary>
        /// The order&#39;s shipment service level.
        /// </summary>
        /// <value>The order&#39;s shipment service level.</value>
        [DataMember(Name = "ShipServiceLevel", EmitDefaultValue = false)]
        public string ShipServiceLevel { get; set; }

        /// <summary>
        /// The total charge for this order.
        /// </summary>
        /// <value>The total charge for this order.</value>
        [DataMember(Name = "OrderTotal", EmitDefaultValue = false)]
        public Money OrderTotal { get; set; }

        /// <summary>
        /// The number of items shipped.
        /// </summary>
        /// <value>The number of items shipped.</value>
        [DataMember(Name = "NumberOfItemsShipped", EmitDefaultValue = false)]
        public int? NumberOfItemsShipped { get; set; }

        /// <summary>
        /// The number of items unshipped.
        /// </summary>
        /// <value>The number of items unshipped.</value>
        [DataMember(Name = "NumberOfItemsUnshipped", EmitDefaultValue = false)]
        public int? NumberOfItemsUnshipped { get; set; }

        /// <summary>
        /// Information about sub-payment methods for a cash-on-delivery (COD) order.  __Note__: For a COD order that is paid for using one sub-payment method, one &#x60;PaymentExecutionDetailItem&#x60; object is returned, with &#x60;PaymentExecutionDetailItem&#x60;/&#x60;PaymentMethod &#x3D; COD&#x60;. For a COD order that is paid for using multiple sub-payment methods, two or more &#x60;PaymentExecutionDetailItem&#x60; objects are returned.
        /// </summary>
        /// <value>Information about sub-payment methods for a cash-on-delivery (COD) order.  __Note__: For a COD order that is paid for using one sub-payment method, one &#x60;PaymentExecutionDetailItem&#x60; object is returned, with &#x60;PaymentExecutionDetailItem&#x60;/&#x60;PaymentMethod &#x3D; COD&#x60;. For a COD order that is paid for using multiple sub-payment methods, two or more &#x60;PaymentExecutionDetailItem&#x60; objects are returned.</value>
        [DataMember(Name = "PaymentExecutionDetail", EmitDefaultValue = false)]
        public PaymentExecutionDetailItemList PaymentExecutionDetail { get; set; }


        /// <summary>
        /// A list of payment methods for the order.
        /// </summary>
        /// <value>A list of payment methods for the order.</value>
        [DataMember(Name = "PaymentMethodDetails", EmitDefaultValue = false)]
        public PaymentMethodDetailItemList PaymentMethodDetails { get; set; }

        /// <summary>
        /// The identifier for the marketplace where the order was placed.
        /// </summary>
        /// <value>The identifier for the marketplace where the order was placed.</value>
        [DataMember(Name = "MarketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The shipment service level category for the order.  **Possible values**: &#x60;Expedited&#x60;, &#x60;FreeEconomy&#x60;, &#x60;NextDay&#x60;, &#x60;Priority&#x60;, &#x60;SameDay&#x60;, &#x60;SecondDay&#x60;, &#x60;Scheduled&#x60;, and &#x60;Standard&#x60;.
        /// </summary>
        /// <value>The shipment service level category for the order.  **Possible values**: &#x60;Expedited&#x60;, &#x60;FreeEconomy&#x60;, &#x60;NextDay&#x60;, &#x60;Priority&#x60;, &#x60;SameDay&#x60;, &#x60;SecondDay&#x60;, &#x60;Scheduled&#x60;, and &#x60;Standard&#x60;.</value>
        [DataMember(Name = "ShipmentServiceLevelCategory", EmitDefaultValue = false)]
        public string ShipmentServiceLevelCategory { get; set; }


        /// <summary>
        /// Custom ship label for Checkout by Amazon (CBA).
        /// </summary>
        /// <value>Custom ship label for Checkout by Amazon (CBA).</value>
        [DataMember(Name = "CbaDisplayableShippingLabel", EmitDefaultValue = false)]
        public string CbaDisplayableShippingLabel { get; set; }


        /// <summary>
        /// The start of the time period within which you have committed to ship the order. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. Only returned for seller-fulfilled orders.  __Note__: &#x60;EarliestShipDate&#x60; might not be returned for orders placed before February 1, 2013.
        /// </summary>
        /// <value>The start of the time period within which you have committed to ship the order. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. Only returned for seller-fulfilled orders.  __Note__: &#x60;EarliestShipDate&#x60; might not be returned for orders placed before February 1, 2013.</value>
        [DataMember(Name = "EarliestShipDate", EmitDefaultValue = false)]
        public string EarliestShipDate { get; set; }

        /// <summary>
        /// The end of the time period within which you have committed to ship the order. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. Only returned for seller-fulfilled orders.  __Note__: &#x60;LatestShipDate&#x60; might not be returned for orders placed before February 1, 2013.
        /// </summary>
        /// <value>The end of the time period within which you have committed to ship the order. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. Only returned for seller-fulfilled orders.  __Note__: &#x60;LatestShipDate&#x60; might not be returned for orders placed before February 1, 2013.</value>
        [DataMember(Name = "LatestShipDate", EmitDefaultValue = false)]
        public string LatestShipDate { get; set; }

        /// <summary>
        /// The start of the time period within which you have committed to fulfill the order. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. Only returned for seller-fulfilled orders.
        /// </summary>
        /// <value>The start of the time period within which you have committed to fulfill the order. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. Only returned for seller-fulfilled orders.</value>
        [DataMember(Name = "EarliestDeliveryDate", EmitDefaultValue = false)]
        public string EarliestDeliveryDate { get; set; }

        /// <summary>
        /// The end of the time period within which you have committed to fulfill the order. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. Only returned for seller-fulfilled orders that do not have a &#x60;PendingAvailability&#x60;, &#x60;Pending&#x60;, or &#x60;Canceled&#x60; status.
        /// </summary>
        /// <value>The end of the time period within which you have committed to fulfill the order. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. Only returned for seller-fulfilled orders that do not have a &#x60;PendingAvailability&#x60;, &#x60;Pending&#x60;, or &#x60;Canceled&#x60; status.</value>
        [DataMember(Name = "LatestDeliveryDate", EmitDefaultValue = false)]
        public string LatestDeliveryDate { get; set; }

        /// <summary>
        /// When true, the order is an Amazon Business order. An Amazon Business order is an order where the buyer is a Verified Business Buyer.
        /// </summary>
        /// <value>When true, the order is an Amazon Business order. An Amazon Business order is an order where the buyer is a Verified Business Buyer.</value>
        [DataMember(Name = "IsBusinessOrder", EmitDefaultValue = false)]
        public bool? IsBusinessOrder { get; set; }

        /// <summary>
        /// When true, the order is a seller-fulfilled Amazon Prime order.
        /// </summary>
        /// <value>When true, the order is a seller-fulfilled Amazon Prime order.</value>
        [DataMember(Name = "IsPrime", EmitDefaultValue = false)]
        public bool? IsPrime { get; set; }

        /// <summary>
        /// When true, the order has a Premium Shipping Service Level Agreement. For more information about Premium Shipping orders, refer to \&quot;Premium Shipping Options\&quot; in the Seller Central Help for your marketplace.
        /// </summary>
        /// <value>When true, the order has a Premium Shipping Service Level Agreement. For more information about Premium Shipping orders, refer to \&quot;Premium Shipping Options\&quot; in the Seller Central Help for your marketplace.</value>
        [DataMember(Name = "IsPremiumOrder", EmitDefaultValue = false)]
        public bool? IsPremiumOrder { get; set; }

        /// <summary>
        /// When true, the order is a &#x60;GlobalExpress&#x60; order.
        /// </summary>
        /// <value>When true, the order is a &#x60;GlobalExpress&#x60; order.</value>
        [DataMember(Name = "IsGlobalExpressEnabled", EmitDefaultValue = false)]
        public bool? IsGlobalExpressEnabled { get; set; }

        /// <summary>
        /// The order ID value for the order that is being replaced. Returned only if IsReplacementOrder &#x3D; true.
        /// </summary>
        /// <value>The order ID value for the order that is being replaced. Returned only if IsReplacementOrder &#x3D; true.</value>
        [DataMember(Name = "ReplacedOrderId", EmitDefaultValue = false)]
        public string ReplacedOrderId { get; set; }

        /// <summary>
        /// When true, this is a replacement order.
        /// </summary>
        /// <value>When true, this is a replacement order.</value>
        [DataMember(Name = "IsReplacementOrder", EmitDefaultValue = false)]
        public bool? IsReplacementOrder { get; set; }

        /// <summary>
        /// Indicates the date by which the seller must respond to the buyer with an estimated ship date. Only returned for Sourcing on Demand orders.
        /// </summary>
        /// <value>Indicates the date by which the seller must respond to the buyer with an estimated ship date. Only returned for Sourcing on Demand orders.</value>
        [DataMember(Name = "PromiseResponseDueDate", EmitDefaultValue = false)]
        public string PromiseResponseDueDate { get; set; }

        /// <summary>
        /// When true, the estimated ship date is set for the order. Only returned for Sourcing on Demand orders.
        /// </summary>
        /// <value>When true, the estimated ship date is set for the order. Only returned for Sourcing on Demand orders.</value>
        [DataMember(Name = "IsEstimatedShipDateSet", EmitDefaultValue = false)]
        public bool? IsEstimatedShipDateSet { get; set; }

        /// <summary>
        /// When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.
        /// </summary>
        /// <value>When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.</value>
        [DataMember(Name = "IsSoldByAB", EmitDefaultValue = false)]
        public bool? IsSoldByAB { get; set; }

        /// <summary>
        /// When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.
        /// </summary>
        /// <value>When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.</value>
        [DataMember(Name = "IsIBA", EmitDefaultValue = false)]
        public bool? IsIBA { get; set; }

        /// <summary>
        /// The recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.
        /// </summary>
        /// <value>The recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.</value>
        [DataMember(Name = "DefaultShipFromLocationAddress", EmitDefaultValue = false)]
        public Address DefaultShipFromLocationAddress { get; set; }


        /// <summary>
        /// Contains the business invoice tax information. Sellers could use this data to issue electronic invoices for business orders in Turkey.  **Note**: 1. This attribute is only available in the Turkey marketplace for the orders that &#x60;BuyerInvoicePreference&#x60; is BUSINESS. 2. The &#x60;BuyerTaxInformation&#x60; is a restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access this restricted data.
        /// </summary>
        /// <value>Contains the business invoice tax information. Sellers could use this data to issue electronic invoices for business orders in Turkey.  **Note**: 1. This attribute is only available in the Turkey marketplace for the orders that &#x60;BuyerInvoicePreference&#x60; is BUSINESS. 2. The &#x60;BuyerTaxInformation&#x60; is a restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access this restricted data.</value>
        [DataMember(Name = "BuyerTaxInformation", EmitDefaultValue = false)]
        public BuyerTaxInformation BuyerTaxInformation { get; set; }

        /// <summary>
        /// Contains the instructions about the fulfillment, such as the location from where you want the order filled.
        /// </summary>
        /// <value>Contains the instructions about the fulfillment, such as the location from where you want the order filled.</value>
        [DataMember(Name = "FulfillmentInstruction", EmitDefaultValue = false)]
        public FulfillmentInstruction FulfillmentInstruction { get; set; }

        /// <summary>
        /// When true, this order is marked to be picked up from a store rather than delivered.
        /// </summary>
        /// <value>When true, this order is marked to be picked up from a store rather than delivered.</value>
        [DataMember(Name = "IsISPU", EmitDefaultValue = false)]
        public bool? IsISPU { get; set; }

        /// <summary>
        /// When true, this order is marked to be delivered to an Access Point. The access location is chosen by the customer. Access Points include Amazon Hub Lockers, Amazon Hub Counters, and pickup points operated by carriers.
        /// </summary>
        /// <value>When true, this order is marked to be delivered to an Access Point. The access location is chosen by the customer. Access Points include Amazon Hub Lockers, Amazon Hub Counters, and pickup points operated by carriers.</value>
        [DataMember(Name = "IsAccessPointOrder", EmitDefaultValue = false)]
        public bool? IsAccessPointOrder { get; set; }

        /// <summary>
        /// Tax information about the marketplace where the sale took place. Sellers can use this data to issue electronic invoices for orders in Brazil.  **Note**: This attribute is only available in the Brazil marketplace for the orders with &#x60;Pending&#x60; or &#x60;Unshipped&#x60; status.
        /// </summary>
        /// <value>Tax information about the marketplace where the sale took place. Sellers can use this data to issue electronic invoices for orders in Brazil.  **Note**: This attribute is only available in the Brazil marketplace for the orders with &#x60;Pending&#x60; or &#x60;Unshipped&#x60; status.</value>
        [DataMember(Name = "MarketplaceTaxInfo", EmitDefaultValue = false)]
        public MarketplaceTaxInfo MarketplaceTaxInfo { get; set; }

        /// <summary>
        /// The seller’s friendly name registered in the marketplace where the sale took place. Sellers can use this data to issue electronic invoices for orders in Brazil.  **Note**: This attribute is only available in the Brazil marketplace for the orders with &#x60;Pending&#x60; or &#x60;Unshipped&#x60; status.
        /// </summary>
        /// <value>The seller’s friendly name registered in the marketplace where the sale took place. Sellers can use this data to issue electronic invoices for orders in Brazil.  **Note**: This attribute is only available in the Brazil marketplace for the orders with &#x60;Pending&#x60; or &#x60;Unshipped&#x60; status.</value>
        [DataMember(Name = "SellerDisplayName", EmitDefaultValue = false)]
        public string SellerDisplayName { get; set; }

        /// <summary>
        /// The shipping address for the order.  **Note**: 1. &#x60;ShippingAddress&#x60; is only available for orders with the following status values: Unshipped, &#x60;PartiallyShipped&#x60;, Shipped and &#x60;InvoiceUnconfirmed&#x60;. 2. The &#x60;ShippingAddress&#x60; contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in &#x60;ShippingAddress&#x60;. For example, &#x60;Name&#x60;, &#x60;AddressLine1&#x60;, &#x60;AddressLine2&#x60;, &#x60;AddressLine3&#x60;, &#x60;Phone&#x60;, &#x60;AddressType&#x60;, and &#x60;ExtendedFields&#x60;.
        /// </summary>
        /// <value>The shipping address for the order.  **Note**: 1. &#x60;ShippingAddress&#x60; is only available for orders with the following status values: Unshipped, &#x60;PartiallyShipped&#x60;, Shipped and &#x60;InvoiceUnconfirmed&#x60;. 2. The &#x60;ShippingAddress&#x60; contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in &#x60;ShippingAddress&#x60;. For example, &#x60;Name&#x60;, &#x60;AddressLine1&#x60;, &#x60;AddressLine2&#x60;, &#x60;AddressLine3&#x60;, &#x60;Phone&#x60;, &#x60;AddressType&#x60;, and &#x60;ExtendedFields&#x60;.</value>
        [DataMember(Name = "ShippingAddress", EmitDefaultValue = false)]
        public Address ShippingAddress { get; set; }

        /// <summary>
        /// Buyer information.  **Note**: The &#x60;BuyerInfo&#x60; contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in &#x60;BuyerInfo&#x60;. For example, &#x60;BuyerName&#x60;, &#x60;BuyerTaxInfo&#x60;, and &#x60;PurchaseOrderNumber&#x60;.
        /// </summary>
        /// <value>Buyer information.  **Note**: The &#x60;BuyerInfo&#x60; contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in &#x60;BuyerInfo&#x60;. For example, &#x60;BuyerName&#x60;, &#x60;BuyerTaxInfo&#x60;, and &#x60;PurchaseOrderNumber&#x60;.</value>
        [DataMember(Name = "BuyerInfo", EmitDefaultValue = false)]
        public BuyerInfo BuyerInfo { get; set; }

        /// <summary>
        /// Contains information regarding the Shipping Settings Automaton program, such as whether the order&#39;s shipping settings were generated automatically, and what those settings are.
        /// </summary>
        /// <value>Contains information regarding the Shipping Settings Automaton program, such as whether the order&#39;s shipping settings were generated automatically, and what those settings are.</value>
        [DataMember(Name = "AutomatedShippingSettings", EmitDefaultValue = false)]
        public AutomatedShippingSettings AutomatedShippingSettings { get; set; }

        /// <summary>
        /// Whether the order contains regulated items which may require additional approval steps before being fulfilled.
        /// </summary>
        /// <value>Whether the order contains regulated items which may require additional approval steps before being fulfilled.</value>
        [DataMember(Name = "HasRegulatedItems", EmitDefaultValue = false)]
        public bool? HasRegulatedItems { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  AmazonOrderId: ").Append(AmazonOrderId).Append("\n");
            sb.Append("  SellerOrderId: ").Append(SellerOrderId).Append("\n");
            sb.Append("  PurchaseDate: ").Append(PurchaseDate).Append("\n");
            sb.Append("  LastUpdateDate: ").Append(LastUpdateDate).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  FulfillmentChannel: ").Append(FulfillmentChannel).Append("\n");
            sb.Append("  SalesChannel: ").Append(SalesChannel).Append("\n");
            sb.Append("  OrderChannel: ").Append(OrderChannel).Append("\n");
            sb.Append("  ShipServiceLevel: ").Append(ShipServiceLevel).Append("\n");
            sb.Append("  OrderTotal: ").Append(OrderTotal).Append("\n");
            sb.Append("  NumberOfItemsShipped: ").Append(NumberOfItemsShipped).Append("\n");
            sb.Append("  NumberOfItemsUnshipped: ").Append(NumberOfItemsUnshipped).Append("\n");
            sb.Append("  PaymentExecutionDetail: ").Append(PaymentExecutionDetail).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentMethodDetails: ").Append(PaymentMethodDetails).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  ShipmentServiceLevelCategory: ").Append(ShipmentServiceLevelCategory).Append("\n");
            sb.Append("  EasyShipShipmentStatus: ").Append(EasyShipShipmentStatus).Append("\n");
            sb.Append("  CbaDisplayableShippingLabel: ").Append(CbaDisplayableShippingLabel).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  EarliestShipDate: ").Append(EarliestShipDate).Append("\n");
            sb.Append("  LatestShipDate: ").Append(LatestShipDate).Append("\n");
            sb.Append("  EarliestDeliveryDate: ").Append(EarliestDeliveryDate).Append("\n");
            sb.Append("  LatestDeliveryDate: ").Append(LatestDeliveryDate).Append("\n");
            sb.Append("  IsBusinessOrder: ").Append(IsBusinessOrder).Append("\n");
            sb.Append("  IsPrime: ").Append(IsPrime).Append("\n");
            sb.Append("  IsPremiumOrder: ").Append(IsPremiumOrder).Append("\n");
            sb.Append("  IsGlobalExpressEnabled: ").Append(IsGlobalExpressEnabled).Append("\n");
            sb.Append("  ReplacedOrderId: ").Append(ReplacedOrderId).Append("\n");
            sb.Append("  IsReplacementOrder: ").Append(IsReplacementOrder).Append("\n");
            sb.Append("  PromiseResponseDueDate: ").Append(PromiseResponseDueDate).Append("\n");
            sb.Append("  IsEstimatedShipDateSet: ").Append(IsEstimatedShipDateSet).Append("\n");
            sb.Append("  IsSoldByAB: ").Append(IsSoldByAB).Append("\n");
            sb.Append("  IsIBA: ").Append(IsIBA).Append("\n");
            sb.Append("  DefaultShipFromLocationAddress: ").Append(DefaultShipFromLocationAddress).Append("\n");
            sb.Append("  BuyerInvoicePreference: ").Append(BuyerInvoicePreference).Append("\n");
            sb.Append("  BuyerTaxInformation: ").Append(BuyerTaxInformation).Append("\n");
            sb.Append("  FulfillmentInstruction: ").Append(FulfillmentInstruction).Append("\n");
            sb.Append("  IsISPU: ").Append(IsISPU).Append("\n");
            sb.Append("  IsAccessPointOrder: ").Append(IsAccessPointOrder).Append("\n");
            sb.Append("  MarketplaceTaxInfo: ").Append(MarketplaceTaxInfo).Append("\n");
            sb.Append("  SellerDisplayName: ").Append(SellerDisplayName).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  BuyerInfo: ").Append(BuyerInfo).Append("\n");
            sb.Append("  AutomatedShippingSettings: ").Append(AutomatedShippingSettings).Append("\n");
            sb.Append("  HasRegulatedItems: ").Append(HasRegulatedItems).Append("\n");
            sb.Append("  ElectronicInvoiceStatus: ").Append(ElectronicInvoiceStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Order);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="input">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order input)
        {
            if (input == null)
                return false;

            return
                (
                    this.AmazonOrderId == input.AmazonOrderId ||
                    (this.AmazonOrderId != null &&
                    this.AmazonOrderId.Equals(input.AmazonOrderId))
                ) &&
                (
                    this.SellerOrderId == input.SellerOrderId ||
                    (this.SellerOrderId != null &&
                    this.SellerOrderId.Equals(input.SellerOrderId))
                ) &&
                (
                    this.PurchaseDate == input.PurchaseDate ||
                    (this.PurchaseDate != null &&
                    this.PurchaseDate.Equals(input.PurchaseDate))
                ) &&
                (
                    this.LastUpdateDate == input.LastUpdateDate ||
                    (this.LastUpdateDate != null &&
                    this.LastUpdateDate.Equals(input.LastUpdateDate))
                ) &&
                (
                    this.OrderStatus == input.OrderStatus ||
                    (this.OrderStatus != null &&
                    this.OrderStatus.Equals(input.OrderStatus))
                ) &&
                (
                    this.FulfillmentChannel == input.FulfillmentChannel ||
                    (this.FulfillmentChannel != null &&
                    this.FulfillmentChannel.Equals(input.FulfillmentChannel))
                ) &&
                (
                    this.SalesChannel == input.SalesChannel ||
                    (this.SalesChannel != null &&
                    this.SalesChannel.Equals(input.SalesChannel))
                ) &&
                (
                    this.OrderChannel == input.OrderChannel ||
                    (this.OrderChannel != null &&
                    this.OrderChannel.Equals(input.OrderChannel))
                ) &&
                (
                    this.ShipServiceLevel == input.ShipServiceLevel ||
                    (this.ShipServiceLevel != null &&
                    this.ShipServiceLevel.Equals(input.ShipServiceLevel))
                ) &&
                (
                    this.OrderTotal == input.OrderTotal ||
                    (this.OrderTotal != null &&
                    this.OrderTotal.Equals(input.OrderTotal))
                ) &&
                (
                    this.NumberOfItemsShipped == input.NumberOfItemsShipped ||
                    (this.NumberOfItemsShipped != null &&
                    this.NumberOfItemsShipped.Equals(input.NumberOfItemsShipped))
                ) &&
                (
                    this.NumberOfItemsUnshipped == input.NumberOfItemsUnshipped ||
                    (this.NumberOfItemsUnshipped != null &&
                    this.NumberOfItemsUnshipped.Equals(input.NumberOfItemsUnshipped))
                ) &&
                (
                    this.PaymentExecutionDetail == input.PaymentExecutionDetail ||
                    (this.PaymentExecutionDetail != null &&
                    this.PaymentExecutionDetail.Equals(input.PaymentExecutionDetail))
                ) &&
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) &&
                (
                    this.PaymentMethodDetails == input.PaymentMethodDetails ||
                    (this.PaymentMethodDetails != null &&
                    this.PaymentMethodDetails.Equals(input.PaymentMethodDetails))
                ) &&
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    this.ShipmentServiceLevelCategory == input.ShipmentServiceLevelCategory ||
                    (this.ShipmentServiceLevelCategory != null &&
                    this.ShipmentServiceLevelCategory.Equals(input.ShipmentServiceLevelCategory))
                ) &&
                (
                    this.EasyShipShipmentStatus == input.EasyShipShipmentStatus ||
                    (this.EasyShipShipmentStatus != null &&
                    this.EasyShipShipmentStatus.Equals(input.EasyShipShipmentStatus))
                ) &&
                (
                    this.CbaDisplayableShippingLabel == input.CbaDisplayableShippingLabel ||
                    (this.CbaDisplayableShippingLabel != null &&
                    this.CbaDisplayableShippingLabel.Equals(input.CbaDisplayableShippingLabel))
                ) &&
                (
                    this.OrderType == input.OrderType ||
                    (this.OrderType != null &&
                    this.OrderType.Equals(input.OrderType))
                ) &&
                (
                    this.EarliestShipDate == input.EarliestShipDate ||
                    (this.EarliestShipDate != null &&
                    this.EarliestShipDate.Equals(input.EarliestShipDate))
                ) &&
                (
                    this.LatestShipDate == input.LatestShipDate ||
                    (this.LatestShipDate != null &&
                    this.LatestShipDate.Equals(input.LatestShipDate))
                ) &&
                (
                    this.EarliestDeliveryDate == input.EarliestDeliveryDate ||
                    (this.EarliestDeliveryDate != null &&
                    this.EarliestDeliveryDate.Equals(input.EarliestDeliveryDate))
                ) &&
                (
                    this.LatestDeliveryDate == input.LatestDeliveryDate ||
                    (this.LatestDeliveryDate != null &&
                    this.LatestDeliveryDate.Equals(input.LatestDeliveryDate))
                ) &&
                (
                    this.IsBusinessOrder == input.IsBusinessOrder ||
                    (this.IsBusinessOrder != null &&
                    this.IsBusinessOrder.Equals(input.IsBusinessOrder))
                ) &&
                (
                    this.IsPrime == input.IsPrime ||
                    (this.IsPrime != null &&
                    this.IsPrime.Equals(input.IsPrime))
                ) &&
                (
                    this.IsPremiumOrder == input.IsPremiumOrder ||
                    (this.IsPremiumOrder != null &&
                    this.IsPremiumOrder.Equals(input.IsPremiumOrder))
                ) &&
                (
                    this.IsGlobalExpressEnabled == input.IsGlobalExpressEnabled ||
                    (this.IsGlobalExpressEnabled != null &&
                    this.IsGlobalExpressEnabled.Equals(input.IsGlobalExpressEnabled))
                ) &&
                (
                    this.ReplacedOrderId == input.ReplacedOrderId ||
                    (this.ReplacedOrderId != null &&
                    this.ReplacedOrderId.Equals(input.ReplacedOrderId))
                ) &&
                (
                    this.IsReplacementOrder == input.IsReplacementOrder ||
                    (this.IsReplacementOrder != null &&
                    this.IsReplacementOrder.Equals(input.IsReplacementOrder))
                ) &&
                (
                    this.PromiseResponseDueDate == input.PromiseResponseDueDate ||
                    (this.PromiseResponseDueDate != null &&
                    this.PromiseResponseDueDate.Equals(input.PromiseResponseDueDate))
                ) &&
                (
                    this.IsEstimatedShipDateSet == input.IsEstimatedShipDateSet ||
                    (this.IsEstimatedShipDateSet != null &&
                    this.IsEstimatedShipDateSet.Equals(input.IsEstimatedShipDateSet))
                ) &&
                (
                    this.IsSoldByAB == input.IsSoldByAB ||
                    (this.IsSoldByAB != null &&
                    this.IsSoldByAB.Equals(input.IsSoldByAB))
                ) &&
                (
                    this.IsIBA == input.IsIBA ||
                    (this.IsIBA != null &&
                    this.IsIBA.Equals(input.IsIBA))
                ) &&
                (
                    this.DefaultShipFromLocationAddress == input.DefaultShipFromLocationAddress ||
                    (this.DefaultShipFromLocationAddress != null &&
                    this.DefaultShipFromLocationAddress.Equals(input.DefaultShipFromLocationAddress))
                ) &&
                (
                    this.BuyerInvoicePreference == input.BuyerInvoicePreference ||
                    (this.BuyerInvoicePreference != null &&
                    this.BuyerInvoicePreference.Equals(input.BuyerInvoicePreference))
                ) &&
                (
                    this.BuyerTaxInformation == input.BuyerTaxInformation ||
                    (this.BuyerTaxInformation != null &&
                    this.BuyerTaxInformation.Equals(input.BuyerTaxInformation))
                ) &&
                (
                    this.FulfillmentInstruction == input.FulfillmentInstruction ||
                    (this.FulfillmentInstruction != null &&
                    this.FulfillmentInstruction.Equals(input.FulfillmentInstruction))
                ) &&
                (
                    this.IsISPU == input.IsISPU ||
                    (this.IsISPU != null &&
                    this.IsISPU.Equals(input.IsISPU))
                ) &&
                (
                    this.IsAccessPointOrder == input.IsAccessPointOrder ||
                    (this.IsAccessPointOrder != null &&
                    this.IsAccessPointOrder.Equals(input.IsAccessPointOrder))
                ) &&
                (
                    this.MarketplaceTaxInfo == input.MarketplaceTaxInfo ||
                    (this.MarketplaceTaxInfo != null &&
                    this.MarketplaceTaxInfo.Equals(input.MarketplaceTaxInfo))
                ) &&
                (
                    this.SellerDisplayName == input.SellerDisplayName ||
                    (this.SellerDisplayName != null &&
                    this.SellerDisplayName.Equals(input.SellerDisplayName))
                ) &&
                (
                    this.ShippingAddress == input.ShippingAddress ||
                    (this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(input.ShippingAddress))
                ) &&
                (
                    this.BuyerInfo == input.BuyerInfo ||
                    (this.BuyerInfo != null &&
                    this.BuyerInfo.Equals(input.BuyerInfo))
                ) &&
                (
                    this.AutomatedShippingSettings == input.AutomatedShippingSettings ||
                    (this.AutomatedShippingSettings != null &&
                    this.AutomatedShippingSettings.Equals(input.AutomatedShippingSettings))
                ) &&
                (
                    this.HasRegulatedItems == input.HasRegulatedItems ||
                    (this.HasRegulatedItems != null &&
                    this.HasRegulatedItems.Equals(input.HasRegulatedItems))
                ) &&
                (
                    this.ElectronicInvoiceStatus == input.ElectronicInvoiceStatus ||
                    (this.ElectronicInvoiceStatus != null &&
                    this.ElectronicInvoiceStatus.Equals(input.ElectronicInvoiceStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AmazonOrderId != null)
                    hashCode = hashCode * 59 + this.AmazonOrderId.GetHashCode();
                if (this.SellerOrderId != null)
                    hashCode = hashCode * 59 + this.SellerOrderId.GetHashCode();
                if (this.PurchaseDate != null)
                    hashCode = hashCode * 59 + this.PurchaseDate.GetHashCode();
                if (this.LastUpdateDate != null)
                    hashCode = hashCode * 59 + this.LastUpdateDate.GetHashCode();
                if (this.OrderStatus != null)
                    hashCode = hashCode * 59 + this.OrderStatus.GetHashCode();
                if (this.FulfillmentChannel != null)
                    hashCode = hashCode * 59 + this.FulfillmentChannel.GetHashCode();
                if (this.SalesChannel != null)
                    hashCode = hashCode * 59 + this.SalesChannel.GetHashCode();
                if (this.OrderChannel != null)
                    hashCode = hashCode * 59 + this.OrderChannel.GetHashCode();
                if (this.ShipServiceLevel != null)
                    hashCode = hashCode * 59 + this.ShipServiceLevel.GetHashCode();
                if (this.OrderTotal != null)
                    hashCode = hashCode * 59 + this.OrderTotal.GetHashCode();
                if (this.NumberOfItemsShipped != null)
                    hashCode = hashCode * 59 + this.NumberOfItemsShipped.GetHashCode();
                if (this.NumberOfItemsUnshipped != null)
                    hashCode = hashCode * 59 + this.NumberOfItemsUnshipped.GetHashCode();
                if (this.PaymentExecutionDetail != null)
                    hashCode = hashCode * 59 + this.PaymentExecutionDetail.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.PaymentMethodDetails != null)
                    hashCode = hashCode * 59 + this.PaymentMethodDetails.GetHashCode();
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.ShipmentServiceLevelCategory != null)
                    hashCode = hashCode * 59 + this.ShipmentServiceLevelCategory.GetHashCode();
                if (this.EasyShipShipmentStatus != null)
                    hashCode = hashCode * 59 + this.EasyShipShipmentStatus.GetHashCode();
                if (this.CbaDisplayableShippingLabel != null)
                    hashCode = hashCode * 59 + this.CbaDisplayableShippingLabel.GetHashCode();
                if (this.OrderType != null)
                    hashCode = hashCode * 59 + this.OrderType.GetHashCode();
                if (this.EarliestShipDate != null)
                    hashCode = hashCode * 59 + this.EarliestShipDate.GetHashCode();
                if (this.LatestShipDate != null)
                    hashCode = hashCode * 59 + this.LatestShipDate.GetHashCode();
                if (this.EarliestDeliveryDate != null)
                    hashCode = hashCode * 59 + this.EarliestDeliveryDate.GetHashCode();
                if (this.LatestDeliveryDate != null)
                    hashCode = hashCode * 59 + this.LatestDeliveryDate.GetHashCode();
                if (this.IsBusinessOrder != null)
                    hashCode = hashCode * 59 + this.IsBusinessOrder.GetHashCode();
                if (this.IsPrime != null)
                    hashCode = hashCode * 59 + this.IsPrime.GetHashCode();
                if (this.IsPremiumOrder != null)
                    hashCode = hashCode * 59 + this.IsPremiumOrder.GetHashCode();
                if (this.IsGlobalExpressEnabled != null)
                    hashCode = hashCode * 59 + this.IsGlobalExpressEnabled.GetHashCode();
                if (this.ReplacedOrderId != null)
                    hashCode = hashCode * 59 + this.ReplacedOrderId.GetHashCode();
                if (this.IsReplacementOrder != null)
                    hashCode = hashCode * 59 + this.IsReplacementOrder.GetHashCode();
                if (this.PromiseResponseDueDate != null)
                    hashCode = hashCode * 59 + this.PromiseResponseDueDate.GetHashCode();
                if (this.IsEstimatedShipDateSet != null)
                    hashCode = hashCode * 59 + this.IsEstimatedShipDateSet.GetHashCode();
                if (this.IsSoldByAB != null)
                    hashCode = hashCode * 59 + this.IsSoldByAB.GetHashCode();
                if (this.IsIBA != null)
                    hashCode = hashCode * 59 + this.IsIBA.GetHashCode();
                if (this.DefaultShipFromLocationAddress != null)
                    hashCode = hashCode * 59 + this.DefaultShipFromLocationAddress.GetHashCode();
                if (this.BuyerInvoicePreference != null)
                    hashCode = hashCode * 59 + this.BuyerInvoicePreference.GetHashCode();
                if (this.BuyerTaxInformation != null)
                    hashCode = hashCode * 59 + this.BuyerTaxInformation.GetHashCode();
                if (this.FulfillmentInstruction != null)
                    hashCode = hashCode * 59 + this.FulfillmentInstruction.GetHashCode();
                if (this.IsISPU != null)
                    hashCode = hashCode * 59 + this.IsISPU.GetHashCode();
                if (this.IsAccessPointOrder != null)
                    hashCode = hashCode * 59 + this.IsAccessPointOrder.GetHashCode();
                if (this.MarketplaceTaxInfo != null)
                    hashCode = hashCode * 59 + this.MarketplaceTaxInfo.GetHashCode();
                if (this.SellerDisplayName != null)
                    hashCode = hashCode * 59 + this.SellerDisplayName.GetHashCode();
                if (this.ShippingAddress != null)
                    hashCode = hashCode * 59 + this.ShippingAddress.GetHashCode();
                if (this.BuyerInfo != null)
                    hashCode = hashCode * 59 + this.BuyerInfo.GetHashCode();
                if (this.AutomatedShippingSettings != null)
                    hashCode = hashCode * 59 + this.AutomatedShippingSettings.GetHashCode();
                if (this.HasRegulatedItems != null)
                    hashCode = hashCode * 59 + this.HasRegulatedItems.GetHashCode();
                if (this.ElectronicInvoiceStatus != null)
                    hashCode = hashCode * 59 + this.ElectronicInvoiceStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
