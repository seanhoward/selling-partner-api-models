/* 
 * Orders v0
 *
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Orders
{
    /// <summary>
    /// The container for address extended fields (such as &#x60;street name&#x60; and &#x60;street number&#x60;). Currently only available with Brazil shipping addresses.
    /// </summary>
    [DataContract]
    public partial class AddressExtendedFields :  IEquatable<AddressExtendedFields>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressExtendedFields" /> class.
        /// </summary>
        /// <param name="streetName">The street name..</param>
        /// <param name="streetNumber">The house, building, or property number associated with the location&#39;s street address..</param>
        /// <param name="complement">The floor number/unit number in the building/private house number..</param>
        /// <param name="neighborhood">The neighborhood. This value is only used in some countries (such as Brazil)..</param>
        public AddressExtendedFields(string streetName = default, string streetNumber = default, string complement = default, string neighborhood = default)
        {
            this.StreetName = streetName;
            this.StreetNumber = streetNumber;
            this.Complement = complement;
            this.Neighborhood = neighborhood;
        }
        
        /// <summary>
        /// The street name.
        /// </summary>
        /// <value>The street name.</value>
        [DataMember(Name="StreetName", EmitDefaultValue=false)]
        public string StreetName { get; set; }

        /// <summary>
        /// The house, building, or property number associated with the location&#39;s street address.
        /// </summary>
        /// <value>The house, building, or property number associated with the location&#39;s street address.</value>
        [DataMember(Name="StreetNumber", EmitDefaultValue=false)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// The floor number/unit number in the building/private house number.
        /// </summary>
        /// <value>The floor number/unit number in the building/private house number.</value>
        [DataMember(Name="Complement", EmitDefaultValue=false)]
        public string Complement { get; set; }

        /// <summary>
        /// The neighborhood. This value is only used in some countries (such as Brazil).
        /// </summary>
        /// <value>The neighborhood. This value is only used in some countries (such as Brazil).</value>
        [DataMember(Name="Neighborhood", EmitDefaultValue=false)]
        public string Neighborhood { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressExtendedFields {\n");
            sb.Append("  StreetName: ").Append(StreetName).Append("\n");
            sb.Append("  StreetNumber: ").Append(StreetNumber).Append("\n");
            sb.Append("  Complement: ").Append(Complement).Append("\n");
            sb.Append("  Neighborhood: ").Append(Neighborhood).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressExtendedFields);
        }

        /// <summary>
        /// Returns true if AddressExtendedFields instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressExtendedFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressExtendedFields input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StreetName == input.StreetName ||
                    (this.StreetName != null &&
                    this.StreetName.Equals(input.StreetName))
                ) && 
                (
                    this.StreetNumber == input.StreetNumber ||
                    (this.StreetNumber != null &&
                    this.StreetNumber.Equals(input.StreetNumber))
                ) && 
                (
                    this.Complement == input.Complement ||
                    (this.Complement != null &&
                    this.Complement.Equals(input.Complement))
                ) && 
                (
                    this.Neighborhood == input.Neighborhood ||
                    (this.Neighborhood != null &&
                    this.Neighborhood.Equals(input.Neighborhood))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StreetName != null)
                    hashCode = hashCode * 59 + this.StreetName.GetHashCode();
                if (this.StreetNumber != null)
                    hashCode = hashCode * 59 + this.StreetNumber.GetHashCode();
                if (this.Complement != null)
                    hashCode = hashCode * 59 + this.Complement.GetHashCode();
                if (this.Neighborhood != null)
                    hashCode = hashCode * 59 + this.Neighborhood.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
