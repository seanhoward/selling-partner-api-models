/* 
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools. The Orders API supports orders that are two years old or less. Orders more than two years old will not show in the API response.  _Note:_ The Orders API supports orders from 2016 and after for the JP, AU, and SG marketplaces.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Orders
{
    /// <summary>
    /// The container for address extended fields. For example, street name or street number. Only available for Brazil shipping addresses as of now.
    /// </summary>
    [DataContract]
    public partial class AddressExtendedFields :  IEquatable<AddressExtendedFields>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressExtendedFields" /> class.
        /// </summary>
        /// <param name="streetName">The street name..</param>
        /// <param name="streetNumber">The house number/building number/property number in the street..</param>
        /// <param name="complement">The floor number/unit number in the building/private house number..</param>
        /// <param name="neighborhood">The neighborhood. It&#39;s smaller than a region and an integral part of an address. It is used in some countries like Brazil..</param>
        public AddressExtendedFields(string streetName = default(string), string streetNumber = default(string), string complement = default(string), string neighborhood = default(string))
        {
            this.StreetName = streetName;
            this.StreetNumber = streetNumber;
            this.Complement = complement;
            this.Neighborhood = neighborhood;
        }
        
        /// <summary>
        /// The street name.
        /// </summary>
        /// <value>The street name.</value>
        [DataMember(Name="StreetName", EmitDefaultValue=false)]
        public string StreetName { get; set; }

        /// <summary>
        /// The house number/building number/property number in the street.
        /// </summary>
        /// <value>The house number/building number/property number in the street.</value>
        [DataMember(Name="StreetNumber", EmitDefaultValue=false)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// The floor number/unit number in the building/private house number.
        /// </summary>
        /// <value>The floor number/unit number in the building/private house number.</value>
        [DataMember(Name="Complement", EmitDefaultValue=false)]
        public string Complement { get; set; }

        /// <summary>
        /// The neighborhood. It&#39;s smaller than a region and an integral part of an address. It is used in some countries like Brazil.
        /// </summary>
        /// <value>The neighborhood. It&#39;s smaller than a region and an integral part of an address. It is used in some countries like Brazil.</value>
        [DataMember(Name="Neighborhood", EmitDefaultValue=false)]
        public string Neighborhood { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressExtendedFields {\n");
            sb.Append("  StreetName: ").Append(StreetName).Append("\n");
            sb.Append("  StreetNumber: ").Append(StreetNumber).Append("\n");
            sb.Append("  Complement: ").Append(Complement).Append("\n");
            sb.Append("  Neighborhood: ").Append(Neighborhood).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressExtendedFields);
        }

        /// <summary>
        /// Returns true if AddressExtendedFields instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressExtendedFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressExtendedFields input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StreetName == input.StreetName ||
                    (this.StreetName != null &&
                    this.StreetName.Equals(input.StreetName))
                ) && 
                (
                    this.StreetNumber == input.StreetNumber ||
                    (this.StreetNumber != null &&
                    this.StreetNumber.Equals(input.StreetNumber))
                ) && 
                (
                    this.Complement == input.Complement ||
                    (this.Complement != null &&
                    this.Complement.Equals(input.Complement))
                ) && 
                (
                    this.Neighborhood == input.Neighborhood ||
                    (this.Neighborhood != null &&
                    this.Neighborhood.Equals(input.Neighborhood))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StreetName != null)
                    hashCode = hashCode * 59 + this.StreetName.GetHashCode();
                if (this.StreetNumber != null)
                    hashCode = hashCode * 59 + this.StreetNumber.GetHashCode();
                if (this.Complement != null)
                    hashCode = hashCode * 59 + this.Complement.GetHashCode();
                if (this.Neighborhood != null)
                    hashCode = hashCode * 59 + this.Neighborhood.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
