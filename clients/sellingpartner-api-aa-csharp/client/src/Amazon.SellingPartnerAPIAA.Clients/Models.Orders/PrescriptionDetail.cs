/* 
 * Orders v0
 *
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Orders
{
    /// <summary>
    /// Information about the prescription that is used to verify a regulated product. This must be provided once per order and reflect the sellerâ€™s own records. Only approved orders can have prescriptions.
    /// </summary>
    [DataContract]
    public partial class PrescriptionDetail :  IEquatable<PrescriptionDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrescriptionDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PrescriptionDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrescriptionDetail" /> class.
        /// </summary>
        /// <param name="prescriptionId">The identifier for the prescription used to verify the regulated product. (required).</param>
        /// <param name="expirationDate">The expiration date of the prescription used to verify the regulated product, in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. (required).</param>
        /// <param name="writtenQuantity">The number of units in each fill as provided in the prescription. (required).</param>
        /// <param name="totalRefillsAuthorized">The total number of refills written in the original prescription used to verify the regulated product. If a prescription originally had no refills, this value must be 0. (required).</param>
        /// <param name="refillsRemaining">The number of refills remaining for the prescription used to verify the regulated product. If a prescription originally had 10 total refills, this value must be &#x60;10&#x60; for the first order, &#x60;9&#x60; for the second order, and &#x60;0&#x60; for the eleventh order. If a prescription originally had no refills, this value must be 0. (required).</param>
        /// <param name="clinicId">The identifier for the clinic which provided the prescription used to verify the regulated product. (required).</param>
        /// <param name="usageInstructions">The instructions for the prescription as provided by the approver of the regulated product. (required).</param>
        public PrescriptionDetail(string prescriptionId = default(string), DateTime? expirationDate = default(DateTime?), int? writtenQuantity = default(int?), int? totalRefillsAuthorized = default(int?), int? refillsRemaining = default(int?), string clinicId = default(string), string usageInstructions = default(string))
        {
            // to ensure "prescriptionId" is required (not null)
            if (prescriptionId == null)
            {
                throw new InvalidDataException("prescriptionId is a required property for PrescriptionDetail and cannot be null");
            }
            else
            {
                this.PrescriptionId = prescriptionId;
            }
            // to ensure "expirationDate" is required (not null)
            if (expirationDate == null)
            {
                throw new InvalidDataException("expirationDate is a required property for PrescriptionDetail and cannot be null");
            }
            else
            {
                this.ExpirationDate = expirationDate;
            }
            // to ensure "writtenQuantity" is required (not null)
            if (writtenQuantity == null)
            {
                throw new InvalidDataException("writtenQuantity is a required property for PrescriptionDetail and cannot be null");
            }
            else
            {
                this.WrittenQuantity = writtenQuantity;
            }
            // to ensure "totalRefillsAuthorized" is required (not null)
            if (totalRefillsAuthorized == null)
            {
                throw new InvalidDataException("totalRefillsAuthorized is a required property for PrescriptionDetail and cannot be null");
            }
            else
            {
                this.TotalRefillsAuthorized = totalRefillsAuthorized;
            }
            // to ensure "refillsRemaining" is required (not null)
            if (refillsRemaining == null)
            {
                throw new InvalidDataException("refillsRemaining is a required property for PrescriptionDetail and cannot be null");
            }
            else
            {
                this.RefillsRemaining = refillsRemaining;
            }
            // to ensure "clinicId" is required (not null)
            if (clinicId == null)
            {
                throw new InvalidDataException("clinicId is a required property for PrescriptionDetail and cannot be null");
            }
            else
            {
                this.ClinicId = clinicId;
            }
            // to ensure "usageInstructions" is required (not null)
            if (usageInstructions == null)
            {
                throw new InvalidDataException("usageInstructions is a required property for PrescriptionDetail and cannot be null");
            }
            else
            {
                this.UsageInstructions = usageInstructions;
            }
        }
        
        /// <summary>
        /// The identifier for the prescription used to verify the regulated product.
        /// </summary>
        /// <value>The identifier for the prescription used to verify the regulated product.</value>
        [DataMember(Name="prescriptionId", EmitDefaultValue=false)]
        public string PrescriptionId { get; set; }

        /// <summary>
        /// The expiration date of the prescription used to verify the regulated product, in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format.
        /// </summary>
        /// <value>The expiration date of the prescription used to verify the regulated product, in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format.</value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// The number of units in each fill as provided in the prescription.
        /// </summary>
        /// <value>The number of units in each fill as provided in the prescription.</value>
        [DataMember(Name="writtenQuantity", EmitDefaultValue=false)]
        public int? WrittenQuantity { get; set; }

        /// <summary>
        /// The total number of refills written in the original prescription used to verify the regulated product. If a prescription originally had no refills, this value must be 0.
        /// </summary>
        /// <value>The total number of refills written in the original prescription used to verify the regulated product. If a prescription originally had no refills, this value must be 0.</value>
        [DataMember(Name="totalRefillsAuthorized", EmitDefaultValue=false)]
        public int? TotalRefillsAuthorized { get; set; }

        /// <summary>
        /// The number of refills remaining for the prescription used to verify the regulated product. If a prescription originally had 10 total refills, this value must be &#x60;10&#x60; for the first order, &#x60;9&#x60; for the second order, and &#x60;0&#x60; for the eleventh order. If a prescription originally had no refills, this value must be 0.
        /// </summary>
        /// <value>The number of refills remaining for the prescription used to verify the regulated product. If a prescription originally had 10 total refills, this value must be &#x60;10&#x60; for the first order, &#x60;9&#x60; for the second order, and &#x60;0&#x60; for the eleventh order. If a prescription originally had no refills, this value must be 0.</value>
        [DataMember(Name="refillsRemaining", EmitDefaultValue=false)]
        public int? RefillsRemaining { get; set; }

        /// <summary>
        /// The identifier for the clinic which provided the prescription used to verify the regulated product.
        /// </summary>
        /// <value>The identifier for the clinic which provided the prescription used to verify the regulated product.</value>
        [DataMember(Name="clinicId", EmitDefaultValue=false)]
        public string ClinicId { get; set; }

        /// <summary>
        /// The instructions for the prescription as provided by the approver of the regulated product.
        /// </summary>
        /// <value>The instructions for the prescription as provided by the approver of the regulated product.</value>
        [DataMember(Name="usageInstructions", EmitDefaultValue=false)]
        public string UsageInstructions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PrescriptionDetail {\n");
            sb.Append("  PrescriptionId: ").Append(PrescriptionId).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  WrittenQuantity: ").Append(WrittenQuantity).Append("\n");
            sb.Append("  TotalRefillsAuthorized: ").Append(TotalRefillsAuthorized).Append("\n");
            sb.Append("  RefillsRemaining: ").Append(RefillsRemaining).Append("\n");
            sb.Append("  ClinicId: ").Append(ClinicId).Append("\n");
            sb.Append("  UsageInstructions: ").Append(UsageInstructions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrescriptionDetail);
        }

        /// <summary>
        /// Returns true if PrescriptionDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of PrescriptionDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrescriptionDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PrescriptionId == input.PrescriptionId ||
                    (this.PrescriptionId != null &&
                    this.PrescriptionId.Equals(input.PrescriptionId))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.WrittenQuantity == input.WrittenQuantity ||
                    (this.WrittenQuantity != null &&
                    this.WrittenQuantity.Equals(input.WrittenQuantity))
                ) && 
                (
                    this.TotalRefillsAuthorized == input.TotalRefillsAuthorized ||
                    (this.TotalRefillsAuthorized != null &&
                    this.TotalRefillsAuthorized.Equals(input.TotalRefillsAuthorized))
                ) && 
                (
                    this.RefillsRemaining == input.RefillsRemaining ||
                    (this.RefillsRemaining != null &&
                    this.RefillsRemaining.Equals(input.RefillsRemaining))
                ) && 
                (
                    this.ClinicId == input.ClinicId ||
                    (this.ClinicId != null &&
                    this.ClinicId.Equals(input.ClinicId))
                ) && 
                (
                    this.UsageInstructions == input.UsageInstructions ||
                    (this.UsageInstructions != null &&
                    this.UsageInstructions.Equals(input.UsageInstructions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PrescriptionId != null)
                    hashCode = hashCode * 59 + this.PrescriptionId.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.WrittenQuantity != null)
                    hashCode = hashCode * 59 + this.WrittenQuantity.GetHashCode();
                if (this.TotalRefillsAuthorized != null)
                    hashCode = hashCode * 59 + this.TotalRefillsAuthorized.GetHashCode();
                if (this.RefillsRemaining != null)
                    hashCode = hashCode * 59 + this.RefillsRemaining.GetHashCode();
                if (this.ClinicId != null)
                    hashCode = hashCode * 59 + this.ClinicId.GetHashCode();
                if (this.UsageInstructions != null)
                    hashCode = hashCode * 59 + this.UsageInstructions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // WrittenQuantity (int?) minimum
            if(this.WrittenQuantity < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WrittenQuantity, must be a value greater than or equal to 1.", new [] { "WrittenQuantity" });
            }

            // TotalRefillsAuthorized (int?) minimum
            if(this.TotalRefillsAuthorized < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalRefillsAuthorized, must be a value greater than or equal to 0.", new [] { "TotalRefillsAuthorized" });
            }

            // RefillsRemaining (int?) minimum
            if(this.RefillsRemaining < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RefillsRemaining, must be a value greater than or equal to 0.", new [] { "RefillsRemaining" });
            }

            yield break;
        }
    }

}
