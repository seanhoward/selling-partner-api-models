/* 
 * Orders v0
 *
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Orders
{
    /// <summary>
    /// A single order item.
    /// </summary>
    [DataContract]
    public partial class OrderItem :  IEquatable<OrderItem>, IValidatableObject
    {
        /// <summary>
        /// The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK.
        /// </summary>
        /// <value>The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DeemedResellerCategoryEnum
        {
            
            /// <summary>
            /// Enum IOSS for value: IOSS
            /// </summary>
            [EnumMember(Value = "IOSS")]
            IOSS = 1,
            
            /// <summary>
            /// Enum UOSS for value: UOSS
            /// </summary>
            [EnumMember(Value = "UOSS")]
            UOSS = 2
        }

        /// <summary>
        /// The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK.
        /// </summary>
        /// <value>The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK.</value>
        [DataMember(Name="DeemedResellerCategory", EmitDefaultValue=false)]
        public DeemedResellerCategoryEnum? DeemedResellerCategory { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItem" /> class.
        /// </summary>
        [JsonConstructor]
        protected OrderItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItem" /> class.
        /// </summary>
        /// <param name="aSIN">The item&#39;s Amazon Standard Identification Number (ASIN). (required).</param>
        /// <param name="sellerSKU">The item&#39;s seller stock keeping unit (SKU)..</param>
        /// <param name="orderItemId">An Amazon-defined order item identifier. (required).</param>
        /// <param name="associatedItems">A list of associated items that a customer has purchased with a product. For example, a tire installation service purchased with tires..</param>
        /// <param name="title">The item&#39;s name..</param>
        /// <param name="quantityOrdered">The number of items in the order.  (required).</param>
        /// <param name="quantityShipped">The number of items shipped..</param>
        /// <param name="productInfo">The item&#39;s product information..</param>
        /// <param name="pointsGranted">The number and value of Amazon Points granted with the purchase of an item..</param>
        /// <param name="itemPrice">The selling price of the order item. Note that an order item is an item and a quantity. This means that the value of &#x60;ItemPrice&#x60; is equal to the selling price of the item multiplied by the quantity ordered. &#x60;ItemPrice&#x60; excludes &#x60;ShippingPrice&#x60; and GiftWrapPrice..</param>
        /// <param name="shippingPrice">The item&#39;s shipping price..</param>
        /// <param name="itemTax">The tax on the item price..</param>
        /// <param name="shippingTax">The tax on the shipping price..</param>
        /// <param name="shippingDiscount">The discount on the shipping price..</param>
        /// <param name="shippingDiscountTax">The tax on the discount on the shipping price..</param>
        /// <param name="promotionDiscount">The total of all promotional discounts in the offer..</param>
        /// <param name="promotionDiscountTax">The tax on the total of all promotional discounts in the offer..</param>
        /// <param name="promotionIds">promotionIds.</param>
        /// <param name="cODFee">The fee charged for COD service..</param>
        /// <param name="cODFeeDiscount">The discount on the COD fee..</param>
        /// <param name="isGift">Indicates whether the item is a gift.  **Possible values**: &#x60;true&#x60; and &#x60;false&#x60;..</param>
        /// <param name="conditionNote">The condition of the item, as described by the seller..</param>
        /// <param name="conditionId">The condition of the item.  **Possible values**: &#x60;New&#x60;, &#x60;Used&#x60;, &#x60;Collectible&#x60;, &#x60;Refurbished&#x60;, &#x60;Preorder&#x60;, and &#x60;Club&#x60;..</param>
        /// <param name="conditionSubtypeId">The subcondition of the item.  **Possible values**: &#x60;New&#x60;, &#x60;Mint&#x60;, &#x60;Very Good&#x60;, &#x60;Good&#x60;, &#x60;Acceptable&#x60;, &#x60;Poor&#x60;, &#x60;Club&#x60;, &#x60;OEM&#x60;, &#x60;Warranty&#x60;, &#x60;Refurbished Warranty&#x60;, &#x60;Refurbished&#x60;, &#x60;Open Box&#x60;, &#x60;Any&#x60;, and &#x60;Other&#x60;..</param>
        /// <param name="scheduledDeliveryStartDate">The start date of the scheduled delivery window in the time zone for the order destination. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format..</param>
        /// <param name="scheduledDeliveryEndDate">The end date of the scheduled delivery window in the time zone for the order destination. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format..</param>
        /// <param name="priceDesignation">Indicates that the selling price is a special price that is only available for Amazon Business orders. For more information about the Amazon Business Seller Program, refer to the [Amazon Business website](https://www.amazon.com/b2b/info/amazon-business).   **Possible values**: &#x60;BusinessPrice&#x60;.</param>
        /// <param name="taxCollection">Information about withheld taxes..</param>
        /// <param name="serialNumberRequired">When true, the product type for this item has a serial number.   Only returned for Amazon Easy Ship orders..</param>
        /// <param name="isTransparency">When true, the ASIN is enrolled in Transparency. The Transparency serial number that you must submit is determined by:  **1D or 2D Barcode:** This has a **T** logo. Submit either the 29-character alpha-numeric identifier beginning with **AZ** or **ZA**, or the 38-character Serialized Global Trade Item Number (SGTIN). **2D Barcode SN:** Submit the 7- to 20-character serial number barcode, which likely has the prefix **SN**. The serial number is applied to the same side of the packaging as the GTIN (UPC/EAN/ISBN) barcode. **QR code SN:** Submit the URL that the QR code generates..</param>
        /// <param name="iossNumber">The IOSS number of the marketplace. Sellers shipping to the EU from outside the EU must provide this IOSS number to their carrier when Amazon has collected the VAT on the sale..</param>
        /// <param name="storeChainStoreId">The store chain store identifier. Linked to a specific store in a store chain..</param>
        /// <param name="deemedResellerCategory">The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK..</param>
        /// <param name="buyerInfo">A single item&#39;s buyer information.  **Note**: The &#x60;BuyerInfo&#x60; contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in &#x60;BuyerInfo&#x60;. For example, &#x60;BuyerCustomizedInfo&#x60; and &#x60;GiftMessageText&#x60;..</param>
        /// <param name="buyerRequestedCancel">Information about whether or not a buyer requested cancellation..</param>
        /// <param name="serialNumbers">A list of serial numbers for electronic products that are shipped to customers. Returned for FBA orders only..</param>
        /// <param name="substitutionPreferences">Substitution preferences for the order item. This is an optional field that is only present if a seller supports substitutions, as is the case with some grocery sellers..</param>
        /// <param name="measurement">Measurement information for the order item..</param>
        /// <param name="shippingConstraints">Shipping constraints applicable to this order..</param>
        /// <param name="amazonPrograms">Contains the list of programs that are associated with an item..</param>
        public OrderItem(string aSIN = default, string sellerSKU = default, string orderItemId = default, List<AssociatedItem> associatedItems = default, string title = default, int? quantityOrdered = default, int? quantityShipped = default, ProductInfoDetail productInfo = default, PointsGrantedDetail pointsGranted = default, Money itemPrice = default, Money shippingPrice = default, Money itemTax = default, Money shippingTax = default, Money shippingDiscount = default, Money shippingDiscountTax = default, Money promotionDiscount = default, Money promotionDiscountTax = default, PromotionIdList promotionIds = default, Money cODFee = default, Money cODFeeDiscount = default, string isGift = default, string conditionNote = default, string conditionId = default, string conditionSubtypeId = default, string scheduledDeliveryStartDate = default, string scheduledDeliveryEndDate = default, string priceDesignation = default, TaxCollection taxCollection = default, bool? serialNumberRequired = default, bool? isTransparency = default, string iossNumber = default, string storeChainStoreId = default, DeemedResellerCategoryEnum? deemedResellerCategory = default, ItemBuyerInfo buyerInfo = default, BuyerRequestedCancel buyerRequestedCancel = default, List<string> serialNumbers = default, SubstitutionPreferences substitutionPreferences = default, Measurement measurement = default, ShippingConstraints shippingConstraints = default, AmazonPrograms amazonPrograms = default)
        {
            // to ensure "aSIN" is required (not null)
            if (aSIN == null)
            {
                throw new InvalidDataException("aSIN is a required property for OrderItem and cannot be null");
            }
            else
            {
                this.ASIN = aSIN;
            }
            // to ensure "orderItemId" is required (not null)
            if (orderItemId == null)
            {
                throw new InvalidDataException("orderItemId is a required property for OrderItem and cannot be null");
            }
            else
            {
                this.OrderItemId = orderItemId;
            }
            // to ensure "quantityOrdered" is required (not null)
            if (quantityOrdered == null)
            {
                throw new InvalidDataException("quantityOrdered is a required property for OrderItem and cannot be null");
            }
            else
            {
                this.QuantityOrdered = quantityOrdered;
            }
            this.SellerSKU = sellerSKU;
            this.AssociatedItems = associatedItems;
            this.Title = title;
            this.QuantityShipped = quantityShipped;
            this.ProductInfo = productInfo;
            this.PointsGranted = pointsGranted;
            this.ItemPrice = itemPrice;
            this.ShippingPrice = shippingPrice;
            this.ItemTax = itemTax;
            this.ShippingTax = shippingTax;
            this.ShippingDiscount = shippingDiscount;
            this.ShippingDiscountTax = shippingDiscountTax;
            this.PromotionDiscount = promotionDiscount;
            this.PromotionDiscountTax = promotionDiscountTax;
            this.PromotionIds = promotionIds;
            this.CODFee = cODFee;
            this.CODFeeDiscount = cODFeeDiscount;
            this.IsGift = isGift;
            this.ConditionNote = conditionNote;
            this.ConditionId = conditionId;
            this.ConditionSubtypeId = conditionSubtypeId;
            this.ScheduledDeliveryStartDate = scheduledDeliveryStartDate;
            this.ScheduledDeliveryEndDate = scheduledDeliveryEndDate;
            this.PriceDesignation = priceDesignation;
            this.TaxCollection = taxCollection;
            this.SerialNumberRequired = serialNumberRequired;
            this.IsTransparency = isTransparency;
            this.IossNumber = iossNumber;
            this.StoreChainStoreId = storeChainStoreId;
            this.DeemedResellerCategory = deemedResellerCategory;
            this.BuyerInfo = buyerInfo;
            this.BuyerRequestedCancel = buyerRequestedCancel;
            this.SerialNumbers = serialNumbers;
            this.SubstitutionPreferences = substitutionPreferences;
            this.Measurement = measurement;
            this.ShippingConstraints = shippingConstraints;
            this.AmazonPrograms = amazonPrograms;
        }
        
        /// <summary>
        /// The item&#39;s Amazon Standard Identification Number (ASIN).
        /// </summary>
        /// <value>The item&#39;s Amazon Standard Identification Number (ASIN).</value>
        [DataMember(Name="ASIN", EmitDefaultValue=false)]
        public string ASIN { get; set; }

        /// <summary>
        /// The item&#39;s seller stock keeping unit (SKU).
        /// </summary>
        /// <value>The item&#39;s seller stock keeping unit (SKU).</value>
        [DataMember(Name="SellerSKU", EmitDefaultValue=false)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// An Amazon-defined order item identifier.
        /// </summary>
        /// <value>An Amazon-defined order item identifier.</value>
        [DataMember(Name="OrderItemId", EmitDefaultValue=false)]
        public string OrderItemId { get; set; }

        /// <summary>
        /// A list of associated items that a customer has purchased with a product. For example, a tire installation service purchased with tires.
        /// </summary>
        /// <value>A list of associated items that a customer has purchased with a product. For example, a tire installation service purchased with tires.</value>
        [DataMember(Name="AssociatedItems", EmitDefaultValue=false)]
        public List<AssociatedItem> AssociatedItems { get; set; }

        /// <summary>
        /// The item&#39;s name.
        /// </summary>
        /// <value>The item&#39;s name.</value>
        [DataMember(Name="Title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// The number of items in the order. 
        /// </summary>
        /// <value>The number of items in the order. </value>
        [DataMember(Name="QuantityOrdered", EmitDefaultValue=false)]
        public int? QuantityOrdered { get; set; }

        /// <summary>
        /// The number of items shipped.
        /// </summary>
        /// <value>The number of items shipped.</value>
        [DataMember(Name="QuantityShipped", EmitDefaultValue=false)]
        public int? QuantityShipped { get; set; }

        /// <summary>
        /// The item&#39;s product information.
        /// </summary>
        /// <value>The item&#39;s product information.</value>
        [DataMember(Name="ProductInfo", EmitDefaultValue=false)]
        public ProductInfoDetail ProductInfo { get; set; }

        /// <summary>
        /// The number and value of Amazon Points granted with the purchase of an item.
        /// </summary>
        /// <value>The number and value of Amazon Points granted with the purchase of an item.</value>
        [DataMember(Name="PointsGranted", EmitDefaultValue=false)]
        public PointsGrantedDetail PointsGranted { get; set; }

        /// <summary>
        /// The selling price of the order item. Note that an order item is an item and a quantity. This means that the value of &#x60;ItemPrice&#x60; is equal to the selling price of the item multiplied by the quantity ordered. &#x60;ItemPrice&#x60; excludes &#x60;ShippingPrice&#x60; and GiftWrapPrice.
        /// </summary>
        /// <value>The selling price of the order item. Note that an order item is an item and a quantity. This means that the value of &#x60;ItemPrice&#x60; is equal to the selling price of the item multiplied by the quantity ordered. &#x60;ItemPrice&#x60; excludes &#x60;ShippingPrice&#x60; and GiftWrapPrice.</value>
        [DataMember(Name="ItemPrice", EmitDefaultValue=false)]
        public Money ItemPrice { get; set; }

        /// <summary>
        /// The item&#39;s shipping price.
        /// </summary>
        /// <value>The item&#39;s shipping price.</value>
        [DataMember(Name="ShippingPrice", EmitDefaultValue=false)]
        public Money ShippingPrice { get; set; }

        /// <summary>
        /// The tax on the item price.
        /// </summary>
        /// <value>The tax on the item price.</value>
        [DataMember(Name="ItemTax", EmitDefaultValue=false)]
        public Money ItemTax { get; set; }

        /// <summary>
        /// The tax on the shipping price.
        /// </summary>
        /// <value>The tax on the shipping price.</value>
        [DataMember(Name="ShippingTax", EmitDefaultValue=false)]
        public Money ShippingTax { get; set; }

        /// <summary>
        /// The discount on the shipping price.
        /// </summary>
        /// <value>The discount on the shipping price.</value>
        [DataMember(Name="ShippingDiscount", EmitDefaultValue=false)]
        public Money ShippingDiscount { get; set; }

        /// <summary>
        /// The tax on the discount on the shipping price.
        /// </summary>
        /// <value>The tax on the discount on the shipping price.</value>
        [DataMember(Name="ShippingDiscountTax", EmitDefaultValue=false)]
        public Money ShippingDiscountTax { get; set; }

        /// <summary>
        /// The total of all promotional discounts in the offer.
        /// </summary>
        /// <value>The total of all promotional discounts in the offer.</value>
        [DataMember(Name="PromotionDiscount", EmitDefaultValue=false)]
        public Money PromotionDiscount { get; set; }

        /// <summary>
        /// The tax on the total of all promotional discounts in the offer.
        /// </summary>
        /// <value>The tax on the total of all promotional discounts in the offer.</value>
        [DataMember(Name="PromotionDiscountTax", EmitDefaultValue=false)]
        public Money PromotionDiscountTax { get; set; }

        /// <summary>
        /// Gets or Sets PromotionIds
        /// </summary>
        [DataMember(Name="PromotionIds", EmitDefaultValue=false)]
        public PromotionIdList PromotionIds { get; set; }

        /// <summary>
        /// The fee charged for COD service.
        /// </summary>
        /// <value>The fee charged for COD service.</value>
        [DataMember(Name="CODFee", EmitDefaultValue=false)]
        public Money CODFee { get; set; }

        /// <summary>
        /// The discount on the COD fee.
        /// </summary>
        /// <value>The discount on the COD fee.</value>
        [DataMember(Name="CODFeeDiscount", EmitDefaultValue=false)]
        public Money CODFeeDiscount { get; set; }

        /// <summary>
        /// Indicates whether the item is a gift.  **Possible values**: &#x60;true&#x60; and &#x60;false&#x60;.
        /// </summary>
        /// <value>Indicates whether the item is a gift.  **Possible values**: &#x60;true&#x60; and &#x60;false&#x60;.</value>
        [DataMember(Name="IsGift", EmitDefaultValue=false)]
        public string IsGift { get; set; }

        /// <summary>
        /// The condition of the item, as described by the seller.
        /// </summary>
        /// <value>The condition of the item, as described by the seller.</value>
        [DataMember(Name="ConditionNote", EmitDefaultValue=false)]
        public string ConditionNote { get; set; }

        /// <summary>
        /// The condition of the item.  **Possible values**: &#x60;New&#x60;, &#x60;Used&#x60;, &#x60;Collectible&#x60;, &#x60;Refurbished&#x60;, &#x60;Preorder&#x60;, and &#x60;Club&#x60;.
        /// </summary>
        /// <value>The condition of the item.  **Possible values**: &#x60;New&#x60;, &#x60;Used&#x60;, &#x60;Collectible&#x60;, &#x60;Refurbished&#x60;, &#x60;Preorder&#x60;, and &#x60;Club&#x60;.</value>
        [DataMember(Name="ConditionId", EmitDefaultValue=false)]
        public string ConditionId { get; set; }

        /// <summary>
        /// The subcondition of the item.  **Possible values**: &#x60;New&#x60;, &#x60;Mint&#x60;, &#x60;Very Good&#x60;, &#x60;Good&#x60;, &#x60;Acceptable&#x60;, &#x60;Poor&#x60;, &#x60;Club&#x60;, &#x60;OEM&#x60;, &#x60;Warranty&#x60;, &#x60;Refurbished Warranty&#x60;, &#x60;Refurbished&#x60;, &#x60;Open Box&#x60;, &#x60;Any&#x60;, and &#x60;Other&#x60;.
        /// </summary>
        /// <value>The subcondition of the item.  **Possible values**: &#x60;New&#x60;, &#x60;Mint&#x60;, &#x60;Very Good&#x60;, &#x60;Good&#x60;, &#x60;Acceptable&#x60;, &#x60;Poor&#x60;, &#x60;Club&#x60;, &#x60;OEM&#x60;, &#x60;Warranty&#x60;, &#x60;Refurbished Warranty&#x60;, &#x60;Refurbished&#x60;, &#x60;Open Box&#x60;, &#x60;Any&#x60;, and &#x60;Other&#x60;.</value>
        [DataMember(Name="ConditionSubtypeId", EmitDefaultValue=false)]
        public string ConditionSubtypeId { get; set; }

        /// <summary>
        /// The start date of the scheduled delivery window in the time zone for the order destination. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format.
        /// </summary>
        /// <value>The start date of the scheduled delivery window in the time zone for the order destination. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format.</value>
        [DataMember(Name="ScheduledDeliveryStartDate", EmitDefaultValue=false)]
        public string ScheduledDeliveryStartDate { get; set; }

        /// <summary>
        /// The end date of the scheduled delivery window in the time zone for the order destination. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format.
        /// </summary>
        /// <value>The end date of the scheduled delivery window in the time zone for the order destination. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format.</value>
        [DataMember(Name="ScheduledDeliveryEndDate", EmitDefaultValue=false)]
        public string ScheduledDeliveryEndDate { get; set; }

        /// <summary>
        /// Indicates that the selling price is a special price that is only available for Amazon Business orders. For more information about the Amazon Business Seller Program, refer to the [Amazon Business website](https://www.amazon.com/b2b/info/amazon-business).   **Possible values**: &#x60;BusinessPrice&#x60;
        /// </summary>
        /// <value>Indicates that the selling price is a special price that is only available for Amazon Business orders. For more information about the Amazon Business Seller Program, refer to the [Amazon Business website](https://www.amazon.com/b2b/info/amazon-business).   **Possible values**: &#x60;BusinessPrice&#x60;</value>
        [DataMember(Name="PriceDesignation", EmitDefaultValue=false)]
        public string PriceDesignation { get; set; }

        /// <summary>
        /// Information about withheld taxes.
        /// </summary>
        /// <value>Information about withheld taxes.</value>
        [DataMember(Name="TaxCollection", EmitDefaultValue=false)]
        public TaxCollection TaxCollection { get; set; }

        /// <summary>
        /// When true, the product type for this item has a serial number.   Only returned for Amazon Easy Ship orders.
        /// </summary>
        /// <value>When true, the product type for this item has a serial number.   Only returned for Amazon Easy Ship orders.</value>
        [DataMember(Name="SerialNumberRequired", EmitDefaultValue=false)]
        public bool? SerialNumberRequired { get; set; }

        /// <summary>
        /// When true, the ASIN is enrolled in Transparency. The Transparency serial number that you must submit is determined by:  **1D or 2D Barcode:** This has a **T** logo. Submit either the 29-character alpha-numeric identifier beginning with **AZ** or **ZA**, or the 38-character Serialized Global Trade Item Number (SGTIN). **2D Barcode SN:** Submit the 7- to 20-character serial number barcode, which likely has the prefix **SN**. The serial number is applied to the same side of the packaging as the GTIN (UPC/EAN/ISBN) barcode. **QR code SN:** Submit the URL that the QR code generates.
        /// </summary>
        /// <value>When true, the ASIN is enrolled in Transparency. The Transparency serial number that you must submit is determined by:  **1D or 2D Barcode:** This has a **T** logo. Submit either the 29-character alpha-numeric identifier beginning with **AZ** or **ZA**, or the 38-character Serialized Global Trade Item Number (SGTIN). **2D Barcode SN:** Submit the 7- to 20-character serial number barcode, which likely has the prefix **SN**. The serial number is applied to the same side of the packaging as the GTIN (UPC/EAN/ISBN) barcode. **QR code SN:** Submit the URL that the QR code generates.</value>
        [DataMember(Name="IsTransparency", EmitDefaultValue=false)]
        public bool? IsTransparency { get; set; }

        /// <summary>
        /// The IOSS number of the marketplace. Sellers shipping to the EU from outside the EU must provide this IOSS number to their carrier when Amazon has collected the VAT on the sale.
        /// </summary>
        /// <value>The IOSS number of the marketplace. Sellers shipping to the EU from outside the EU must provide this IOSS number to their carrier when Amazon has collected the VAT on the sale.</value>
        [DataMember(Name="IossNumber", EmitDefaultValue=false)]
        public string IossNumber { get; set; }

        /// <summary>
        /// The store chain store identifier. Linked to a specific store in a store chain.
        /// </summary>
        /// <value>The store chain store identifier. Linked to a specific store in a store chain.</value>
        [DataMember(Name="StoreChainStoreId", EmitDefaultValue=false)]
        public string StoreChainStoreId { get; set; }


        /// <summary>
        /// A single item&#39;s buyer information.  **Note**: The &#x60;BuyerInfo&#x60; contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in &#x60;BuyerInfo&#x60;. For example, &#x60;BuyerCustomizedInfo&#x60; and &#x60;GiftMessageText&#x60;.
        /// </summary>
        /// <value>A single item&#39;s buyer information.  **Note**: The &#x60;BuyerInfo&#x60; contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in &#x60;BuyerInfo&#x60;. For example, &#x60;BuyerCustomizedInfo&#x60; and &#x60;GiftMessageText&#x60;.</value>
        [DataMember(Name="BuyerInfo", EmitDefaultValue=false)]
        public ItemBuyerInfo BuyerInfo { get; set; }

        /// <summary>
        /// Information about whether or not a buyer requested cancellation.
        /// </summary>
        /// <value>Information about whether or not a buyer requested cancellation.</value>
        [DataMember(Name="BuyerRequestedCancel", EmitDefaultValue=false)]
        public BuyerRequestedCancel BuyerRequestedCancel { get; set; }

        /// <summary>
        /// A list of serial numbers for electronic products that are shipped to customers. Returned for FBA orders only.
        /// </summary>
        /// <value>A list of serial numbers for electronic products that are shipped to customers. Returned for FBA orders only.</value>
        [DataMember(Name="SerialNumbers", EmitDefaultValue=false)]
        public List<string> SerialNumbers { get; set; }

        /// <summary>
        /// Substitution preferences for the order item. This is an optional field that is only present if a seller supports substitutions, as is the case with some grocery sellers.
        /// </summary>
        /// <value>Substitution preferences for the order item. This is an optional field that is only present if a seller supports substitutions, as is the case with some grocery sellers.</value>
        [DataMember(Name="SubstitutionPreferences", EmitDefaultValue=false)]
        public SubstitutionPreferences SubstitutionPreferences { get; set; }

        /// <summary>
        /// Measurement information for the order item.
        /// </summary>
        /// <value>Measurement information for the order item.</value>
        [DataMember(Name="Measurement", EmitDefaultValue=false)]
        public Measurement Measurement { get; set; }

        /// <summary>
        /// Shipping constraints applicable to this order.
        /// </summary>
        /// <value>Shipping constraints applicable to this order.</value>
        [DataMember(Name="ShippingConstraints", EmitDefaultValue=false)]
        public ShippingConstraints ShippingConstraints { get; set; }

        /// <summary>
        /// Contains the list of programs that are associated with an item.
        /// </summary>
        /// <value>Contains the list of programs that are associated with an item.</value>
        [DataMember(Name="AmazonPrograms", EmitDefaultValue=false)]
        public AmazonPrograms AmazonPrograms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderItem {\n");
            sb.Append("  ASIN: ").Append(ASIN).Append("\n");
            sb.Append("  SellerSKU: ").Append(SellerSKU).Append("\n");
            sb.Append("  OrderItemId: ").Append(OrderItemId).Append("\n");
            sb.Append("  AssociatedItems: ").Append(AssociatedItems).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  QuantityOrdered: ").Append(QuantityOrdered).Append("\n");
            sb.Append("  QuantityShipped: ").Append(QuantityShipped).Append("\n");
            sb.Append("  ProductInfo: ").Append(ProductInfo).Append("\n");
            sb.Append("  PointsGranted: ").Append(PointsGranted).Append("\n");
            sb.Append("  ItemPrice: ").Append(ItemPrice).Append("\n");
            sb.Append("  ShippingPrice: ").Append(ShippingPrice).Append("\n");
            sb.Append("  ItemTax: ").Append(ItemTax).Append("\n");
            sb.Append("  ShippingTax: ").Append(ShippingTax).Append("\n");
            sb.Append("  ShippingDiscount: ").Append(ShippingDiscount).Append("\n");
            sb.Append("  ShippingDiscountTax: ").Append(ShippingDiscountTax).Append("\n");
            sb.Append("  PromotionDiscount: ").Append(PromotionDiscount).Append("\n");
            sb.Append("  PromotionDiscountTax: ").Append(PromotionDiscountTax).Append("\n");
            sb.Append("  PromotionIds: ").Append(PromotionIds).Append("\n");
            sb.Append("  CODFee: ").Append(CODFee).Append("\n");
            sb.Append("  CODFeeDiscount: ").Append(CODFeeDiscount).Append("\n");
            sb.Append("  IsGift: ").Append(IsGift).Append("\n");
            sb.Append("  ConditionNote: ").Append(ConditionNote).Append("\n");
            sb.Append("  ConditionId: ").Append(ConditionId).Append("\n");
            sb.Append("  ConditionSubtypeId: ").Append(ConditionSubtypeId).Append("\n");
            sb.Append("  ScheduledDeliveryStartDate: ").Append(ScheduledDeliveryStartDate).Append("\n");
            sb.Append("  ScheduledDeliveryEndDate: ").Append(ScheduledDeliveryEndDate).Append("\n");
            sb.Append("  PriceDesignation: ").Append(PriceDesignation).Append("\n");
            sb.Append("  TaxCollection: ").Append(TaxCollection).Append("\n");
            sb.Append("  SerialNumberRequired: ").Append(SerialNumberRequired).Append("\n");
            sb.Append("  IsTransparency: ").Append(IsTransparency).Append("\n");
            sb.Append("  IossNumber: ").Append(IossNumber).Append("\n");
            sb.Append("  StoreChainStoreId: ").Append(StoreChainStoreId).Append("\n");
            sb.Append("  DeemedResellerCategory: ").Append(DeemedResellerCategory).Append("\n");
            sb.Append("  BuyerInfo: ").Append(BuyerInfo).Append("\n");
            sb.Append("  BuyerRequestedCancel: ").Append(BuyerRequestedCancel).Append("\n");
            sb.Append("  SerialNumbers: ").Append(SerialNumbers).Append("\n");
            sb.Append("  SubstitutionPreferences: ").Append(SubstitutionPreferences).Append("\n");
            sb.Append("  Measurement: ").Append(Measurement).Append("\n");
            sb.Append("  ShippingConstraints: ").Append(ShippingConstraints).Append("\n");
            sb.Append("  AmazonPrograms: ").Append(AmazonPrograms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderItem);
        }

        /// <summary>
        /// Returns true if OrderItem instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ASIN == input.ASIN ||
                    (this.ASIN != null &&
                    this.ASIN.Equals(input.ASIN))
                ) && 
                (
                    this.SellerSKU == input.SellerSKU ||
                    (this.SellerSKU != null &&
                    this.SellerSKU.Equals(input.SellerSKU))
                ) && 
                (
                    this.OrderItemId == input.OrderItemId ||
                    (this.OrderItemId != null &&
                    this.OrderItemId.Equals(input.OrderItemId))
                ) && 
                (
                    this.AssociatedItems == input.AssociatedItems ||
                    this.AssociatedItems != null &&
                    this.AssociatedItems.SequenceEqual(input.AssociatedItems)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.QuantityOrdered == input.QuantityOrdered ||
                    (this.QuantityOrdered != null &&
                    this.QuantityOrdered.Equals(input.QuantityOrdered))
                ) && 
                (
                    this.QuantityShipped == input.QuantityShipped ||
                    (this.QuantityShipped != null &&
                    this.QuantityShipped.Equals(input.QuantityShipped))
                ) && 
                (
                    this.ProductInfo == input.ProductInfo ||
                    (this.ProductInfo != null &&
                    this.ProductInfo.Equals(input.ProductInfo))
                ) && 
                (
                    this.PointsGranted == input.PointsGranted ||
                    (this.PointsGranted != null &&
                    this.PointsGranted.Equals(input.PointsGranted))
                ) && 
                (
                    this.ItemPrice == input.ItemPrice ||
                    (this.ItemPrice != null &&
                    this.ItemPrice.Equals(input.ItemPrice))
                ) && 
                (
                    this.ShippingPrice == input.ShippingPrice ||
                    (this.ShippingPrice != null &&
                    this.ShippingPrice.Equals(input.ShippingPrice))
                ) && 
                (
                    this.ItemTax == input.ItemTax ||
                    (this.ItemTax != null &&
                    this.ItemTax.Equals(input.ItemTax))
                ) && 
                (
                    this.ShippingTax == input.ShippingTax ||
                    (this.ShippingTax != null &&
                    this.ShippingTax.Equals(input.ShippingTax))
                ) && 
                (
                    this.ShippingDiscount == input.ShippingDiscount ||
                    (this.ShippingDiscount != null &&
                    this.ShippingDiscount.Equals(input.ShippingDiscount))
                ) && 
                (
                    this.ShippingDiscountTax == input.ShippingDiscountTax ||
                    (this.ShippingDiscountTax != null &&
                    this.ShippingDiscountTax.Equals(input.ShippingDiscountTax))
                ) && 
                (
                    this.PromotionDiscount == input.PromotionDiscount ||
                    (this.PromotionDiscount != null &&
                    this.PromotionDiscount.Equals(input.PromotionDiscount))
                ) && 
                (
                    this.PromotionDiscountTax == input.PromotionDiscountTax ||
                    (this.PromotionDiscountTax != null &&
                    this.PromotionDiscountTax.Equals(input.PromotionDiscountTax))
                ) && 
                (
                    this.PromotionIds == input.PromotionIds ||
                    (this.PromotionIds != null &&
                    this.PromotionIds.Equals(input.PromotionIds))
                ) && 
                (
                    this.CODFee == input.CODFee ||
                    (this.CODFee != null &&
                    this.CODFee.Equals(input.CODFee))
                ) && 
                (
                    this.CODFeeDiscount == input.CODFeeDiscount ||
                    (this.CODFeeDiscount != null &&
                    this.CODFeeDiscount.Equals(input.CODFeeDiscount))
                ) && 
                (
                    this.IsGift == input.IsGift ||
                    (this.IsGift != null &&
                    this.IsGift.Equals(input.IsGift))
                ) && 
                (
                    this.ConditionNote == input.ConditionNote ||
                    (this.ConditionNote != null &&
                    this.ConditionNote.Equals(input.ConditionNote))
                ) && 
                (
                    this.ConditionId == input.ConditionId ||
                    (this.ConditionId != null &&
                    this.ConditionId.Equals(input.ConditionId))
                ) && 
                (
                    this.ConditionSubtypeId == input.ConditionSubtypeId ||
                    (this.ConditionSubtypeId != null &&
                    this.ConditionSubtypeId.Equals(input.ConditionSubtypeId))
                ) && 
                (
                    this.ScheduledDeliveryStartDate == input.ScheduledDeliveryStartDate ||
                    (this.ScheduledDeliveryStartDate != null &&
                    this.ScheduledDeliveryStartDate.Equals(input.ScheduledDeliveryStartDate))
                ) && 
                (
                    this.ScheduledDeliveryEndDate == input.ScheduledDeliveryEndDate ||
                    (this.ScheduledDeliveryEndDate != null &&
                    this.ScheduledDeliveryEndDate.Equals(input.ScheduledDeliveryEndDate))
                ) && 
                (
                    this.PriceDesignation == input.PriceDesignation ||
                    (this.PriceDesignation != null &&
                    this.PriceDesignation.Equals(input.PriceDesignation))
                ) && 
                (
                    this.TaxCollection == input.TaxCollection ||
                    (this.TaxCollection != null &&
                    this.TaxCollection.Equals(input.TaxCollection))
                ) && 
                (
                    this.SerialNumberRequired == input.SerialNumberRequired ||
                    (this.SerialNumberRequired != null &&
                    this.SerialNumberRequired.Equals(input.SerialNumberRequired))
                ) && 
                (
                    this.IsTransparency == input.IsTransparency ||
                    (this.IsTransparency != null &&
                    this.IsTransparency.Equals(input.IsTransparency))
                ) && 
                (
                    this.IossNumber == input.IossNumber ||
                    (this.IossNumber != null &&
                    this.IossNumber.Equals(input.IossNumber))
                ) && 
                (
                    this.StoreChainStoreId == input.StoreChainStoreId ||
                    (this.StoreChainStoreId != null &&
                    this.StoreChainStoreId.Equals(input.StoreChainStoreId))
                ) && 
                (
                    this.DeemedResellerCategory == input.DeemedResellerCategory ||
                    (this.DeemedResellerCategory != null &&
                    this.DeemedResellerCategory.Equals(input.DeemedResellerCategory))
                ) && 
                (
                    this.BuyerInfo == input.BuyerInfo ||
                    (this.BuyerInfo != null &&
                    this.BuyerInfo.Equals(input.BuyerInfo))
                ) && 
                (
                    this.BuyerRequestedCancel == input.BuyerRequestedCancel ||
                    (this.BuyerRequestedCancel != null &&
                    this.BuyerRequestedCancel.Equals(input.BuyerRequestedCancel))
                ) && 
                (
                    this.SerialNumbers == input.SerialNumbers ||
                    this.SerialNumbers != null &&
                    this.SerialNumbers.SequenceEqual(input.SerialNumbers)
                ) && 
                (
                    this.SubstitutionPreferences == input.SubstitutionPreferences ||
                    (this.SubstitutionPreferences != null &&
                    this.SubstitutionPreferences.Equals(input.SubstitutionPreferences))
                ) && 
                (
                    this.Measurement == input.Measurement ||
                    (this.Measurement != null &&
                    this.Measurement.Equals(input.Measurement))
                ) && 
                (
                    this.ShippingConstraints == input.ShippingConstraints ||
                    (this.ShippingConstraints != null &&
                    this.ShippingConstraints.Equals(input.ShippingConstraints))
                ) && 
                (
                    this.AmazonPrograms == input.AmazonPrograms ||
                    (this.AmazonPrograms != null &&
                    this.AmazonPrograms.Equals(input.AmazonPrograms))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ASIN != null)
                    hashCode = hashCode * 59 + this.ASIN.GetHashCode();
                if (this.SellerSKU != null)
                    hashCode = hashCode * 59 + this.SellerSKU.GetHashCode();
                if (this.OrderItemId != null)
                    hashCode = hashCode * 59 + this.OrderItemId.GetHashCode();
                if (this.AssociatedItems != null)
                    hashCode = hashCode * 59 + this.AssociatedItems.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.QuantityOrdered != null)
                    hashCode = hashCode * 59 + this.QuantityOrdered.GetHashCode();
                if (this.QuantityShipped != null)
                    hashCode = hashCode * 59 + this.QuantityShipped.GetHashCode();
                if (this.ProductInfo != null)
                    hashCode = hashCode * 59 + this.ProductInfo.GetHashCode();
                if (this.PointsGranted != null)
                    hashCode = hashCode * 59 + this.PointsGranted.GetHashCode();
                if (this.ItemPrice != null)
                    hashCode = hashCode * 59 + this.ItemPrice.GetHashCode();
                if (this.ShippingPrice != null)
                    hashCode = hashCode * 59 + this.ShippingPrice.GetHashCode();
                if (this.ItemTax != null)
                    hashCode = hashCode * 59 + this.ItemTax.GetHashCode();
                if (this.ShippingTax != null)
                    hashCode = hashCode * 59 + this.ShippingTax.GetHashCode();
                if (this.ShippingDiscount != null)
                    hashCode = hashCode * 59 + this.ShippingDiscount.GetHashCode();
                if (this.ShippingDiscountTax != null)
                    hashCode = hashCode * 59 + this.ShippingDiscountTax.GetHashCode();
                if (this.PromotionDiscount != null)
                    hashCode = hashCode * 59 + this.PromotionDiscount.GetHashCode();
                if (this.PromotionDiscountTax != null)
                    hashCode = hashCode * 59 + this.PromotionDiscountTax.GetHashCode();
                if (this.PromotionIds != null)
                    hashCode = hashCode * 59 + this.PromotionIds.GetHashCode();
                if (this.CODFee != null)
                    hashCode = hashCode * 59 + this.CODFee.GetHashCode();
                if (this.CODFeeDiscount != null)
                    hashCode = hashCode * 59 + this.CODFeeDiscount.GetHashCode();
                if (this.IsGift != null)
                    hashCode = hashCode * 59 + this.IsGift.GetHashCode();
                if (this.ConditionNote != null)
                    hashCode = hashCode * 59 + this.ConditionNote.GetHashCode();
                if (this.ConditionId != null)
                    hashCode = hashCode * 59 + this.ConditionId.GetHashCode();
                if (this.ConditionSubtypeId != null)
                    hashCode = hashCode * 59 + this.ConditionSubtypeId.GetHashCode();
                if (this.ScheduledDeliveryStartDate != null)
                    hashCode = hashCode * 59 + this.ScheduledDeliveryStartDate.GetHashCode();
                if (this.ScheduledDeliveryEndDate != null)
                    hashCode = hashCode * 59 + this.ScheduledDeliveryEndDate.GetHashCode();
                if (this.PriceDesignation != null)
                    hashCode = hashCode * 59 + this.PriceDesignation.GetHashCode();
                if (this.TaxCollection != null)
                    hashCode = hashCode * 59 + this.TaxCollection.GetHashCode();
                if (this.SerialNumberRequired != null)
                    hashCode = hashCode * 59 + this.SerialNumberRequired.GetHashCode();
                if (this.IsTransparency != null)
                    hashCode = hashCode * 59 + this.IsTransparency.GetHashCode();
                if (this.IossNumber != null)
                    hashCode = hashCode * 59 + this.IossNumber.GetHashCode();
                if (this.StoreChainStoreId != null)
                    hashCode = hashCode * 59 + this.StoreChainStoreId.GetHashCode();
                if (this.DeemedResellerCategory != null)
                    hashCode = hashCode * 59 + this.DeemedResellerCategory.GetHashCode();
                if (this.BuyerInfo != null)
                    hashCode = hashCode * 59 + this.BuyerInfo.GetHashCode();
                if (this.BuyerRequestedCancel != null)
                    hashCode = hashCode * 59 + this.BuyerRequestedCancel.GetHashCode();
                if (this.SerialNumbers != null)
                    hashCode = hashCode * 59 + this.SerialNumbers.GetHashCode();
                if (this.SubstitutionPreferences != null)
                    hashCode = hashCode * 59 + this.SubstitutionPreferences.GetHashCode();
                if (this.Measurement != null)
                    hashCode = hashCode * 59 + this.Measurement.GetHashCode();
                if (this.ShippingConstraints != null)
                    hashCode = hashCode * 59 + this.ShippingConstraints.GetHashCode();
                if (this.AmazonPrograms != null)
                    hashCode = hashCode * 59 + this.AmazonPrograms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
