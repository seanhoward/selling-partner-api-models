/* 
 * Orders v0
 *
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Orders
{
    /// <summary>
    /// The types of verification details that may be provided for the order and the criteria required for when the type of verification detail can be provided. The types of verification details allowed depend on the type of regulated product and will not change order to order.
    /// </summary>
    [DataContract]
    public partial class ValidVerificationDetail :  IEquatable<ValidVerificationDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidVerificationDetail" /> class.
        /// </summary>
        [JsonConstructor]
        protected ValidVerificationDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidVerificationDetail" /> class.
        /// </summary>
        /// <param name="verificationDetailType">A supported type of verification detail. The type indicates which verification detail could be shared while updating the regulated order. Valid value: &#x60;prescriptionDetail&#x60;. (required).</param>
        /// <param name="validVerificationStatuses">A list of valid verification statuses where the associated verification detail type may be provided. For example, if the value of this field is [\&quot;Approved\&quot;], calls to provide the associated verification detail will fail for orders with a &#x60;VerificationStatus&#x60; of &#x60;Pending&#x60;, &#x60;Rejected&#x60;, &#x60;Expired&#x60;, or &#x60;Cancelled&#x60;. (required).</param>
        public ValidVerificationDetail(string verificationDetailType = default, List<VerificationStatus> validVerificationStatuses = default)
        {
            // to ensure "verificationDetailType" is required (not null)
            if (verificationDetailType == null)
            {
                throw new InvalidDataException("verificationDetailType is a required property for ValidVerificationDetail and cannot be null");
            }
            else
            {
                this.VerificationDetailType = verificationDetailType;
            }
            // to ensure "validVerificationStatuses" is required (not null)
            if (validVerificationStatuses == null)
            {
                throw new InvalidDataException("validVerificationStatuses is a required property for ValidVerificationDetail and cannot be null");
            }
            else
            {
                this.ValidVerificationStatuses = validVerificationStatuses;
            }
        }
        
        /// <summary>
        /// A supported type of verification detail. The type indicates which verification detail could be shared while updating the regulated order. Valid value: &#x60;prescriptionDetail&#x60;.
        /// </summary>
        /// <value>A supported type of verification detail. The type indicates which verification detail could be shared while updating the regulated order. Valid value: &#x60;prescriptionDetail&#x60;.</value>
        [DataMember(Name="VerificationDetailType", EmitDefaultValue=false)]
        public string VerificationDetailType { get; set; }

        /// <summary>
        /// A list of valid verification statuses where the associated verification detail type may be provided. For example, if the value of this field is [\&quot;Approved\&quot;], calls to provide the associated verification detail will fail for orders with a &#x60;VerificationStatus&#x60; of &#x60;Pending&#x60;, &#x60;Rejected&#x60;, &#x60;Expired&#x60;, or &#x60;Cancelled&#x60;.
        /// </summary>
        /// <value>A list of valid verification statuses where the associated verification detail type may be provided. For example, if the value of this field is [\&quot;Approved\&quot;], calls to provide the associated verification detail will fail for orders with a &#x60;VerificationStatus&#x60; of &#x60;Pending&#x60;, &#x60;Rejected&#x60;, &#x60;Expired&#x60;, or &#x60;Cancelled&#x60;.</value>
        [DataMember(Name="ValidVerificationStatuses", EmitDefaultValue=false)]
        public List<VerificationStatus> ValidVerificationStatuses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidVerificationDetail {\n");
            sb.Append("  VerificationDetailType: ").Append(VerificationDetailType).Append("\n");
            sb.Append("  ValidVerificationStatuses: ").Append(ValidVerificationStatuses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValidVerificationDetail);
        }

        /// <summary>
        /// Returns true if ValidVerificationDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ValidVerificationDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidVerificationDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VerificationDetailType == input.VerificationDetailType ||
                    (this.VerificationDetailType != null &&
                    this.VerificationDetailType.Equals(input.VerificationDetailType))
                ) && 
                (
                    this.ValidVerificationStatuses == input.ValidVerificationStatuses ||
                    this.ValidVerificationStatuses != null &&
                    this.ValidVerificationStatuses.SequenceEqual(input.ValidVerificationStatuses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VerificationDetailType != null)
                    hashCode = hashCode * 59 + this.VerificationDetailType.GetHashCode();
                if (this.ValidVerificationStatuses != null)
                    hashCode = hashCode * 59 + this.ValidVerificationStatuses.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
