/* 
 * Selling Partner API for Direct Fulfillment Payments
 *
 * The Selling Partner API for Direct Fulfillment Payments provides programmatic access to a direct fulfillment vendor's invoice data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorDirectFulfillmentPayments
{
    /// <summary>
    /// Monetary and tax details of the charge.
    /// </summary>
    [DataContract]
    public partial class ChargeDetails :  IEquatable<ChargeDetails>, IValidatableObject
    {
        /// <summary>
        /// Type of charge applied.
        /// </summary>
        /// <value>Type of charge applied.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum GIFTWRAP for value: GIFTWRAP
            /// </summary>
            [EnumMember(Value = "GIFTWRAP")]
            GIFTWRAP = 1,
            
            /// <summary>
            /// Enum FULFILLMENT for value: FULFILLMENT
            /// </summary>
            [EnumMember(Value = "FULFILLMENT")]
            FULFILLMENT = 2,
            
            /// <summary>
            /// Enum MARKETINGINSERT for value: MARKETINGINSERT
            /// </summary>
            [EnumMember(Value = "MARKETINGINSERT")]
            MARKETINGINSERT = 3,
            
            /// <summary>
            /// Enum PACKAGING for value: PACKAGING
            /// </summary>
            [EnumMember(Value = "PACKAGING")]
            PACKAGING = 4,
            
            /// <summary>
            /// Enum LOADING for value: LOADING
            /// </summary>
            [EnumMember(Value = "LOADING")]
            LOADING = 5,
            
            /// <summary>
            /// Enum FREIGHTOUT for value: FREIGHTOUT
            /// </summary>
            [EnumMember(Value = "FREIGHTOUT")]
            FREIGHTOUT = 6,
            
            /// <summary>
            /// Enum TAXCOLLECTEDATSOURCE for value: TAX_COLLECTED_AT_SOURCE
            /// </summary>
            [EnumMember(Value = "TAX_COLLECTED_AT_SOURCE")]
            TAXCOLLECTEDATSOURCE = 7
        }

        /// <summary>
        /// Type of charge applied.
        /// </summary>
        /// <value>Type of charge applied.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChargeDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeDetails" /> class.
        /// </summary>
        /// <param name="type">Type of charge applied. (required).</param>
        /// <param name="chargeAmount">chargeAmount (required).</param>
        /// <param name="taxDetails">Individual tax details per line item..</param>
        public ChargeDetails(TypeEnum type = default(TypeEnum), Money chargeAmount = default(Money), List<TaxDetail> taxDetails = default(List<TaxDetail>))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ChargeDetails and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "chargeAmount" is required (not null)
            if (chargeAmount == null)
            {
                throw new InvalidDataException("chargeAmount is a required property for ChargeDetails and cannot be null");
            }
            else
            {
                this.ChargeAmount = chargeAmount;
            }
            this.TaxDetails = taxDetails;
        }
        

        /// <summary>
        /// Gets or Sets ChargeAmount
        /// </summary>
        [DataMember(Name="chargeAmount", EmitDefaultValue=false)]
        public Money ChargeAmount { get; set; }

        /// <summary>
        /// Individual tax details per line item.
        /// </summary>
        /// <value>Individual tax details per line item.</value>
        [DataMember(Name="taxDetails", EmitDefaultValue=false)]
        public List<TaxDetail> TaxDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChargeDetails {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ChargeAmount: ").Append(ChargeAmount).Append("\n");
            sb.Append("  TaxDetails: ").Append(TaxDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChargeDetails);
        }

        /// <summary>
        /// Returns true if ChargeDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ChargeDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChargeDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ChargeAmount == input.ChargeAmount ||
                    (this.ChargeAmount != null &&
                    this.ChargeAmount.Equals(input.ChargeAmount))
                ) && 
                (
                    this.TaxDetails == input.TaxDetails ||
                    this.TaxDetails != null &&
                    this.TaxDetails.SequenceEqual(input.TaxDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ChargeAmount != null)
                    hashCode = hashCode * 59 + this.ChargeAmount.GetHashCode();
                if (this.TaxDetails != null)
                    hashCode = hashCode * 59 + this.TaxDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
