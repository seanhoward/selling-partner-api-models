//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Amazon.SellingPartnerAPIAA.Clients.Schemas.Reports.SellingPartnerSearchCatalogPerformance
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Contains search catalog performance data for ASINs in the selling partner's catalog.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SearchCatalogPerformanceData
    {
        /// <summary>
        /// The start date of the data for the ASIN that you specify in the asin property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// The end date of the data for the ASIN that you specify in the asin property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset EndDate { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asin { get; set; }

        [Newtonsoft.Json.JsonProperty("impressionData", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SearchCatalogPerformanceImpressionData ImpressionData { get; set; } = new SearchCatalogPerformanceImpressionData();

        [Newtonsoft.Json.JsonProperty("clickData", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SearchCatalogPerformanceClickData ClickData { get; set; } = new SearchCatalogPerformanceClickData();

        [Newtonsoft.Json.JsonProperty("cartAddData", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SearchCatalogPerformanceCartAddData CartAddData { get; set; } = new SearchCatalogPerformanceCartAddData();

        [Newtonsoft.Json.JsonProperty("purchaseData", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SearchCatalogPerformancePurchaseData PurchaseData { get; set; } = new SearchCatalogPerformancePurchaseData();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchCatalogPerformanceData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchCatalogPerformanceData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The search impression data for your catalog.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SearchCatalogPerformanceImpressionData
    {
        /// <summary>
        /// Total number of impressions for the given ASIN, which originates from the search results page across all search queries. Amazon counts an impression every time the ASIN displays in the search results page. Impressions include sponsored search results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("impressionCount", Required = Newtonsoft.Json.Required.Always)]
        public int ImpressionCount { get; set; }

        [Newtonsoft.Json.JsonProperty("impressionMedianPrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CurrencyAmount ImpressionMedianPrice { get; set; } = new CurrencyAmount();

        /// <summary>
        /// The number of times the impressed ASIN displays with the same day delivery message in a search results page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sameDayShippingImpressionCount", Required = Newtonsoft.Json.Required.Always)]
        public int SameDayShippingImpressionCount { get; set; }

        /// <summary>
        /// The number of times the impressed ASIN displays with the one-day delivery message in a search results page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oneDayShippingImpressionCount", Required = Newtonsoft.Json.Required.Always)]
        public int OneDayShippingImpressionCount { get; set; }

        /// <summary>
        /// The number of times the impressed ASIN displays with the two-day delivery message in a search results page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("twoDayShippingImpressionCount", Required = Newtonsoft.Json.Required.Always)]
        public int TwoDayShippingImpressionCount { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchCatalogPerformanceImpressionData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchCatalogPerformanceImpressionData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The search click data for your catalog.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SearchCatalogPerformanceClickData
    {
        /// <summary>
        /// The total number of clicks on the ASIN that originates from the search results page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clickCount", Required = Newtonsoft.Json.Required.Always)]
        public int ClickCount { get; set; }

        /// <summary>
        /// The number of clicks divided by the number of impressions for the ASIN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clickRate", Required = Newtonsoft.Json.Required.Always)]
        public double ClickRate { get; set; }

        [Newtonsoft.Json.JsonProperty("clickedMedianPrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CurrencyAmount ClickedMedianPrice { get; set; } = new CurrencyAmount();

        /// <summary>
        /// The number of times customers click on the ASIN with the same day delivery message on the search results page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sameDayShippingClickCount", Required = Newtonsoft.Json.Required.Always)]
        public int SameDayShippingClickCount { get; set; }

        /// <summary>
        /// The number of times customers click on the ASIN with the one-day delivery message on the search results page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oneDayShippingClickCount", Required = Newtonsoft.Json.Required.Always)]
        public int OneDayShippingClickCount { get; set; }

        /// <summary>
        /// The number of times customers click on the ASIN with the two-day delivery message on the search results page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("twoDayShippingClickCount", Required = Newtonsoft.Json.Required.Always)]
        public int TwoDayShippingClickCount { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchCatalogPerformanceClickData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchCatalogPerformanceClickData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The search attributed cart-add data for your catalog.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SearchCatalogPerformanceCartAddData
    {
        /// <summary>
        /// The number of times customers add an ASIN to a cart. This data originates from the search results page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cartAddCount", Required = Newtonsoft.Json.Required.Always)]
        public int CartAddCount { get; set; }

        [Newtonsoft.Json.JsonProperty("cartAddedMedianPrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CurrencyAmount CartAddedMedianPrice { get; set; } = new CurrencyAmount();

        /// <summary>
        /// The number of times customers add an ASIN to a cart with the same day delivery message in the search results page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sameDayShippingCartAddCount", Required = Newtonsoft.Json.Required.Always)]
        public int SameDayShippingCartAddCount { get; set; }

        /// <summary>
        /// The number of times customers add an ASIN to a cart with the one-day delivery message in the search results page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oneDayShippingCartAddCount", Required = Newtonsoft.Json.Required.Always)]
        public int OneDayShippingCartAddCount { get; set; }

        /// <summary>
        /// The number of times customers add an ASIN to a cart with the two-day delivery message in the search results page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("twoDayShippingCartAddCount", Required = Newtonsoft.Json.Required.Always)]
        public int TwoDayShippingCartAddCount { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchCatalogPerformanceCartAddData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchCatalogPerformanceCartAddData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The search attributed purchase data for your catalog.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SearchCatalogPerformancePurchaseData
    {
        /// <summary>
        /// The total number of purchases for an ASIN. This data originates from the search results page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseCount", Required = Newtonsoft.Json.Required.Always)]
        public int PurchaseCount { get; set; }

        [Newtonsoft.Json.JsonProperty("searchTrafficSales", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CurrencyAmount SearchTrafficSales { get; set; } = new CurrencyAmount();

        /// <summary>
        /// The number of purchases divided by the number of clicks for the ASIN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conversionRate", Required = Newtonsoft.Json.Required.Always)]
        public double ConversionRate { get; set; }

        [Newtonsoft.Json.JsonProperty("purchaseMedianPrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CurrencyAmount PurchaseMedianPrice { get; set; } = new CurrencyAmount();

        /// <summary>
        /// The number of times customers purchase an ASIN with the same day delivery message in the search results page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sameDayShippingPurchaseCount", Required = Newtonsoft.Json.Required.Always)]
        public int SameDayShippingPurchaseCount { get; set; }

        /// <summary>
        /// The number of times customers purchase an ASIN with the one-day delivery message in the search results page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oneDayShippingPurchaseCount", Required = Newtonsoft.Json.Required.Always)]
        public int OneDayShippingPurchaseCount { get; set; }

        /// <summary>
        /// The number of times customers purchase an ASIN with the two-day delivery message in the search results page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("twoDayShippingPurchaseCount", Required = Newtonsoft.Json.Required.Always)]
        public int TwoDayShippingPurchaseCount { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchCatalogPerformancePurchaseData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchCatalogPerformancePurchaseData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents an amount of money in a specific currency.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyAmount
    {
        /// <summary>
        /// The monetary amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }

        /// <summary>
        /// The 3-letter currency code in ISO 4217 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{3}")]
        public string CurrencyCode { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CurrencyAmount FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CurrencyAmount>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The Search Catalog Performance report provides search engagement metrics, such as impressions, clicks, cart adds, and purchases for a date range that you specify. The data is available at different reporting periods: WEEK, MONTH, and QUARTER. Requests cannot span multiple periods. For example, a request at the WEEK level cannot start on 2025-01-05 and end on 2025-01-18 as this request spans two weeks.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SellingPartnerSearchCatalogPerformanceReport
    {
        /// <summary>
        /// Summarizes the original report request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportSpecification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ReportSpecification ReportSpecification { get; set; } = new ReportSpecification();

        [Newtonsoft.Json.JsonProperty("dataByAsin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SearchCatalogPerformanceData> DataByAsin { get; set; } = new System.Collections.ObjectModel.Collection<SearchCatalogPerformanceData>();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SellingPartnerSearchCatalogPerformanceReport FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SellingPartnerSearchCatalogPerformanceReport>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReportSpecification
    {
        /// <summary>
        /// The type of the report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReportSpecificationReportType ReportType { get; set; }

        /// <summary>
        /// The report options that specify parameters, such as reportPeriod.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportOptions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ReportOptions ReportOptions { get; set; } = new ReportOptions();

        /// <summary>
        /// The start date of the report (Amazon ignores the time component). For WEEK, MONTH, and QUARTER reportPeriods, this value must correspond to the first day in the reportPeriod that you specify or else a fatal error returns. For example, dataStartTime must be a Sunday for the WEEK reportPeriod.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataStartTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DataStartTime { get; set; }

        /// <summary>
        /// The end date of the report (Amazon ignores the time component). For WEEK, MONTH, and QUARTER reportPeriods, this value must correspond to the last day in the reportPeriod that you specify or else a fatal error returns. For example, dataEndTime must be a Saturday for the WEEK reportPeriod.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataEndTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DataEndTime { get; set; }

        /// <summary>
        /// This parameter must match the marketplaceId of the selling partner account. This report type supports only one marketplaceId per report. If you specify multiple marketplaces, a fatal error returns and report generation fails.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> MarketplaceIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReportSpecification FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReportSpecification>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ReportSpecificationReportType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GET_BRAND_ANALYTICS_SEARCH_CATALOG_PERFORMANCE_REPORT")]
        GET_BRAND_ANALYTICS_SEARCH_CATALOG_PERFORMANCE_REPORT = 0,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReportOptions
    {
        /// <summary>
        /// The granularity of the data in the report. Valid values are WEEK, MONTH, and QUARTER.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportPeriod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReportOptionsReportPeriod ReportPeriod { get; set; }

        /// <summary>
        /// A space-separated list of Amazon Standard Identification Number (ASINs) for which you can request the report. If you do not provide ASINs, the report returns search catalog performance data for all ASINs for which you are a brand owner. There is a 200-character limit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asins", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Asins { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReportOptions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReportOptions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ReportOptionsReportPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"WEEK")]
        WEEK = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"MONTH")]
        MONTH = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"QUARTER")]
        QUARTER = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }
}