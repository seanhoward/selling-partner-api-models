//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Amazon.SellingPartnerAPIAA.Clients.Schemas.Reports.VendorCoupon
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Contains details about a campaign and every included coupon.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DetailsByCampaign
    {
        /// <summary>
        /// Unique identifier of the campaign.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CampaignId { get; set; }

        /// <summary>
        /// Name given to the campaign.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("campaignName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CampaignName { get; set; }

        /// <summary>
        /// The vendor code associated with the campaign.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vendorCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string VendorCode { get; set; }

        /// <summary>
        /// The marketplace the campaign is running in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Campaign creation date-time in UTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationDateTime { get; set; }

        /// <summary>
        /// The latest date-time the campaign data in this report was updated. May be up to 24 hours before the current date-time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastUpdatedDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastUpdatedDateTime { get; set; }

        /// <summary>
        /// Whether or not the campaign is a Subscribe and Save offer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSubscribeAndSave", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSubscribeAndSave { get; set; }

        /// <summary>
        /// Whether the budget is allocated independently for each coupon or shared among all coupons.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("budgetType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DetailsByCampaignBudgetType BudgetType { get; set; }

        /// <summary>
        /// Total number of times a coupon in the campaign has been applied on the product page, equal to the sum of all coupon clips.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalClips", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int TotalClips { get; set; }

        /// <summary>
        /// Total number of times a coupon in the campaign has been used for a purchase, equal to the sum of all coupon redemptions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalRedemptions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int TotalRedemptions { get; set; }

        /// <summary>
        /// ISO 4217 currency code of all currency values in the campaign.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Total budget allocated to the campaign. Currency value. Only present when budgetType is SHARED_BUDGET.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBudget", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double TotalBudget { get; set; }

        /// <summary>
        /// Total amount spent by the vendor on the campaign, including clip fees and redemption fees, equal to the sum of all coupon budgetSpent. Currency value. Only present when budgetType is SHARED_BUDGET.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBudgetSpent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double TotalBudgetSpent { get; set; }

        /// <summary>
        /// The budget remaining for the campaign, equal to totalBudget minus totalBudgetSpent. Currency value. Only present when budgetType is SHARED_BUDGET.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBudgetRemaining", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double TotalBudgetRemaining { get; set; }

        /// <summary>
        /// A list of included coupons and their details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coupons", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CouponDetails> Coupons { get; set; } = new System.Collections.ObjectModel.Collection<CouponDetails>();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DetailsByCampaign FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DetailsByCampaign>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Contains details about a coupon.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CouponDetails
    {
        /// <summary>
        /// Unique identifier of the coupon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("couponId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CouponId { get; set; }

        /// <summary>
        /// The name given to the coupon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Message displayed with the coupon on the product page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("websiteMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebsiteMessage { get; set; }

        /// <summary>
        /// Coupon start date-time in UTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartDateTime { get; set; }

        /// <summary>
        /// Coupon end date-time in UTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset EndDateTime { get; set; }

        /// <summary>
        /// Whether or not the coupon can only be redeemed once per customer account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isOncePerCustomer", Required = Newtonsoft.Json.Required.Always)]
        public bool IsOncePerCustomer { get; set; }

        /// <summary>
        /// The customer segment that the coupon is available to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerSegment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerSegment { get; set; }

        /// <summary>
        /// Number of times the coupon has been applied on the product page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clips", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Clips { get; set; }

        /// <summary>
        /// Number of times the coupon has been used for a purchase. Represents a gross value, including purchases that were returned or cancelled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redemptions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Redemptions { get; set; }

        /// <summary>
        /// Budget allocated to the coupon. Currency value. Only present when campaign budgetType is PER_INDIVIDUAL_COUPON.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("budget", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double Budget { get; set; }

        /// <summary>
        /// Total amount saved by customers redeeming the coupon. Currency value. Represents a gross value, including purchases that were returned or cancelled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDiscount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double TotalDiscount { get; set; }

        /// <summary>
        /// Total amount spent by the vendor on the coupon, including clip fees and redemption fees. Currency value. Represents a gross value, including purchases that were returned or cancelled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("budgetSpent", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double BudgetSpent { get; set; }

        /// <summary>
        /// Budget remaining for the coupon, equal to budget minus budgetSpent. Currency value. Only present when campaign budgetType is PER_INDIVIDUAL_COUPON. Represents a gross value, including purchases that were returned or cancelled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("budgetRemaining", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double BudgetRemaining { get; set; }

        /// <summary>
        /// Percentage of the allocated budget that has been spent, equal to the budgetSpent divided by budget or campaign totalBudget as appropriate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("budgetPercentageUsed", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double BudgetPercentageUsed { get; set; }

        /// <summary>
        /// Discount details of the products associated with the coupon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asins", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AsinDetails> Asins { get; set; } = new System.Collections.ObjectModel.Collection<AsinDetails>();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CouponDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CouponDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Contains details about an asin.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AsinDetails
    {
        /// <summary>
        /// Asin of the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asin { get; set; }

        /// <summary>
        /// Whether the discount is given as a fixed amount or a percentage off the list price.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AsinDetailsDiscountType DiscountType { get; set; }

        /// <summary>
        /// Discount amount the customer receives on the product. Reflects a percentage when discountType is PERCENT_OFF_LIST_PRICE and a currency value when discountType is AMOUNT_OFF_LIST_PRICE.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double DiscountAmount { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AsinDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AsinDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// This report contains data to help vendors optimize their coupons and adjust their advertising strategies. This report supports start dates up to two years before the current date.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class VendorCouponReport
    {
        /// <summary>
        /// Summarizes the original report request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportSpecification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ReportSpecification ReportSpecification { get; set; } = new ReportSpecification();

        /// <summary>
        /// List of included campaigns.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("campaigns", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DetailsByCampaign> Campaigns { get; set; } = new System.Collections.ObjectModel.Collection<DetailsByCampaign>();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VendorCouponReport FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VendorCouponReport>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DetailsByCampaignBudgetType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PER_INDIVIDUAL_COUPON")]
        PER_INDIVIDUAL_COUPON = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"SHARED_BUDGET")]
        SHARED_BUDGET = 1,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum AsinDetailsDiscountType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PERCENT_OFF_LIST_PRICE")]
        PERCENT_OFF_LIST_PRICE = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"AMOUNT_OFF_LIST_PRICE")]
        AMOUNT_OFF_LIST_PRICE = 1,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReportSpecification
    {
        /// <summary>
        /// The report type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReportType { get; set; }

        /// <summary>
        /// Report options specifying parameters campaignStartDateFrom and campaignStartDateTo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportOptions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ReportOptions ReportOptions { get; set; } = new ReportOptions();

        /// <summary>
        /// Marketplace IDs as specified in the report request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> MarketplaceIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReportSpecification FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReportSpecification>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReportOptions
    {
        /// <summary>
        /// The start of a date-time range in UTC used for selecting coupons to report on. All coupons with a start date-time that falls within the range will be included.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("campaignStartDateFrom", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CampaignStartDateFrom { get; set; }

        /// <summary>
        /// The end of a date-time range in UTC used for selecting coupons to report on. All coupons with a start date-time that falls within the range will be included.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("campaignStartDateTo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CampaignStartDateTo { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReportOptions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReportOptions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }
}