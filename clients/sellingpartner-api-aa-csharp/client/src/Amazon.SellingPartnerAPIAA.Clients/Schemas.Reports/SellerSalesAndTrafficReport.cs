//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Amazon.SellingPartnerAPIAA.Clients.Schemas.Reports.SellerSalesAndTraffic
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Object describing sales and traffic metrics for ASINs in the seller's account aggregated by date.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SalesAndTrafficByDate
    {
        /// <summary>
        /// The start date of the period of the aggregated data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }

        /// <summary>
        /// Object describing sales metrics for ASINs in the seller's account aggregated by date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesByDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SalesByDate SalesByDate { get; set; } = new SalesByDate();

        /// <summary>
        /// Object describing traffic metrics for ASINs in the seller's account aggregated by date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trafficByDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TrafficByDate TrafficByDate { get; set; } = new TrafficByDate();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SalesAndTrafficByDate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesAndTrafficByDate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Object describing sales metrics for ASINs in the seller's account aggregated by date.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SalesByDate
    {
        /// <summary>
        /// The amount of ordered product sales, calculated by multiplying the price of products and the number of units sold for the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderedProductSales", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount OrderedProductSales { get; set; } = new Amount();

        /// <summary>
        /// The amount of ordered product sales to Amazon Business customers, calculated by multiplying the price of products and the number of units sold for the selected time period. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderedProductSalesB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount OrderedProductSalesB2B { get; set; }

        /// <summary>
        /// The number of units ordered for the selected time period. For clarification on the difference between orders, order items, and units take the following order as an example: An order containing 2 copies of book A and 3 copies of book B; The number of orders is 1, the number of order items is 2 (book A and book B), and the number of units is 5 (2 + 3).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitsOrdered", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int UnitsOrdered { get; set; }

        /// <summary>
        /// The number of units ordered by Amazon Business customers for the selected time period. For clarification on the difference between orders, order items, and units take the following order as an example: An order containing 2 copies of book A and 3 copies of book B; The number of orders is 1, the number of order items is 2 (book A and book B), and the number of units is 5 (2 + 3). Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitsOrderedB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int UnitsOrderedB2B { get; set; }

        /// <summary>
        /// The number of items that were ordered for the selected time period. For clarification on the difference between orders, order items, and units take the following order as an example: An order containing 2 copies of book A and 3 copies of book B; The number of orders is 1, the number of order items is 2 (book A and book B), and the number of units is 5 (2 + 3).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalOrderItems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int TotalOrderItems { get; set; }

        /// <summary>
        /// The number of items that were ordered by Amazon Business customers for the selected time period. For clarification on the difference between orders, order items, and units take the following order as an example: An order containing 2 copies of book A and 3 copies of book B; The number of orders is 1, the number of order items is 2 (book A and book B), and the number of units is 5 (2 + 3). Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalOrderItemsB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int TotalOrderItemsB2B { get; set; }

        /// <summary>
        /// The average ordered product sales, calculated by dividing orderedProductSales by totalOrderItems for the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("averageSalesPerOrderItem", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount AverageSalesPerOrderItem { get; set; } = new Amount();

        /// <summary>
        /// The average ordered product sales to Amazon Business customers, calculated by dividing orderedProductSalesB2B by totalOrderItemsB2B for the selected time period. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("averageSalesPerOrderItemB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount AverageSalesPerOrderItemB2B { get; set; }

        /// <summary>
        /// The average number of units in each order item for the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("averageUnitsPerOrderItem", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double AverageUnitsPerOrderItem { get; set; }

        /// <summary>
        /// The average number of units in each order item ordered by Amazon Business customers for the selected time period. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("averageUnitsPerOrderItemB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double AverageUnitsPerOrderItemB2B { get; set; }

        /// <summary>
        /// The average price of the units sold in the selected time period, calculated by dividing the orderedProductSales by unitsOrdered for the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("averageSellingPrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount AverageSellingPrice { get; set; } = new Amount();

        /// <summary>
        /// The average price of the units sold to Amazon Business customers, calculated by dividing the orderedProductSalesB2B by unitsOrderedB2B for the selected time period. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("averageSellingPriceB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount AverageSellingPriceB2B { get; set; }

        /// <summary>
        /// The number of units refunded in the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitsRefunded", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int UnitsRefunded { get; set; }

        /// <summary>
        /// The percentage conversion metric indicating how many orders were refunded by the seller, calculated by dividing unitsOrdered by unitsRefunded in the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refundRate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double RefundRate { get; set; }

        /// <summary>
        /// The number of A-to-z guarantee claims granted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("claimsGranted", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int ClaimsGranted { get; set; }

        /// <summary>
        /// Monetary amount of filed A-to-z guarantee claims.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("claimsAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount ClaimsAmount { get; set; } = new Amount();

        /// <summary>
        /// The amount of ordered product sales shipped for the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippedProductSales", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount ShippedProductSales { get; set; } = new Amount();

        /// <summary>
        /// The number of units shipped in the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitsShipped", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int UnitsShipped { get; set; }

        /// <summary>
        /// The number of orders shipped in the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ordersShipped", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int OrdersShipped { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SalesByDate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesByDate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Object describing traffic metrics for ASINs in the seller's account aggregated by date.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TrafficByDate
    {
        /// <summary>
        /// Browser page views are the number of times any user visited your Amazon.com browser pages for the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("browserPageViews", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int BrowserPageViews { get; set; }

        /// <summary>
        /// Browser B2B page views are the number of times an Amazon Business customer visited your Amazon.com browser pages for the selected time period. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("browserPageViewsB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int BrowserPageViewsB2B { get; set; }

        /// <summary>
        /// Mobile app page views are the number of times any user visited your Amazon.com mobile app pages for the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobileAppPageViews", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int MobileAppPageViews { get; set; }

        /// <summary>
        /// Mobile app B2B page views are the number of times an Amazon Business customer visited your Amazon.com mobile app pages for the selected time period. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobileAppPageViewsB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int MobileAppPageViewsB2B { get; set; }

        /// <summary>
        /// Page views are the number of times any user visited your Amazon.com pages using browser or mobile app for the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageViews", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int PageViews { get; set; }

        /// <summary>
        /// B2B page views are the number of times an Amazon Business customer visited your Amazon.com pages using browser or mobile app for the selected time period. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageViewsB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int PageViewsB2B { get; set; }

        /// <summary>
        /// Browser sessions are visits to your Amazon.com browser pages by any user. All activity within a 24-hour period is considered a browser session. For example, if any user visits your pages using browser multiple times within a 24 hour period it is counted as a single session.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("browserSessions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int BrowserSessions { get; set; }

        /// <summary>
        /// Browser B2B sessions are visits to your Amazon.com browser pages by an Amazon Business customer. All activity within a 24-hour period is considered a browser session. For example, if an Amazon Business customer visits your pages using browser multiple times within a 24 hour period it is counted as a single session. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("browserSessionsB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int BrowserSessionsB2B { get; set; }

        /// <summary>
        /// Mobile app sessions are visits to your Amazon.com mobile app pages by any user. All activity within a 24-hour period is considered a mobile app session. For example, if any user visits your pages using mobile app multiple times within a 24 hour period it is counted as a single session.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobileAppSessions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int MobileAppSessions { get; set; }

        /// <summary>
        /// Mobile app B2B sessions are visits to your Amazon.com mobile app pages by an Amazon Business customer. All activity within a 24-hour period is considered a mobile app session. For example, if an Amazon Business customer visits your pages using mobile app multiple times within a 24 hour period it is counted as a single session. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobileAppSessionsB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int MobileAppSessionsB2B { get; set; }

        /// <summary>
        /// Sessions are visits to your Amazon.com pages using browser or mobile app by any user. All activity within a 24-hour period is considered a session. For example, if any user visits your pages multiple times using mobile app or browser within a 24 hour period it is counted as a single session.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sessions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Sessions { get; set; }

        /// <summary>
        /// B2B sessions are visits to your Amazon.com pages using browser or mobile app by an Amazon Business customer. All activity within a 24-hour period is considered a session. For example, if an Amazon Business customer visits your pages multiple times using mobile app or browser within a 24 hour period it is counted as a single session. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sessionsB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int SessionsB2B { get; set; }

        /// <summary>
        /// The percentage of page views where the buy box (the add to shopping cart link) appeared on the page for customers to add your product to their cart.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buyBoxPercentage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double BuyBoxPercentage { get; set; }

        /// <summary>
        /// The percentage of page views by Amazon Business customers where the buy box (the add to shopping cart link) appeared on the page for customers to add your product to their cart. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buyBoxPercentageB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double BuyBoxPercentageB2B { get; set; }

        /// <summary>
        /// The percentage conversion metric indicating how many order items were generated relative to the number of people who viewed the products.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderItemSessionPercentage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double OrderItemSessionPercentage { get; set; }

        /// <summary>
        /// The percentage conversion metric indicating how many order items were generated by Amazon Business customers relative to the number of Amazon Business customers who viewed the products. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderItemSessionPercentageB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double OrderItemSessionPercentageB2B { get; set; }

        /// <summary>
        /// The percentage conversion metric indicating how many units were purchased relative to the number of people who viewed the products.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitSessionPercentage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double UnitSessionPercentage { get; set; }

        /// <summary>
        /// The percentage conversion metric indicating how many units were purchased by Amazon Business customers relative to number of Amazon Business customers who viewed the products. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitSessionPercentageB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double UnitSessionPercentageB2B { get; set; }

        /// <summary>
        /// The average number of offers listed for sale in the selected time period. It is calculated from the total number of offers and the total number of days in the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("averageOfferCount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int AverageOfferCount { get; set; }

        /// <summary>
        /// The average number of parent items listed for sale in the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("averageParentItems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int AverageParentItems { get; set; }

        /// <summary>
        /// The number of customer feedback received in the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feedbackReceived", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int FeedbackReceived { get; set; }

        /// <summary>
        /// The number of negative customer feedback received in the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("negativeFeedbackReceived", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int NegativeFeedbackReceived { get; set; }

        /// <summary>
        /// The negative feedback rate is the number of orders that have received a negative feedback divided by the number of orders in the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receivedNegativeFeedbackRate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double ReceivedNegativeFeedbackRate { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TrafficByDate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrafficByDate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Object describing sales and traffic metrics for ASINs in the seller's account aggregated by ASIN.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SalesAndTrafficByAsin
    {
        /// <summary>
        /// The Amazon Standard Identification Number of the parent product. A parent product appears in our catalog as a non-buyable, generic identifier for a product that has buyable variations (child products).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentAsin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ParentAsin { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number of the child product. Child products are unique, sellable products that are related in our catalog to a single, non-sellable parent product. Note: This field is only present when ASIN aggregation is CHILD or SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("childAsin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChildAsin { get; set; }

        /// <summary>
        /// The Stock Keeping Unit of the product. The SKU is a seller specific product identifier. Note: This field is only present when ASIN aggregation is SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sku", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sku { get; set; }

        /// <summary>
        /// Sales metrics for ASINs in the seller's account aggregated by ASIN
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesByAsin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SalesByAsin SalesByAsin { get; set; } = new SalesByAsin();

        /// <summary>
        /// Traffic metrics for ASINs in the seller's account aggregated by ASIN
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trafficByAsin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TrafficByAsin TrafficByAsin { get; set; } = new TrafficByAsin();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SalesAndTrafficByAsin FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesAndTrafficByAsin>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Object describing sales and traffic metrics for ASINs in the seller's account aggregated by ASIN.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SalesByAsin
    {
        /// <summary>
        /// The number of units ordered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitsOrdered", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int UnitsOrdered { get; set; }

        /// <summary>
        /// The number of units ordered by Amazon Business customers. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitsOrderedB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int UnitsOrderedB2B { get; set; }

        /// <summary>
        /// The amount of ordered product sales, calculated by multiplying the price of products and the number of units sold for the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderedProductSales", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount OrderedProductSales { get; set; } = new Amount();

        /// <summary>
        /// The amount of ordered product sales to Amazon Business customers, calculated by multiplying the price of products and the number of units sold for the selected time period. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderedProductSalesB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount OrderedProductSalesB2B { get; set; }

        /// <summary>
        /// The number of items that were ordered for the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalOrderItems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int TotalOrderItems { get; set; }

        /// <summary>
        /// The number of items that were ordered by Amazon Business customers for the selected time period. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalOrderItemsB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int TotalOrderItemsB2B { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SalesByAsin FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesByAsin>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Object describing traffic metrics for ASINs in the seller's account aggregated by ASIN.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TrafficByAsin
    {
        /// <summary>
        /// Browser sessions are visits to your Amazon.com browser pages by any user. All activity within a 24-hour period is considered a browser session. For example, if any user visits your pages using browser multiple times within a 24 hour period it is counted as a single session.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("browserSessions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int BrowserSessions { get; set; }

        /// <summary>
        /// Browser B2B sessions are visits to your Amazon.com browser pages by an Amazon Business customer. All activity within a 24-hour period is considered a browser session. For example, if an Amazon Business customer visits your pages using browser multiple times within a 24 hour period it is counted as a single session. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("browserSessionsB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int BrowserSessionsB2B { get; set; }

        /// <summary>
        /// Mobile app sessions are visits to your Amazon.com mobile app pages by any user. All activity within a 24-hour period is considered a mobile app session. For example, if any user visits your pages using mobile app multiple times within a 24 hour period it is counted as a single session.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobileAppSessions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int MobileAppSessions { get; set; }

        /// <summary>
        /// Mobile app B2B sessions are visits to your Amazon.com mobile app pages by an Amazon Business customer. All activity within a 24-hour period is considered a mobile app session. For example, if an Amazon Business customer visits your pages using mobile app multiple times within a 24 hour period it is counted as a single session. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobileAppSessionsB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int MobileAppSessionsB2B { get; set; }

        /// <summary>
        /// Sessions are visits to your Amazon.com pages using mobile app or browser by any user. All activity within a 24-hour period is considered a session. For example, if any user visits your pages multiple times within a 24 hour period it is counted as a single session.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sessions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Sessions { get; set; }

        /// <summary>
        /// B2B sessions are visits to your Amazon.com pages by Amazon Business customers using mobile app or browser. All activity within a 24-hour period is considered a session. For example, if an Amazon Business customer visits your pages multiple times within a 24 hour period it is counted as a single session. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sessionsB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int SessionsB2B { get; set; }

        /// <summary>
        /// The percentage of browser sessions that contain at least one page view for a particular SKU/ASIN relative to the total number of browser sessions for all products.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("browserSessionPercentage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double BrowserSessionPercentage { get; set; }

        /// <summary>
        /// The percentage of browser sessions that contain at least one page view by an Amazon Business customer for a particular SKU/ASIN relative to the total number of browser sessions by Amazon Business customers for all products. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("browserSessionPercentageB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double BrowserSessionPercentageB2B { get; set; }

        /// <summary>
        /// The percentage of mobile app sessions that contain at least one page view for a particular SKU/ASIN relative to the total number of mobile app sessions for all products.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobileAppSessionPercentage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double MobileAppSessionPercentage { get; set; }

        /// <summary>
        /// The percentage of mobile app sessions that contain at least one page view by an Amazon Business customer for a particular SKU/ASIN relative to the total number of mobile app sessions by Amazon Business customers for all products. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobileAppSessionPercentageB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double MobileAppSessionPercentageB2B { get; set; }

        /// <summary>
        /// The percentage of sessions that contain at least one page view for a particular SKU/ASIN relative to the total number of sessions for all products.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sessionPercentage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double SessionPercentage { get; set; }

        /// <summary>
        /// The percentage of sessions that contain at least one page view by an Amazon Business customer for a particular SKU/ASIN relative to the total number of sessions by Amazon Business customers for all products. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sessionPercentageB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double SessionPercentageB2B { get; set; }

        /// <summary>
        /// Browser page views are the number of times any user visited your Amazon.com browser pages for the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("browserPageViews", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int BrowserPageViews { get; set; }

        /// <summary>
        /// Browser page views are the number of times an Amazon Business customer visited your Amazon.com browser pages for the selected time period. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("browserPageViewsB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int BrowserPageViewsB2B { get; set; }

        /// <summary>
        /// Mobile app page views are the number of times any user visited your Amazon.com mobile app pages for the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobileAppPageViews", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int MobileAppPageViews { get; set; }

        /// <summary>
        /// Mobile app B2B page views are the number of times an Amazon Business customer visited your Amazon.com mobile app pages for the selected time period. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobileAppPageViewsB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int MobileAppPageViewsB2B { get; set; }

        /// <summary>
        /// Page views are the number of times any user visited your Amazon.com pages using browser or mobile app for the selected time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageViews", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int PageViews { get; set; }

        /// <summary>
        /// B2B page views are the number of times an Amazon Business customer visited your Amazon.com pages using browser or mobile app for the selected time period. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageViewsB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int PageViewsB2B { get; set; }

        /// <summary>
        /// The percentage of browser views that a particular SKU/ASIN receives relative to the total number of mobile page views for all products.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("browserPageViewsPercentage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double BrowserPageViewsPercentage { get; set; }

        /// <summary>
        /// The percentage of browser views by Amazon Business customers that a particular SKU/ASIN receives relative to the total number of mobile page views by Amazon Business customers for all products. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("browserPageViewsPercentageB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double BrowserPageViewsPercentageB2B { get; set; }

        /// <summary>
        /// The percentage of mobile page views that a particular SKU/ASIN receives relative to the total number of mobile page views for all products.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobileAppPageViewsPercentage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double MobileAppPageViewsPercentage { get; set; }

        /// <summary>
        /// The percentage of mobile page views by Amazon Business customers that a particular SKU/ASIN receives relative to the total number of mobile page views by Amazon Business customers for all products. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobileAppPageViewsPercentageB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double MobileAppPageViewsPercentageB2B { get; set; }

        /// <summary>
        /// The percentage of page views that a particular SKU/ASIN receives relative to the total number of page views for all products.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageViewsPercentage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double PageViewsPercentage { get; set; }

        /// <summary>
        /// The percentage of page views by Amazon Business customers that a particular SKU/ASIN receives relative to the total number of page views by Amazon Business customers for all products. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageViewsPercentageB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double PageViewsPercentageB2B { get; set; }

        /// <summary>
        /// The percentage of page views where the buy box (the add to shopping cart link) appeared on the page for customers to add your product to their cart.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buyBoxPercentage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double BuyBoxPercentage { get; set; }

        /// <summary>
        /// The percentage of page views by Amazon Business customers where the buy box (the add to shopping cart link) appeared on the page for customers to add your product to their cart. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buyBoxPercentageB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double BuyBoxPercentageB2B { get; set; }

        /// <summary>
        /// The percentage conversion metric indicating how many units were purchased relative to the number of people who viewed the products, calculated by dividing unitsOrdered by sessions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitSessionPercentage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double UnitSessionPercentage { get; set; }

        /// <summary>
        /// The percentage conversion metric indicating how many units were purchased by Amazon Business customers relative to the number of Amazon Business customers who viewed the products, calculated by dividing unitsOrderedB2B by sessions. Note: This field is only populated when the seller is a B2B seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitSessionPercentageB2B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double UnitSessionPercentageB2B { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TrafficByAsin FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrafficByAsin>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Amount
    {
        /// <summary>
        /// The amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount1 { get; set; }

        /// <summary>
        /// Currency code of the amount. In ISO 4217 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CurrencyCode { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Amount FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Amount>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// This report shares data on the sales performance and page traffic of the seller's items aggregated by date (across the seller's entire catalog of items) and aggregated by ASIN. Aggregated data is available at different date range aggregation levels: DAY, WEEK, MONTH. Per-ASIN data is available at different ASIN aggregation levels: PARENT, CHILD, SKU. Requests can span multiple date range periods.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SellerSalesAndTrafficReport
    {
        /// <summary>
        /// Report summary including specified reporting date range, dateGranularity, and asinGranularity in the input.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportSpecification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ReportSpecification ReportSpecification { get; set; } = new ReportSpecification();

        [Newtonsoft.Json.JsonProperty("salesAndTrafficByDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SalesAndTrafficByDate> SalesAndTrafficByDate { get; set; } = new System.Collections.ObjectModel.Collection<SalesAndTrafficByDate>();

        [Newtonsoft.Json.JsonProperty("salesAndTrafficByAsin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SalesAndTrafficByAsin> SalesAndTrafficByAsin { get; set; } = new System.Collections.ObjectModel.Collection<SalesAndTrafficByAsin>();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SellerSalesAndTrafficReport FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SellerSalesAndTrafficReport>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReportSpecification
    {
        /// <summary>
        /// Type of the report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReportSpecificationReportType ReportType { get; set; }

        /// <summary>
        /// Report options specifying parameters such as dateGranularity and asinGranularity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportOptions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ReportOptions ReportOptions { get; set; } = new ReportOptions();

        /// <summary>
        /// This parameter determines the start date of the report - the time component is ignored. If the start date of the report is more than two years ago, the report will be cancelled. For WEEK and MONTH dateGranularity, if this value does not correspond to the first day in the specified dateGranularity then the report start date will be expanded to include the first day of the reporting period for the dateGranularity specified. The first day of the reporting period for the WEEK dateGranularity is Sunday and the first day of the reporting period for the MONTH dateGranularity is the first day of the month. For example, if the specified dataStartTime is 3 days after the start date of a WEEK dateGranularity, then the start date used to generate the report will be dataStartTime minus 3 days.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataStartTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DataStartTime { get; set; }

        /// <summary>
        /// This parameter determines the end date of the report - the time component is ignored. For WEEK and MONTH dateGranularity, if this value does not correspond to the last day in the specified dateGranularity then the report end date will be expanded to include the last day of the reporting period for the dateGranularity specified. The last day of the reporting period for the WEEK dateGranularity is Saturday and the last day of the reporting period for the MONTH dateGranularity is the last day of the month. For example, if the specified dataEndTime is 3 days before the end date of a WEEK dateGranularity, the end date used to generate the report will be dataEndTime plus 3 days.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataEndTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DataEndTime { get; set; }

        /// <summary>
        /// This parameter must match the marketplaceId of the seller's account. This report type supports only one marketplaceId per report. Specifying multiple marketplaces will result in failure to generate the report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> MarketplaceIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReportSpecification FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReportSpecification>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ReportSpecificationReportType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GET_SALES_AND_TRAFFIC_REPORT")]
        GET_SALES_AND_TRAFFIC_REPORT = 0,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReportOptions
    {
        /// <summary>
        /// This parameter determines what granularity of the aggregated sales and traffic data is expected in the report. Valid values are: DAY, WEEK, MONTH. If this parameter is omitted, then the salesAndTrafficByDate section of this report will default to DAY granularity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateGranularity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReportOptionsDateGranularity DateGranularity { get; set; }

        /// <summary>
        /// This parameter determines what granularity of the ASIN sales and traffic data is expected in the report. Valid values are: PARENT, CHILD, SKU. If this parameter is omitted, then the salesAndTrafficByAsin section of this report will default to PARENT granularity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asinGranularity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReportOptionsAsinGranularity AsinGranularity { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReportOptions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReportOptions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ReportOptionsDateGranularity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DAY")]
        DAY = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"WEEK")]
        WEEK = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"MONTH")]
        MONTH = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ReportOptionsAsinGranularity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PARENT")]
        PARENT = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"CHILD")]
        CHILD = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"SKU")]
        SKU = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }
}