//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Amazon.SellingPartnerAPIAA.Clients.Schemas.Reports.B2bProductOpportunitiesRecommendedForYou20201119
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Provides B2B product recommendations based on predicted incremental units sold, unmet buyer demand, low offer count, and other factors for products already offered on Amazon. The recommendations are personalized to the Seller based on past sales activity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class B2bProductOpportunitiesRecommendedForYouReport20201119
    {
        /// <summary>
        /// A list of B2B product opportunity recommendation objects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recommendations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Recommendations> Recommendations { get; set; } = new System.Collections.ObjectModel.Collection<Recommendations>();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static B2bProductOpportunitiesRecommendedForYouReport20201119 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<B2bProductOpportunitiesRecommendedForYouReport20201119>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The recommendation result object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Recommendations
    {
        /// <summary>
        /// The Amazon Standard Identification Number (ASIN).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asin { get; set; }

        /// <summary>
        /// The title of the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemName { get; set; }

        /// <summary>
        /// A hyperlink to the Amazon product detail page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Link { get; set; }

        /// <summary>
        /// The brand name of the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Brand { get; set; }

        /// <summary>
        /// The primary product category (For example, Office Products).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        /// <summary>
        /// The secondary product category (For example, Computer Monitors).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubCategory { get; set; }

        /// <summary>
        /// The lowest priced offer on the product in the last week.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lowestPriceInTheLastWeek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LowestPriceInTheLastWeek LowestPriceInTheLastWeek { get; set; }

        /// <summary>
        /// A 'true' means at least one Fulfillment by Amazon (FBA) offer exists on the product. A 'false' means there are no FBA offers for the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasFBAOffer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasFBAOffer { get; set; }

        /// <summary>
        /// The total number of active offers on the product (including Amazon Retail).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offerCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OfferCount { get; set; }

        /// <summary>
        /// A 'true' means that an active Amazon (retail) offer exists on the product. A 'false' means there are no active Amazon offers for the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasAmazonOffer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasAmazonOffer { get; set; }

        /// <summary>
        /// This field will be equal to 'true' only if it has at least one offer from a seller who has adopted an automated solution for VAT invoice generation. This type of offer will guarantee that the buyer will have access to a downloadable VAT invoice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasOfferWithVatInvoiceGeneration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasOfferWithVatInvoiceGeneration { get; set; }

        /// <summary>
        /// The total number of customer reviews for the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reviewCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ReviewCount { get; set; }

        /// <summary>
        /// The sales rank of the product, at the Category level, based only on Amazon Business customer purchases.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("b2bSalesRank", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int B2bSalesRank { get; set; }

        /// <summary>
        /// A general measure of how much the business sales rank has grown (relative to other products in the category) over the past 30 days displayed as 'HIGH', 'MEDIUM', or 'LOW'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("b2bSalesRankGrowth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RecommendationsB2bSalesRankGrowth B2bSalesRankGrowth { get; set; }

        /// <summary>
        /// A general measure of how many times the product has been viewed in the past 30 days displayed as 'HIGH', 'MEDIUM', or 'LOW'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageViews", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RecommendationsPageViews PageViews { get; set; }

        /// <summary>
        /// The Manufacturer Part Number (MPN) of the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartNumber { get; set; }

        /// <summary>
        /// The European Article Number (EAN) of the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ean", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ean { get; set; }

        /// <summary>
        /// The Universal Product Code (UPC) of the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Upc { get; set; }

        /// <summary>
        /// The Model Number of the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modelNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModelNumber { get; set; }

        /// <summary>
        /// The International Standard Book Number (ISBN) of the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isbn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Isbn { get; set; }

        /// <summary>
        /// A 'true' means that the product shares a brand with at least one of your active offers. A 'false' means the product does not share a brand with any of your active offers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isBrandYouOffer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsBrandYouOffer { get; set; }

        /// <summary>
        /// A 'true' means the product shares a category with at least one of your active offers. A 'false' means the product does not share a category with any of your active offers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isCategoryYouOffer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsCategoryYouOffer { get; set; }

        /// <summary>
        /// A general measure of product sales to Amazon Business customers over the past 30 days displayed as 'TIER_1', 'TIER_2', and 'TIER_3' where 'TIER_1' is best performing and 'TIER_3' is least performing. Product performance is based on the business sales rank.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productPerformance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RecommendationsProductPerformance ProductPerformance { get; set; }

        /// <summary>
        /// A 'true' means the product is listed on Amazon. A 'false' means the product is not listed on Amazon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isProductOnAmazon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsProductOnAmazon { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Recommendations FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Recommendations>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LowestPriceInTheLastWeek
    {
        /// <summary>
        /// The currency amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }

        /// <summary>
        /// Three-digit currency code. In ISO 4217 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CurrencyCode { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LowestPriceInTheLastWeek FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LowestPriceInTheLastWeek>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RecommendationsB2bSalesRankGrowth
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RecommendationsPageViews
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RecommendationsProductPerformance
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TIER_1")]
        TIER_1 = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"TIER_2")]
        TIER_2 = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"TIER_3")]
        TIER_3 = 2,


    }
}