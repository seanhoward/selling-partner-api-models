//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Amazon.SellingPartnerAPIAA.Clients.Schemas.Reports.SellingPartnerSearchQueryPerformance
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Contains search query performance data at the ASIN level.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SearchQueryPerformanceData
    {
        /// <summary>
        /// The start date of the data for the ASIN that you specify.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// The end date of the data for the ASIN that you specify.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset EndDate { get; set; }

        /// <summary>
        /// A space-separated list of ASINs for which you can request the report. There is a 200-character limit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asin { get; set; }

        [Newtonsoft.Json.JsonProperty("searchQueryData", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SearchQueryData SearchQueryData { get; set; } = new SearchQueryData();

        [Newtonsoft.Json.JsonProperty("impressionData", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SearchQueryPerformanceImpressionData ImpressionData { get; set; } = new SearchQueryPerformanceImpressionData();

        [Newtonsoft.Json.JsonProperty("clickData", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SearchQueryPerformanceClickData ClickData { get; set; } = new SearchQueryPerformanceClickData();

        [Newtonsoft.Json.JsonProperty("cartAddData", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SearchQueryPerformanceCartAddData CartAddData { get; set; } = new SearchQueryPerformanceCartAddData();

        [Newtonsoft.Json.JsonProperty("purchaseData", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SearchQueryPerformancePurchaseData PurchaseData { get; set; } = new SearchQueryPerformancePurchaseData();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchQueryPerformanceData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchQueryPerformanceData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The search query data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SearchQueryData
    {
        /// <summary>
        /// A buying customerâ€™s search query that is relevant to your branded catalog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchQuery", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SearchQuery { get; set; }

        /// <summary>
        /// The rank for a search query in comparison to other queries for the ASIN. The ranking mechanism measures overall performance (the highest rank is 1).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchQueryScore", Required = Newtonsoft.Json.Required.Always)]
        public int SearchQueryScore { get; set; }

        /// <summary>
        /// The number of times customers search for a query at a select time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchQueryVolume", Required = Newtonsoft.Json.Required.Always)]
        public int SearchQueryVolume { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchQueryData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchQueryData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The search query performance impression data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SearchQueryPerformanceImpressionData
    {
        /// <summary>
        /// The total number of impressions that originate from the search results page for all ASINs with the current query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalQueryImpressionCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalQueryImpressionCount { get; set; }

        /// <summary>
        /// The total number of impressions that originate from the search results page for the current ASIN with the current query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asinImpressionCount", Required = Newtonsoft.Json.Required.Always)]
        public int AsinImpressionCount { get; set; }

        /// <summary>
        /// The fraction of impressions for the ASIN in comparison to the total impression count for the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asinImpressionShare", Required = Newtonsoft.Json.Required.Always)]
        public double AsinImpressionShare { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchQueryPerformanceImpressionData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchQueryPerformanceImpressionData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The search query performance click data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SearchQueryPerformanceClickData
    {
        /// <summary>
        /// For a search query, the number of ASIN clicks that originate from the search results page for any ASIN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalClickCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalClickCount { get; set; }

        /// <summary>
        /// For a search query, the number of clicks divided by the search query volume.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalClickRate", Required = Newtonsoft.Json.Required.Always)]
        public double TotalClickRate { get; set; }

        /// <summary>
        /// For a search query, the number of clicks for the current ASIN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asinClickCount", Required = Newtonsoft.Json.Required.Always)]
        public int AsinClickCount { get; set; }

        /// <summary>
        /// The fraction of clicks for the current ASIN in comparison to the total click count for the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asinClickShare", Required = Newtonsoft.Json.Required.Always)]
        public double AsinClickShare { get; set; }

        [Newtonsoft.Json.JsonProperty("totalMedianClickPrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CurrencyAmount TotalMedianClickPrice { get; set; } = new CurrencyAmount();

        [Newtonsoft.Json.JsonProperty("asinMedianClickPrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CurrencyAmount AsinMedianClickPrice { get; set; } = new CurrencyAmount();

        /// <summary>
        /// The number of times customers click on any ASIN with the same-day delivery message from the search results page for the specific query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSameDayShippingClickCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalSameDayShippingClickCount { get; set; }

        /// <summary>
        /// The number of times customers click on any ASIN with the one-day delivery message from the search results page for the specific query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalOneDayShippingClickCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalOneDayShippingClickCount { get; set; }

        /// <summary>
        /// The number of times customers click on any ASIN with the two-day delivery message from the search results page for the specific query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalTwoDayShippingClickCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalTwoDayShippingClickCount { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchQueryPerformanceClickData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchQueryPerformanceClickData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The search query performance cart add data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SearchQueryPerformanceCartAddData
    {
        /// <summary>
        /// For a search query, the number of cart-adds that originate from the search result page across all ASINs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalCartAddCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalCartAddCount { get; set; }

        /// <summary>
        /// For a search query, the number of cart-adds across all ASINs divided by the search query volume.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalCartAddRate", Required = Newtonsoft.Json.Required.Always)]
        public double TotalCartAddRate { get; set; }

        /// <summary>
        /// For a search query, the number of cart-adds for the ASIN that originates from the search results page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asinCartAddCount", Required = Newtonsoft.Json.Required.Always)]
        public int AsinCartAddCount { get; set; }

        /// <summary>
        /// The fraction of cart-adds for the ASIN in comparison to the total cart-add count for the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asinCartAddShare", Required = Newtonsoft.Json.Required.Always)]
        public double AsinCartAddShare { get; set; }

        [Newtonsoft.Json.JsonProperty("totalMedianCartAddPrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CurrencyAmount TotalMedianCartAddPrice { get; set; } = new CurrencyAmount();

        [Newtonsoft.Json.JsonProperty("asinMedianCartAddPrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CurrencyAmount AsinMedianCartAddPrice { get; set; } = new CurrencyAmount();

        /// <summary>
        /// The number of times customers add any ASIN with the same-day delivery message to a cart from the search results page for the specific query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSameDayShippingCartAddCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalSameDayShippingCartAddCount { get; set; }

        /// <summary>
        /// The number of times customers add any ASIN with the one-day delivery message to a cart from the search results page for the specific query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalOneDayShippingCartAddCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalOneDayShippingCartAddCount { get; set; }

        /// <summary>
        /// The number of times customers add any ASIN with the two-day delivery message to a cart from the search results page for the specific query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalTwoDayShippingCartAddCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalTwoDayShippingCartAddCount { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchQueryPerformanceCartAddData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchQueryPerformanceCartAddData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The search query performance purchase data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SearchQueryPerformancePurchaseData
    {
        /// <summary>
        /// For a search query, the number of purchases that originate from the search result for any ASIN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPurchaseCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalPurchaseCount { get; set; }

        /// <summary>
        /// For a search query, the number of purchases divided by the search query volume.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPurchaseRate", Required = Newtonsoft.Json.Required.Always)]
        public double TotalPurchaseRate { get; set; }

        /// <summary>
        /// For a search query, the number of purchases for the current ASIN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asinPurchaseCount", Required = Newtonsoft.Json.Required.Always)]
        public int AsinPurchaseCount { get; set; }

        /// <summary>
        /// The fraction of purchase actions for the ASIN in comparison to the total purchase count for the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asinPurchaseShare", Required = Newtonsoft.Json.Required.Always)]
        public double AsinPurchaseShare { get; set; }

        [Newtonsoft.Json.JsonProperty("totalMedianPurchasePrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CurrencyAmount TotalMedianPurchasePrice { get; set; } = new CurrencyAmount();

        [Newtonsoft.Json.JsonProperty("asinMedianPurchasePrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CurrencyAmount AsinMedianPurchasePrice { get; set; } = new CurrencyAmount();

        /// <summary>
        /// The number of times customers purchase any ASIN with the same-day delivery message from the search results page for the specific query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSameDayShippingPurchaseCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalSameDayShippingPurchaseCount { get; set; }

        /// <summary>
        /// The number of times customers purchase any ASIN with a one-day delivery message from the search results page for the specific query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalOneDayShippingPurchaseCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalOneDayShippingPurchaseCount { get; set; }

        /// <summary>
        /// The number of times customers purchase any ASIN with a two-day delivery message from the search results page for the specific query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalTwoDayShippingPurchaseCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalTwoDayShippingPurchaseCount { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchQueryPerformancePurchaseData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchQueryPerformancePurchaseData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents an amount of money in a specific currency.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyAmount
    {
        /// <summary>
        /// The monetary amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }

        /// <summary>
        /// The 3-letter currency code, in ISO 4217 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{3}")]
        public string CurrencyCode { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CurrencyAmount FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CurrencyAmount>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The Search Query Performance Report provides overall query performance, such as impressions, clicks, cart adds, and purchases for a list of Amazon Standard Identification Numbers (ASINs) and date range that you specify. Data is available at different reporting periods: WEEK, MONTH, and QUARTER. Requests cannot span multiple periods. For example, a request at the WEEK level cannot start on 2025-01-05 and end on 2025-01-18 as this request spans two weeks.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SellingPartnerSearchQueryPerformanceReport
    {
        /// <summary>
        /// Summarizes the original report request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportSpecification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ReportSpecification ReportSpecification { get; set; } = new ReportSpecification();

        [Newtonsoft.Json.JsonProperty("dataByAsin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SearchQueryPerformanceData> DataByAsin { get; set; } = new System.Collections.ObjectModel.Collection<SearchQueryPerformanceData>();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SellingPartnerSearchQueryPerformanceReport FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SellingPartnerSearchQueryPerformanceReport>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReportSpecification
    {
        /// <summary>
        /// The type of the report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReportSpecificationReportType ReportType { get; set; }

        /// <summary>
        /// The report options that specify parameters, such as reportPeriod and asin.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportOptions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ReportOptions ReportOptions { get; set; } = new ReportOptions();

        /// <summary>
        /// The start date of the report (Amazon ignores the time component). For WEEK, MONTH, and QUARTER reportPeriods, this value must correspond to the first day in the reportPeriod that you specify or else a fatal error returns. For example, dataStartTime must be a Sunday for the WEEK reportPeriod.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataStartTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DataStartTime { get; set; }

        /// <summary>
        /// The end date of the report (Amazon ignores the time component). For WEEK, MONTH, and QUARTER reportPeriods, this value must correspond to the last day in the reportPeriod that you specify or else a fatal error returns. For example, dataEndTime must be a Saturday for the WEEK reportPeriod.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataEndTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DataEndTime { get; set; }

        /// <summary>
        /// This parameter must match the marketplaceId of the selling partner account. This report type supports only one marketplaceId per report. If you specify multiple marketplaces, a fatal error returns and report generation fails.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> MarketplaceIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReportSpecification FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReportSpecification>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ReportSpecificationReportType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GET_BRAND_ANALYTICS_SEARCH_QUERY_PERFORMANCE_REPORT")]
        GET_BRAND_ANALYTICS_SEARCH_QUERY_PERFORMANCE_REPORT = 0,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReportOptions
    {
        /// <summary>
        /// The granularity of the data in the report. Valid values are WEEK, MONTH, and QUARTER.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportPeriod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReportOptionsReportPeriod ReportPeriod { get; set; }

        /// <summary>
        /// A space-separated list of ASINs for which you can request the report. There is a 200-character limit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asin { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReportOptions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReportOptions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ReportOptionsReportPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"WEEK")]
        WEEK = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"MONTH")]
        MONTH = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"QUARTER")]
        QUARTER = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }
}