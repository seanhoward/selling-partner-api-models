/* 
 * Selling Partner API for Sellers
 *
 * The [Selling Partner API for Sellers](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) (Sellers API) provides essential information about seller accounts, such as:  - The marketplaces a seller can list in - The default language and currency of a marketplace - Whether the seller has suspended listings  Refer to the [Sellers API reference](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) for details about this API's operations, data types, and schemas.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Sellers
{
    /// <summary>
    /// Attributes that define the seller&#39;s presence and status within a specific marketplace. These attributes include the marketplace details, store name, listing status, and the selling plan the seller is subscribed to.
    /// </summary>
    [DataContract]
    public partial class MarketplaceLevelAttributes :  IEquatable<MarketplaceLevelAttributes>, IValidatableObject
    {
        /// <summary>
        /// The current status of the seller&#39;s listings.
        /// </summary>
        /// <value>The current status of the seller&#39;s listings.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ListingStatusEnum
        {
            
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,
            
            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 2
        }

        /// <summary>
        /// The current status of the seller&#39;s listings.
        /// </summary>
        /// <value>The current status of the seller&#39;s listings.</value>
        [DataMember(Name="listingStatus", EmitDefaultValue=false)]
        public ListingStatusEnum ListingStatus { get; set; }
        /// <summary>
        /// The selling plan details.
        /// </summary>
        /// <value>The selling plan details.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SellingPlanEnum
        {
            
            /// <summary>
            /// Enum PROFESSIONAL for value: PROFESSIONAL
            /// </summary>
            [EnumMember(Value = "PROFESSIONAL")]
            PROFESSIONAL = 1,
            
            /// <summary>
            /// Enum INDIVIDUAL for value: INDIVIDUAL
            /// </summary>
            [EnumMember(Value = "INDIVIDUAL")]
            INDIVIDUAL = 2
        }

        /// <summary>
        /// The selling plan details.
        /// </summary>
        /// <value>The selling plan details.</value>
        [DataMember(Name="sellingPlan", EmitDefaultValue=false)]
        public SellingPlanEnum SellingPlan { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceLevelAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MarketplaceLevelAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceLevelAttributes" /> class.
        /// </summary>
        /// <param name="marketplace">marketplace (required).</param>
        /// <param name="storeName">The name of the seller&#39;s store as displayed in the marketplace. (required).</param>
        /// <param name="listingStatus">The current status of the seller&#39;s listings. (required).</param>
        /// <param name="sellingPlan">The selling plan details. (required).</param>
        public MarketplaceLevelAttributes(Marketplace marketplace = default(Marketplace), string storeName = default(string), ListingStatusEnum listingStatus = default(ListingStatusEnum), SellingPlanEnum sellingPlan = default(SellingPlanEnum))
        {
            // to ensure "marketplace" is required (not null)
            if (marketplace == null)
            {
                throw new InvalidDataException("marketplace is a required property for MarketplaceLevelAttributes and cannot be null");
            }
            else
            {
                this.Marketplace = marketplace;
            }
            // to ensure "storeName" is required (not null)
            if (storeName == null)
            {
                throw new InvalidDataException("storeName is a required property for MarketplaceLevelAttributes and cannot be null");
            }
            else
            {
                this.StoreName = storeName;
            }
            // to ensure "listingStatus" is required (not null)
            if (listingStatus == null)
            {
                throw new InvalidDataException("listingStatus is a required property for MarketplaceLevelAttributes and cannot be null");
            }
            else
            {
                this.ListingStatus = listingStatus;
            }
            // to ensure "sellingPlan" is required (not null)
            if (sellingPlan == null)
            {
                throw new InvalidDataException("sellingPlan is a required property for MarketplaceLevelAttributes and cannot be null");
            }
            else
            {
                this.SellingPlan = sellingPlan;
            }
        }
        
        /// <summary>
        /// Gets or Sets Marketplace
        /// </summary>
        [DataMember(Name="marketplace", EmitDefaultValue=false)]
        public Marketplace Marketplace { get; set; }

        /// <summary>
        /// The name of the seller&#39;s store as displayed in the marketplace.
        /// </summary>
        /// <value>The name of the seller&#39;s store as displayed in the marketplace.</value>
        [DataMember(Name="storeName", EmitDefaultValue=false)]
        public string StoreName { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarketplaceLevelAttributes {\n");
            sb.Append("  Marketplace: ").Append(Marketplace).Append("\n");
            sb.Append("  StoreName: ").Append(StoreName).Append("\n");
            sb.Append("  ListingStatus: ").Append(ListingStatus).Append("\n");
            sb.Append("  SellingPlan: ").Append(SellingPlan).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketplaceLevelAttributes);
        }

        /// <summary>
        /// Returns true if MarketplaceLevelAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketplaceLevelAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketplaceLevelAttributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Marketplace == input.Marketplace ||
                    (this.Marketplace != null &&
                    this.Marketplace.Equals(input.Marketplace))
                ) && 
                (
                    this.StoreName == input.StoreName ||
                    (this.StoreName != null &&
                    this.StoreName.Equals(input.StoreName))
                ) && 
                (
                    this.ListingStatus == input.ListingStatus ||
                    (this.ListingStatus != null &&
                    this.ListingStatus.Equals(input.ListingStatus))
                ) && 
                (
                    this.SellingPlan == input.SellingPlan ||
                    (this.SellingPlan != null &&
                    this.SellingPlan.Equals(input.SellingPlan))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Marketplace != null)
                    hashCode = hashCode * 59 + this.Marketplace.GetHashCode();
                if (this.StoreName != null)
                    hashCode = hashCode * 59 + this.StoreName.GetHashCode();
                if (this.ListingStatus != null)
                    hashCode = hashCode * 59 + this.ListingStatus.GetHashCode();
                if (this.SellingPlan != null)
                    hashCode = hashCode * 59 + this.SellingPlan.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
