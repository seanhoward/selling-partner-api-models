/* 
 * Selling Partner API for Sellers
 *
 * The [Selling Partner API for Sellers](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) (Sellers API) provides essential information about seller accounts, such as:  - The marketplaces a seller can list in - The default language and currency of a marketplace - Whether the seller has suspended listings  Refer to the [Sellers API reference](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) for details about this API's operations, data types, and schemas.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Sellers
{
    /// <summary>
    /// Information that is specific to a seller in a marketplace.
    /// </summary>
    [DataContract]
    public partial class Participation :  IEquatable<Participation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Participation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Participation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Participation" /> class.
        /// </summary>
        /// <param name="isParticipating">If &#x60;true&#x60;, the seller participates in the marketplace. Otherwise &#x60;false&#x60;. (required).</param>
        /// <param name="hasSuspendedListings">Specifies if the seller has suspended listings. &#x60;true&#x60; if the seller Listing Status is set to Inactive, otherwise &#x60;false&#x60;. (required).</param>
        public Participation(bool? isParticipating = default(bool?), bool? hasSuspendedListings = default(bool?))
        {
            // to ensure "isParticipating" is required (not null)
            if (isParticipating == null)
            {
                throw new InvalidDataException("isParticipating is a required property for Participation and cannot be null");
            }
            else
            {
                this.IsParticipating = isParticipating;
            }
            // to ensure "hasSuspendedListings" is required (not null)
            if (hasSuspendedListings == null)
            {
                throw new InvalidDataException("hasSuspendedListings is a required property for Participation and cannot be null");
            }
            else
            {
                this.HasSuspendedListings = hasSuspendedListings;
            }
        }
        
        /// <summary>
        /// If &#x60;true&#x60;, the seller participates in the marketplace. Otherwise &#x60;false&#x60;.
        /// </summary>
        /// <value>If &#x60;true&#x60;, the seller participates in the marketplace. Otherwise &#x60;false&#x60;.</value>
        [DataMember(Name="isParticipating", EmitDefaultValue=false)]
        public bool? IsParticipating { get; set; }

        /// <summary>
        /// Specifies if the seller has suspended listings. &#x60;true&#x60; if the seller Listing Status is set to Inactive, otherwise &#x60;false&#x60;.
        /// </summary>
        /// <value>Specifies if the seller has suspended listings. &#x60;true&#x60; if the seller Listing Status is set to Inactive, otherwise &#x60;false&#x60;.</value>
        [DataMember(Name="hasSuspendedListings", EmitDefaultValue=false)]
        public bool? HasSuspendedListings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Participation {\n");
            sb.Append("  IsParticipating: ").Append(IsParticipating).Append("\n");
            sb.Append("  HasSuspendedListings: ").Append(HasSuspendedListings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Participation);
        }

        /// <summary>
        /// Returns true if Participation instances are equal
        /// </summary>
        /// <param name="input">Instance of Participation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Participation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsParticipating == input.IsParticipating ||
                    (this.IsParticipating != null &&
                    this.IsParticipating.Equals(input.IsParticipating))
                ) && 
                (
                    this.HasSuspendedListings == input.HasSuspendedListings ||
                    (this.HasSuspendedListings != null &&
                    this.HasSuspendedListings.Equals(input.HasSuspendedListings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsParticipating != null)
                    hashCode = hashCode * 59 + this.IsParticipating.GetHashCode();
                if (this.HasSuspendedListings != null)
                    hashCode = hashCode * 59 + this.HasSuspendedListings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
