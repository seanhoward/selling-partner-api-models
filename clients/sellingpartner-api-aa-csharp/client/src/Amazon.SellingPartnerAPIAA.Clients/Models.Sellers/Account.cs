/* 
 * The Selling Partner API for Sellers
 *
 * The Selling Partner API for Sellers lets you retrieve information on behalf of sellers about their seller account, such as the marketplaces they participate in. Along with listing the marketplaces that a seller can sell in, the API also provides additional information about the marketplace such as the default language and the default currency. The API also provides seller-specific information such as whether the seller has suspended listings in that marketplace.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Sellers
{
    /// <summary>
    /// The response schema for the &#x60;getAccount&#x60; operation.
    /// </summary>
    [DataContract]
    public partial class Account :  IEquatable<Account>, IValidatableObject
    {
        /// <summary>
        /// The type of business registered for the seller account.
        /// </summary>
        /// <value>The type of business registered for the seller account.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BusinessTypeEnum
        {
            
            /// <summary>
            /// Enum CHARITY for value: CHARITY
            /// </summary>
            [EnumMember(Value = "CHARITY")]
            CHARITY = 1,
            
            /// <summary>
            /// Enum CRAFTSMAN for value: CRAFTSMAN
            /// </summary>
            [EnumMember(Value = "CRAFTSMAN")]
            CRAFTSMAN = 2,
            
            /// <summary>
            /// Enum NATURALPERSONCOMPANY for value: NATURAL_PERSON_COMPANY
            /// </summary>
            [EnumMember(Value = "NATURAL_PERSON_COMPANY")]
            NATURALPERSONCOMPANY = 3,
            
            /// <summary>
            /// Enum PUBLICLISTED for value: PUBLIC_LISTED
            /// </summary>
            [EnumMember(Value = "PUBLIC_LISTED")]
            PUBLICLISTED = 4,
            
            /// <summary>
            /// Enum PRIVATELIMITED for value: PRIVATE_LIMITED
            /// </summary>
            [EnumMember(Value = "PRIVATE_LIMITED")]
            PRIVATELIMITED = 5,
            
            /// <summary>
            /// Enum SOLEPROPRIETORSHIP for value: SOLE_PROPRIETORSHIP
            /// </summary>
            [EnumMember(Value = "SOLE_PROPRIETORSHIP")]
            SOLEPROPRIETORSHIP = 6,
            
            /// <summary>
            /// Enum STATEOWNED for value: STATE_OWNED
            /// </summary>
            [EnumMember(Value = "STATE_OWNED")]
            STATEOWNED = 7,
            
            /// <summary>
            /// Enum INDIVIDUAL for value: INDIVIDUAL
            /// </summary>
            [EnumMember(Value = "INDIVIDUAL")]
            INDIVIDUAL = 8
        }

        /// <summary>
        /// The type of business registered for the seller account.
        /// </summary>
        /// <value>The type of business registered for the seller account.</value>
        [DataMember(Name="businessType", EmitDefaultValue=false)]
        public BusinessTypeEnum BusinessType { get; set; }
        /// <summary>
        /// The selling plan details.
        /// </summary>
        /// <value>The selling plan details.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SellingPlanEnum
        {
            
            /// <summary>
            /// Enum PROFESSIONAL for value: PROFESSIONAL
            /// </summary>
            [EnumMember(Value = "PROFESSIONAL")]
            PROFESSIONAL = 1,
            
            /// <summary>
            /// Enum INDIVIDUAL for value: INDIVIDUAL
            /// </summary>
            [EnumMember(Value = "INDIVIDUAL")]
            INDIVIDUAL = 2
        }

        /// <summary>
        /// The selling plan details.
        /// </summary>
        /// <value>The selling plan details.</value>
        [DataMember(Name="sellingPlan", EmitDefaultValue=false)]
        public SellingPlanEnum SellingPlan { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Account() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        /// <param name="marketplaceParticipationList">marketplaceParticipationList (required).</param>
        /// <param name="businessType">The type of business registered for the seller account. (required).</param>
        /// <param name="sellingPlan">The selling plan details. (required).</param>
        /// <param name="business">business.</param>
        /// <param name="primaryContact">primaryContact.</param>
        public Account(MarketplaceParticipationList marketplaceParticipationList = default(MarketplaceParticipationList), BusinessTypeEnum businessType = default(BusinessTypeEnum), SellingPlanEnum sellingPlan = default(SellingPlanEnum), Business business = default(Business), PrimaryContact primaryContact = default(PrimaryContact))
        {
            // to ensure "marketplaceParticipationList" is required (not null)
            if (marketplaceParticipationList == null)
            {
                throw new InvalidDataException("marketplaceParticipationList is a required property for Account and cannot be null");
            }
            else
            {
                this.MarketplaceParticipationList = marketplaceParticipationList;
            }
            // to ensure "businessType" is required (not null)
            if (businessType == null)
            {
                throw new InvalidDataException("businessType is a required property for Account and cannot be null");
            }
            else
            {
                this.BusinessType = businessType;
            }
            // to ensure "sellingPlan" is required (not null)
            if (sellingPlan == null)
            {
                throw new InvalidDataException("sellingPlan is a required property for Account and cannot be null");
            }
            else
            {
                this.SellingPlan = sellingPlan;
            }
            this.Business = business;
            this.PrimaryContact = primaryContact;
        }
        
        /// <summary>
        /// Gets or Sets MarketplaceParticipationList
        /// </summary>
        [DataMember(Name="marketplaceParticipationList", EmitDefaultValue=false)]
        public MarketplaceParticipationList MarketplaceParticipationList { get; set; }



        /// <summary>
        /// Gets or Sets Business
        /// </summary>
        [DataMember(Name="business", EmitDefaultValue=false)]
        public Business Business { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryContact
        /// </summary>
        [DataMember(Name="primaryContact", EmitDefaultValue=false)]
        public PrimaryContact PrimaryContact { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  MarketplaceParticipationList: ").Append(MarketplaceParticipationList).Append("\n");
            sb.Append("  BusinessType: ").Append(BusinessType).Append("\n");
            sb.Append("  SellingPlan: ").Append(SellingPlan).Append("\n");
            sb.Append("  Business: ").Append(Business).Append("\n");
            sb.Append("  PrimaryContact: ").Append(PrimaryContact).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Account);
        }

        /// <summary>
        /// Returns true if Account instances are equal
        /// </summary>
        /// <param name="input">Instance of Account to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Account input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MarketplaceParticipationList == input.MarketplaceParticipationList ||
                    (this.MarketplaceParticipationList != null &&
                    this.MarketplaceParticipationList.Equals(input.MarketplaceParticipationList))
                ) && 
                (
                    this.BusinessType == input.BusinessType ||
                    (this.BusinessType != null &&
                    this.BusinessType.Equals(input.BusinessType))
                ) && 
                (
                    this.SellingPlan == input.SellingPlan ||
                    (this.SellingPlan != null &&
                    this.SellingPlan.Equals(input.SellingPlan))
                ) && 
                (
                    this.Business == input.Business ||
                    (this.Business != null &&
                    this.Business.Equals(input.Business))
                ) && 
                (
                    this.PrimaryContact == input.PrimaryContact ||
                    (this.PrimaryContact != null &&
                    this.PrimaryContact.Equals(input.PrimaryContact))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceParticipationList != null)
                    hashCode = hashCode * 59 + this.MarketplaceParticipationList.GetHashCode();
                if (this.BusinessType != null)
                    hashCode = hashCode * 59 + this.BusinessType.GetHashCode();
                if (this.SellingPlan != null)
                    hashCode = hashCode * 59 + this.SellingPlan.GetHashCode();
                if (this.Business != null)
                    hashCode = hashCode * 59 + this.Business.GetHashCode();
                if (this.PrimaryContact != null)
                    hashCode = hashCode * 59 + this.PrimaryContact.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
