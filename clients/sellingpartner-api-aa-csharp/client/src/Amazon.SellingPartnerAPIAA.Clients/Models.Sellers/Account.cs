/* 
 * Selling Partner API for Sellers
 *
 * The [Selling Partner API for Sellers](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) (Sellers API) provides essential information about seller accounts, such as:  - The marketplaces a seller can list in - The default language and currency of a marketplace - Whether the seller has suspended listings  Refer to the [Sellers API reference](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) for details about this API's operations, data types, and schemas.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Sellers
{
    /// <summary>
    /// The response schema for the &#x60;getAccount&#x60; operation.
    /// </summary>
    [DataContract]
    public partial class Account :  IEquatable<Account>, IValidatableObject
    {
        /// <summary>
        /// The type of business registered for the seller account.
        /// </summary>
        /// <value>The type of business registered for the seller account.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BusinessTypeEnum
        {
            
            /// <summary>
            /// Enum CHARITY for value: CHARITY
            /// </summary>
            [EnumMember(Value = "CHARITY")]
            CHARITY = 1,
            
            /// <summary>
            /// Enum CRAFTSMAN for value: CRAFTSMAN
            /// </summary>
            [EnumMember(Value = "CRAFTSMAN")]
            CRAFTSMAN = 2,
            
            /// <summary>
            /// Enum NATURALPERSONCOMPANY for value: NATURAL_PERSON_COMPANY
            /// </summary>
            [EnumMember(Value = "NATURAL_PERSON_COMPANY")]
            NATURALPERSONCOMPANY = 3,
            
            /// <summary>
            /// Enum PUBLICLISTED for value: PUBLIC_LISTED
            /// </summary>
            [EnumMember(Value = "PUBLIC_LISTED")]
            PUBLICLISTED = 4,
            
            /// <summary>
            /// Enum PRIVATELIMITED for value: PRIVATE_LIMITED
            /// </summary>
            [EnumMember(Value = "PRIVATE_LIMITED")]
            PRIVATELIMITED = 5,
            
            /// <summary>
            /// Enum SOLEPROPRIETORSHIP for value: SOLE_PROPRIETORSHIP
            /// </summary>
            [EnumMember(Value = "SOLE_PROPRIETORSHIP")]
            SOLEPROPRIETORSHIP = 6,
            
            /// <summary>
            /// Enum STATEOWNED for value: STATE_OWNED
            /// </summary>
            [EnumMember(Value = "STATE_OWNED")]
            STATEOWNED = 7,
            
            /// <summary>
            /// Enum INDIVIDUAL for value: INDIVIDUAL
            /// </summary>
            [EnumMember(Value = "INDIVIDUAL")]
            INDIVIDUAL = 8
        }

        /// <summary>
        /// The type of business registered for the seller account.
        /// </summary>
        /// <value>The type of business registered for the seller account.</value>
        [DataMember(Name="businessType", EmitDefaultValue=false)]
        public BusinessTypeEnum BusinessType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Account() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        /// <param name="marketplaceLevelAttributes">A list of details of the marketplaces where the seller account is active. (required).</param>
        /// <param name="businessType">The type of business registered for the seller account. (required).</param>
        /// <param name="business">business.</param>
        /// <param name="primaryContact">primaryContact.</param>
        public Account(List<MarketplaceLevelAttributes> marketplaceLevelAttributes = default(List<MarketplaceLevelAttributes>), BusinessTypeEnum businessType = default(BusinessTypeEnum), Business business = default(Business), PrimaryContact primaryContact = default(PrimaryContact))
        {
            // to ensure "marketplaceLevelAttributes" is required (not null)
            if (marketplaceLevelAttributes == null)
            {
                throw new InvalidDataException("marketplaceLevelAttributes is a required property for Account and cannot be null");
            }
            else
            {
                this.MarketplaceLevelAttributes = marketplaceLevelAttributes;
            }
            // to ensure "businessType" is required (not null)
            if (businessType == null)
            {
                throw new InvalidDataException("businessType is a required property for Account and cannot be null");
            }
            else
            {
                this.BusinessType = businessType;
            }
            this.Business = business;
            this.PrimaryContact = primaryContact;
        }
        
        /// <summary>
        /// A list of details of the marketplaces where the seller account is active.
        /// </summary>
        /// <value>A list of details of the marketplaces where the seller account is active.</value>
        [DataMember(Name="marketplaceLevelAttributes", EmitDefaultValue=false)]
        public List<MarketplaceLevelAttributes> MarketplaceLevelAttributes { get; set; }


        /// <summary>
        /// Gets or Sets Business
        /// </summary>
        [DataMember(Name="business", EmitDefaultValue=false)]
        public Business Business { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryContact
        /// </summary>
        [DataMember(Name="primaryContact", EmitDefaultValue=false)]
        public PrimaryContact PrimaryContact { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  MarketplaceLevelAttributes: ").Append(MarketplaceLevelAttributes).Append("\n");
            sb.Append("  BusinessType: ").Append(BusinessType).Append("\n");
            sb.Append("  Business: ").Append(Business).Append("\n");
            sb.Append("  PrimaryContact: ").Append(PrimaryContact).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Account);
        }

        /// <summary>
        /// Returns true if Account instances are equal
        /// </summary>
        /// <param name="input">Instance of Account to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Account input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MarketplaceLevelAttributes == input.MarketplaceLevelAttributes ||
                    this.MarketplaceLevelAttributes != null &&
                    this.MarketplaceLevelAttributes.SequenceEqual(input.MarketplaceLevelAttributes)
                ) && 
                (
                    this.BusinessType == input.BusinessType ||
                    (this.BusinessType != null &&
                    this.BusinessType.Equals(input.BusinessType))
                ) && 
                (
                    this.Business == input.Business ||
                    (this.Business != null &&
                    this.Business.Equals(input.Business))
                ) && 
                (
                    this.PrimaryContact == input.PrimaryContact ||
                    (this.PrimaryContact != null &&
                    this.PrimaryContact.Equals(input.PrimaryContact))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceLevelAttributes != null)
                    hashCode = hashCode * 59 + this.MarketplaceLevelAttributes.GetHashCode();
                if (this.BusinessType != null)
                    hashCode = hashCode * 59 + this.BusinessType.GetHashCode();
                if (this.Business != null)
                    hashCode = hashCode * 59 + this.Business.GetHashCode();
                if (this.PrimaryContact != null)
                    hashCode = hashCode * 59 + this.PrimaryContact.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
