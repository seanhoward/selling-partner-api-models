/* 
 * The Selling Partner API for CustomerFeedback
 *
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * OpenAPI spec version: 2024-06-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.CustomerFeedback
{
    /// <summary>
    /// The response for the &#x60;getItemBrowseNode&#x60; operation.
    /// </summary>
    [DataContract]
    public partial class BrowseNodeResponse : IEquatable<BrowseNodeResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrowseNodeResponse" /> class.
        /// </summary>
        [JsonConstructor]
        protected BrowseNodeResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrowseNodeResponse" /> class.
        /// </summary>
        /// <param name="browseNodeId">A browse node id is the unique identifier of a given browse node. A browse node is a location in a browse tree that is used for navigation, product classification, and website content. (required).</param>
        /// <param name="displayName">The display name of the browse node as visible on the Amazon retail website. (required).</param>
        public BrowseNodeResponse(string browseNodeId = default, string displayName = default)
        {
            // to ensure "browseNodeId" is required (not null)
            if (browseNodeId == null)
            {
                throw new InvalidDataException("browseNodeId is a required property for BrowseNodeResponse and cannot be null");
            }
            else
            {
                this.BrowseNodeId = browseNodeId;
            }
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new InvalidDataException("displayName is a required property for BrowseNodeResponse and cannot be null");
            }
            else
            {
                this.DisplayName = displayName;
            }
        }

        /// <summary>
        /// A browse node id is the unique identifier of a given browse node. A browse node is a location in a browse tree that is used for navigation, product classification, and website content.
        /// </summary>
        /// <value>A browse node id is the unique identifier of a given browse node. A browse node is a location in a browse tree that is used for navigation, product classification, and website content.</value>
        [DataMember(Name = "browseNodeId", EmitDefaultValue = false)]
        public string BrowseNodeId { get; set; }

        /// <summary>
        /// The display name of the browse node as visible on the Amazon retail website.
        /// </summary>
        /// <value>The display name of the browse node as visible on the Amazon retail website.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrowseNodeResponse {\n");
            sb.Append("  BrowseNodeId: ").Append(BrowseNodeId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrowseNodeResponse);
        }

        /// <summary>
        /// Returns true if BrowseNodeResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BrowseNodeResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrowseNodeResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    this.BrowseNodeId == input.BrowseNodeId ||
                    (this.BrowseNodeId != null &&
                    this.BrowseNodeId.Equals(input.BrowseNodeId))
                ) &&
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BrowseNodeId != null)
                    hashCode = hashCode * 59 + this.BrowseNodeId.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
