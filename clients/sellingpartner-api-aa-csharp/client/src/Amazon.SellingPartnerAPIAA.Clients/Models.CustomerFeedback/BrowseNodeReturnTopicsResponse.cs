/* 
 * The Selling Partner API for CustomerFeedback
 *
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * OpenAPI spec version: 2024-06-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.CustomerFeedback
{
    /// <summary>
    /// The response for the &#x60;getBrowseNodeReturnTopics&#x60; operation.
    /// </summary>
    [DataContract]
    public partial class BrowseNodeReturnTopicsResponse : IEquatable<BrowseNodeReturnTopicsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrowseNodeReturnTopicsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BrowseNodeReturnTopicsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrowseNodeReturnTopicsResponse" /> class.
        /// </summary>
        /// <param name="browseNodeId">The requested browse node id. A browse node id is the unique identifier of a given browse node. (required).</param>
        /// <param name="displayName">The display name of the browse node, as visible on the Amazon retail website. (required).</param>
        /// <param name="marketplaceId">The requested marketplace id. (required).</param>
        /// <param name="countryCode">The two digit country code of requested marketplace id, in ISO 3166-1 alpha-2 format. (required).</param>
        /// <param name="dateRange">The range of dates during which the returns were made. (required).</param>
        /// <param name="topics">The list of browse node return topics. (required).</param>
        public BrowseNodeReturnTopicsResponse(string browseNodeId = default, string displayName = default, string marketplaceId = default, string countryCode = default, DateRange dateRange = default, List<BrowseNodeReturnTopics> topics = default)
        {
            // to ensure "browseNodeId" is required (not null)
            if (browseNodeId == null)
            {
                throw new InvalidDataException("browseNodeId is a required property for BrowseNodeReturnTopicsResponse and cannot be null");
            }
            else
            {
                this.BrowseNodeId = browseNodeId;
            }
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new InvalidDataException("displayName is a required property for BrowseNodeReturnTopicsResponse and cannot be null");
            }
            else
            {
                this.DisplayName = displayName;
            }
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for BrowseNodeReturnTopicsResponse and cannot be null");
            }
            else
            {
                this.MarketplaceId = marketplaceId;
            }
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new InvalidDataException("countryCode is a required property for BrowseNodeReturnTopicsResponse and cannot be null");
            }
            else
            {
                this.CountryCode = countryCode;
            }
            // to ensure "dateRange" is required (not null)
            if (dateRange == null)
            {
                throw new InvalidDataException("dateRange is a required property for BrowseNodeReturnTopicsResponse and cannot be null");
            }
            else
            {
                this.DateRange = dateRange;
            }
            // to ensure "topics" is required (not null)
            if (topics == null)
            {
                throw new InvalidDataException("topics is a required property for BrowseNodeReturnTopicsResponse and cannot be null");
            }
            else
            {
                this.Topics = topics;
            }
        }

        /// <summary>
        /// The requested browse node id. A browse node id is the unique identifier of a given browse node.
        /// </summary>
        /// <value>The requested browse node id. A browse node id is the unique identifier of a given browse node.</value>
        [DataMember(Name = "browseNodeId", EmitDefaultValue = false)]
        public string BrowseNodeId { get; set; }

        /// <summary>
        /// The display name of the browse node, as visible on the Amazon retail website.
        /// </summary>
        /// <value>The display name of the browse node, as visible on the Amazon retail website.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The requested marketplace id.
        /// </summary>
        /// <value>The requested marketplace id.</value>
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The two digit country code of requested marketplace id, in ISO 3166-1 alpha-2 format.
        /// </summary>
        /// <value>The two digit country code of requested marketplace id, in ISO 3166-1 alpha-2 format.</value>
        [DataMember(Name = "countryCode", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The range of dates during which the returns were made.
        /// </summary>
        /// <value>The range of dates during which the returns were made.</value>
        [DataMember(Name = "dateRange", EmitDefaultValue = false)]
        public DateRange DateRange { get; set; }

        /// <summary>
        /// The list of browse node return topics.
        /// </summary>
        /// <value>The list of browse node return topics.</value>
        [DataMember(Name = "topics", EmitDefaultValue = false)]
        public List<BrowseNodeReturnTopics> Topics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrowseNodeReturnTopicsResponse {\n");
            sb.Append("  BrowseNodeId: ").Append(BrowseNodeId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  DateRange: ").Append(DateRange).Append("\n");
            sb.Append("  Topics: ").Append(Topics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrowseNodeReturnTopicsResponse);
        }

        /// <summary>
        /// Returns true if BrowseNodeReturnTopicsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BrowseNodeReturnTopicsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrowseNodeReturnTopicsResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    this.BrowseNodeId == input.BrowseNodeId ||
                    (this.BrowseNodeId != null &&
                    this.BrowseNodeId.Equals(input.BrowseNodeId))
                ) &&
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) &&
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) &&
                (
                    this.DateRange == input.DateRange ||
                    (this.DateRange != null &&
                    this.DateRange.Equals(input.DateRange))
                ) &&
                (
                    this.Topics == input.Topics ||
                    this.Topics != null &&
                    this.Topics.SequenceEqual(input.Topics)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BrowseNodeId != null)
                    hashCode = hashCode * 59 + this.BrowseNodeId.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.DateRange != null)
                    hashCode = hashCode * 59 + this.DateRange.GetHashCode();
                if (this.Topics != null)
                    hashCode = hashCode * 59 + this.Topics.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
