/* 
 * The Selling Partner API for CustomerFeedback
 *
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * OpenAPI spec version: 2024-06-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.CustomerFeedback
{
    /// <summary>
    /// The trend of review topic metrics for all items in the requested browse node.
    /// </summary>
    [DataContract]
    public partial class BrowseNodeReviewTrend : IEquatable<BrowseNodeReviewTrend>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrowseNodeReviewTrend" /> class.
        /// </summary>
        [JsonConstructor]
        protected BrowseNodeReviewTrend() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrowseNodeReviewTrend" /> class.
        /// </summary>
        /// <param name="topic">The name of the topic. (required).</param>
        /// <param name="trendMetrics">The browse node&#39;s review trend metrics for the past six months. (required).</param>
        public BrowseNodeReviewTrend(string topic = default, List<BrowseNodeReviewTrendPoint> trendMetrics = default)
        {
            // to ensure "topic" is required (not null)
            if (topic == null)
            {
                throw new InvalidDataException("topic is a required property for BrowseNodeReviewTrend and cannot be null");
            }
            else
            {
                this.Topic = topic;
            }
            // to ensure "trendMetrics" is required (not null)
            if (trendMetrics == null)
            {
                throw new InvalidDataException("trendMetrics is a required property for BrowseNodeReviewTrend and cannot be null");
            }
            else
            {
                this.TrendMetrics = trendMetrics;
            }
        }

        /// <summary>
        /// The name of the topic.
        /// </summary>
        /// <value>The name of the topic.</value>
        [DataMember(Name = "topic", EmitDefaultValue = false)]
        public string Topic { get; set; }

        /// <summary>
        /// The browse node&#39;s review trend metrics for the past six months.
        /// </summary>
        /// <value>The browse node&#39;s review trend metrics for the past six months.</value>
        [DataMember(Name = "trendMetrics", EmitDefaultValue = false)]
        public List<BrowseNodeReviewTrendPoint> TrendMetrics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrowseNodeReviewTrend {\n");
            sb.Append("  Topic: ").Append(Topic).Append("\n");
            sb.Append("  TrendMetrics: ").Append(TrendMetrics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrowseNodeReviewTrend);
        }

        /// <summary>
        /// Returns true if BrowseNodeReviewTrend instances are equal
        /// </summary>
        /// <param name="input">Instance of BrowseNodeReviewTrend to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrowseNodeReviewTrend input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Topic == input.Topic ||
                    (this.Topic != null &&
                    this.Topic.Equals(input.Topic))
                ) &&
                (
                    this.TrendMetrics == input.TrendMetrics ||
                    this.TrendMetrics != null &&
                    this.TrendMetrics.SequenceEqual(input.TrendMetrics)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Topic != null)
                    hashCode = hashCode * 59 + this.Topic.GetHashCode();
                if (this.TrendMetrics != null)
                    hashCode = hashCode * 59 + this.TrendMetrics.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
