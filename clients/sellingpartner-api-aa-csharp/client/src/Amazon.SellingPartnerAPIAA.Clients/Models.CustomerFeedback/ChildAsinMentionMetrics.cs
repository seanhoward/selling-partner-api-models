/* 
 * The Selling Partner API for CustomerFeedback
 *
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * OpenAPI spec version: 2024-06-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.CustomerFeedback
{
    /// <summary>
    /// The child ASIN review topic mention metrics.
    /// </summary>
    [DataContract]
    public partial class ChildAsinMentionMetrics : IEquatable<ChildAsinMentionMetrics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChildAsinMentionMetrics" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChildAsinMentionMetrics() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChildAsinMentionMetrics" /> class.
        /// </summary>
        /// <param name="asin">The child ASIN of the requested item. (required).</param>
        /// <param name="numberOfMentions">The number of times reviews of the child ASIN mention the topic. (required).</param>
        public ChildAsinMentionMetrics(string asin = default, int? numberOfMentions = default)
        {
            // to ensure "asin" is required (not null)
            if (asin == null)
            {
                throw new InvalidDataException("asin is a required property for ChildAsinMentionMetrics and cannot be null");
            }
            else
            {
                this.Asin = asin;
            }
            // to ensure "numberOfMentions" is required (not null)
            if (numberOfMentions == null)
            {
                throw new InvalidDataException("numberOfMentions is a required property for ChildAsinMentionMetrics and cannot be null");
            }
            else
            {
                this.NumberOfMentions = numberOfMentions;
            }
        }

        /// <summary>
        /// The child ASIN of the requested item.
        /// </summary>
        /// <value>The child ASIN of the requested item.</value>
        [DataMember(Name = "asin", EmitDefaultValue = false)]
        public string Asin { get; set; }

        /// <summary>
        /// The number of times reviews of the child ASIN mention the topic.
        /// </summary>
        /// <value>The number of times reviews of the child ASIN mention the topic.</value>
        [DataMember(Name = "numberOfMentions", EmitDefaultValue = false)]
        public int? NumberOfMentions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChildAsinMentionMetrics {\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  NumberOfMentions: ").Append(NumberOfMentions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChildAsinMentionMetrics);
        }

        /// <summary>
        /// Returns true if ChildAsinMentionMetrics instances are equal
        /// </summary>
        /// <param name="input">Instance of ChildAsinMentionMetrics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChildAsinMentionMetrics input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Asin == input.Asin ||
                    (this.Asin != null &&
                    this.Asin.Equals(input.Asin))
                ) &&
                (
                    this.NumberOfMentions == input.NumberOfMentions ||
                    (this.NumberOfMentions != null &&
                    this.NumberOfMentions.Equals(input.NumberOfMentions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Asin != null)
                    hashCode = hashCode * 59 + this.Asin.GetHashCode();
                if (this.NumberOfMentions != null)
                    hashCode = hashCode * 59 + this.NumberOfMentions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
