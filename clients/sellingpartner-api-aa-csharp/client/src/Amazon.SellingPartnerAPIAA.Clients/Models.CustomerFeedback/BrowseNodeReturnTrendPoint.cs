/* 
 * The Selling Partner API for CustomerFeedback
 *
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * OpenAPI spec version: 2024-06-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.CustomerFeedback
{
    /// <summary>
    /// The return metrics for a certain month.
    /// </summary>
    [DataContract]
    public partial class BrowseNodeReturnTrendPoint : IEquatable<BrowseNodeReturnTrendPoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrowseNodeReturnTrendPoint" /> class.
        /// </summary>
        [JsonConstructor]
        protected BrowseNodeReturnTrendPoint() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrowseNodeReturnTrendPoint" /> class.
        /// </summary>
        /// <param name="dateRange">The range of dates during which the returns were made. (required).</param>
        /// <param name="browseNodeMetrics">The browse node return metrics. (required).</param>
        public BrowseNodeReturnTrendPoint(DateRange dateRange = default, BrowseNodeTrendMetrics browseNodeMetrics = default)
        {
            // to ensure "dateRange" is required (not null)
            if (dateRange == null)
            {
                throw new InvalidDataException("dateRange is a required property for BrowseNodeReturnTrendPoint and cannot be null");
            }
            else
            {
                this.DateRange = dateRange;
            }
            // to ensure "browseNodeMetrics" is required (not null)
            if (browseNodeMetrics == null)
            {
                throw new InvalidDataException("browseNodeMetrics is a required property for BrowseNodeReturnTrendPoint and cannot be null");
            }
            else
            {
                this.BrowseNodeMetrics = browseNodeMetrics;
            }
        }

        /// <summary>
        /// The range of dates during which the returns were made.
        /// </summary>
        /// <value>The range of dates during which the returns were made.</value>
        [DataMember(Name = "dateRange", EmitDefaultValue = false)]
        public DateRange DateRange { get; set; }

        /// <summary>
        /// The browse node return metrics.
        /// </summary>
        /// <value>The browse node return metrics.</value>
        [DataMember(Name = "browseNodeMetrics", EmitDefaultValue = false)]
        public BrowseNodeTrendMetrics BrowseNodeMetrics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrowseNodeReturnTrendPoint {\n");
            sb.Append("  DateRange: ").Append(DateRange).Append("\n");
            sb.Append("  BrowseNodeMetrics: ").Append(BrowseNodeMetrics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrowseNodeReturnTrendPoint);
        }

        /// <summary>
        /// Returns true if BrowseNodeReturnTrendPoint instances are equal
        /// </summary>
        /// <param name="input">Instance of BrowseNodeReturnTrendPoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrowseNodeReturnTrendPoint input)
        {
            if (input == null)
                return false;

            return
                (
                    this.DateRange == input.DateRange ||
                    (this.DateRange != null &&
                    this.DateRange.Equals(input.DateRange))
                ) &&
                (
                    this.BrowseNodeMetrics == input.BrowseNodeMetrics ||
                    (this.BrowseNodeMetrics != null &&
                    this.BrowseNodeMetrics.Equals(input.BrowseNodeMetrics))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateRange != null)
                    hashCode = hashCode * 59 + this.DateRange.GetHashCode();
                if (this.BrowseNodeMetrics != null)
                    hashCode = hashCode * 59 + this.BrowseNodeMetrics.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
