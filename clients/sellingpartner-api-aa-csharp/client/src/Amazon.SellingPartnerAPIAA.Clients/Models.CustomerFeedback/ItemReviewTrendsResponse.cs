/* 
 * The Selling Partner API for CustomerFeedback
 *
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * OpenAPI spec version: 2024-06-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.CustomerFeedback
{
    /// <summary>
    /// The response for the &#x60;getItemReviewTrends&#x60; operation.
    /// </summary>
    [DataContract]
    public partial class ItemReviewTrendsResponse : IEquatable<ItemReviewTrendsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemReviewTrendsResponse" /> class.
        /// </summary>
        [JsonConstructor]
        protected ItemReviewTrendsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemReviewTrendsResponse" /> class.
        /// </summary>
        /// <param name="asin">The requested ASIN. The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. (required).</param>
        /// <param name="itemName">The product title of the requested ASIN. (required).</param>
        /// <param name="marketplaceId">The requested marketplace id. (required).</param>
        /// <param name="countryCode">The two digit country code of the requested marketplace id, in ISO 3166-1 alpha-2 format. (required).</param>
        /// <param name="dateRange">The range of dates in which the reviews were made. (required).</param>
        /// <param name="reviewTrends">The item review trends. (required).</param>
        public ItemReviewTrendsResponse(string asin = default, string itemName = default, string marketplaceId = default, string countryCode = default, DateRange dateRange = default, ItemReviewTrends reviewTrends = default)
        {
            // to ensure "asin" is required (not null)
            if (asin == null)
            {
                throw new InvalidDataException("asin is a required property for ItemReviewTrendsResponse and cannot be null");
            }
            else
            {
                this.Asin = asin;
            }
            // to ensure "itemName" is required (not null)
            if (itemName == null)
            {
                throw new InvalidDataException("itemName is a required property for ItemReviewTrendsResponse and cannot be null");
            }
            else
            {
                this.ItemName = itemName;
            }
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for ItemReviewTrendsResponse and cannot be null");
            }
            else
            {
                this.MarketplaceId = marketplaceId;
            }
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new InvalidDataException("countryCode is a required property for ItemReviewTrendsResponse and cannot be null");
            }
            else
            {
                this.CountryCode = countryCode;
            }
            // to ensure "dateRange" is required (not null)
            if (dateRange == null)
            {
                throw new InvalidDataException("dateRange is a required property for ItemReviewTrendsResponse and cannot be null");
            }
            else
            {
                this.DateRange = dateRange;
            }
            // to ensure "reviewTrends" is required (not null)
            if (reviewTrends == null)
            {
                throw new InvalidDataException("reviewTrends is a required property for ItemReviewTrendsResponse and cannot be null");
            }
            else
            {
                this.ReviewTrends = reviewTrends;
            }
        }

        /// <summary>
        /// The requested ASIN. The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace.
        /// </summary>
        /// <value>The requested ASIN. The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace.</value>
        [DataMember(Name = "asin", EmitDefaultValue = false)]
        public string Asin { get; set; }

        /// <summary>
        /// The product title of the requested ASIN.
        /// </summary>
        /// <value>The product title of the requested ASIN.</value>
        [DataMember(Name = "itemName", EmitDefaultValue = false)]
        public string ItemName { get; set; }

        /// <summary>
        /// The requested marketplace id.
        /// </summary>
        /// <value>The requested marketplace id.</value>
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The two digit country code of the requested marketplace id, in ISO 3166-1 alpha-2 format.
        /// </summary>
        /// <value>The two digit country code of the requested marketplace id, in ISO 3166-1 alpha-2 format.</value>
        [DataMember(Name = "countryCode", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The range of dates in which the reviews were made.
        /// </summary>
        /// <value>The range of dates in which the reviews were made.</value>
        [DataMember(Name = "dateRange", EmitDefaultValue = false)]
        public DateRange DateRange { get; set; }

        /// <summary>
        /// The item review trends.
        /// </summary>
        /// <value>The item review trends.</value>
        [DataMember(Name = "reviewTrends", EmitDefaultValue = false)]
        public ItemReviewTrends ReviewTrends { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemReviewTrendsResponse {\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  DateRange: ").Append(DateRange).Append("\n");
            sb.Append("  ReviewTrends: ").Append(ReviewTrends).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemReviewTrendsResponse);
        }

        /// <summary>
        /// Returns true if ItemReviewTrendsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemReviewTrendsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemReviewTrendsResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Asin == input.Asin ||
                    (this.Asin != null &&
                    this.Asin.Equals(input.Asin))
                ) &&
                (
                    this.ItemName == input.ItemName ||
                    (this.ItemName != null &&
                    this.ItemName.Equals(input.ItemName))
                ) &&
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) &&
                (
                    this.DateRange == input.DateRange ||
                    (this.DateRange != null &&
                    this.DateRange.Equals(input.DateRange))
                ) &&
                (
                    this.ReviewTrends == input.ReviewTrends ||
                    (this.ReviewTrends != null &&
                    this.ReviewTrends.Equals(input.ReviewTrends))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Asin != null)
                    hashCode = hashCode * 59 + this.Asin.GetHashCode();
                if (this.ItemName != null)
                    hashCode = hashCode * 59 + this.ItemName.GetHashCode();
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.DateRange != null)
                    hashCode = hashCode * 59 + this.DateRange.GetHashCode();
                if (this.ReviewTrends != null)
                    hashCode = hashCode * 59 + this.ReviewTrends.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
