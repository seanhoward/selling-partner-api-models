/* 
 * The Selling Partner API for CustomerFeedback
 *
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * OpenAPI spec version: 2024-06-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.CustomerFeedback
{
    /// <summary>
    /// Details of item review topic.
    /// </summary>
    [DataContract]
    public partial class ItemReviewTopic : IEquatable<ItemReviewTopic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemReviewTopic" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemReviewTopic() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemReviewTopic" /> class.
        /// </summary>
        /// <param name="topic">The name of the item review topic. (required).</param>
        /// <param name="asinMetrics">The ASIN&#39;s review topic metrics. (required).</param>
        /// <param name="parentAsinMetrics">The parent ASIN&#39;s review topic metrics. This value is &#x60;null&#x60; if there isn&#39;t enough topic data for the parent ASIN..</param>
        /// <param name="browseNodeMetrics">The browse node&#39;s review topic metrics. This value is &#x60;null&#x60; if there isn&#39;t enough topic data for the browse node..</param>
        /// <param name="childAsinMetrics">The review topic metrics for other child ASINs that have the same parent ASIN. This value is &#x60;null&#x60; if there isn&#39;t any child ASIN metric data..</param>
        /// <param name="reviewSnippets">A list of up to three snippets from reviews that contain the topic. This value is &#x60;null&#x60; if there aren&#39;t enough review snippets for the topic..</param>
        /// <param name="subtopics">A list of up to five top subtopics for the topic. The percentage of customer reviews that mention the subtopic determine the topic&#39;s placement in the list. This value is &#x60;null&#x60; if there are no subtopics..</param>
        public ItemReviewTopic(string topic = default, ItemReviewTopicMetrics asinMetrics = default, ItemReviewTopicMetrics parentAsinMetrics = default, ItemReviewBrowseNodeMetrics browseNodeMetrics = default, ChildAsinMetrics childAsinMetrics = default, List<string> reviewSnippets = default, List<ItemReviewSubtopic> subtopics = default)
        {
            // to ensure "topic" is required (not null)
            if (topic == null)
            {
                throw new InvalidDataException("topic is a required property for ItemReviewTopic and cannot be null");
            }
            else
            {
                this.Topic = topic;
            }
            // to ensure "asinMetrics" is required (not null)
            if (asinMetrics == null)
            {
                throw new InvalidDataException("asinMetrics is a required property for ItemReviewTopic and cannot be null");
            }
            else
            {
                this.AsinMetrics = asinMetrics;
            }
            this.ParentAsinMetrics = parentAsinMetrics;
            this.BrowseNodeMetrics = browseNodeMetrics;
            this.ChildAsinMetrics = childAsinMetrics;
            this.ReviewSnippets = reviewSnippets;
            this.Subtopics = subtopics;
        }

        /// <summary>
        /// The name of the item review topic.
        /// </summary>
        /// <value>The name of the item review topic.</value>
        [DataMember(Name = "topic", EmitDefaultValue = false)]
        public string Topic { get; set; }

        /// <summary>
        /// The ASIN&#39;s review topic metrics.
        /// </summary>
        /// <value>The ASIN&#39;s review topic metrics.</value>
        [DataMember(Name = "asinMetrics", EmitDefaultValue = false)]
        public ItemReviewTopicMetrics AsinMetrics { get; set; }

        /// <summary>
        /// The parent ASIN&#39;s review topic metrics. This value is &#x60;null&#x60; if there isn&#39;t enough topic data for the parent ASIN.
        /// </summary>
        /// <value>The parent ASIN&#39;s review topic metrics. This value is &#x60;null&#x60; if there isn&#39;t enough topic data for the parent ASIN.</value>
        [DataMember(Name = "parentAsinMetrics", EmitDefaultValue = false)]
        public ItemReviewTopicMetrics ParentAsinMetrics { get; set; }

        /// <summary>
        /// The browse node&#39;s review topic metrics. This value is &#x60;null&#x60; if there isn&#39;t enough topic data for the browse node.
        /// </summary>
        /// <value>The browse node&#39;s review topic metrics. This value is &#x60;null&#x60; if there isn&#39;t enough topic data for the browse node.</value>
        [DataMember(Name = "browseNodeMetrics", EmitDefaultValue = false)]
        public ItemReviewBrowseNodeMetrics BrowseNodeMetrics { get; set; }

        /// <summary>
        /// The review topic metrics for other child ASINs that have the same parent ASIN. This value is &#x60;null&#x60; if there isn&#39;t any child ASIN metric data.
        /// </summary>
        /// <value>The review topic metrics for other child ASINs that have the same parent ASIN. This value is &#x60;null&#x60; if there isn&#39;t any child ASIN metric data.</value>
        [DataMember(Name = "childAsinMetrics", EmitDefaultValue = false)]
        public ChildAsinMetrics ChildAsinMetrics { get; set; }

        /// <summary>
        /// A list of up to three snippets from reviews that contain the topic. This value is &#x60;null&#x60; if there aren&#39;t enough review snippets for the topic.
        /// </summary>
        /// <value>A list of up to three snippets from reviews that contain the topic. This value is &#x60;null&#x60; if there aren&#39;t enough review snippets for the topic.</value>
        [DataMember(Name = "reviewSnippets", EmitDefaultValue = false)]
        public List<string> ReviewSnippets { get; set; }

        /// <summary>
        /// A list of up to five top subtopics for the topic. The percentage of customer reviews that mention the subtopic determine the topic&#39;s placement in the list. This value is &#x60;null&#x60; if there are no subtopics.
        /// </summary>
        /// <value>A list of up to five top subtopics for the topic. The percentage of customer reviews that mention the subtopic determine the topic&#39;s placement in the list. This value is &#x60;null&#x60; if there are no subtopics.</value>
        [DataMember(Name = "subtopics", EmitDefaultValue = false)]
        public List<ItemReviewSubtopic> Subtopics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemReviewTopic {\n");
            sb.Append("  Topic: ").Append(Topic).Append("\n");
            sb.Append("  AsinMetrics: ").Append(AsinMetrics).Append("\n");
            sb.Append("  ParentAsinMetrics: ").Append(ParentAsinMetrics).Append("\n");
            sb.Append("  BrowseNodeMetrics: ").Append(BrowseNodeMetrics).Append("\n");
            sb.Append("  ChildAsinMetrics: ").Append(ChildAsinMetrics).Append("\n");
            sb.Append("  ReviewSnippets: ").Append(ReviewSnippets).Append("\n");
            sb.Append("  Subtopics: ").Append(Subtopics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemReviewTopic);
        }

        /// <summary>
        /// Returns true if ItemReviewTopic instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemReviewTopic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemReviewTopic input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Topic == input.Topic ||
                    (this.Topic != null &&
                    this.Topic.Equals(input.Topic))
                ) &&
                (
                    this.AsinMetrics == input.AsinMetrics ||
                    (this.AsinMetrics != null &&
                    this.AsinMetrics.Equals(input.AsinMetrics))
                ) &&
                (
                    this.ParentAsinMetrics == input.ParentAsinMetrics ||
                    (this.ParentAsinMetrics != null &&
                    this.ParentAsinMetrics.Equals(input.ParentAsinMetrics))
                ) &&
                (
                    this.BrowseNodeMetrics == input.BrowseNodeMetrics ||
                    (this.BrowseNodeMetrics != null &&
                    this.BrowseNodeMetrics.Equals(input.BrowseNodeMetrics))
                ) &&
                (
                    this.ChildAsinMetrics == input.ChildAsinMetrics ||
                    (this.ChildAsinMetrics != null &&
                    this.ChildAsinMetrics.Equals(input.ChildAsinMetrics))
                ) &&
                (
                    this.ReviewSnippets == input.ReviewSnippets ||
                    this.ReviewSnippets != null &&
                    this.ReviewSnippets.SequenceEqual(input.ReviewSnippets)
                ) &&
                (
                    this.Subtopics == input.Subtopics ||
                    this.Subtopics != null &&
                    this.Subtopics.SequenceEqual(input.Subtopics)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Topic != null)
                    hashCode = hashCode * 59 + this.Topic.GetHashCode();
                if (this.AsinMetrics != null)
                    hashCode = hashCode * 59 + this.AsinMetrics.GetHashCode();
                if (this.ParentAsinMetrics != null)
                    hashCode = hashCode * 59 + this.ParentAsinMetrics.GetHashCode();
                if (this.BrowseNodeMetrics != null)
                    hashCode = hashCode * 59 + this.BrowseNodeMetrics.GetHashCode();
                if (this.ChildAsinMetrics != null)
                    hashCode = hashCode * 59 + this.ChildAsinMetrics.GetHashCode();
                if (this.ReviewSnippets != null)
                    hashCode = hashCode * 59 + this.ReviewSnippets.GetHashCode();
                if (this.Subtopics != null)
                    hashCode = hashCode * 59 + this.Subtopics.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
