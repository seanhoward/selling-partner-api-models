/* 
 * The Selling Partner API for CustomerFeedback
 *
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * OpenAPI spec version: 2024-06-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.CustomerFeedback
{
    /// <summary>
    /// The 10 most positive and most negative review topics for all items in a browse node.
    /// </summary>
    [DataContract]
    public partial class BrowseNodeReviewTrends : IEquatable<BrowseNodeReviewTrends>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrowseNodeReviewTrends" /> class.
        /// </summary>
        /// <param name="positiveTopics">The trends of the most positive review topics. The percentage of reviews that contain the topic across all products in the requested browse node determine the topic&#39;s placement in the list. This value is &#x60;null&#x60; if there aren&#39;t enough positive reviews for the requested browse node.  **Max length:** 10.</param>
        /// <param name="negativeTopics">The trends of the most negative review topics. The percentage of reviews that contain the topic across all products in the requested browse node determine the topic&#39;s placement in the list. This value is &#x60;null&#x60; if there aren&#39;t enough positive reviews for the requested browse node.  **Max length:** 10.</param>
        public BrowseNodeReviewTrends(List<BrowseNodeReviewTrend> positiveTopics = default, List<BrowseNodeReviewTrend> negativeTopics = default)
        {
            this.PositiveTopics = positiveTopics;
            this.NegativeTopics = negativeTopics;
        }

        /// <summary>
        /// The trends of the most positive review topics. The percentage of reviews that contain the topic across all products in the requested browse node determine the topic&#39;s placement in the list. This value is &#x60;null&#x60; if there aren&#39;t enough positive reviews for the requested browse node.  **Max length:** 10
        /// </summary>
        /// <value>The trends of the most positive review topics. The percentage of reviews that contain the topic across all products in the requested browse node determine the topic&#39;s placement in the list. This value is &#x60;null&#x60; if there aren&#39;t enough positive reviews for the requested browse node.  **Max length:** 10</value>
        [DataMember(Name = "positiveTopics", EmitDefaultValue = false)]
        public List<BrowseNodeReviewTrend> PositiveTopics { get; set; }

        /// <summary>
        /// The trends of the most negative review topics. The percentage of reviews that contain the topic across all products in the requested browse node determine the topic&#39;s placement in the list. This value is &#x60;null&#x60; if there aren&#39;t enough positive reviews for the requested browse node.  **Max length:** 10
        /// </summary>
        /// <value>The trends of the most negative review topics. The percentage of reviews that contain the topic across all products in the requested browse node determine the topic&#39;s placement in the list. This value is &#x60;null&#x60; if there aren&#39;t enough positive reviews for the requested browse node.  **Max length:** 10</value>
        [DataMember(Name = "negativeTopics", EmitDefaultValue = false)]
        public List<BrowseNodeReviewTrend> NegativeTopics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrowseNodeReviewTrends {\n");
            sb.Append("  PositiveTopics: ").Append(PositiveTopics).Append("\n");
            sb.Append("  NegativeTopics: ").Append(NegativeTopics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrowseNodeReviewTrends);
        }

        /// <summary>
        /// Returns true if BrowseNodeReviewTrends instances are equal
        /// </summary>
        /// <param name="input">Instance of BrowseNodeReviewTrends to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrowseNodeReviewTrends input)
        {
            if (input == null)
                return false;

            return
                (
                    this.PositiveTopics == input.PositiveTopics ||
                    this.PositiveTopics != null &&
                    this.PositiveTopics.SequenceEqual(input.PositiveTopics)
                ) &&
                (
                    this.NegativeTopics == input.NegativeTopics ||
                    this.NegativeTopics != null &&
                    this.NegativeTopics.SequenceEqual(input.NegativeTopics)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PositiveTopics != null)
                    hashCode = hashCode * 59 + this.PositiveTopics.GetHashCode();
                if (this.NegativeTopics != null)
                    hashCode = hashCode * 59 + this.NegativeTopics.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
