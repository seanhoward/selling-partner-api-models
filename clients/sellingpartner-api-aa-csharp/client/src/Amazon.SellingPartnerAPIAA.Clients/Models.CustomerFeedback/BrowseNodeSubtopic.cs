/* 
 * The Selling Partner API for CustomerFeedback
 *
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * OpenAPI spec version: 2024-06-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.CustomerFeedback
{
    /// <summary>
    /// The browse node review subtopic.
    /// </summary>
    [DataContract]
    public partial class BrowseNodeSubtopic : IEquatable<BrowseNodeSubtopic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrowseNodeSubtopic" /> class.
        /// </summary>
        [JsonConstructor]
        protected BrowseNodeSubtopic() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrowseNodeSubtopic" /> class.
        /// </summary>
        /// <param name="subtopic">The name of the browse node review subtopic. (required).</param>
        /// <param name="metrics">The browse node review subtopic metrics. (required).</param>
        /// <param name="reviewSnippets">A list of up to three snippets from reviews that contain the topic. This value is &#x60;null&#x60; if there aren&#39;t enough review snippets for the subtopic..</param>
        public BrowseNodeSubtopic(string subtopic = default, BrowseNodeReviewSubtopicMetrics metrics = default, List<string> reviewSnippets = default)
        {
            // to ensure "subtopic" is required (not null)
            if (subtopic == null)
            {
                throw new InvalidDataException("subtopic is a required property for BrowseNodeSubtopic and cannot be null");
            }
            else
            {
                this.Subtopic = subtopic;
            }
            // to ensure "metrics" is required (not null)
            if (metrics == null)
            {
                throw new InvalidDataException("metrics is a required property for BrowseNodeSubtopic and cannot be null");
            }
            else
            {
                this.Metrics = metrics;
            }
            this.ReviewSnippets = reviewSnippets;
        }

        /// <summary>
        /// The name of the browse node review subtopic.
        /// </summary>
        /// <value>The name of the browse node review subtopic.</value>
        [DataMember(Name = "subtopic", EmitDefaultValue = false)]
        public string Subtopic { get; set; }

        /// <summary>
        /// The browse node review subtopic metrics.
        /// </summary>
        /// <value>The browse node review subtopic metrics.</value>
        [DataMember(Name = "metrics", EmitDefaultValue = false)]
        public BrowseNodeReviewSubtopicMetrics Metrics { get; set; }

        /// <summary>
        /// A list of up to three snippets from reviews that contain the topic. This value is &#x60;null&#x60; if there aren&#39;t enough review snippets for the subtopic.
        /// </summary>
        /// <value>A list of up to three snippets from reviews that contain the topic. This value is &#x60;null&#x60; if there aren&#39;t enough review snippets for the subtopic.</value>
        [DataMember(Name = "reviewSnippets", EmitDefaultValue = false)]
        public List<string> ReviewSnippets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrowseNodeSubtopic {\n");
            sb.Append("  Subtopic: ").Append(Subtopic).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  ReviewSnippets: ").Append(ReviewSnippets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrowseNodeSubtopic);
        }

        /// <summary>
        /// Returns true if BrowseNodeSubtopic instances are equal
        /// </summary>
        /// <param name="input">Instance of BrowseNodeSubtopic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrowseNodeSubtopic input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Subtopic == input.Subtopic ||
                    (this.Subtopic != null &&
                    this.Subtopic.Equals(input.Subtopic))
                ) &&
                (
                    this.Metrics == input.Metrics ||
                    (this.Metrics != null &&
                    this.Metrics.Equals(input.Metrics))
                ) &&
                (
                    this.ReviewSnippets == input.ReviewSnippets ||
                    this.ReviewSnippets != null &&
                    this.ReviewSnippets.SequenceEqual(input.ReviewSnippets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Subtopic != null)
                    hashCode = hashCode * 59 + this.Subtopic.GetHashCode();
                if (this.Metrics != null)
                    hashCode = hashCode * 59 + this.Metrics.GetHashCode();
                if (this.ReviewSnippets != null)
                    hashCode = hashCode * 59 + this.ReviewSnippets.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
