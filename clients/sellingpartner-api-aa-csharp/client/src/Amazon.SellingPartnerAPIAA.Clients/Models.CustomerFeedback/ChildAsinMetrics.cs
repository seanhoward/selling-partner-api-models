/* 
 * The Selling Partner API for CustomerFeedback
 *
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * OpenAPI spec version: 2024-06-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.CustomerFeedback
{
    /// <summary>
    /// The review topic metrics for other child ASINs that have the same parent ASIN. This value is &#x60;null&#x60; if there isn&#39;t any child ASIN metric data.
    /// </summary>
    [DataContract]
    public partial class ChildAsinMetrics : IEquatable<ChildAsinMetrics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChildAsinMetrics" /> class.
        /// </summary>
        /// <param name="mostMentions">The child ASIN for which reviews mention the topic the greatest number of times, and the number of times reviews mention the topic. This value is &#x60;null&#x60; if there are no child ASIN metrics..</param>
        /// <param name="leastMentions">The child ASIN for which reviews mention the topic the least number of times, and the number of times reviews mention the topic. This value is &#x60;null&#x60; if there are no child ASIN metrics..</param>
        public ChildAsinMetrics(ChildAsinMentionMetrics mostMentions = default, ChildAsinMentionMetrics leastMentions = default)
        {
            this.MostMentions = mostMentions;
            this.LeastMentions = leastMentions;
        }

        /// <summary>
        /// The child ASIN for which reviews mention the topic the greatest number of times, and the number of times reviews mention the topic. This value is &#x60;null&#x60; if there are no child ASIN metrics.
        /// </summary>
        /// <value>The child ASIN for which reviews mention the topic the greatest number of times, and the number of times reviews mention the topic. This value is &#x60;null&#x60; if there are no child ASIN metrics.</value>
        [DataMember(Name = "mostMentions", EmitDefaultValue = false)]
        public ChildAsinMentionMetrics MostMentions { get; set; }

        /// <summary>
        /// The child ASIN for which reviews mention the topic the least number of times, and the number of times reviews mention the topic. This value is &#x60;null&#x60; if there are no child ASIN metrics.
        /// </summary>
        /// <value>The child ASIN for which reviews mention the topic the least number of times, and the number of times reviews mention the topic. This value is &#x60;null&#x60; if there are no child ASIN metrics.</value>
        [DataMember(Name = "leastMentions", EmitDefaultValue = false)]
        public ChildAsinMentionMetrics LeastMentions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChildAsinMetrics {\n");
            sb.Append("  MostMentions: ").Append(MostMentions).Append("\n");
            sb.Append("  LeastMentions: ").Append(LeastMentions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChildAsinMetrics);
        }

        /// <summary>
        /// Returns true if ChildAsinMetrics instances are equal
        /// </summary>
        /// <param name="input">Instance of ChildAsinMetrics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChildAsinMetrics input)
        {
            if (input == null)
                return false;

            return
                (
                    this.MostMentions == input.MostMentions ||
                    (this.MostMentions != null &&
                    this.MostMentions.Equals(input.MostMentions))
                ) &&
                (
                    this.LeastMentions == input.LeastMentions ||
                    (this.LeastMentions != null &&
                    this.LeastMentions.Equals(input.LeastMentions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MostMentions != null)
                    hashCode = hashCode * 59 + this.MostMentions.GetHashCode();
                if (this.LeastMentions != null)
                    hashCode = hashCode * 59 + this.LeastMentions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
