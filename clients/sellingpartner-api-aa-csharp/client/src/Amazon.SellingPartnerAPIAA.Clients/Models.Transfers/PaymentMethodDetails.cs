/* 
 * The Selling Partner API for Transfers.
 *
 * The Selling Partner API for Transfers enables selling partners to retrieve payment methods and initiate payouts for their seller accounts. This API supports the following marketplaces: DE, FR, IT, ES, SE, NL, PL, and BE.
 *
 * OpenAPI spec version: 2024-06-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Transfers
{
    /// <summary>
    /// The details of a payment method.
    /// </summary>
    [DataContract]
    public partial class PaymentMethodDetails :  IEquatable<PaymentMethodDetails>, IValidatableObject
    {
        /// <summary>
        /// The payment method type.
        /// </summary>
        /// <value>The payment method type.</value>
        [DataMember(Name="paymentMethodType", EmitDefaultValue=false)]
        public PaymentMethodType? PaymentMethodType { get; set; }
        /// <summary>
        /// The payment method assignment type, whether it is assigned as default to the given marketplace or not.
        /// </summary>
        /// <value>The payment method assignment type, whether it is assigned as default to the given marketplace or not.</value>
        [DataMember(Name="assignmentType", EmitDefaultValue=false)]
        public AssignmentType? AssignmentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodDetails" /> class.
        /// </summary>
        /// <param name="accountHolderName">The name of the account holder who is registered for the payment method..</param>
        /// <param name="paymentMethodId">The payment method identifier..</param>
        /// <param name="tail">The last three or four digits of the payment method..</param>
        /// <param name="expiryDate">The expiration date of the card used for payment..</param>
        /// <param name="countryCode">The two-letter country code in ISO 3166-1 alpha-2 format. For payment methods in the &#x60;card&#x60; category, the code is for the country where the card was issued. For payment methods in the &#x60;bank account&#x60; category, the code is for the country where the account is located..</param>
        /// <param name="paymentMethodType">The payment method type..</param>
        /// <param name="assignmentType">The payment method assignment type, whether it is assigned as default to the given marketplace or not..</param>
        public PaymentMethodDetails(string accountHolderName = default, string paymentMethodId = default, string tail = default, ExpiryDate expiryDate = default, string countryCode = default, PaymentMethodType? paymentMethodType = default, AssignmentType? assignmentType = default)
        {
            this.AccountHolderName = accountHolderName;
            this.PaymentMethodId = paymentMethodId;
            this.Tail = tail;
            this.ExpiryDate = expiryDate;
            this.CountryCode = countryCode;
            this.PaymentMethodType = paymentMethodType;
            this.AssignmentType = assignmentType;
        }
        
        /// <summary>
        /// The name of the account holder who is registered for the payment method.
        /// </summary>
        /// <value>The name of the account holder who is registered for the payment method.</value>
        [DataMember(Name="accountHolderName", EmitDefaultValue=false)]
        public string AccountHolderName { get; set; }

        /// <summary>
        /// The payment method identifier.
        /// </summary>
        /// <value>The payment method identifier.</value>
        [DataMember(Name="paymentMethodId", EmitDefaultValue=false)]
        public string PaymentMethodId { get; set; }

        /// <summary>
        /// The last three or four digits of the payment method.
        /// </summary>
        /// <value>The last three or four digits of the payment method.</value>
        [DataMember(Name="tail", EmitDefaultValue=false)]
        public string Tail { get; set; }

        /// <summary>
        /// The expiration date of the card used for payment.
        /// </summary>
        /// <value>The expiration date of the card used for payment.</value>
        [DataMember(Name="expiryDate", EmitDefaultValue=false)]
        public ExpiryDate ExpiryDate { get; set; }

        /// <summary>
        /// The two-letter country code in ISO 3166-1 alpha-2 format. For payment methods in the &#x60;card&#x60; category, the code is for the country where the card was issued. For payment methods in the &#x60;bank account&#x60; category, the code is for the country where the account is located.
        /// </summary>
        /// <value>The two-letter country code in ISO 3166-1 alpha-2 format. For payment methods in the &#x60;card&#x60; category, the code is for the country where the card was issued. For payment methods in the &#x60;bank account&#x60; category, the code is for the country where the account is located.</value>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentMethodDetails {\n");
            sb.Append("  AccountHolderName: ").Append(AccountHolderName).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  Tail: ").Append(Tail).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  PaymentMethodType: ").Append(PaymentMethodType).Append("\n");
            sb.Append("  AssignmentType: ").Append(AssignmentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentMethodDetails);
        }

        /// <summary>
        /// Returns true if PaymentMethodDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentMethodDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentMethodDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountHolderName == input.AccountHolderName ||
                    (this.AccountHolderName != null &&
                    this.AccountHolderName.Equals(input.AccountHolderName))
                ) && 
                (
                    this.PaymentMethodId == input.PaymentMethodId ||
                    (this.PaymentMethodId != null &&
                    this.PaymentMethodId.Equals(input.PaymentMethodId))
                ) && 
                (
                    this.Tail == input.Tail ||
                    (this.Tail != null &&
                    this.Tail.Equals(input.Tail))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.PaymentMethodType == input.PaymentMethodType ||
                    (this.PaymentMethodType != null &&
                    this.PaymentMethodType.Equals(input.PaymentMethodType))
                ) && 
                (
                    this.AssignmentType == input.AssignmentType ||
                    (this.AssignmentType != null &&
                    this.AssignmentType.Equals(input.AssignmentType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountHolderName != null)
                    hashCode = hashCode * 59 + this.AccountHolderName.GetHashCode();
                if (this.PaymentMethodId != null)
                    hashCode = hashCode * 59 + this.PaymentMethodId.GetHashCode();
                if (this.Tail != null)
                    hashCode = hashCode * 59 + this.Tail.GetHashCode();
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.PaymentMethodType != null)
                    hashCode = hashCode * 59 + this.PaymentMethodType.GetHashCode();
                if (this.AssignmentType != null)
                    hashCode = hashCode * 59 + this.AssignmentType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
