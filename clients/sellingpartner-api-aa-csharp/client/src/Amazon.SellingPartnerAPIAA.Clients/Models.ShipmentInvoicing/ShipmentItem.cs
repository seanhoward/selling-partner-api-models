/* 
 * Selling Partner API for Shipment Invoicing
 *
 * The Selling Partner API for Shipment Invoicing helps you programmatically retrieve shipment invoice information in the Brazil marketplace for a selling partnerâ€™s Fulfillment by Amazon (FBA) orders.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.ShipmentInvoicing
{
    /// <summary>
    /// The shipment item information required by a seller to issue a shipment invoice.
    /// </summary>
    [DataContract]
    public partial class ShipmentItem : IEquatable<ShipmentItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentItem" /> class.
        /// </summary>
        /// <param name="aSIN">The Amazon Standard Identification Number (ASIN) of the item..</param>
        /// <param name="sellerSKU">The seller SKU of the item..</param>
        /// <param name="orderItemId">The Amazon-defined identifier for the order item..</param>
        /// <param name="title">The name of the item..</param>
        /// <param name="quantityOrdered">The number of items ordered..</param>
        /// <param name="itemPrice">The selling price of the item multiplied by the quantity ordered. Note that ItemPrice excludes ShippingPrice and GiftWrapPrice..</param>
        /// <param name="shippingPrice">The shipping price of the item..</param>
        /// <param name="giftWrapPrice">The gift wrap price of the item..</param>
        /// <param name="shippingDiscount">The discount on the shipping price..</param>
        /// <param name="promotionDiscount">The total of all promotional discounts in the offer..</param>
        /// <param name="serialNumbers">The list of serial numbers..</param>
        public ShipmentItem(string aSIN = default, string sellerSKU = default, string orderItemId = default, string title = default, decimal? quantityOrdered = default, Money itemPrice = default, Money shippingPrice = default, Money giftWrapPrice = default, Money shippingDiscount = default, Money promotionDiscount = default, SerialNumbersList serialNumbers = default)
        {
            this.ASIN = aSIN;
            this.SellerSKU = sellerSKU;
            this.OrderItemId = orderItemId;
            this.Title = title;
            this.QuantityOrdered = quantityOrdered;
            this.ItemPrice = itemPrice;
            this.ShippingPrice = shippingPrice;
            this.GiftWrapPrice = giftWrapPrice;
            this.ShippingDiscount = shippingDiscount;
            this.PromotionDiscount = promotionDiscount;
            this.SerialNumbers = serialNumbers;
        }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN) of the item.</value>
        [DataMember(Name = "ASIN", EmitDefaultValue = false)]
        public string ASIN { get; set; }

        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        /// <value>The seller SKU of the item.</value>
        [DataMember(Name = "SellerSKU", EmitDefaultValue = false)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// The Amazon-defined identifier for the order item.
        /// </summary>
        /// <value>The Amazon-defined identifier for the order item.</value>
        [DataMember(Name = "OrderItemId", EmitDefaultValue = false)]
        public string OrderItemId { get; set; }

        /// <summary>
        /// The name of the item.
        /// </summary>
        /// <value>The name of the item.</value>
        [DataMember(Name = "Title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// The number of items ordered.
        /// </summary>
        /// <value>The number of items ordered.</value>
        [DataMember(Name = "QuantityOrdered", EmitDefaultValue = false)]
        public decimal? QuantityOrdered { get; set; }

        /// <summary>
        /// The selling price of the item multiplied by the quantity ordered. Note that ItemPrice excludes ShippingPrice and GiftWrapPrice.
        /// </summary>
        /// <value>The selling price of the item multiplied by the quantity ordered. Note that ItemPrice excludes ShippingPrice and GiftWrapPrice.</value>
        [DataMember(Name = "ItemPrice", EmitDefaultValue = false)]
        public Money ItemPrice { get; set; }

        /// <summary>
        /// The shipping price of the item.
        /// </summary>
        /// <value>The shipping price of the item.</value>
        [DataMember(Name = "ShippingPrice", EmitDefaultValue = false)]
        public Money ShippingPrice { get; set; }

        /// <summary>
        /// The gift wrap price of the item.
        /// </summary>
        /// <value>The gift wrap price of the item.</value>
        [DataMember(Name = "GiftWrapPrice", EmitDefaultValue = false)]
        public Money GiftWrapPrice { get; set; }

        /// <summary>
        /// The discount on the shipping price.
        /// </summary>
        /// <value>The discount on the shipping price.</value>
        [DataMember(Name = "ShippingDiscount", EmitDefaultValue = false)]
        public Money ShippingDiscount { get; set; }

        /// <summary>
        /// The total of all promotional discounts in the offer.
        /// </summary>
        /// <value>The total of all promotional discounts in the offer.</value>
        [DataMember(Name = "PromotionDiscount", EmitDefaultValue = false)]
        public Money PromotionDiscount { get; set; }

        /// <summary>
        /// The list of serial numbers.
        /// </summary>
        /// <value>The list of serial numbers.</value>
        [DataMember(Name = "SerialNumbers", EmitDefaultValue = false)]
        public SerialNumbersList SerialNumbers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipmentItem {\n");
            sb.Append("  ASIN: ").Append(ASIN).Append("\n");
            sb.Append("  SellerSKU: ").Append(SellerSKU).Append("\n");
            sb.Append("  OrderItemId: ").Append(OrderItemId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  QuantityOrdered: ").Append(QuantityOrdered).Append("\n");
            sb.Append("  ItemPrice: ").Append(ItemPrice).Append("\n");
            sb.Append("  ShippingPrice: ").Append(ShippingPrice).Append("\n");
            sb.Append("  GiftWrapPrice: ").Append(GiftWrapPrice).Append("\n");
            sb.Append("  ShippingDiscount: ").Append(ShippingDiscount).Append("\n");
            sb.Append("  PromotionDiscount: ").Append(PromotionDiscount).Append("\n");
            sb.Append("  SerialNumbers: ").Append(SerialNumbers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipmentItem);
        }

        /// <summary>
        /// Returns true if ShipmentItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipmentItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentItem input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ASIN == input.ASIN ||
                    (this.ASIN != null &&
                    this.ASIN.Equals(input.ASIN))
                ) &&
                (
                    this.SellerSKU == input.SellerSKU ||
                    (this.SellerSKU != null &&
                    this.SellerSKU.Equals(input.SellerSKU))
                ) &&
                (
                    this.OrderItemId == input.OrderItemId ||
                    (this.OrderItemId != null &&
                    this.OrderItemId.Equals(input.OrderItemId))
                ) &&
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) &&
                (
                    this.QuantityOrdered == input.QuantityOrdered ||
                    (this.QuantityOrdered != null &&
                    this.QuantityOrdered.Equals(input.QuantityOrdered))
                ) &&
                (
                    this.ItemPrice == input.ItemPrice ||
                    (this.ItemPrice != null &&
                    this.ItemPrice.Equals(input.ItemPrice))
                ) &&
                (
                    this.ShippingPrice == input.ShippingPrice ||
                    (this.ShippingPrice != null &&
                    this.ShippingPrice.Equals(input.ShippingPrice))
                ) &&
                (
                    this.GiftWrapPrice == input.GiftWrapPrice ||
                    (this.GiftWrapPrice != null &&
                    this.GiftWrapPrice.Equals(input.GiftWrapPrice))
                ) &&
                (
                    this.ShippingDiscount == input.ShippingDiscount ||
                    (this.ShippingDiscount != null &&
                    this.ShippingDiscount.Equals(input.ShippingDiscount))
                ) &&
                (
                    this.PromotionDiscount == input.PromotionDiscount ||
                    (this.PromotionDiscount != null &&
                    this.PromotionDiscount.Equals(input.PromotionDiscount))
                ) &&
                (
                    this.SerialNumbers == input.SerialNumbers ||
                    (this.SerialNumbers != null &&
                    this.SerialNumbers.Equals(input.SerialNumbers))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ASIN != null)
                    hashCode = hashCode * 59 + this.ASIN.GetHashCode();
                if (this.SellerSKU != null)
                    hashCode = hashCode * 59 + this.SellerSKU.GetHashCode();
                if (this.OrderItemId != null)
                    hashCode = hashCode * 59 + this.OrderItemId.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.QuantityOrdered != null)
                    hashCode = hashCode * 59 + this.QuantityOrdered.GetHashCode();
                if (this.ItemPrice != null)
                    hashCode = hashCode * 59 + this.ItemPrice.GetHashCode();
                if (this.ShippingPrice != null)
                    hashCode = hashCode * 59 + this.ShippingPrice.GetHashCode();
                if (this.GiftWrapPrice != null)
                    hashCode = hashCode * 59 + this.GiftWrapPrice.GetHashCode();
                if (this.ShippingDiscount != null)
                    hashCode = hashCode * 59 + this.ShippingDiscount.GetHashCode();
                if (this.PromotionDiscount != null)
                    hashCode = hashCode * 59 + this.PromotionDiscount.GetHashCode();
                if (this.SerialNumbers != null)
                    hashCode = hashCode * 59 + this.SerialNumbers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
