/* 
 * Selling Partner API for Shipment Invoicing
 *
 * The Selling Partner API for Shipment Invoicing helps you programmatically retrieve shipment invoice information in the Brazil marketplace for a selling partner’s Fulfillment by Amazon (FBA) orders.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.ShipmentInvoicing
{
    /// <summary>
    /// The information required by a selling partner to issue a shipment invoice.
    /// </summary>
    [DataContract]
    public partial class ShipmentDetail :  IEquatable<ShipmentDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentDetail" /> class.
        /// </summary>
        /// <param name="warehouseId">The Amazon-defined identifier for the warehouse..</param>
        /// <param name="amazonOrderId">The Amazon-defined identifier for the order..</param>
        /// <param name="amazonShipmentId">The Amazon-defined identifier for the shipment..</param>
        /// <param name="purchaseDate">The date and time when the order was created..</param>
        /// <param name="shippingAddress">shippingAddress.</param>
        /// <param name="paymentMethodDetails">paymentMethodDetails.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the order was placed..</param>
        /// <param name="sellerId">The seller identifier..</param>
        /// <param name="buyerName">The name of the buyer..</param>
        /// <param name="buyerCounty">The county of the buyer..</param>
        /// <param name="buyerTaxInfo">buyerTaxInfo.</param>
        /// <param name="marketplaceTaxInfo">marketplaceTaxInfo.</param>
        /// <param name="sellerDisplayName">The seller’s friendly name registered in the marketplace..</param>
        /// <param name="shipmentItems">shipmentItems.</param>
        public ShipmentDetail(string warehouseId = default(string), string amazonOrderId = default(string), string amazonShipmentId = default(string), DateTime? purchaseDate = default(DateTime?), Address shippingAddress = default(Address), PaymentMethodDetailItemList paymentMethodDetails = default(PaymentMethodDetailItemList), string marketplaceId = default(string), string sellerId = default(string), string buyerName = default(string), string buyerCounty = default(string), BuyerTaxInfo buyerTaxInfo = default(BuyerTaxInfo), MarketplaceTaxInfo marketplaceTaxInfo = default(MarketplaceTaxInfo), string sellerDisplayName = default(string), ShipmentItems shipmentItems = default(ShipmentItems))
        {
            this.WarehouseId = warehouseId;
            this.AmazonOrderId = amazonOrderId;
            this.AmazonShipmentId = amazonShipmentId;
            this.PurchaseDate = purchaseDate;
            this.ShippingAddress = shippingAddress;
            this.PaymentMethodDetails = paymentMethodDetails;
            this.MarketplaceId = marketplaceId;
            this.SellerId = sellerId;
            this.BuyerName = buyerName;
            this.BuyerCounty = buyerCounty;
            this.BuyerTaxInfo = buyerTaxInfo;
            this.MarketplaceTaxInfo = marketplaceTaxInfo;
            this.SellerDisplayName = sellerDisplayName;
            this.ShipmentItems = shipmentItems;
        }
        
        /// <summary>
        /// The Amazon-defined identifier for the warehouse.
        /// </summary>
        /// <value>The Amazon-defined identifier for the warehouse.</value>
        [DataMember(Name="WarehouseId", EmitDefaultValue=false)]
        public string WarehouseId { get; set; }

        /// <summary>
        /// The Amazon-defined identifier for the order.
        /// </summary>
        /// <value>The Amazon-defined identifier for the order.</value>
        [DataMember(Name="AmazonOrderId", EmitDefaultValue=false)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        /// The Amazon-defined identifier for the shipment.
        /// </summary>
        /// <value>The Amazon-defined identifier for the shipment.</value>
        [DataMember(Name="AmazonShipmentId", EmitDefaultValue=false)]
        public string AmazonShipmentId { get; set; }

        /// <summary>
        /// The date and time when the order was created.
        /// </summary>
        /// <value>The date and time when the order was created.</value>
        [DataMember(Name="PurchaseDate", EmitDefaultValue=false)]
        public DateTime? PurchaseDate { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name="ShippingAddress", EmitDefaultValue=false)]
        public Address ShippingAddress { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethodDetails
        /// </summary>
        [DataMember(Name="PaymentMethodDetails", EmitDefaultValue=false)]
        public PaymentMethodDetailItemList PaymentMethodDetails { get; set; }

        /// <summary>
        /// The identifier for the marketplace where the order was placed.
        /// </summary>
        /// <value>The identifier for the marketplace where the order was placed.</value>
        [DataMember(Name="MarketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The seller identifier.
        /// </summary>
        /// <value>The seller identifier.</value>
        [DataMember(Name="SellerId", EmitDefaultValue=false)]
        public string SellerId { get; set; }

        /// <summary>
        /// The name of the buyer.
        /// </summary>
        /// <value>The name of the buyer.</value>
        [DataMember(Name="BuyerName", EmitDefaultValue=false)]
        public string BuyerName { get; set; }

        /// <summary>
        /// The county of the buyer.
        /// </summary>
        /// <value>The county of the buyer.</value>
        [DataMember(Name="BuyerCounty", EmitDefaultValue=false)]
        public string BuyerCounty { get; set; }

        /// <summary>
        /// Gets or Sets BuyerTaxInfo
        /// </summary>
        [DataMember(Name="BuyerTaxInfo", EmitDefaultValue=false)]
        public BuyerTaxInfo BuyerTaxInfo { get; set; }

        /// <summary>
        /// Gets or Sets MarketplaceTaxInfo
        /// </summary>
        [DataMember(Name="MarketplaceTaxInfo", EmitDefaultValue=false)]
        public MarketplaceTaxInfo MarketplaceTaxInfo { get; set; }

        /// <summary>
        /// The seller’s friendly name registered in the marketplace.
        /// </summary>
        /// <value>The seller’s friendly name registered in the marketplace.</value>
        [DataMember(Name="SellerDisplayName", EmitDefaultValue=false)]
        public string SellerDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentItems
        /// </summary>
        [DataMember(Name="ShipmentItems", EmitDefaultValue=false)]
        public ShipmentItems ShipmentItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipmentDetail {\n");
            sb.Append("  WarehouseId: ").Append(WarehouseId).Append("\n");
            sb.Append("  AmazonOrderId: ").Append(AmazonOrderId).Append("\n");
            sb.Append("  AmazonShipmentId: ").Append(AmazonShipmentId).Append("\n");
            sb.Append("  PurchaseDate: ").Append(PurchaseDate).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  PaymentMethodDetails: ").Append(PaymentMethodDetails).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("  BuyerName: ").Append(BuyerName).Append("\n");
            sb.Append("  BuyerCounty: ").Append(BuyerCounty).Append("\n");
            sb.Append("  BuyerTaxInfo: ").Append(BuyerTaxInfo).Append("\n");
            sb.Append("  MarketplaceTaxInfo: ").Append(MarketplaceTaxInfo).Append("\n");
            sb.Append("  SellerDisplayName: ").Append(SellerDisplayName).Append("\n");
            sb.Append("  ShipmentItems: ").Append(ShipmentItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipmentDetail);
        }

        /// <summary>
        /// Returns true if ShipmentDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipmentDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WarehouseId == input.WarehouseId ||
                    (this.WarehouseId != null &&
                    this.WarehouseId.Equals(input.WarehouseId))
                ) && 
                (
                    this.AmazonOrderId == input.AmazonOrderId ||
                    (this.AmazonOrderId != null &&
                    this.AmazonOrderId.Equals(input.AmazonOrderId))
                ) && 
                (
                    this.AmazonShipmentId == input.AmazonShipmentId ||
                    (this.AmazonShipmentId != null &&
                    this.AmazonShipmentId.Equals(input.AmazonShipmentId))
                ) && 
                (
                    this.PurchaseDate == input.PurchaseDate ||
                    (this.PurchaseDate != null &&
                    this.PurchaseDate.Equals(input.PurchaseDate))
                ) && 
                (
                    this.ShippingAddress == input.ShippingAddress ||
                    (this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(input.ShippingAddress))
                ) && 
                (
                    this.PaymentMethodDetails == input.PaymentMethodDetails ||
                    (this.PaymentMethodDetails != null &&
                    this.PaymentMethodDetails.Equals(input.PaymentMethodDetails))
                ) && 
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) && 
                (
                    this.SellerId == input.SellerId ||
                    (this.SellerId != null &&
                    this.SellerId.Equals(input.SellerId))
                ) && 
                (
                    this.BuyerName == input.BuyerName ||
                    (this.BuyerName != null &&
                    this.BuyerName.Equals(input.BuyerName))
                ) && 
                (
                    this.BuyerCounty == input.BuyerCounty ||
                    (this.BuyerCounty != null &&
                    this.BuyerCounty.Equals(input.BuyerCounty))
                ) && 
                (
                    this.BuyerTaxInfo == input.BuyerTaxInfo ||
                    (this.BuyerTaxInfo != null &&
                    this.BuyerTaxInfo.Equals(input.BuyerTaxInfo))
                ) && 
                (
                    this.MarketplaceTaxInfo == input.MarketplaceTaxInfo ||
                    (this.MarketplaceTaxInfo != null &&
                    this.MarketplaceTaxInfo.Equals(input.MarketplaceTaxInfo))
                ) && 
                (
                    this.SellerDisplayName == input.SellerDisplayName ||
                    (this.SellerDisplayName != null &&
                    this.SellerDisplayName.Equals(input.SellerDisplayName))
                ) && 
                (
                    this.ShipmentItems == input.ShipmentItems ||
                    (this.ShipmentItems != null &&
                    this.ShipmentItems.Equals(input.ShipmentItems))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WarehouseId != null)
                    hashCode = hashCode * 59 + this.WarehouseId.GetHashCode();
                if (this.AmazonOrderId != null)
                    hashCode = hashCode * 59 + this.AmazonOrderId.GetHashCode();
                if (this.AmazonShipmentId != null)
                    hashCode = hashCode * 59 + this.AmazonShipmentId.GetHashCode();
                if (this.PurchaseDate != null)
                    hashCode = hashCode * 59 + this.PurchaseDate.GetHashCode();
                if (this.ShippingAddress != null)
                    hashCode = hashCode * 59 + this.ShippingAddress.GetHashCode();
                if (this.PaymentMethodDetails != null)
                    hashCode = hashCode * 59 + this.PaymentMethodDetails.GetHashCode();
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.SellerId != null)
                    hashCode = hashCode * 59 + this.SellerId.GetHashCode();
                if (this.BuyerName != null)
                    hashCode = hashCode * 59 + this.BuyerName.GetHashCode();
                if (this.BuyerCounty != null)
                    hashCode = hashCode * 59 + this.BuyerCounty.GetHashCode();
                if (this.BuyerTaxInfo != null)
                    hashCode = hashCode * 59 + this.BuyerTaxInfo.GetHashCode();
                if (this.MarketplaceTaxInfo != null)
                    hashCode = hashCode * 59 + this.MarketplaceTaxInfo.GetHashCode();
                if (this.SellerDisplayName != null)
                    hashCode = hashCode * 59 + this.SellerDisplayName.GetHashCode();
                if (this.ShipmentItems != null)
                    hashCode = hashCode * 59 + this.ShipmentItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
