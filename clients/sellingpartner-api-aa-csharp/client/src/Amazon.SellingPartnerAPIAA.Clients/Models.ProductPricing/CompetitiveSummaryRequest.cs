/* 
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-05-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.ProductPricing
{
    /// <summary>
    /// An individual &#x60;competitiveSummary&#x60; request for an ASIN and &#x60;marketplaceId&#x60;.
    /// </summary>
    [DataContract]
    public partial class CompetitiveSummaryRequest :  IEquatable<CompetitiveSummaryRequest>, IValidatableObject
    {
        /// <summary>
        /// HTTP method type
        /// </summary>
        /// <value>HTTP method type</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public HttpMethod Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompetitiveSummaryRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompetitiveSummaryRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompetitiveSummaryRequest" /> class.
        /// </summary>
        /// <param name="asin">The Amazon Standard Identification Number for the item. (required).</param>
        /// <param name="marketplaceId">A marketplace identifier. (required).</param>
        /// <param name="includedData">The list of requested competitive pricing data for the product. (required).</param>
        /// <param name="lowestPricedOffersInputs">The list of &#x60;lowestPricedOffersInput&#x60; parameters that are used to build &#x60;lowestPricedOffers&#x60; in the response. This attribute is only valid if &#x60;lowestPricedOffers&#x60; is requested in &#x60;includedData&#x60;.</param>
        /// <param name="method">HTTP method type (required).</param>
        /// <param name="uri">The URI associated with the individual APIs that are called as part of the batch request. For &#x60;getCompetitiveSummary&#x60;, this is &#x60;/products/pricing/2022-05-01/items/competitiveSummary&#x60;. (required).</param>
        public CompetitiveSummaryRequest(string asin = default(string), string marketplaceId = default(string), List<CompetitiveSummaryIncludedData> includedData = default(List<CompetitiveSummaryIncludedData>), List<LowestPricedOffersInput> lowestPricedOffersInputs = default(List<LowestPricedOffersInput>), HttpMethod method = default(HttpMethod), string uri = default(string))
        {
            // to ensure "asin" is required (not null)
            if (asin == null)
            {
                throw new InvalidDataException("asin is a required property for CompetitiveSummaryRequest and cannot be null");
            }
            else
            {
                this.Asin = asin;
            }
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for CompetitiveSummaryRequest and cannot be null");
            }
            else
            {
                this.MarketplaceId = marketplaceId;
            }
            // to ensure "includedData" is required (not null)
            if (includedData == null)
            {
                throw new InvalidDataException("includedData is a required property for CompetitiveSummaryRequest and cannot be null");
            }
            else
            {
                this.IncludedData = includedData;
            }
            // to ensure "method" is required (not null)
            if (method == null)
            {
                throw new InvalidDataException("method is a required property for CompetitiveSummaryRequest and cannot be null");
            }
            else
            {
                this.Method = method;
            }
            // to ensure "uri" is required (not null)
            if (uri == null)
            {
                throw new InvalidDataException("uri is a required property for CompetitiveSummaryRequest and cannot be null");
            }
            else
            {
                this.Uri = uri;
            }
            this.LowestPricedOffersInputs = lowestPricedOffersInputs;
        }
        
        /// <summary>
        /// The Amazon Standard Identification Number for the item.
        /// </summary>
        /// <value>The Amazon Standard Identification Number for the item.</value>
        [DataMember(Name="asin", EmitDefaultValue=false)]
        public string Asin { get; set; }

        /// <summary>
        /// A marketplace identifier.
        /// </summary>
        /// <value>A marketplace identifier.</value>
        [DataMember(Name="marketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The list of requested competitive pricing data for the product.
        /// </summary>
        /// <value>The list of requested competitive pricing data for the product.</value>
        [DataMember(Name="includedData", EmitDefaultValue=false)]
        public List<CompetitiveSummaryIncludedData> IncludedData { get; set; }

        /// <summary>
        /// The list of &#x60;lowestPricedOffersInput&#x60; parameters that are used to build &#x60;lowestPricedOffers&#x60; in the response. This attribute is only valid if &#x60;lowestPricedOffers&#x60; is requested in &#x60;includedData&#x60;
        /// </summary>
        /// <value>The list of &#x60;lowestPricedOffersInput&#x60; parameters that are used to build &#x60;lowestPricedOffers&#x60; in the response. This attribute is only valid if &#x60;lowestPricedOffers&#x60; is requested in &#x60;includedData&#x60;</value>
        [DataMember(Name="lowestPricedOffersInputs", EmitDefaultValue=false)]
        public List<LowestPricedOffersInput> LowestPricedOffersInputs { get; set; }


        /// <summary>
        /// The URI associated with the individual APIs that are called as part of the batch request. For &#x60;getCompetitiveSummary&#x60;, this is &#x60;/products/pricing/2022-05-01/items/competitiveSummary&#x60;.
        /// </summary>
        /// <value>The URI associated with the individual APIs that are called as part of the batch request. For &#x60;getCompetitiveSummary&#x60;, this is &#x60;/products/pricing/2022-05-01/items/competitiveSummary&#x60;.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompetitiveSummaryRequest {\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  IncludedData: ").Append(IncludedData).Append("\n");
            sb.Append("  LowestPricedOffersInputs: ").Append(LowestPricedOffersInputs).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompetitiveSummaryRequest);
        }

        /// <summary>
        /// Returns true if CompetitiveSummaryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CompetitiveSummaryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompetitiveSummaryRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Asin == input.Asin ||
                    (this.Asin != null &&
                    this.Asin.Equals(input.Asin))
                ) && 
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) && 
                (
                    this.IncludedData == input.IncludedData ||
                    this.IncludedData != null &&
                    this.IncludedData.SequenceEqual(input.IncludedData)
                ) && 
                (
                    this.LowestPricedOffersInputs == input.LowestPricedOffersInputs ||
                    this.LowestPricedOffersInputs != null &&
                    this.LowestPricedOffersInputs.SequenceEqual(input.LowestPricedOffersInputs)
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Asin != null)
                    hashCode = hashCode * 59 + this.Asin.GetHashCode();
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.IncludedData != null)
                    hashCode = hashCode * 59 + this.IncludedData.GetHashCode();
                if (this.LowestPricedOffersInputs != null)
                    hashCode = hashCode * 59 + this.LowestPricedOffersInputs.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
