/* 
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-05-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.ProductPricing
{
    /// <summary>
    /// The offer data of a product.
    /// </summary>
    [DataContract]
    public partial class Offer :  IEquatable<Offer>, IValidatableObject
    {
        /// <summary>
        /// Item Condition.
        /// </summary>
        /// <value>Item Condition.</value>
        [DataMember(Name="condition", EmitDefaultValue=false)]
        public Condition Condition { get; set; }
        /// <summary>
        /// The item subcondition of the offer.
        /// </summary>
        /// <value>The item subcondition of the offer.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubConditionEnum
        {
            
            /// <summary>
            /// Enum New for value: New
            /// </summary>
            [EnumMember(Value = "New")]
            New = 1,
            
            /// <summary>
            /// Enum Mint for value: Mint
            /// </summary>
            [EnumMember(Value = "Mint")]
            Mint = 2,
            
            /// <summary>
            /// Enum VeryGood for value: VeryGood
            /// </summary>
            [EnumMember(Value = "VeryGood")]
            VeryGood = 3,
            
            /// <summary>
            /// Enum Good for value: Good
            /// </summary>
            [EnumMember(Value = "Good")]
            Good = 4,
            
            /// <summary>
            /// Enum Acceptable for value: Acceptable
            /// </summary>
            [EnumMember(Value = "Acceptable")]
            Acceptable = 5,
            
            /// <summary>
            /// Enum Poor for value: Poor
            /// </summary>
            [EnumMember(Value = "Poor")]
            Poor = 6,
            
            /// <summary>
            /// Enum Club for value: Club
            /// </summary>
            [EnumMember(Value = "Club")]
            Club = 7,
            
            /// <summary>
            /// Enum OEM for value: OEM
            /// </summary>
            [EnumMember(Value = "OEM")]
            OEM = 8,
            
            /// <summary>
            /// Enum Warranty for value: Warranty
            /// </summary>
            [EnumMember(Value = "Warranty")]
            Warranty = 9,
            
            /// <summary>
            /// Enum RefurbishedWarranty for value: RefurbishedWarranty
            /// </summary>
            [EnumMember(Value = "RefurbishedWarranty")]
            RefurbishedWarranty = 10,
            
            /// <summary>
            /// Enum Refurbished for value: Refurbished
            /// </summary>
            [EnumMember(Value = "Refurbished")]
            Refurbished = 11,
            
            /// <summary>
            /// Enum OpenBox for value: OpenBox
            /// </summary>
            [EnumMember(Value = "OpenBox")]
            OpenBox = 12,
            
            /// <summary>
            /// Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")]
            Other = 13
        }

        /// <summary>
        /// The item subcondition of the offer.
        /// </summary>
        /// <value>The item subcondition of the offer.</value>
        [DataMember(Name="subCondition", EmitDefaultValue=false)]
        public SubConditionEnum? SubCondition { get; set; }
        /// <summary>
        /// The fulfillment type for the offer. Possible values are &#x60;AFN&#x60; (Amazon Fulfillment Network) and &#x60;MFN&#x60; (Merchant Fulfillment Network).
        /// </summary>
        /// <value>The fulfillment type for the offer. Possible values are &#x60;AFN&#x60; (Amazon Fulfillment Network) and &#x60;MFN&#x60; (Merchant Fulfillment Network).</value>
        [DataMember(Name="fulfillmentType", EmitDefaultValue=false)]
        public FulfillmentType FulfillmentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Offer" /> class.
        /// </summary>
        [JsonConstructor]
        protected Offer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Offer" /> class.
        /// </summary>
        /// <param name="sellerId">The seller identifier for the offer. (required).</param>
        /// <param name="condition">Item Condition. (required).</param>
        /// <param name="subCondition">The item subcondition of the offer..</param>
        /// <param name="fulfillmentType">The fulfillment type for the offer. Possible values are &#x60;AFN&#x60; (Amazon Fulfillment Network) and &#x60;MFN&#x60; (Merchant Fulfillment Network). (required).</param>
        /// <param name="listingPrice">The offer buying price. This doesn&#39;t include shipping, points, or applicable promotions. (required).</param>
        /// <param name="shippingOptions">A list of shipping options associated with this offer.</param>
        /// <param name="points">The number of Amazon Points that are offered with the purchase of an item and the monetary value of these points. Note that the Points element is only returned in Japan (JP)..</param>
        /// <param name="primeDetails">Amazon Prime details..</param>
        public Offer(string sellerId = default, Condition condition = default, SubConditionEnum? subCondition = default, FulfillmentType fulfillmentType = default, MoneyType listingPrice = default, List<ShippingOption> shippingOptions = default, Points points = default, PrimeDetails primeDetails = default)
        {
            // to ensure "sellerId" is required (not null)
            if (sellerId == null)
            {
                throw new InvalidDataException("sellerId is a required property for Offer and cannot be null");
            }
            else
            {
                this.SellerId = sellerId;
            }
            // to ensure "condition" is required (not null)
            if (condition == null)
            {
                throw new InvalidDataException("condition is a required property for Offer and cannot be null");
            }
            else
            {
                this.Condition = condition;
            }
            // to ensure "fulfillmentType" is required (not null)
            if (fulfillmentType == null)
            {
                throw new InvalidDataException("fulfillmentType is a required property for Offer and cannot be null");
            }
            else
            {
                this.FulfillmentType = fulfillmentType;
            }
            // to ensure "listingPrice" is required (not null)
            if (listingPrice == null)
            {
                throw new InvalidDataException("listingPrice is a required property for Offer and cannot be null");
            }
            else
            {
                this.ListingPrice = listingPrice;
            }
            this.SubCondition = subCondition;
            this.ShippingOptions = shippingOptions;
            this.Points = points;
            this.PrimeDetails = primeDetails;
        }
        
        /// <summary>
        /// The seller identifier for the offer.
        /// </summary>
        /// <value>The seller identifier for the offer.</value>
        [DataMember(Name="sellerId", EmitDefaultValue=false)]
        public string SellerId { get; set; }




        /// <summary>
        /// The offer buying price. This doesn&#39;t include shipping, points, or applicable promotions.
        /// </summary>
        /// <value>The offer buying price. This doesn&#39;t include shipping, points, or applicable promotions.</value>
        [DataMember(Name="listingPrice", EmitDefaultValue=false)]
        public MoneyType ListingPrice { get; set; }

        /// <summary>
        /// A list of shipping options associated with this offer
        /// </summary>
        /// <value>A list of shipping options associated with this offer</value>
        [DataMember(Name="shippingOptions", EmitDefaultValue=false)]
        public List<ShippingOption> ShippingOptions { get; set; }

        /// <summary>
        /// The number of Amazon Points that are offered with the purchase of an item and the monetary value of these points. Note that the Points element is only returned in Japan (JP).
        /// </summary>
        /// <value>The number of Amazon Points that are offered with the purchase of an item and the monetary value of these points. Note that the Points element is only returned in Japan (JP).</value>
        [DataMember(Name="points", EmitDefaultValue=false)]
        public Points Points { get; set; }

        /// <summary>
        /// Amazon Prime details.
        /// </summary>
        /// <value>Amazon Prime details.</value>
        [DataMember(Name="primeDetails", EmitDefaultValue=false)]
        public PrimeDetails PrimeDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Offer {\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  SubCondition: ").Append(SubCondition).Append("\n");
            sb.Append("  FulfillmentType: ").Append(FulfillmentType).Append("\n");
            sb.Append("  ListingPrice: ").Append(ListingPrice).Append("\n");
            sb.Append("  ShippingOptions: ").Append(ShippingOptions).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  PrimeDetails: ").Append(PrimeDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Offer);
        }

        /// <summary>
        /// Returns true if Offer instances are equal
        /// </summary>
        /// <param name="input">Instance of Offer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Offer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SellerId == input.SellerId ||
                    (this.SellerId != null &&
                    this.SellerId.Equals(input.SellerId))
                ) && 
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) && 
                (
                    this.SubCondition == input.SubCondition ||
                    (this.SubCondition != null &&
                    this.SubCondition.Equals(input.SubCondition))
                ) && 
                (
                    this.FulfillmentType == input.FulfillmentType ||
                    (this.FulfillmentType != null &&
                    this.FulfillmentType.Equals(input.FulfillmentType))
                ) && 
                (
                    this.ListingPrice == input.ListingPrice ||
                    (this.ListingPrice != null &&
                    this.ListingPrice.Equals(input.ListingPrice))
                ) && 
                (
                    this.ShippingOptions == input.ShippingOptions ||
                    this.ShippingOptions != null &&
                    this.ShippingOptions.SequenceEqual(input.ShippingOptions)
                ) && 
                (
                    this.Points == input.Points ||
                    (this.Points != null &&
                    this.Points.Equals(input.Points))
                ) && 
                (
                    this.PrimeDetails == input.PrimeDetails ||
                    (this.PrimeDetails != null &&
                    this.PrimeDetails.Equals(input.PrimeDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SellerId != null)
                    hashCode = hashCode * 59 + this.SellerId.GetHashCode();
                if (this.Condition != null)
                    hashCode = hashCode * 59 + this.Condition.GetHashCode();
                if (this.SubCondition != null)
                    hashCode = hashCode * 59 + this.SubCondition.GetHashCode();
                if (this.FulfillmentType != null)
                    hashCode = hashCode * 59 + this.FulfillmentType.GetHashCode();
                if (this.ListingPrice != null)
                    hashCode = hashCode * 59 + this.ListingPrice.GetHashCode();
                if (this.ShippingOptions != null)
                    hashCode = hashCode * 59 + this.ShippingOptions.GetHashCode();
                if (this.Points != null)
                    hashCode = hashCode * 59 + this.Points.GetHashCode();
                if (this.PrimeDetails != null)
                    hashCode = hashCode * 59 + this.PrimeDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
