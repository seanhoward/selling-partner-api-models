/* 
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-05-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.ProductPricing
{
    /// <summary>
    /// The &#x60;competitiveSummaryResponse&#x60; body for a requested ASIN and &#x60;marketplaceId&#x60;.
    /// </summary>
    [DataContract]
    public partial class CompetitiveSummaryResponseBody :  IEquatable<CompetitiveSummaryResponseBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompetitiveSummaryResponseBody" /> class.
        /// </summary>
        [JsonConstructor]
        protected CompetitiveSummaryResponseBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompetitiveSummaryResponseBody" /> class.
        /// </summary>
        /// <param name="asin">The Amazon identifier for the item. (required).</param>
        /// <param name="marketplaceId">A marketplace identifier. (required).</param>
        /// <param name="featuredBuyingOptions">A list of featured buying options for the specified ASIN &#x60;marketplaceId&#x60; combination..</param>
        /// <param name="lowestPricedOffers">A list of lowest priced offers for the specified ASIN &#x60;marketplaceId&#x60; combination..</param>
        /// <param name="referencePrices">A list of reference prices for the specified ASIN &#x60;marketplaceId&#x60; combination..</param>
        /// <param name="errors">A list of errors.</param>
        public CompetitiveSummaryResponseBody(string asin = default, string marketplaceId = default, List<FeaturedBuyingOption> featuredBuyingOptions = default, List<LowestPricedOffer> lowestPricedOffers = default, List<ReferencePrice> referencePrices = default, ErrorList errors = default)
        {
            // to ensure "asin" is required (not null)
            if (asin == null)
            {
                throw new InvalidDataException("asin is a required property for CompetitiveSummaryResponseBody and cannot be null");
            }
            else
            {
                this.Asin = asin;
            }
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for CompetitiveSummaryResponseBody and cannot be null");
            }
            else
            {
                this.MarketplaceId = marketplaceId;
            }
            this.FeaturedBuyingOptions = featuredBuyingOptions;
            this.LowestPricedOffers = lowestPricedOffers;
            this.ReferencePrices = referencePrices;
            this.Errors = errors;
        }
        
        /// <summary>
        /// The Amazon identifier for the item.
        /// </summary>
        /// <value>The Amazon identifier for the item.</value>
        [DataMember(Name="asin", EmitDefaultValue=false)]
        public string Asin { get; set; }

        /// <summary>
        /// A marketplace identifier.
        /// </summary>
        /// <value>A marketplace identifier.</value>
        [DataMember(Name="marketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// A list of featured buying options for the specified ASIN &#x60;marketplaceId&#x60; combination.
        /// </summary>
        /// <value>A list of featured buying options for the specified ASIN &#x60;marketplaceId&#x60; combination.</value>
        [DataMember(Name="featuredBuyingOptions", EmitDefaultValue=false)]
        public List<FeaturedBuyingOption> FeaturedBuyingOptions { get; set; }

        /// <summary>
        /// A list of lowest priced offers for the specified ASIN &#x60;marketplaceId&#x60; combination.
        /// </summary>
        /// <value>A list of lowest priced offers for the specified ASIN &#x60;marketplaceId&#x60; combination.</value>
        [DataMember(Name="lowestPricedOffers", EmitDefaultValue=false)]
        public List<LowestPricedOffer> LowestPricedOffers { get; set; }

        /// <summary>
        /// A list of reference prices for the specified ASIN &#x60;marketplaceId&#x60; combination.
        /// </summary>
        /// <value>A list of reference prices for the specified ASIN &#x60;marketplaceId&#x60; combination.</value>
        [DataMember(Name="referencePrices", EmitDefaultValue=false)]
        public List<ReferencePrice> ReferencePrices { get; set; }

        /// <summary>
        /// A list of errors
        /// </summary>
        /// <value>A list of errors</value>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public ErrorList Errors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompetitiveSummaryResponseBody {\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  FeaturedBuyingOptions: ").Append(FeaturedBuyingOptions).Append("\n");
            sb.Append("  LowestPricedOffers: ").Append(LowestPricedOffers).Append("\n");
            sb.Append("  ReferencePrices: ").Append(ReferencePrices).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompetitiveSummaryResponseBody);
        }

        /// <summary>
        /// Returns true if CompetitiveSummaryResponseBody instances are equal
        /// </summary>
        /// <param name="input">Instance of CompetitiveSummaryResponseBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompetitiveSummaryResponseBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Asin == input.Asin ||
                    (this.Asin != null &&
                    this.Asin.Equals(input.Asin))
                ) && 
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) && 
                (
                    this.FeaturedBuyingOptions == input.FeaturedBuyingOptions ||
                    this.FeaturedBuyingOptions != null &&
                    this.FeaturedBuyingOptions.SequenceEqual(input.FeaturedBuyingOptions)
                ) && 
                (
                    this.LowestPricedOffers == input.LowestPricedOffers ||
                    this.LowestPricedOffers != null &&
                    this.LowestPricedOffers.SequenceEqual(input.LowestPricedOffers)
                ) && 
                (
                    this.ReferencePrices == input.ReferencePrices ||
                    this.ReferencePrices != null &&
                    this.ReferencePrices.SequenceEqual(input.ReferencePrices)
                ) && 
                (
                    this.Errors == input.Errors ||
                    (this.Errors != null &&
                    this.Errors.Equals(input.Errors))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Asin != null)
                    hashCode = hashCode * 59 + this.Asin.GetHashCode();
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.FeaturedBuyingOptions != null)
                    hashCode = hashCode * 59 + this.FeaturedBuyingOptions.GetHashCode();
                if (this.LowestPricedOffers != null)
                    hashCode = hashCode * 59 + this.LowestPricedOffers.GetHashCode();
                if (this.ReferencePrices != null)
                    hashCode = hashCode * 59 + this.ReferencePrices.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
