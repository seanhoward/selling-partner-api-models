/* 
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-05-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.ProductPricing
{
    /// <summary>
    /// Schema for &#x60;currentFeaturedOffer&#x60; or &#x60;competingFeaturedOffer&#x60;.
    /// </summary>
    [DataContract]
    public partial class FeaturedOffer :  IEquatable<FeaturedOffer>, IValidatableObject
    {
        /// <summary>
        /// The item condition.
        /// </summary>
        /// <value>The item condition.</value>
        [DataMember(Name="condition", EmitDefaultValue=false)]
        public Condition? Condition { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeaturedOffer" /> class.
        /// </summary>
        [JsonConstructor]
        protected FeaturedOffer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeaturedOffer" /> class.
        /// </summary>
        /// <param name="offerIdentifier">An offer identifier used to identify the merchant of the featured offer. Since this may not belong to the requester, the SKU field is omitted. (required).</param>
        /// <param name="condition">The item condition..</param>
        /// <param name="price">The current active price of the offer..</param>
        public FeaturedOffer(OfferIdentifier offerIdentifier = default, Condition? condition = default, Price price = default)
        {
            // to ensure "offerIdentifier" is required (not null)
            if (offerIdentifier == null)
            {
                throw new InvalidDataException("offerIdentifier is a required property for FeaturedOffer and cannot be null");
            }
            else
            {
                this.OfferIdentifier = offerIdentifier;
            }
            this.Condition = condition;
            this.Price = price;
        }
        
        /// <summary>
        /// An offer identifier used to identify the merchant of the featured offer. Since this may not belong to the requester, the SKU field is omitted.
        /// </summary>
        /// <value>An offer identifier used to identify the merchant of the featured offer. Since this may not belong to the requester, the SKU field is omitted.</value>
        [DataMember(Name="offerIdentifier", EmitDefaultValue=false)]
        public OfferIdentifier OfferIdentifier { get; set; }


        /// <summary>
        /// The current active price of the offer.
        /// </summary>
        /// <value>The current active price of the offer.</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public Price Price { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeaturedOffer {\n");
            sb.Append("  OfferIdentifier: ").Append(OfferIdentifier).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeaturedOffer);
        }

        /// <summary>
        /// Returns true if FeaturedOffer instances are equal
        /// </summary>
        /// <param name="input">Instance of FeaturedOffer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeaturedOffer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OfferIdentifier == input.OfferIdentifier ||
                    (this.OfferIdentifier != null &&
                    this.OfferIdentifier.Equals(input.OfferIdentifier))
                ) && 
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OfferIdentifier != null)
                    hashCode = hashCode * 59 + this.OfferIdentifier.GetHashCode();
                if (this.Condition != null)
                    hashCode = hashCode * 59 + this.Condition.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
