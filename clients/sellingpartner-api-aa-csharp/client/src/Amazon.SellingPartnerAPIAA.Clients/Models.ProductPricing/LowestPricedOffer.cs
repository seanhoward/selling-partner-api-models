/* 
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-05-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.ProductPricing
{
    /// <summary>
    /// Describes the lowest priced offers for the specified item condition and offer type.
    /// </summary>
    [DataContract]
    public partial class LowestPricedOffer :  IEquatable<LowestPricedOffer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LowestPricedOffer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LowestPricedOffer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LowestPricedOffer" /> class.
        /// </summary>
        /// <param name="lowestPricedOffersInput">The filtering criteria that are used to retrieve the lowest priced offers that correspond to the &#x60;lowestPricedOffersInputs&#x60; request. (required).</param>
        /// <param name="offers">A list of up to 20 lowest priced offers that match the criteria specified in &#x60;lowestPricedOffersInput&#x60;. (required).</param>
        public LowestPricedOffer(LowestPricedOffersInput lowestPricedOffersInput = default(LowestPricedOffersInput), List<Offer> offers = default(List<Offer>))
        {
            // to ensure "lowestPricedOffersInput" is required (not null)
            if (lowestPricedOffersInput == null)
            {
                throw new InvalidDataException("lowestPricedOffersInput is a required property for LowestPricedOffer and cannot be null");
            }
            else
            {
                this.LowestPricedOffersInput = lowestPricedOffersInput;
            }
            // to ensure "offers" is required (not null)
            if (offers == null)
            {
                throw new InvalidDataException("offers is a required property for LowestPricedOffer and cannot be null");
            }
            else
            {
                this.Offers = offers;
            }
        }
        
        /// <summary>
        /// The filtering criteria that are used to retrieve the lowest priced offers that correspond to the &#x60;lowestPricedOffersInputs&#x60; request.
        /// </summary>
        /// <value>The filtering criteria that are used to retrieve the lowest priced offers that correspond to the &#x60;lowestPricedOffersInputs&#x60; request.</value>
        [DataMember(Name="lowestPricedOffersInput", EmitDefaultValue=false)]
        public LowestPricedOffersInput LowestPricedOffersInput { get; set; }

        /// <summary>
        /// A list of up to 20 lowest priced offers that match the criteria specified in &#x60;lowestPricedOffersInput&#x60;.
        /// </summary>
        /// <value>A list of up to 20 lowest priced offers that match the criteria specified in &#x60;lowestPricedOffersInput&#x60;.</value>
        [DataMember(Name="offers", EmitDefaultValue=false)]
        public List<Offer> Offers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LowestPricedOffer {\n");
            sb.Append("  LowestPricedOffersInput: ").Append(LowestPricedOffersInput).Append("\n");
            sb.Append("  Offers: ").Append(Offers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LowestPricedOffer);
        }

        /// <summary>
        /// Returns true if LowestPricedOffer instances are equal
        /// </summary>
        /// <param name="input">Instance of LowestPricedOffer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LowestPricedOffer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LowestPricedOffersInput == input.LowestPricedOffersInput ||
                    (this.LowestPricedOffersInput != null &&
                    this.LowestPricedOffersInput.Equals(input.LowestPricedOffersInput))
                ) && 
                (
                    this.Offers == input.Offers ||
                    this.Offers != null &&
                    this.Offers.SequenceEqual(input.Offers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LowestPricedOffersInput != null)
                    hashCode = hashCode * 59 + this.LowestPricedOffersInput.GetHashCode();
                if (this.Offers != null)
                    hashCode = hashCode * 59 + this.Offers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
