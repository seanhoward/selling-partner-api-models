/* 
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-05-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.ProductPricing
{
    /// <summary>
    /// The FOEP result data for the requested offer.
    /// </summary>
    [DataContract]
    public partial class FeaturedOfferExpectedPriceResult :  IEquatable<FeaturedOfferExpectedPriceResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeaturedOfferExpectedPriceResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeaturedOfferExpectedPriceResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeaturedOfferExpectedPriceResult" /> class.
        /// </summary>
        /// <param name="featuredOfferExpectedPrice">featuredOfferExpectedPrice.</param>
        /// <param name="resultStatus">The status of the FOEP computation. Possible values include &#x60;VALID_FOEP&#x60;, &#x60;NO_COMPETING_OFFER&#x60;, &#x60;OFFER_NOT_ELIGIBLE&#x60;, &#x60;OFFER_NOT_FOUND&#x60;, and &#x60;ASIN_NOT_ELIGIBLE&#x60;. Additional values might be added in the future. (required).</param>
        /// <param name="competingFeaturedOffer">The offer that will likely be the featured offer if the target offer is priced above its FOEP. If the target offer is currently the featured offer, this property will be different than &#x60;currentFeaturedOffer&#x60;..</param>
        /// <param name="currentFeaturedOffer">The offer that is currently the featured offer. If the target offer is not currently featured, then this property will be equal to &#x60;competingFeaturedOffer&#x60;..</param>
        public FeaturedOfferExpectedPriceResult(FeaturedOfferExpectedPrice featuredOfferExpectedPrice = default(FeaturedOfferExpectedPrice), string resultStatus = default(string), FeaturedOffer competingFeaturedOffer = default(FeaturedOffer), FeaturedOffer currentFeaturedOffer = default(FeaturedOffer))
        {
            // to ensure "resultStatus" is required (not null)
            if (resultStatus == null)
            {
                throw new InvalidDataException("resultStatus is a required property for FeaturedOfferExpectedPriceResult and cannot be null");
            }
            else
            {
                this.ResultStatus = resultStatus;
            }
            this.FeaturedOfferExpectedPrice = featuredOfferExpectedPrice;
            this.CompetingFeaturedOffer = competingFeaturedOffer;
            this.CurrentFeaturedOffer = currentFeaturedOffer;
        }
        
        /// <summary>
        /// Gets or Sets FeaturedOfferExpectedPrice
        /// </summary>
        [DataMember(Name="featuredOfferExpectedPrice", EmitDefaultValue=false)]
        public FeaturedOfferExpectedPrice FeaturedOfferExpectedPrice { get; set; }

        /// <summary>
        /// The status of the FOEP computation. Possible values include &#x60;VALID_FOEP&#x60;, &#x60;NO_COMPETING_OFFER&#x60;, &#x60;OFFER_NOT_ELIGIBLE&#x60;, &#x60;OFFER_NOT_FOUND&#x60;, and &#x60;ASIN_NOT_ELIGIBLE&#x60;. Additional values might be added in the future.
        /// </summary>
        /// <value>The status of the FOEP computation. Possible values include &#x60;VALID_FOEP&#x60;, &#x60;NO_COMPETING_OFFER&#x60;, &#x60;OFFER_NOT_ELIGIBLE&#x60;, &#x60;OFFER_NOT_FOUND&#x60;, and &#x60;ASIN_NOT_ELIGIBLE&#x60;. Additional values might be added in the future.</value>
        [DataMember(Name="resultStatus", EmitDefaultValue=false)]
        public string ResultStatus { get; set; }

        /// <summary>
        /// The offer that will likely be the featured offer if the target offer is priced above its FOEP. If the target offer is currently the featured offer, this property will be different than &#x60;currentFeaturedOffer&#x60;.
        /// </summary>
        /// <value>The offer that will likely be the featured offer if the target offer is priced above its FOEP. If the target offer is currently the featured offer, this property will be different than &#x60;currentFeaturedOffer&#x60;.</value>
        [DataMember(Name="competingFeaturedOffer", EmitDefaultValue=false)]
        public FeaturedOffer CompetingFeaturedOffer { get; set; }

        /// <summary>
        /// The offer that is currently the featured offer. If the target offer is not currently featured, then this property will be equal to &#x60;competingFeaturedOffer&#x60;.
        /// </summary>
        /// <value>The offer that is currently the featured offer. If the target offer is not currently featured, then this property will be equal to &#x60;competingFeaturedOffer&#x60;.</value>
        [DataMember(Name="currentFeaturedOffer", EmitDefaultValue=false)]
        public FeaturedOffer CurrentFeaturedOffer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeaturedOfferExpectedPriceResult {\n");
            sb.Append("  FeaturedOfferExpectedPrice: ").Append(FeaturedOfferExpectedPrice).Append("\n");
            sb.Append("  ResultStatus: ").Append(ResultStatus).Append("\n");
            sb.Append("  CompetingFeaturedOffer: ").Append(CompetingFeaturedOffer).Append("\n");
            sb.Append("  CurrentFeaturedOffer: ").Append(CurrentFeaturedOffer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeaturedOfferExpectedPriceResult);
        }

        /// <summary>
        /// Returns true if FeaturedOfferExpectedPriceResult instances are equal
        /// </summary>
        /// <param name="input">Instance of FeaturedOfferExpectedPriceResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeaturedOfferExpectedPriceResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FeaturedOfferExpectedPrice == input.FeaturedOfferExpectedPrice ||
                    (this.FeaturedOfferExpectedPrice != null &&
                    this.FeaturedOfferExpectedPrice.Equals(input.FeaturedOfferExpectedPrice))
                ) && 
                (
                    this.ResultStatus == input.ResultStatus ||
                    (this.ResultStatus != null &&
                    this.ResultStatus.Equals(input.ResultStatus))
                ) && 
                (
                    this.CompetingFeaturedOffer == input.CompetingFeaturedOffer ||
                    (this.CompetingFeaturedOffer != null &&
                    this.CompetingFeaturedOffer.Equals(input.CompetingFeaturedOffer))
                ) && 
                (
                    this.CurrentFeaturedOffer == input.CurrentFeaturedOffer ||
                    (this.CurrentFeaturedOffer != null &&
                    this.CurrentFeaturedOffer.Equals(input.CurrentFeaturedOffer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeaturedOfferExpectedPrice != null)
                    hashCode = hashCode * 59 + this.FeaturedOfferExpectedPrice.GetHashCode();
                if (this.ResultStatus != null)
                    hashCode = hashCode * 59 + this.ResultStatus.GetHashCode();
                if (this.CompetingFeaturedOffer != null)
                    hashCode = hashCode * 59 + this.CompetingFeaturedOffer.GetHashCode();
                if (this.CurrentFeaturedOffer != null)
                    hashCode = hashCode * 59 + this.CurrentFeaturedOffer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
