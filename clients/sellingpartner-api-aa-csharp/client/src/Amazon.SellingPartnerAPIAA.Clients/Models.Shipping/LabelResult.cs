/* 
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.   **Note:** If you are new to the Amazon Shipping API, refer to the latest version of <a href=\"https://developer-docs.amazon.com/amazon-shipping/docs/shipping-api-v2-reference\">Amazon Shipping API (v2)</a> on the <a href=\"https://developer-docs.amazon.com/amazon-shipping/\">Amazon Shipping Developer Documentation</a> site.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Shipping
{
    /// <summary>
    /// Label details including label stream, format, size.
    /// </summary>
    [DataContract]
    public partial class LabelResult :  IEquatable<LabelResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LabelResult" /> class.
        /// </summary>
        /// <param name="containerReferenceId">containerReferenceId.</param>
        /// <param name="trackingId">The tracking identifier assigned to the container..</param>
        /// <param name="label">label.</param>
        public LabelResult(string containerReferenceId = default(string), string trackingId = default(string), Label label = default(Label))
        {
            this.ContainerReferenceId = containerReferenceId;
            this.TrackingId = trackingId;
            this.Label = label;
        }
        
        /// <summary>
        /// Gets or Sets ContainerReferenceId
        /// </summary>
        [DataMember(Name="containerReferenceId", EmitDefaultValue=false)]
        public string ContainerReferenceId { get; set; }

        /// <summary>
        /// The tracking identifier assigned to the container.
        /// </summary>
        /// <value>The tracking identifier assigned to the container.</value>
        [DataMember(Name="trackingId", EmitDefaultValue=false)]
        public string TrackingId { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public Label Label { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LabelResult {\n");
            sb.Append("  ContainerReferenceId: ").Append(ContainerReferenceId).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LabelResult);
        }

        /// <summary>
        /// Returns true if LabelResult instances are equal
        /// </summary>
        /// <param name="input">Instance of LabelResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LabelResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContainerReferenceId == input.ContainerReferenceId ||
                    (this.ContainerReferenceId != null &&
                    this.ContainerReferenceId.Equals(input.ContainerReferenceId))
                ) && 
                (
                    this.TrackingId == input.TrackingId ||
                    (this.TrackingId != null &&
                    this.TrackingId.Equals(input.TrackingId))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContainerReferenceId != null)
                    hashCode = hashCode * 59 + this.ContainerReferenceId.GetHashCode();
                if (this.TrackingId != null)
                    hashCode = hashCode * 59 + this.TrackingId.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
