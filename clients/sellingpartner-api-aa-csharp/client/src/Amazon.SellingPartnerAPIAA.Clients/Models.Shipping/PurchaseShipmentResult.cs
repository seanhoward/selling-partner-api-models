/* 
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.   **Note:** If you are new to the Amazon Shipping API, refer to the latest version of <a href=\"https://developer-docs.amazon.com/amazon-shipping/docs/shipping-api-v2-reference\">Amazon Shipping API (v2)</a> on the <a href=\"https://developer-docs.amazon.com/amazon-shipping/\">Amazon Shipping Developer Documentation</a> site.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Shipping
{
    /// <summary>
    /// The payload schema for the purchaseShipment operation.
    /// </summary>
    [DataContract]
    public partial class PurchaseShipmentResult :  IEquatable<PurchaseShipmentResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseShipmentResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PurchaseShipmentResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseShipmentResult" /> class.
        /// </summary>
        /// <param name="shipmentId">shipmentId (required).</param>
        /// <param name="serviceRate">serviceRate (required).</param>
        /// <param name="labelResults">labelResults (required).</param>
        public PurchaseShipmentResult(string shipmentId = default(string), ServiceRate serviceRate = default(ServiceRate), LabelResultList labelResults = default(LabelResultList))
        {
            // to ensure "shipmentId" is required (not null)
            if (shipmentId == null)
            {
                throw new InvalidDataException("shipmentId is a required property for PurchaseShipmentResult and cannot be null");
            }
            else
            {
                this.ShipmentId = shipmentId;
            }
            // to ensure "serviceRate" is required (not null)
            if (serviceRate == null)
            {
                throw new InvalidDataException("serviceRate is a required property for PurchaseShipmentResult and cannot be null");
            }
            else
            {
                this.ServiceRate = serviceRate;
            }
            // to ensure "labelResults" is required (not null)
            if (labelResults == null)
            {
                throw new InvalidDataException("labelResults is a required property for PurchaseShipmentResult and cannot be null");
            }
            else
            {
                this.LabelResults = labelResults;
            }
        }
        
        /// <summary>
        /// Gets or Sets ShipmentId
        /// </summary>
        [DataMember(Name="shipmentId", EmitDefaultValue=false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Gets or Sets ServiceRate
        /// </summary>
        [DataMember(Name="serviceRate", EmitDefaultValue=false)]
        public ServiceRate ServiceRate { get; set; }

        /// <summary>
        /// Gets or Sets LabelResults
        /// </summary>
        [DataMember(Name="labelResults", EmitDefaultValue=false)]
        public LabelResultList LabelResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseShipmentResult {\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ServiceRate: ").Append(ServiceRate).Append("\n");
            sb.Append("  LabelResults: ").Append(LabelResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PurchaseShipmentResult);
        }

        /// <summary>
        /// Returns true if PurchaseShipmentResult instances are equal
        /// </summary>
        /// <param name="input">Instance of PurchaseShipmentResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseShipmentResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                ) && 
                (
                    this.ServiceRate == input.ServiceRate ||
                    (this.ServiceRate != null &&
                    this.ServiceRate.Equals(input.ServiceRate))
                ) && 
                (
                    this.LabelResults == input.LabelResults ||
                    (this.LabelResults != null &&
                    this.LabelResults.Equals(input.LabelResults))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                if (this.ServiceRate != null)
                    hashCode = hashCode * 59 + this.ServiceRate.GetHashCode();
                if (this.LabelResults != null)
                    hashCode = hashCode * 59 + this.LabelResults.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
