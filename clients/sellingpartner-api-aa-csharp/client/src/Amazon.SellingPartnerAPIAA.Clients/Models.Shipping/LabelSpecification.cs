/* 
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.   **Note:** If you are new to the Amazon Shipping API, refer to the latest version of <a href=\"https://developer-docs.amazon.com/amazon-shipping/docs/shipping-api-v2-reference\">Amazon Shipping API (v2)</a> on the <a href=\"https://developer-docs.amazon.com/amazon-shipping/\">Amazon Shipping Developer Documentation</a> site.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Shipping
{
    /// <summary>
    /// The label specification info.
    /// </summary>
    [DataContract]
    public partial class LabelSpecification :  IEquatable<LabelSpecification>, IValidatableObject
    {
        /// <summary>
        /// The format of the label. Enum of PNG only for now.
        /// </summary>
        /// <value>The format of the label. Enum of PNG only for now.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LabelFormatEnum
        {
            
            /// <summary>
            /// Enum PNG for value: PNG
            /// </summary>
            [EnumMember(Value = "PNG")]
            PNG = 1
        }

        /// <summary>
        /// The format of the label. Enum of PNG only for now.
        /// </summary>
        /// <value>The format of the label. Enum of PNG only for now.</value>
        [DataMember(Name="labelFormat", EmitDefaultValue=false)]
        public LabelFormatEnum LabelFormat { get; set; }
        /// <summary>
        /// The label stock size specification in length and height. Enum of 4x6 only for now.
        /// </summary>
        /// <value>The label stock size specification in length and height. Enum of 4x6 only for now.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LabelStockSizeEnum
        {
            
            /// <summary>
            /// Enum _4x6 for value: 4x6
            /// </summary>
            [EnumMember(Value = "4x6")]
            _4x6 = 1
        }

        /// <summary>
        /// The label stock size specification in length and height. Enum of 4x6 only for now.
        /// </summary>
        /// <value>The label stock size specification in length and height. Enum of 4x6 only for now.</value>
        [DataMember(Name="labelStockSize", EmitDefaultValue=false)]
        public LabelStockSizeEnum LabelStockSize { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LabelSpecification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LabelSpecification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LabelSpecification" /> class.
        /// </summary>
        /// <param name="labelFormat">The format of the label. Enum of PNG only for now. (required).</param>
        /// <param name="labelStockSize">The label stock size specification in length and height. Enum of 4x6 only for now. (required).</param>
        public LabelSpecification(LabelFormatEnum labelFormat = default(LabelFormatEnum), LabelStockSizeEnum labelStockSize = default(LabelStockSizeEnum))
        {
            // to ensure "labelFormat" is required (not null)
            if (labelFormat == null)
            {
                throw new InvalidDataException("labelFormat is a required property for LabelSpecification and cannot be null");
            }
            else
            {
                this.LabelFormat = labelFormat;
            }
            // to ensure "labelStockSize" is required (not null)
            if (labelStockSize == null)
            {
                throw new InvalidDataException("labelStockSize is a required property for LabelSpecification and cannot be null");
            }
            else
            {
                this.LabelStockSize = labelStockSize;
            }
        }
        


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LabelSpecification {\n");
            sb.Append("  LabelFormat: ").Append(LabelFormat).Append("\n");
            sb.Append("  LabelStockSize: ").Append(LabelStockSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LabelSpecification);
        }

        /// <summary>
        /// Returns true if LabelSpecification instances are equal
        /// </summary>
        /// <param name="input">Instance of LabelSpecification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LabelSpecification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LabelFormat == input.LabelFormat ||
                    (this.LabelFormat != null &&
                    this.LabelFormat.Equals(input.LabelFormat))
                ) && 
                (
                    this.LabelStockSize == input.LabelStockSize ||
                    (this.LabelStockSize != null &&
                    this.LabelStockSize.Equals(input.LabelStockSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LabelFormat != null)
                    hashCode = hashCode * 59 + this.LabelFormat.GetHashCode();
                if (this.LabelStockSize != null)
                    hashCode = hashCode * 59 + this.LabelStockSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
