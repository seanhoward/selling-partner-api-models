/* 
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.   **Note:** If you are new to the Amazon Shipping API, refer to the latest version of <a href=\"https://developer-docs.amazon.com/amazon-shipping/docs/shipping-api-v2-reference\">Amazon Shipping API (v2)</a> on the <a href=\"https://developer-docs.amazon.com/amazon-shipping/\">Amazon Shipping Developer Documentation</a> site.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Shipping
{
    /// <summary>
    /// The payload schema for the purchaseLabels operation.
    /// </summary>
    [DataContract]
    public partial class PurchaseLabelsResult : IEquatable<PurchaseLabelsResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseLabelsResult" /> class.
        /// </summary>
        [JsonConstructor]
        protected PurchaseLabelsResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseLabelsResult" /> class.
        /// </summary>
        /// <param name="shipmentId">shipmentId (required).</param>
        /// <param name="clientReferenceId">clientReferenceId.</param>
        /// <param name="acceptedRate">acceptedRate (required).</param>
        /// <param name="labelResults">labelResults (required).</param>
        public PurchaseLabelsResult(string shipmentId = default, string clientReferenceId = default, AcceptedRate acceptedRate = default, LabelResultList labelResults = default)
        {
            // to ensure "shipmentId" is required (not null)
            if (shipmentId == null)
            {
                throw new InvalidDataException("shipmentId is a required property for PurchaseLabelsResult and cannot be null");
            }
            else
            {
                this.ShipmentId = shipmentId;
            }
            // to ensure "acceptedRate" is required (not null)
            if (acceptedRate == null)
            {
                throw new InvalidDataException("acceptedRate is a required property for PurchaseLabelsResult and cannot be null");
            }
            else
            {
                this.AcceptedRate = acceptedRate;
            }
            // to ensure "labelResults" is required (not null)
            if (labelResults == null)
            {
                throw new InvalidDataException("labelResults is a required property for PurchaseLabelsResult and cannot be null");
            }
            else
            {
                this.LabelResults = labelResults;
            }
            this.ClientReferenceId = clientReferenceId;
        }

        /// <summary>
        /// Gets or Sets ShipmentId
        /// </summary>
        [DataMember(Name = "shipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Gets or Sets ClientReferenceId
        /// </summary>
        [DataMember(Name = "clientReferenceId", EmitDefaultValue = false)]
        public string ClientReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets AcceptedRate
        /// </summary>
        [DataMember(Name = "acceptedRate", EmitDefaultValue = false)]
        public AcceptedRate AcceptedRate { get; set; }

        /// <summary>
        /// Gets or Sets LabelResults
        /// </summary>
        [DataMember(Name = "labelResults", EmitDefaultValue = false)]
        public LabelResultList LabelResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseLabelsResult {\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ClientReferenceId: ").Append(ClientReferenceId).Append("\n");
            sb.Append("  AcceptedRate: ").Append(AcceptedRate).Append("\n");
            sb.Append("  LabelResults: ").Append(LabelResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PurchaseLabelsResult);
        }

        /// <summary>
        /// Returns true if PurchaseLabelsResult instances are equal
        /// </summary>
        /// <param name="input">Instance of PurchaseLabelsResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseLabelsResult input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                ) &&
                (
                    this.ClientReferenceId == input.ClientReferenceId ||
                    (this.ClientReferenceId != null &&
                    this.ClientReferenceId.Equals(input.ClientReferenceId))
                ) &&
                (
                    this.AcceptedRate == input.AcceptedRate ||
                    (this.AcceptedRate != null &&
                    this.AcceptedRate.Equals(input.AcceptedRate))
                ) &&
                (
                    this.LabelResults == input.LabelResults ||
                    (this.LabelResults != null &&
                    this.LabelResults.Equals(input.LabelResults))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                if (this.ClientReferenceId != null)
                    hashCode = hashCode * 59 + this.ClientReferenceId.GetHashCode();
                if (this.AcceptedRate != null)
                    hashCode = hashCode * 59 + this.AcceptedRate.GetHashCode();
                if (this.LabelResults != null)
                    hashCode = hashCode * 59 + this.LabelResults.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
