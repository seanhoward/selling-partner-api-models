/* 
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.   **Note:** If you are new to the Amazon Shipping API, refer to the latest version of <a href=\"https://developer-docs.amazon.com/amazon-shipping/docs/shipping-api-v2-reference\">Amazon Shipping API (v2)</a> on the <a href=\"https://developer-docs.amazon.com/amazon-shipping/\">Amazon Shipping Developer Documentation</a> site.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Shipping
{
    /// <summary>
    /// The payload schema for the purchaseShipment operation.
    /// </summary>
    [DataContract]
    public partial class PurchaseShipmentRequest : IEquatable<PurchaseShipmentRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ServiceType
        /// </summary>
        [DataMember(Name = "serviceType", EmitDefaultValue = false)]
        public ServiceType ServiceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseShipmentRequest" /> class.
        /// </summary>
        [JsonConstructor]
        protected PurchaseShipmentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseShipmentRequest" /> class.
        /// </summary>
        /// <param name="clientReferenceId">clientReferenceId (required).</param>
        /// <param name="shipTo">shipTo (required).</param>
        /// <param name="shipFrom">shipFrom (required).</param>
        /// <param name="shipDate">The start date and time. This defaults to the current date and time..</param>
        /// <param name="serviceType">serviceType (required).</param>
        /// <param name="containers">containers (required).</param>
        /// <param name="labelSpecification">labelSpecification (required).</param>
        public PurchaseShipmentRequest(string clientReferenceId = default, Address shipTo = default, Address shipFrom = default, DateTime? shipDate = default, ServiceType serviceType = default, ContainerList containers = default, LabelSpecification labelSpecification = default)
        {
            // to ensure "clientReferenceId" is required (not null)
            if (clientReferenceId == null)
            {
                throw new InvalidDataException("clientReferenceId is a required property for PurchaseShipmentRequest and cannot be null");
            }
            else
            {
                this.ClientReferenceId = clientReferenceId;
            }
            // to ensure "shipTo" is required (not null)
            if (shipTo == null)
            {
                throw new InvalidDataException("shipTo is a required property for PurchaseShipmentRequest and cannot be null");
            }
            else
            {
                this.ShipTo = shipTo;
            }
            // to ensure "shipFrom" is required (not null)
            if (shipFrom == null)
            {
                throw new InvalidDataException("shipFrom is a required property for PurchaseShipmentRequest and cannot be null");
            }
            else
            {
                this.ShipFrom = shipFrom;
            }
            // to ensure "serviceType" is required (not null)
            if (serviceType == null)
            {
                throw new InvalidDataException("serviceType is a required property for PurchaseShipmentRequest and cannot be null");
            }
            else
            {
                this.ServiceType = serviceType;
            }
            // to ensure "containers" is required (not null)
            if (containers == null)
            {
                throw new InvalidDataException("containers is a required property for PurchaseShipmentRequest and cannot be null");
            }
            else
            {
                this.Containers = containers;
            }
            // to ensure "labelSpecification" is required (not null)
            if (labelSpecification == null)
            {
                throw new InvalidDataException("labelSpecification is a required property for PurchaseShipmentRequest and cannot be null");
            }
            else
            {
                this.LabelSpecification = labelSpecification;
            }
            this.ShipDate = shipDate;
        }

        /// <summary>
        /// Gets or Sets ClientReferenceId
        /// </summary>
        [DataMember(Name = "clientReferenceId", EmitDefaultValue = false)]
        public string ClientReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets ShipTo
        /// </summary>
        [DataMember(Name = "shipTo", EmitDefaultValue = false)]
        public Address ShipTo { get; set; }

        /// <summary>
        /// Gets or Sets ShipFrom
        /// </summary>
        [DataMember(Name = "shipFrom", EmitDefaultValue = false)]
        public Address ShipFrom { get; set; }

        /// <summary>
        /// The start date and time. This defaults to the current date and time.
        /// </summary>
        /// <value>The start date and time. This defaults to the current date and time.</value>
        [DataMember(Name = "shipDate", EmitDefaultValue = false)]
        public DateTime? ShipDate { get; set; }


        /// <summary>
        /// Gets or Sets Containers
        /// </summary>
        [DataMember(Name = "containers", EmitDefaultValue = false)]
        public ContainerList Containers { get; set; }

        /// <summary>
        /// Gets or Sets LabelSpecification
        /// </summary>
        [DataMember(Name = "labelSpecification", EmitDefaultValue = false)]
        public LabelSpecification LabelSpecification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseShipmentRequest {\n");
            sb.Append("  ClientReferenceId: ").Append(ClientReferenceId).Append("\n");
            sb.Append("  ShipTo: ").Append(ShipTo).Append("\n");
            sb.Append("  ShipFrom: ").Append(ShipFrom).Append("\n");
            sb.Append("  ShipDate: ").Append(ShipDate).Append("\n");
            sb.Append("  ServiceType: ").Append(ServiceType).Append("\n");
            sb.Append("  Containers: ").Append(Containers).Append("\n");
            sb.Append("  LabelSpecification: ").Append(LabelSpecification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PurchaseShipmentRequest);
        }

        /// <summary>
        /// Returns true if PurchaseShipmentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PurchaseShipmentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseShipmentRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ClientReferenceId == input.ClientReferenceId ||
                    (this.ClientReferenceId != null &&
                    this.ClientReferenceId.Equals(input.ClientReferenceId))
                ) &&
                (
                    this.ShipTo == input.ShipTo ||
                    (this.ShipTo != null &&
                    this.ShipTo.Equals(input.ShipTo))
                ) &&
                (
                    this.ShipFrom == input.ShipFrom ||
                    (this.ShipFrom != null &&
                    this.ShipFrom.Equals(input.ShipFrom))
                ) &&
                (
                    this.ShipDate == input.ShipDate ||
                    (this.ShipDate != null &&
                    this.ShipDate.Equals(input.ShipDate))
                ) &&
                (
                    this.ServiceType == input.ServiceType ||
                    (this.ServiceType != null &&
                    this.ServiceType.Equals(input.ServiceType))
                ) &&
                (
                    this.Containers == input.Containers ||
                    (this.Containers != null &&
                    this.Containers.Equals(input.Containers))
                ) &&
                (
                    this.LabelSpecification == input.LabelSpecification ||
                    (this.LabelSpecification != null &&
                    this.LabelSpecification.Equals(input.LabelSpecification))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientReferenceId != null)
                    hashCode = hashCode * 59 + this.ClientReferenceId.GetHashCode();
                if (this.ShipTo != null)
                    hashCode = hashCode * 59 + this.ShipTo.GetHashCode();
                if (this.ShipFrom != null)
                    hashCode = hashCode * 59 + this.ShipFrom.GetHashCode();
                if (this.ShipDate != null)
                    hashCode = hashCode * 59 + this.ShipDate.GetHashCode();
                if (this.ServiceType != null)
                    hashCode = hashCode * 59 + this.ServiceType.GetHashCode();
                if (this.Containers != null)
                    hashCode = hashCode * 59 + this.Containers.GetHashCode();
                if (this.LabelSpecification != null)
                    hashCode = hashCode * 59 + this.LabelSpecification.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
