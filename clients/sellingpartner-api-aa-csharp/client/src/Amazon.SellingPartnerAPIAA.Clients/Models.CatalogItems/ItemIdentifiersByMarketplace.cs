/* 
 * Selling Partner API for Catalog Items
 *
 * Use the Selling Partner API for Catalog Items to retrieve information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-04-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.CatalogItems
{
    /// <summary>
    /// Identifiers that are associated with the item in the Amazon catalog, grouped by &#x60;marketplaceId&#x60;.
    /// </summary>
    [DataContract]
    public partial class ItemIdentifiersByMarketplace : IEquatable<ItemIdentifiersByMarketplace>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemIdentifiersByMarketplace" /> class.
        /// </summary>
        [JsonConstructor]
        protected ItemIdentifiersByMarketplace() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemIdentifiersByMarketplace" /> class.
        /// </summary>
        /// <param name="marketplaceId">Amazon marketplace identifier. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).identifier. (required).</param>
        /// <param name="identifiers">Identifiers associated with the item in the Amazon catalog for the indicated &#x60;marketplaceId&#x60;. (required).</param>
        public ItemIdentifiersByMarketplace(string marketplaceId = default, List<ItemIdentifier> identifiers = default)
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for ItemIdentifiersByMarketplace and cannot be null");
            }
            else
            {
                this.MarketplaceId = marketplaceId;
            }
            // to ensure "identifiers" is required (not null)
            if (identifiers == null)
            {
                throw new InvalidDataException("identifiers is a required property for ItemIdentifiersByMarketplace and cannot be null");
            }
            else
            {
                this.Identifiers = identifiers;
            }
        }

        /// <summary>
        /// Amazon marketplace identifier. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).identifier.
        /// </summary>
        /// <value>Amazon marketplace identifier. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).identifier.</value>
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Identifiers associated with the item in the Amazon catalog for the indicated &#x60;marketplaceId&#x60;.
        /// </summary>
        /// <value>Identifiers associated with the item in the Amazon catalog for the indicated &#x60;marketplaceId&#x60;.</value>
        [DataMember(Name = "identifiers", EmitDefaultValue = false)]
        public List<ItemIdentifier> Identifiers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemIdentifiersByMarketplace {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemIdentifiersByMarketplace);
        }

        /// <summary>
        /// Returns true if ItemIdentifiersByMarketplace instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemIdentifiersByMarketplace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemIdentifiersByMarketplace input)
        {
            if (input == null)
                return false;

            return
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    this.Identifiers == input.Identifiers ||
                    this.Identifiers != null &&
                    this.Identifiers.SequenceEqual(input.Identifiers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.Identifiers != null)
                    hashCode = hashCode * 59 + this.Identifiers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
