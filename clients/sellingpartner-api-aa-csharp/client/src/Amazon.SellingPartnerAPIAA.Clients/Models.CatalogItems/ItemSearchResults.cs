/* 
 * Selling Partner API for Catalog Items
 *
 * Use the Selling Partner API for Catalog Items to retrieve information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-04-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.CatalogItems
{
    /// <summary>
    /// Items in the Amazon catalog and search-related metadata.
    /// </summary>
    [DataContract]
    public partial class ItemSearchResults : IEquatable<ItemSearchResults>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemSearchResults" /> class.
        /// </summary>
        [JsonConstructor]
        protected ItemSearchResults() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemSearchResults" /> class.
        /// </summary>
        /// <param name="numberOfResults">For searches that are based on &#x60;identifiers&#x60;, &#x60;numberOfResults&#x60; is the total number of Amazon catalog items found. For searches that are based on &#x60;keywords&#x60;, &#x60;numberOfResults&#x60; is the estimated total number of Amazon catalog items that are matched by the search query. Only results up to the page count limit are returned per request regardless of the number found.  **Note:** The maximum number of items (ASINs) that can be returned and paged through is 1,000. (required).</param>
        /// <param name="pagination">The &#x60;nextToken&#x60; and &#x60;previousToken&#x60; values that are required to retrieve paginated results. (required).</param>
        /// <param name="refinements">Search refinements for searches that are based on &#x60;keywords&#x60;. (required).</param>
        /// <param name="items">A list of items from the Amazon catalog. (required).</param>
        public ItemSearchResults(int? numberOfResults = default, Pagination pagination = default, Refinements refinements = default, List<Item> items = default)
        {
            // to ensure "numberOfResults" is required (not null)
            if (numberOfResults == null)
            {
                throw new InvalidDataException("numberOfResults is a required property for ItemSearchResults and cannot be null");
            }
            else
            {
                this.NumberOfResults = numberOfResults;
            }
            // to ensure "pagination" is required (not null)
            if (pagination == null)
            {
                throw new InvalidDataException("pagination is a required property for ItemSearchResults and cannot be null");
            }
            else
            {
                this.Pagination = pagination;
            }
            // to ensure "refinements" is required (not null)
            if (refinements == null)
            {
                throw new InvalidDataException("refinements is a required property for ItemSearchResults and cannot be null");
            }
            else
            {
                this.Refinements = refinements;
            }
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new InvalidDataException("items is a required property for ItemSearchResults and cannot be null");
            }
            else
            {
                this.Items = items;
            }
        }

        /// <summary>
        /// For searches that are based on &#x60;identifiers&#x60;, &#x60;numberOfResults&#x60; is the total number of Amazon catalog items found. For searches that are based on &#x60;keywords&#x60;, &#x60;numberOfResults&#x60; is the estimated total number of Amazon catalog items that are matched by the search query. Only results up to the page count limit are returned per request regardless of the number found.  **Note:** The maximum number of items (ASINs) that can be returned and paged through is 1,000.
        /// </summary>
        /// <value>For searches that are based on &#x60;identifiers&#x60;, &#x60;numberOfResults&#x60; is the total number of Amazon catalog items found. For searches that are based on &#x60;keywords&#x60;, &#x60;numberOfResults&#x60; is the estimated total number of Amazon catalog items that are matched by the search query. Only results up to the page count limit are returned per request regardless of the number found.  **Note:** The maximum number of items (ASINs) that can be returned and paged through is 1,000.</value>
        [DataMember(Name = "numberOfResults", EmitDefaultValue = false)]
        public int? NumberOfResults { get; set; }

        /// <summary>
        /// The &#x60;nextToken&#x60; and &#x60;previousToken&#x60; values that are required to retrieve paginated results.
        /// </summary>
        /// <value>The &#x60;nextToken&#x60; and &#x60;previousToken&#x60; values that are required to retrieve paginated results.</value>
        [DataMember(Name = "pagination", EmitDefaultValue = false)]
        public Pagination Pagination { get; set; }

        /// <summary>
        /// Search refinements for searches that are based on &#x60;keywords&#x60;.
        /// </summary>
        /// <value>Search refinements for searches that are based on &#x60;keywords&#x60;.</value>
        [DataMember(Name = "refinements", EmitDefaultValue = false)]
        public Refinements Refinements { get; set; }

        /// <summary>
        /// A list of items from the Amazon catalog.
        /// </summary>
        /// <value>A list of items from the Amazon catalog.</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<Item> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemSearchResults {\n");
            sb.Append("  NumberOfResults: ").Append(NumberOfResults).Append("\n");
            sb.Append("  Pagination: ").Append(Pagination).Append("\n");
            sb.Append("  Refinements: ").Append(Refinements).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemSearchResults);
        }

        /// <summary>
        /// Returns true if ItemSearchResults instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemSearchResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemSearchResults input)
        {
            if (input == null)
                return false;

            return
                (
                    this.NumberOfResults == input.NumberOfResults ||
                    (this.NumberOfResults != null &&
                    this.NumberOfResults.Equals(input.NumberOfResults))
                ) &&
                (
                    this.Pagination == input.Pagination ||
                    (this.Pagination != null &&
                    this.Pagination.Equals(input.Pagination))
                ) &&
                (
                    this.Refinements == input.Refinements ||
                    (this.Refinements != null &&
                    this.Refinements.Equals(input.Refinements))
                ) &&
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NumberOfResults != null)
                    hashCode = hashCode * 59 + this.NumberOfResults.GetHashCode();
                if (this.Pagination != null)
                    hashCode = hashCode * 59 + this.Pagination.GetHashCode();
                if (this.Refinements != null)
                    hashCode = hashCode * 59 + this.Refinements.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
