/* 
 * Selling Partner API for Replenishment
 *
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.
 *
 * OpenAPI spec version: 2022-11-07
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Replenishment
{
    /// <summary>
    /// An object which contains offer metrics.
    /// </summary>
    [DataContract]
    public partial class ListOfferMetricsResponseOffer :  IEquatable<ListOfferMetricsResponseOffer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListOfferMetricsResponseOffer" /> class.
        /// </summary>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN)..</param>
        /// <param name="notDeliveredDueToOOS">The percentage of items that were not shipped out of the total shipped units over a period of time due to being out of stock. Applicable only for the &#x60;PERFORMANCE&#x60; &#x60;timePeriodType&#x60;..</param>
        /// <param name="totalSubscriptionsRevenue">The revenue generated from subscriptions over a period of time. Applicable only for the &#x60;PERFORMANCE&#x60; &#x60;timePeriodType&#x60;..</param>
        /// <param name="shippedSubscriptionUnits">The number of units shipped to the subscribers over a period of time. Applicable only for the &#x60;PERFORMANCE&#x60; &#x60;timePeriodType&#x60;..</param>
        /// <param name="activeSubscriptions">The number of active subscriptions present at the end of the period. Applicable only for the &#x60;PERFORMANCE&#x60; &#x60;timePeriodType&#x60;..</param>
        /// <param name="revenuePenetration">The percentage of total program revenue out of total product revenue. Applicable only for the &#x60;PERFORMANCE&#x60; &#x60;timePeriodType&#x60;..</param>
        /// <param name="lostRevenueDueToOOS">The revenue that would have been generated had there not been out of stock. Applicable only for the PERFORMANCE timePeriodType..</param>
        /// <param name="couponsRevenuePenetration">The percentage of revenue from ASINs with coupons out of total revenue from all ASINs. Applicable only for the PERFORMANCE timePeriodType..</param>
        /// <param name="next30DayTotalSubscriptionsRevenue">The forecasted total subscription revenue for the next 30 days. Applicable only for the &#x60;FORECAST&#x60; &#x60;timePeriodType&#x60;..</param>
        /// <param name="next60DayTotalSubscriptionsRevenue">The forecasted total subscription revenue for the next 60 days. Applicable only for the &#x60;FORECAST&#x60; &#x60;timePeriodType&#x60;..</param>
        /// <param name="next90DayTotalSubscriptionsRevenue">The forecasted total subscription revenue for the next 90 days. Applicable only for the &#x60;FORECAST&#x60; &#x60;timePeriodType&#x60;..</param>
        /// <param name="next30DayShippedSubscriptionUnits">The forecasted shipped subscription units for the next 30 days. Applicable only for the &#x60;FORECAST&#x60; &#x60;timePeriodType&#x60;..</param>
        /// <param name="next60DayShippedSubscriptionUnits">The forecasted shipped subscription units for the next 60 days. Applicable only for the &#x60;FORECAST&#x60; &#x60;timePeriodType&#x60;..</param>
        /// <param name="next90DayShippedSubscriptionUnits">The forecasted shipped subscription units for the next 90 days. Applicable only for the &#x60;FORECAST&#x60; &#x60;timePeriodType&#x60;..</param>
        /// <param name="timeInterval">A time interval used to compute metrics..</param>
        /// <param name="currencyCode">The currency code in ISO 4217 format..</param>
        public ListOfferMetricsResponseOffer(string asin = default(string), double? notDeliveredDueToOOS = default(double?), double? totalSubscriptionsRevenue = default(double?), decimal? shippedSubscriptionUnits = default(decimal?), decimal? activeSubscriptions = default(decimal?), double? revenuePenetration = default(double?), double? lostRevenueDueToOOS = default(double?), double? couponsRevenuePenetration = default(double?), double? next30DayTotalSubscriptionsRevenue = default(double?), double? next60DayTotalSubscriptionsRevenue = default(double?), double? next90DayTotalSubscriptionsRevenue = default(double?), decimal? next30DayShippedSubscriptionUnits = default(decimal?), decimal? next60DayShippedSubscriptionUnits = default(decimal?), decimal? next90DayShippedSubscriptionUnits = default(decimal?), TimeInterval timeInterval = default(TimeInterval), string currencyCode = default(string))
        {
            this.Asin = asin;
            this.NotDeliveredDueToOOS = notDeliveredDueToOOS;
            this.TotalSubscriptionsRevenue = totalSubscriptionsRevenue;
            this.ShippedSubscriptionUnits = shippedSubscriptionUnits;
            this.ActiveSubscriptions = activeSubscriptions;
            this.RevenuePenetration = revenuePenetration;
            this.LostRevenueDueToOOS = lostRevenueDueToOOS;
            this.CouponsRevenuePenetration = couponsRevenuePenetration;
            this.Next30DayTotalSubscriptionsRevenue = next30DayTotalSubscriptionsRevenue;
            this.Next60DayTotalSubscriptionsRevenue = next60DayTotalSubscriptionsRevenue;
            this.Next90DayTotalSubscriptionsRevenue = next90DayTotalSubscriptionsRevenue;
            this.Next30DayShippedSubscriptionUnits = next30DayShippedSubscriptionUnits;
            this.Next60DayShippedSubscriptionUnits = next60DayShippedSubscriptionUnits;
            this.Next90DayShippedSubscriptionUnits = next90DayShippedSubscriptionUnits;
            this.TimeInterval = timeInterval;
            this.CurrencyCode = currencyCode;
        }
        
        /// <summary>
        /// The Amazon Standard Identification Number (ASIN).
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN).</value>
        [DataMember(Name="asin", EmitDefaultValue=false)]
        public string Asin { get; set; }

        /// <summary>
        /// The percentage of items that were not shipped out of the total shipped units over a period of time due to being out of stock. Applicable only for the &#x60;PERFORMANCE&#x60; &#x60;timePeriodType&#x60;.
        /// </summary>
        /// <value>The percentage of items that were not shipped out of the total shipped units over a period of time due to being out of stock. Applicable only for the &#x60;PERFORMANCE&#x60; &#x60;timePeriodType&#x60;.</value>
        [DataMember(Name="notDeliveredDueToOOS", EmitDefaultValue=false)]
        public double? NotDeliveredDueToOOS { get; set; }

        /// <summary>
        /// The revenue generated from subscriptions over a period of time. Applicable only for the &#x60;PERFORMANCE&#x60; &#x60;timePeriodType&#x60;.
        /// </summary>
        /// <value>The revenue generated from subscriptions over a period of time. Applicable only for the &#x60;PERFORMANCE&#x60; &#x60;timePeriodType&#x60;.</value>
        [DataMember(Name="totalSubscriptionsRevenue", EmitDefaultValue=false)]
        public double? TotalSubscriptionsRevenue { get; set; }

        /// <summary>
        /// The number of units shipped to the subscribers over a period of time. Applicable only for the &#x60;PERFORMANCE&#x60; &#x60;timePeriodType&#x60;.
        /// </summary>
        /// <value>The number of units shipped to the subscribers over a period of time. Applicable only for the &#x60;PERFORMANCE&#x60; &#x60;timePeriodType&#x60;.</value>
        [DataMember(Name="shippedSubscriptionUnits", EmitDefaultValue=false)]
        public decimal? ShippedSubscriptionUnits { get; set; }

        /// <summary>
        /// The number of active subscriptions present at the end of the period. Applicable only for the &#x60;PERFORMANCE&#x60; &#x60;timePeriodType&#x60;.
        /// </summary>
        /// <value>The number of active subscriptions present at the end of the period. Applicable only for the &#x60;PERFORMANCE&#x60; &#x60;timePeriodType&#x60;.</value>
        [DataMember(Name="activeSubscriptions", EmitDefaultValue=false)]
        public decimal? ActiveSubscriptions { get; set; }

        /// <summary>
        /// The percentage of total program revenue out of total product revenue. Applicable only for the &#x60;PERFORMANCE&#x60; &#x60;timePeriodType&#x60;.
        /// </summary>
        /// <value>The percentage of total program revenue out of total product revenue. Applicable only for the &#x60;PERFORMANCE&#x60; &#x60;timePeriodType&#x60;.</value>
        [DataMember(Name="revenuePenetration", EmitDefaultValue=false)]
        public double? RevenuePenetration { get; set; }

        /// <summary>
        /// The revenue that would have been generated had there not been out of stock. Applicable only for the PERFORMANCE timePeriodType.
        /// </summary>
        /// <value>The revenue that would have been generated had there not been out of stock. Applicable only for the PERFORMANCE timePeriodType.</value>
        [DataMember(Name="lostRevenueDueToOOS", EmitDefaultValue=false)]
        public double? LostRevenueDueToOOS { get; set; }

        /// <summary>
        /// The percentage of revenue from ASINs with coupons out of total revenue from all ASINs. Applicable only for the PERFORMANCE timePeriodType.
        /// </summary>
        /// <value>The percentage of revenue from ASINs with coupons out of total revenue from all ASINs. Applicable only for the PERFORMANCE timePeriodType.</value>
        [DataMember(Name="couponsRevenuePenetration", EmitDefaultValue=false)]
        public double? CouponsRevenuePenetration { get; set; }

        /// <summary>
        /// The forecasted total subscription revenue for the next 30 days. Applicable only for the &#x60;FORECAST&#x60; &#x60;timePeriodType&#x60;.
        /// </summary>
        /// <value>The forecasted total subscription revenue for the next 30 days. Applicable only for the &#x60;FORECAST&#x60; &#x60;timePeriodType&#x60;.</value>
        [DataMember(Name="next30DayTotalSubscriptionsRevenue", EmitDefaultValue=false)]
        public double? Next30DayTotalSubscriptionsRevenue { get; set; }

        /// <summary>
        /// The forecasted total subscription revenue for the next 60 days. Applicable only for the &#x60;FORECAST&#x60; &#x60;timePeriodType&#x60;.
        /// </summary>
        /// <value>The forecasted total subscription revenue for the next 60 days. Applicable only for the &#x60;FORECAST&#x60; &#x60;timePeriodType&#x60;.</value>
        [DataMember(Name="next60DayTotalSubscriptionsRevenue", EmitDefaultValue=false)]
        public double? Next60DayTotalSubscriptionsRevenue { get; set; }

        /// <summary>
        /// The forecasted total subscription revenue for the next 90 days. Applicable only for the &#x60;FORECAST&#x60; &#x60;timePeriodType&#x60;.
        /// </summary>
        /// <value>The forecasted total subscription revenue for the next 90 days. Applicable only for the &#x60;FORECAST&#x60; &#x60;timePeriodType&#x60;.</value>
        [DataMember(Name="next90DayTotalSubscriptionsRevenue", EmitDefaultValue=false)]
        public double? Next90DayTotalSubscriptionsRevenue { get; set; }

        /// <summary>
        /// The forecasted shipped subscription units for the next 30 days. Applicable only for the &#x60;FORECAST&#x60; &#x60;timePeriodType&#x60;.
        /// </summary>
        /// <value>The forecasted shipped subscription units for the next 30 days. Applicable only for the &#x60;FORECAST&#x60; &#x60;timePeriodType&#x60;.</value>
        [DataMember(Name="next30DayShippedSubscriptionUnits", EmitDefaultValue=false)]
        public decimal? Next30DayShippedSubscriptionUnits { get; set; }

        /// <summary>
        /// The forecasted shipped subscription units for the next 60 days. Applicable only for the &#x60;FORECAST&#x60; &#x60;timePeriodType&#x60;.
        /// </summary>
        /// <value>The forecasted shipped subscription units for the next 60 days. Applicable only for the &#x60;FORECAST&#x60; &#x60;timePeriodType&#x60;.</value>
        [DataMember(Name="next60DayShippedSubscriptionUnits", EmitDefaultValue=false)]
        public decimal? Next60DayShippedSubscriptionUnits { get; set; }

        /// <summary>
        /// The forecasted shipped subscription units for the next 90 days. Applicable only for the &#x60;FORECAST&#x60; &#x60;timePeriodType&#x60;.
        /// </summary>
        /// <value>The forecasted shipped subscription units for the next 90 days. Applicable only for the &#x60;FORECAST&#x60; &#x60;timePeriodType&#x60;.</value>
        [DataMember(Name="next90DayShippedSubscriptionUnits", EmitDefaultValue=false)]
        public decimal? Next90DayShippedSubscriptionUnits { get; set; }

        /// <summary>
        /// A time interval used to compute metrics.
        /// </summary>
        /// <value>A time interval used to compute metrics.</value>
        [DataMember(Name="timeInterval", EmitDefaultValue=false)]
        public TimeInterval TimeInterval { get; set; }

        /// <summary>
        /// The currency code in ISO 4217 format.
        /// </summary>
        /// <value>The currency code in ISO 4217 format.</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListOfferMetricsResponseOffer {\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  NotDeliveredDueToOOS: ").Append(NotDeliveredDueToOOS).Append("\n");
            sb.Append("  TotalSubscriptionsRevenue: ").Append(TotalSubscriptionsRevenue).Append("\n");
            sb.Append("  ShippedSubscriptionUnits: ").Append(ShippedSubscriptionUnits).Append("\n");
            sb.Append("  ActiveSubscriptions: ").Append(ActiveSubscriptions).Append("\n");
            sb.Append("  RevenuePenetration: ").Append(RevenuePenetration).Append("\n");
            sb.Append("  LostRevenueDueToOOS: ").Append(LostRevenueDueToOOS).Append("\n");
            sb.Append("  CouponsRevenuePenetration: ").Append(CouponsRevenuePenetration).Append("\n");
            sb.Append("  Next30DayTotalSubscriptionsRevenue: ").Append(Next30DayTotalSubscriptionsRevenue).Append("\n");
            sb.Append("  Next60DayTotalSubscriptionsRevenue: ").Append(Next60DayTotalSubscriptionsRevenue).Append("\n");
            sb.Append("  Next90DayTotalSubscriptionsRevenue: ").Append(Next90DayTotalSubscriptionsRevenue).Append("\n");
            sb.Append("  Next30DayShippedSubscriptionUnits: ").Append(Next30DayShippedSubscriptionUnits).Append("\n");
            sb.Append("  Next60DayShippedSubscriptionUnits: ").Append(Next60DayShippedSubscriptionUnits).Append("\n");
            sb.Append("  Next90DayShippedSubscriptionUnits: ").Append(Next90DayShippedSubscriptionUnits).Append("\n");
            sb.Append("  TimeInterval: ").Append(TimeInterval).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListOfferMetricsResponseOffer);
        }

        /// <summary>
        /// Returns true if ListOfferMetricsResponseOffer instances are equal
        /// </summary>
        /// <param name="input">Instance of ListOfferMetricsResponseOffer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListOfferMetricsResponseOffer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Asin == input.Asin ||
                    (this.Asin != null &&
                    this.Asin.Equals(input.Asin))
                ) && 
                (
                    this.NotDeliveredDueToOOS == input.NotDeliveredDueToOOS ||
                    (this.NotDeliveredDueToOOS != null &&
                    this.NotDeliveredDueToOOS.Equals(input.NotDeliveredDueToOOS))
                ) && 
                (
                    this.TotalSubscriptionsRevenue == input.TotalSubscriptionsRevenue ||
                    (this.TotalSubscriptionsRevenue != null &&
                    this.TotalSubscriptionsRevenue.Equals(input.TotalSubscriptionsRevenue))
                ) && 
                (
                    this.ShippedSubscriptionUnits == input.ShippedSubscriptionUnits ||
                    (this.ShippedSubscriptionUnits != null &&
                    this.ShippedSubscriptionUnits.Equals(input.ShippedSubscriptionUnits))
                ) && 
                (
                    this.ActiveSubscriptions == input.ActiveSubscriptions ||
                    (this.ActiveSubscriptions != null &&
                    this.ActiveSubscriptions.Equals(input.ActiveSubscriptions))
                ) && 
                (
                    this.RevenuePenetration == input.RevenuePenetration ||
                    (this.RevenuePenetration != null &&
                    this.RevenuePenetration.Equals(input.RevenuePenetration))
                ) && 
                (
                    this.LostRevenueDueToOOS == input.LostRevenueDueToOOS ||
                    (this.LostRevenueDueToOOS != null &&
                    this.LostRevenueDueToOOS.Equals(input.LostRevenueDueToOOS))
                ) && 
                (
                    this.CouponsRevenuePenetration == input.CouponsRevenuePenetration ||
                    (this.CouponsRevenuePenetration != null &&
                    this.CouponsRevenuePenetration.Equals(input.CouponsRevenuePenetration))
                ) && 
                (
                    this.Next30DayTotalSubscriptionsRevenue == input.Next30DayTotalSubscriptionsRevenue ||
                    (this.Next30DayTotalSubscriptionsRevenue != null &&
                    this.Next30DayTotalSubscriptionsRevenue.Equals(input.Next30DayTotalSubscriptionsRevenue))
                ) && 
                (
                    this.Next60DayTotalSubscriptionsRevenue == input.Next60DayTotalSubscriptionsRevenue ||
                    (this.Next60DayTotalSubscriptionsRevenue != null &&
                    this.Next60DayTotalSubscriptionsRevenue.Equals(input.Next60DayTotalSubscriptionsRevenue))
                ) && 
                (
                    this.Next90DayTotalSubscriptionsRevenue == input.Next90DayTotalSubscriptionsRevenue ||
                    (this.Next90DayTotalSubscriptionsRevenue != null &&
                    this.Next90DayTotalSubscriptionsRevenue.Equals(input.Next90DayTotalSubscriptionsRevenue))
                ) && 
                (
                    this.Next30DayShippedSubscriptionUnits == input.Next30DayShippedSubscriptionUnits ||
                    (this.Next30DayShippedSubscriptionUnits != null &&
                    this.Next30DayShippedSubscriptionUnits.Equals(input.Next30DayShippedSubscriptionUnits))
                ) && 
                (
                    this.Next60DayShippedSubscriptionUnits == input.Next60DayShippedSubscriptionUnits ||
                    (this.Next60DayShippedSubscriptionUnits != null &&
                    this.Next60DayShippedSubscriptionUnits.Equals(input.Next60DayShippedSubscriptionUnits))
                ) && 
                (
                    this.Next90DayShippedSubscriptionUnits == input.Next90DayShippedSubscriptionUnits ||
                    (this.Next90DayShippedSubscriptionUnits != null &&
                    this.Next90DayShippedSubscriptionUnits.Equals(input.Next90DayShippedSubscriptionUnits))
                ) && 
                (
                    this.TimeInterval == input.TimeInterval ||
                    (this.TimeInterval != null &&
                    this.TimeInterval.Equals(input.TimeInterval))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Asin != null)
                    hashCode = hashCode * 59 + this.Asin.GetHashCode();
                if (this.NotDeliveredDueToOOS != null)
                    hashCode = hashCode * 59 + this.NotDeliveredDueToOOS.GetHashCode();
                if (this.TotalSubscriptionsRevenue != null)
                    hashCode = hashCode * 59 + this.TotalSubscriptionsRevenue.GetHashCode();
                if (this.ShippedSubscriptionUnits != null)
                    hashCode = hashCode * 59 + this.ShippedSubscriptionUnits.GetHashCode();
                if (this.ActiveSubscriptions != null)
                    hashCode = hashCode * 59 + this.ActiveSubscriptions.GetHashCode();
                if (this.RevenuePenetration != null)
                    hashCode = hashCode * 59 + this.RevenuePenetration.GetHashCode();
                if (this.LostRevenueDueToOOS != null)
                    hashCode = hashCode * 59 + this.LostRevenueDueToOOS.GetHashCode();
                if (this.CouponsRevenuePenetration != null)
                    hashCode = hashCode * 59 + this.CouponsRevenuePenetration.GetHashCode();
                if (this.Next30DayTotalSubscriptionsRevenue != null)
                    hashCode = hashCode * 59 + this.Next30DayTotalSubscriptionsRevenue.GetHashCode();
                if (this.Next60DayTotalSubscriptionsRevenue != null)
                    hashCode = hashCode * 59 + this.Next60DayTotalSubscriptionsRevenue.GetHashCode();
                if (this.Next90DayTotalSubscriptionsRevenue != null)
                    hashCode = hashCode * 59 + this.Next90DayTotalSubscriptionsRevenue.GetHashCode();
                if (this.Next30DayShippedSubscriptionUnits != null)
                    hashCode = hashCode * 59 + this.Next30DayShippedSubscriptionUnits.GetHashCode();
                if (this.Next60DayShippedSubscriptionUnits != null)
                    hashCode = hashCode * 59 + this.Next60DayShippedSubscriptionUnits.GetHashCode();
                if (this.Next90DayShippedSubscriptionUnits != null)
                    hashCode = hashCode * 59 + this.Next90DayShippedSubscriptionUnits.GetHashCode();
                if (this.TimeInterval != null)
                    hashCode = hashCode * 59 + this.TimeInterval.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NotDeliveredDueToOOS (double?) maximum
            if(this.NotDeliveredDueToOOS > (double?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NotDeliveredDueToOOS, must be a value less than or equal to 100.", new [] { "NotDeliveredDueToOOS" });
            }

            // NotDeliveredDueToOOS (double?) minimum
            if(this.NotDeliveredDueToOOS < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NotDeliveredDueToOOS, must be a value greater than or equal to 0.", new [] { "NotDeliveredDueToOOS" });
            }

            // TotalSubscriptionsRevenue (double?) minimum
            if(this.TotalSubscriptionsRevenue < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalSubscriptionsRevenue, must be a value greater than or equal to 0.", new [] { "TotalSubscriptionsRevenue" });
            }

            // ShippedSubscriptionUnits (decimal?) minimum
            if(this.ShippedSubscriptionUnits < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShippedSubscriptionUnits, must be a value greater than or equal to 0.", new [] { "ShippedSubscriptionUnits" });
            }

            // ActiveSubscriptions (decimal?) minimum
            if(this.ActiveSubscriptions < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ActiveSubscriptions, must be a value greater than or equal to 0.", new [] { "ActiveSubscriptions" });
            }

            // RevenuePenetration (double?) maximum
            if(this.RevenuePenetration > (double?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RevenuePenetration, must be a value less than or equal to 100.", new [] { "RevenuePenetration" });
            }

            // RevenuePenetration (double?) minimum
            if(this.RevenuePenetration < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RevenuePenetration, must be a value greater than or equal to 0.", new [] { "RevenuePenetration" });
            }

            // LostRevenueDueToOOS (double?) minimum
            if(this.LostRevenueDueToOOS < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LostRevenueDueToOOS, must be a value greater than or equal to 0.", new [] { "LostRevenueDueToOOS" });
            }

            // CouponsRevenuePenetration (double?) maximum
            if(this.CouponsRevenuePenetration > (double?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CouponsRevenuePenetration, must be a value less than or equal to 100.", new [] { "CouponsRevenuePenetration" });
            }

            // CouponsRevenuePenetration (double?) minimum
            if(this.CouponsRevenuePenetration < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CouponsRevenuePenetration, must be a value greater than or equal to 0.", new [] { "CouponsRevenuePenetration" });
            }

            // Next30DayTotalSubscriptionsRevenue (double?) minimum
            if(this.Next30DayTotalSubscriptionsRevenue < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Next30DayTotalSubscriptionsRevenue, must be a value greater than or equal to 0.", new [] { "Next30DayTotalSubscriptionsRevenue" });
            }

            // Next60DayTotalSubscriptionsRevenue (double?) minimum
            if(this.Next60DayTotalSubscriptionsRevenue < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Next60DayTotalSubscriptionsRevenue, must be a value greater than or equal to 0.", new [] { "Next60DayTotalSubscriptionsRevenue" });
            }

            // Next90DayTotalSubscriptionsRevenue (double?) minimum
            if(this.Next90DayTotalSubscriptionsRevenue < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Next90DayTotalSubscriptionsRevenue, must be a value greater than or equal to 0.", new [] { "Next90DayTotalSubscriptionsRevenue" });
            }

            // Next30DayShippedSubscriptionUnits (decimal?) minimum
            if(this.Next30DayShippedSubscriptionUnits < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Next30DayShippedSubscriptionUnits, must be a value greater than or equal to 0.", new [] { "Next30DayShippedSubscriptionUnits" });
            }

            // Next60DayShippedSubscriptionUnits (decimal?) minimum
            if(this.Next60DayShippedSubscriptionUnits < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Next60DayShippedSubscriptionUnits, must be a value greater than or equal to 0.", new [] { "Next60DayShippedSubscriptionUnits" });
            }

            // Next90DayShippedSubscriptionUnits (decimal?) minimum
            if(this.Next90DayShippedSubscriptionUnits < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Next90DayShippedSubscriptionUnits, must be a value greater than or equal to 0.", new [] { "Next90DayShippedSubscriptionUnits" });
            }

            yield break;
        }
    }

}
