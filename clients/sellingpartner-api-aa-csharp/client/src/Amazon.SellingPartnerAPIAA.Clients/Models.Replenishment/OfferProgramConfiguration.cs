/* 
 * Selling Partner API for Replenishment
 *
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.
 *
 * OpenAPI spec version: 2022-11-07
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Replenishment
{
    /// <summary>
    /// The offer program configuration contains a set of program properties for an offer.
    /// </summary>
    [DataContract]
    public partial class OfferProgramConfiguration :  IEquatable<OfferProgramConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Determines whether the offer was automatically or manually enrolled in the program. This property is only supported for sellers and not vendors.
        /// </summary>
        /// <value>Determines whether the offer was automatically or manually enrolled in the program. This property is only supported for sellers and not vendors.</value>
        [DataMember(Name="enrollmentMethod", EmitDefaultValue=false)]
        public EnrollmentMethod? EnrollmentMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferProgramConfiguration" /> class.
        /// </summary>
        /// <param name="preferences">An object which contains the preferences applied to the offer..</param>
        /// <param name="promotions">An object which contains the promotions applied to the offer..</param>
        /// <param name="enrollmentMethod">Determines whether the offer was automatically or manually enrolled in the program. This property is only supported for sellers and not vendors..</param>
        public OfferProgramConfiguration(OfferProgramConfigurationPreferences preferences = default, OfferProgramConfigurationPromotions promotions = default, EnrollmentMethod? enrollmentMethod = default)
        {
            this.Preferences = preferences;
            this.Promotions = promotions;
            this.EnrollmentMethod = enrollmentMethod;
        }
        
        /// <summary>
        /// An object which contains the preferences applied to the offer.
        /// </summary>
        /// <value>An object which contains the preferences applied to the offer.</value>
        [DataMember(Name="preferences", EmitDefaultValue=false)]
        public OfferProgramConfigurationPreferences Preferences { get; set; }

        /// <summary>
        /// An object which contains the promotions applied to the offer.
        /// </summary>
        /// <value>An object which contains the promotions applied to the offer.</value>
        [DataMember(Name="promotions", EmitDefaultValue=false)]
        public OfferProgramConfigurationPromotions Promotions { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OfferProgramConfiguration {\n");
            sb.Append("  Preferences: ").Append(Preferences).Append("\n");
            sb.Append("  Promotions: ").Append(Promotions).Append("\n");
            sb.Append("  EnrollmentMethod: ").Append(EnrollmentMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OfferProgramConfiguration);
        }

        /// <summary>
        /// Returns true if OfferProgramConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of OfferProgramConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OfferProgramConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Preferences == input.Preferences ||
                    (this.Preferences != null &&
                    this.Preferences.Equals(input.Preferences))
                ) && 
                (
                    this.Promotions == input.Promotions ||
                    (this.Promotions != null &&
                    this.Promotions.Equals(input.Promotions))
                ) && 
                (
                    this.EnrollmentMethod == input.EnrollmentMethod ||
                    (this.EnrollmentMethod != null &&
                    this.EnrollmentMethod.Equals(input.EnrollmentMethod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Preferences != null)
                    hashCode = hashCode * 59 + this.Preferences.GetHashCode();
                if (this.Promotions != null)
                    hashCode = hashCode * 59 + this.Promotions.GetHashCode();
                if (this.EnrollmentMethod != null)
                    hashCode = hashCode * 59 + this.EnrollmentMethod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
