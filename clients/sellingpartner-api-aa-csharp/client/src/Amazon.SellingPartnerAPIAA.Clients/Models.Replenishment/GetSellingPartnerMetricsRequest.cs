/* 
 * Selling Partner API for Replenishment
 *
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.
 *
 * OpenAPI spec version: 2022-11-07
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Replenishment
{
    /// <summary>
    /// The request body for the &#x60;getSellingPartnerMetrics&#x60; operation.
    /// </summary>
    [DataContract]
    public partial class GetSellingPartnerMetricsRequest : IEquatable<GetSellingPartnerMetricsRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets AggregationFrequency
        /// </summary>
        [DataMember(Name = "aggregationFrequency", EmitDefaultValue = false)]
        public AggregationFrequency? AggregationFrequency { get; set; }
        /// <summary>
        /// Gets or Sets TimePeriodType
        /// </summary>
        [DataMember(Name = "timePeriodType", EmitDefaultValue = false)]
        public TimePeriodType TimePeriodType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSellingPartnerMetricsRequest" /> class.
        /// </summary>
        [JsonConstructor]
        protected GetSellingPartnerMetricsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSellingPartnerMetricsRequest" /> class.
        /// </summary>
        /// <param name="aggregationFrequency">aggregationFrequency.</param>
        /// <param name="timeInterval">A time interval used to compute metrics. (required).</param>
        /// <param name="metrics">The list of metrics requested. If no metric value is provided, data for all of the metrics will be returned..</param>
        /// <param name="timePeriodType">timePeriodType (required).</param>
        /// <param name="marketplaceId">The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL.  Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace. (required).</param>
        /// <param name="programTypes">The list of replenishment program types for which to return metrics. (required).</param>
        public GetSellingPartnerMetricsRequest(AggregationFrequency? aggregationFrequency = default, TimeInterval timeInterval = default, List<Metric> metrics = default, TimePeriodType timePeriodType = default, string marketplaceId = default, ProgramTypes programTypes = default)
        {
            // to ensure "timeInterval" is required (not null)
            if (timeInterval == null)
            {
                throw new InvalidDataException("timeInterval is a required property for GetSellingPartnerMetricsRequest and cannot be null");
            }
            else
            {
                this.TimeInterval = timeInterval;
            }
            // to ensure "timePeriodType" is required (not null)
            if (timePeriodType == null)
            {
                throw new InvalidDataException("timePeriodType is a required property for GetSellingPartnerMetricsRequest and cannot be null");
            }
            else
            {
                this.TimePeriodType = timePeriodType;
            }
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for GetSellingPartnerMetricsRequest and cannot be null");
            }
            else
            {
                this.MarketplaceId = marketplaceId;
            }
            // to ensure "programTypes" is required (not null)
            if (programTypes == null)
            {
                throw new InvalidDataException("programTypes is a required property for GetSellingPartnerMetricsRequest and cannot be null");
            }
            else
            {
                this.ProgramTypes = programTypes;
            }
            this.AggregationFrequency = aggregationFrequency;
            this.Metrics = metrics;
        }


        /// <summary>
        /// A time interval used to compute metrics.
        /// </summary>
        /// <value>A time interval used to compute metrics.</value>
        [DataMember(Name = "timeInterval", EmitDefaultValue = false)]
        public TimeInterval TimeInterval { get; set; }

        /// <summary>
        /// The list of metrics requested. If no metric value is provided, data for all of the metrics will be returned.
        /// </summary>
        /// <value>The list of metrics requested. If no metric value is provided, data for all of the metrics will be returned.</value>
        [DataMember(Name = "metrics", EmitDefaultValue = false)]
        public List<Metric> Metrics { get; set; }


        /// <summary>
        /// The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL.  Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace.
        /// </summary>
        /// <value>The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL.  Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace.</value>
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The list of replenishment program types for which to return metrics.
        /// </summary>
        /// <value>The list of replenishment program types for which to return metrics.</value>
        [DataMember(Name = "programTypes", EmitDefaultValue = false)]
        public ProgramTypes ProgramTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetSellingPartnerMetricsRequest {\n");
            sb.Append("  AggregationFrequency: ").Append(AggregationFrequency).Append("\n");
            sb.Append("  TimeInterval: ").Append(TimeInterval).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  TimePeriodType: ").Append(TimePeriodType).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  ProgramTypes: ").Append(ProgramTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSellingPartnerMetricsRequest);
        }

        /// <summary>
        /// Returns true if GetSellingPartnerMetricsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSellingPartnerMetricsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSellingPartnerMetricsRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    this.AggregationFrequency == input.AggregationFrequency ||
                    (this.AggregationFrequency != null &&
                    this.AggregationFrequency.Equals(input.AggregationFrequency))
                ) &&
                (
                    this.TimeInterval == input.TimeInterval ||
                    (this.TimeInterval != null &&
                    this.TimeInterval.Equals(input.TimeInterval))
                ) &&
                (
                    this.Metrics == input.Metrics ||
                    this.Metrics != null &&
                    this.Metrics.SequenceEqual(input.Metrics)
                ) &&
                (
                    this.TimePeriodType == input.TimePeriodType ||
                    (this.TimePeriodType != null &&
                    this.TimePeriodType.Equals(input.TimePeriodType))
                ) &&
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    this.ProgramTypes == input.ProgramTypes ||
                    (this.ProgramTypes != null &&
                    this.ProgramTypes.Equals(input.ProgramTypes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AggregationFrequency != null)
                    hashCode = hashCode * 59 + this.AggregationFrequency.GetHashCode();
                if (this.TimeInterval != null)
                    hashCode = hashCode * 59 + this.TimeInterval.GetHashCode();
                if (this.Metrics != null)
                    hashCode = hashCode * 59 + this.Metrics.GetHashCode();
                if (this.TimePeriodType != null)
                    hashCode = hashCode * 59 + this.TimePeriodType.GetHashCode();
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.ProgramTypes != null)
                    hashCode = hashCode * 59 + this.ProgramTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
