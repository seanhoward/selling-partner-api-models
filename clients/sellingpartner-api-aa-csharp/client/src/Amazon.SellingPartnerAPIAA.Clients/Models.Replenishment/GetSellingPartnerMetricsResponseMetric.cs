/* 
 * Selling Partner API for Replenishment
 *
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.
 *
 * OpenAPI spec version: 2022-11-07
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Replenishment
{
    /// <summary>
    /// An object which contains metric data for a selling partner.
    /// </summary>
    [DataContract]
    public partial class GetSellingPartnerMetricsResponseMetric :  IEquatable<GetSellingPartnerMetricsResponseMetric>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSellingPartnerMetricsResponseMetric" /> class.
        /// </summary>
        /// <param name="notDeliveredDueToOOS">The percentage of items that were not shipped out of the total shipped units over a period of time due to being out of stock. Applicable to PERFORMANCE timePeriodType..</param>
        /// <param name="totalSubscriptionsRevenue">The revenue generated from subscriptions over a period of time. Applicable for both the PERFORMANCE and FORECAST timePeriodType..</param>
        /// <param name="shippedSubscriptionUnits">The number of units shipped to the subscribers over a period of time. Applicable for both the PERFORMANCE and FORECAST timePeriodType..</param>
        /// <param name="activeSubscriptions">The number of active subscriptions present at the end of the period. Applicable to PERFORMANCE timePeriodType..</param>
        /// <param name="subscriberAverageRevenue">The average revenue per subscriber of the program over a period of past 12 months for sellers and 6 months for vendors. Applicable to PERFORMANCE timePeriodType..</param>
        /// <param name="nonSubscriberAverageRevenue">The average revenue per non-subscriber of the program over a period of past 12 months for sellers and 6 months for vendors. Applicable to PERFORMANCE timePeriodType..</param>
        /// <param name="lostRevenueDueToOOS">The revenue that would have been generated had there not been out of stock. Applicable to PERFORMANCE timePeriodType..</param>
        /// <param name="subscriberAverageReorders">The average reorders per subscriber of the program over a period of 12 months. Applicable to PERFORMANCE timePeriodType..</param>
        /// <param name="nonSubscriberAverageReorders">The average reorders per non-subscriber of the program over a period of past 12 months. Applicable to PERFORMANCE timePeriodType..</param>
        /// <param name="couponsRevenuePenetration">The percentage of revenue from ASINs with coupons out of total revenue from all ASINs. Applicable to PERFORMANCE timePeriodType..</param>
        /// <param name="revenueFromSubscriptionsWithMultipleDeliveries">The subscription revenue generated from subscriptions with over two deliveries over the past 12 months. Applicable to PERFORMANCE timePeriodType..</param>
        /// <param name="revenueFromActiveSubscriptionsWithSingleDelivery">The subscription revenue generated from active subscriptions with one delivery over the past 12 months. Applicable to PERFORMANCE timePeriodType..</param>
        /// <param name="revenueFromCancelledSubscriptionsAfterSingleDelivery">The subscription revenue generated from subscriptions which are cancelled after one delivery over the past 12 months. Applicable to PERFORMANCE timePeriodType..</param>
        /// <param name="subscriberRetentionFor30Days">The percentage of subscriptions retained after 30 days of subscription creation. Applicable to PERFORMANCE timePeriodType..</param>
        /// <param name="subscriberRetentionFor90Days">The percentage of subscriptions retained after 90 days of subscription creation. Applicable to PERFORMANCE timePeriodType..</param>
        /// <param name="revenuePenetrationFor0PercentSellerFunding">The percentage of subscription revenue generated by offers with 0% seller-funded discount over the last 12 months. Applicable to PERFORMANCE timePeriodType..</param>
        /// <param name="revenuePenetrationFor5PercentSellerFunding">[Applicable only for Sellers] The percentage of subscription revenue generated by offers with 5% seller-funded discount over the last 12 months. Applicable to PERFORMANCE timePeriodType..</param>
        /// <param name="revenuePenetrationFor10PercentSellerFunding">[Applicable only for Sellers] The percentage of subscription revenue generated by offers with 10% seller-funded discount over the last 12 months. Applicable to PERFORMANCE timePeriodType..</param>
        /// <param name="revenuePenetrationFor5PlusPercentSellerFunding">[Applicable only for vendors] The percentage of subscription revenue generated by offers with 5% or above seller-funded discount over the last 12 months. Applicable to PERFORMANCE timePeriodType..</param>
        /// <param name="shareOfCouponSubscriptions">The percentage of new subscriptions acquired through coupons. Applicable to PERFORMANCE timePeriodType..</param>
        /// <param name="timeInterval">A time interval used to compute metrics..</param>
        /// <param name="currencyCode">The currency code in ISO 4217 format..</param>
        public GetSellingPartnerMetricsResponseMetric(double? notDeliveredDueToOOS = default, double? totalSubscriptionsRevenue = default, decimal? shippedSubscriptionUnits = default, decimal? activeSubscriptions = default, double? subscriberAverageRevenue = default, double? nonSubscriberAverageRevenue = default, double? lostRevenueDueToOOS = default, double? subscriberAverageReorders = default, double? nonSubscriberAverageReorders = default, double? couponsRevenuePenetration = default, double? revenueFromSubscriptionsWithMultipleDeliveries = default, double? revenueFromActiveSubscriptionsWithSingleDelivery = default, double? revenueFromCancelledSubscriptionsAfterSingleDelivery = default, double? subscriberRetentionFor30Days = default, double? subscriberRetentionFor90Days = default, double? revenuePenetrationFor0PercentSellerFunding = default, double? revenuePenetrationFor5PercentSellerFunding = default, double? revenuePenetrationFor10PercentSellerFunding = default, double? revenuePenetrationFor5PlusPercentSellerFunding = default, double? shareOfCouponSubscriptions = default, TimeInterval timeInterval = default, string currencyCode = default)
        {
            this.NotDeliveredDueToOOS = notDeliveredDueToOOS;
            this.TotalSubscriptionsRevenue = totalSubscriptionsRevenue;
            this.ShippedSubscriptionUnits = shippedSubscriptionUnits;
            this.ActiveSubscriptions = activeSubscriptions;
            this.SubscriberAverageRevenue = subscriberAverageRevenue;
            this.NonSubscriberAverageRevenue = nonSubscriberAverageRevenue;
            this.LostRevenueDueToOOS = lostRevenueDueToOOS;
            this.SubscriberAverageReorders = subscriberAverageReorders;
            this.NonSubscriberAverageReorders = nonSubscriberAverageReorders;
            this.CouponsRevenuePenetration = couponsRevenuePenetration;
            this.RevenueFromSubscriptionsWithMultipleDeliveries = revenueFromSubscriptionsWithMultipleDeliveries;
            this.RevenueFromActiveSubscriptionsWithSingleDelivery = revenueFromActiveSubscriptionsWithSingleDelivery;
            this.RevenueFromCancelledSubscriptionsAfterSingleDelivery = revenueFromCancelledSubscriptionsAfterSingleDelivery;
            this.SubscriberRetentionFor30Days = subscriberRetentionFor30Days;
            this.SubscriberRetentionFor90Days = subscriberRetentionFor90Days;
            this.RevenuePenetrationFor0PercentSellerFunding = revenuePenetrationFor0PercentSellerFunding;
            this.RevenuePenetrationFor5PercentSellerFunding = revenuePenetrationFor5PercentSellerFunding;
            this.RevenuePenetrationFor10PercentSellerFunding = revenuePenetrationFor10PercentSellerFunding;
            this.RevenuePenetrationFor5PlusPercentSellerFunding = revenuePenetrationFor5PlusPercentSellerFunding;
            this.ShareOfCouponSubscriptions = shareOfCouponSubscriptions;
            this.TimeInterval = timeInterval;
            this.CurrencyCode = currencyCode;
        }
        
        /// <summary>
        /// The percentage of items that were not shipped out of the total shipped units over a period of time due to being out of stock. Applicable to PERFORMANCE timePeriodType.
        /// </summary>
        /// <value>The percentage of items that were not shipped out of the total shipped units over a period of time due to being out of stock. Applicable to PERFORMANCE timePeriodType.</value>
        [DataMember(Name="notDeliveredDueToOOS", EmitDefaultValue=false)]
        public double? NotDeliveredDueToOOS { get; set; }

        /// <summary>
        /// The revenue generated from subscriptions over a period of time. Applicable for both the PERFORMANCE and FORECAST timePeriodType.
        /// </summary>
        /// <value>The revenue generated from subscriptions over a period of time. Applicable for both the PERFORMANCE and FORECAST timePeriodType.</value>
        [DataMember(Name="totalSubscriptionsRevenue", EmitDefaultValue=false)]
        public double? TotalSubscriptionsRevenue { get; set; }

        /// <summary>
        /// The number of units shipped to the subscribers over a period of time. Applicable for both the PERFORMANCE and FORECAST timePeriodType.
        /// </summary>
        /// <value>The number of units shipped to the subscribers over a period of time. Applicable for both the PERFORMANCE and FORECAST timePeriodType.</value>
        [DataMember(Name="shippedSubscriptionUnits", EmitDefaultValue=false)]
        public decimal? ShippedSubscriptionUnits { get; set; }

        /// <summary>
        /// The number of active subscriptions present at the end of the period. Applicable to PERFORMANCE timePeriodType.
        /// </summary>
        /// <value>The number of active subscriptions present at the end of the period. Applicable to PERFORMANCE timePeriodType.</value>
        [DataMember(Name="activeSubscriptions", EmitDefaultValue=false)]
        public decimal? ActiveSubscriptions { get; set; }

        /// <summary>
        /// The average revenue per subscriber of the program over a period of past 12 months for sellers and 6 months for vendors. Applicable to PERFORMANCE timePeriodType.
        /// </summary>
        /// <value>The average revenue per subscriber of the program over a period of past 12 months for sellers and 6 months for vendors. Applicable to PERFORMANCE timePeriodType.</value>
        [DataMember(Name="subscriberAverageRevenue", EmitDefaultValue=false)]
        public double? SubscriberAverageRevenue { get; set; }

        /// <summary>
        /// The average revenue per non-subscriber of the program over a period of past 12 months for sellers and 6 months for vendors. Applicable to PERFORMANCE timePeriodType.
        /// </summary>
        /// <value>The average revenue per non-subscriber of the program over a period of past 12 months for sellers and 6 months for vendors. Applicable to PERFORMANCE timePeriodType.</value>
        [DataMember(Name="nonSubscriberAverageRevenue", EmitDefaultValue=false)]
        public double? NonSubscriberAverageRevenue { get; set; }

        /// <summary>
        /// The revenue that would have been generated had there not been out of stock. Applicable to PERFORMANCE timePeriodType.
        /// </summary>
        /// <value>The revenue that would have been generated had there not been out of stock. Applicable to PERFORMANCE timePeriodType.</value>
        [DataMember(Name="lostRevenueDueToOOS", EmitDefaultValue=false)]
        public double? LostRevenueDueToOOS { get; set; }

        /// <summary>
        /// The average reorders per subscriber of the program over a period of 12 months. Applicable to PERFORMANCE timePeriodType.
        /// </summary>
        /// <value>The average reorders per subscriber of the program over a period of 12 months. Applicable to PERFORMANCE timePeriodType.</value>
        [DataMember(Name="subscriberAverageReorders", EmitDefaultValue=false)]
        public double? SubscriberAverageReorders { get; set; }

        /// <summary>
        /// The average reorders per non-subscriber of the program over a period of past 12 months. Applicable to PERFORMANCE timePeriodType.
        /// </summary>
        /// <value>The average reorders per non-subscriber of the program over a period of past 12 months. Applicable to PERFORMANCE timePeriodType.</value>
        [DataMember(Name="nonSubscriberAverageReorders", EmitDefaultValue=false)]
        public double? NonSubscriberAverageReorders { get; set; }

        /// <summary>
        /// The percentage of revenue from ASINs with coupons out of total revenue from all ASINs. Applicable to PERFORMANCE timePeriodType.
        /// </summary>
        /// <value>The percentage of revenue from ASINs with coupons out of total revenue from all ASINs. Applicable to PERFORMANCE timePeriodType.</value>
        [DataMember(Name="couponsRevenuePenetration", EmitDefaultValue=false)]
        public double? CouponsRevenuePenetration { get; set; }

        /// <summary>
        /// The subscription revenue generated from subscriptions with over two deliveries over the past 12 months. Applicable to PERFORMANCE timePeriodType.
        /// </summary>
        /// <value>The subscription revenue generated from subscriptions with over two deliveries over the past 12 months. Applicable to PERFORMANCE timePeriodType.</value>
        [DataMember(Name="revenueFromSubscriptionsWithMultipleDeliveries", EmitDefaultValue=false)]
        public double? RevenueFromSubscriptionsWithMultipleDeliveries { get; set; }

        /// <summary>
        /// The subscription revenue generated from active subscriptions with one delivery over the past 12 months. Applicable to PERFORMANCE timePeriodType.
        /// </summary>
        /// <value>The subscription revenue generated from active subscriptions with one delivery over the past 12 months. Applicable to PERFORMANCE timePeriodType.</value>
        [DataMember(Name="revenueFromActiveSubscriptionsWithSingleDelivery", EmitDefaultValue=false)]
        public double? RevenueFromActiveSubscriptionsWithSingleDelivery { get; set; }

        /// <summary>
        /// The subscription revenue generated from subscriptions which are cancelled after one delivery over the past 12 months. Applicable to PERFORMANCE timePeriodType.
        /// </summary>
        /// <value>The subscription revenue generated from subscriptions which are cancelled after one delivery over the past 12 months. Applicable to PERFORMANCE timePeriodType.</value>
        [DataMember(Name="revenueFromCancelledSubscriptionsAfterSingleDelivery", EmitDefaultValue=false)]
        public double? RevenueFromCancelledSubscriptionsAfterSingleDelivery { get; set; }

        /// <summary>
        /// The percentage of subscriptions retained after 30 days of subscription creation. Applicable to PERFORMANCE timePeriodType.
        /// </summary>
        /// <value>The percentage of subscriptions retained after 30 days of subscription creation. Applicable to PERFORMANCE timePeriodType.</value>
        [DataMember(Name="subscriberRetentionFor30Days", EmitDefaultValue=false)]
        public double? SubscriberRetentionFor30Days { get; set; }

        /// <summary>
        /// The percentage of subscriptions retained after 90 days of subscription creation. Applicable to PERFORMANCE timePeriodType.
        /// </summary>
        /// <value>The percentage of subscriptions retained after 90 days of subscription creation. Applicable to PERFORMANCE timePeriodType.</value>
        [DataMember(Name="subscriberRetentionFor90Days", EmitDefaultValue=false)]
        public double? SubscriberRetentionFor90Days { get; set; }

        /// <summary>
        /// The percentage of subscription revenue generated by offers with 0% seller-funded discount over the last 12 months. Applicable to PERFORMANCE timePeriodType.
        /// </summary>
        /// <value>The percentage of subscription revenue generated by offers with 0% seller-funded discount over the last 12 months. Applicable to PERFORMANCE timePeriodType.</value>
        [DataMember(Name="revenuePenetrationFor0PercentSellerFunding", EmitDefaultValue=false)]
        public double? RevenuePenetrationFor0PercentSellerFunding { get; set; }

        /// <summary>
        /// [Applicable only for Sellers] The percentage of subscription revenue generated by offers with 5% seller-funded discount over the last 12 months. Applicable to PERFORMANCE timePeriodType.
        /// </summary>
        /// <value>[Applicable only for Sellers] The percentage of subscription revenue generated by offers with 5% seller-funded discount over the last 12 months. Applicable to PERFORMANCE timePeriodType.</value>
        [DataMember(Name="revenuePenetrationFor5PercentSellerFunding", EmitDefaultValue=false)]
        public double? RevenuePenetrationFor5PercentSellerFunding { get; set; }

        /// <summary>
        /// [Applicable only for Sellers] The percentage of subscription revenue generated by offers with 10% seller-funded discount over the last 12 months. Applicable to PERFORMANCE timePeriodType.
        /// </summary>
        /// <value>[Applicable only for Sellers] The percentage of subscription revenue generated by offers with 10% seller-funded discount over the last 12 months. Applicable to PERFORMANCE timePeriodType.</value>
        [DataMember(Name="revenuePenetrationFor10PercentSellerFunding", EmitDefaultValue=false)]
        public double? RevenuePenetrationFor10PercentSellerFunding { get; set; }

        /// <summary>
        /// [Applicable only for vendors] The percentage of subscription revenue generated by offers with 5% or above seller-funded discount over the last 12 months. Applicable to PERFORMANCE timePeriodType.
        /// </summary>
        /// <value>[Applicable only for vendors] The percentage of subscription revenue generated by offers with 5% or above seller-funded discount over the last 12 months. Applicable to PERFORMANCE timePeriodType.</value>
        [DataMember(Name="revenuePenetrationFor5PlusPercentSellerFunding", EmitDefaultValue=false)]
        public double? RevenuePenetrationFor5PlusPercentSellerFunding { get; set; }

        /// <summary>
        /// The percentage of new subscriptions acquired through coupons. Applicable to PERFORMANCE timePeriodType.
        /// </summary>
        /// <value>The percentage of new subscriptions acquired through coupons. Applicable to PERFORMANCE timePeriodType.</value>
        [DataMember(Name="shareOfCouponSubscriptions", EmitDefaultValue=false)]
        public double? ShareOfCouponSubscriptions { get; set; }

        /// <summary>
        /// A time interval used to compute metrics.
        /// </summary>
        /// <value>A time interval used to compute metrics.</value>
        [DataMember(Name="timeInterval", EmitDefaultValue=false)]
        public TimeInterval TimeInterval { get; set; }

        /// <summary>
        /// The currency code in ISO 4217 format.
        /// </summary>
        /// <value>The currency code in ISO 4217 format.</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetSellingPartnerMetricsResponseMetric {\n");
            sb.Append("  NotDeliveredDueToOOS: ").Append(NotDeliveredDueToOOS).Append("\n");
            sb.Append("  TotalSubscriptionsRevenue: ").Append(TotalSubscriptionsRevenue).Append("\n");
            sb.Append("  ShippedSubscriptionUnits: ").Append(ShippedSubscriptionUnits).Append("\n");
            sb.Append("  ActiveSubscriptions: ").Append(ActiveSubscriptions).Append("\n");
            sb.Append("  SubscriberAverageRevenue: ").Append(SubscriberAverageRevenue).Append("\n");
            sb.Append("  NonSubscriberAverageRevenue: ").Append(NonSubscriberAverageRevenue).Append("\n");
            sb.Append("  LostRevenueDueToOOS: ").Append(LostRevenueDueToOOS).Append("\n");
            sb.Append("  SubscriberAverageReorders: ").Append(SubscriberAverageReorders).Append("\n");
            sb.Append("  NonSubscriberAverageReorders: ").Append(NonSubscriberAverageReorders).Append("\n");
            sb.Append("  CouponsRevenuePenetration: ").Append(CouponsRevenuePenetration).Append("\n");
            sb.Append("  RevenueFromSubscriptionsWithMultipleDeliveries: ").Append(RevenueFromSubscriptionsWithMultipleDeliveries).Append("\n");
            sb.Append("  RevenueFromActiveSubscriptionsWithSingleDelivery: ").Append(RevenueFromActiveSubscriptionsWithSingleDelivery).Append("\n");
            sb.Append("  RevenueFromCancelledSubscriptionsAfterSingleDelivery: ").Append(RevenueFromCancelledSubscriptionsAfterSingleDelivery).Append("\n");
            sb.Append("  SubscriberRetentionFor30Days: ").Append(SubscriberRetentionFor30Days).Append("\n");
            sb.Append("  SubscriberRetentionFor90Days: ").Append(SubscriberRetentionFor90Days).Append("\n");
            sb.Append("  RevenuePenetrationFor0PercentSellerFunding: ").Append(RevenuePenetrationFor0PercentSellerFunding).Append("\n");
            sb.Append("  RevenuePenetrationFor5PercentSellerFunding: ").Append(RevenuePenetrationFor5PercentSellerFunding).Append("\n");
            sb.Append("  RevenuePenetrationFor10PercentSellerFunding: ").Append(RevenuePenetrationFor10PercentSellerFunding).Append("\n");
            sb.Append("  RevenuePenetrationFor5PlusPercentSellerFunding: ").Append(RevenuePenetrationFor5PlusPercentSellerFunding).Append("\n");
            sb.Append("  ShareOfCouponSubscriptions: ").Append(ShareOfCouponSubscriptions).Append("\n");
            sb.Append("  TimeInterval: ").Append(TimeInterval).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSellingPartnerMetricsResponseMetric);
        }

        /// <summary>
        /// Returns true if GetSellingPartnerMetricsResponseMetric instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSellingPartnerMetricsResponseMetric to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSellingPartnerMetricsResponseMetric input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NotDeliveredDueToOOS == input.NotDeliveredDueToOOS ||
                    (this.NotDeliveredDueToOOS != null &&
                    this.NotDeliveredDueToOOS.Equals(input.NotDeliveredDueToOOS))
                ) && 
                (
                    this.TotalSubscriptionsRevenue == input.TotalSubscriptionsRevenue ||
                    (this.TotalSubscriptionsRevenue != null &&
                    this.TotalSubscriptionsRevenue.Equals(input.TotalSubscriptionsRevenue))
                ) && 
                (
                    this.ShippedSubscriptionUnits == input.ShippedSubscriptionUnits ||
                    (this.ShippedSubscriptionUnits != null &&
                    this.ShippedSubscriptionUnits.Equals(input.ShippedSubscriptionUnits))
                ) && 
                (
                    this.ActiveSubscriptions == input.ActiveSubscriptions ||
                    (this.ActiveSubscriptions != null &&
                    this.ActiveSubscriptions.Equals(input.ActiveSubscriptions))
                ) && 
                (
                    this.SubscriberAverageRevenue == input.SubscriberAverageRevenue ||
                    (this.SubscriberAverageRevenue != null &&
                    this.SubscriberAverageRevenue.Equals(input.SubscriberAverageRevenue))
                ) && 
                (
                    this.NonSubscriberAverageRevenue == input.NonSubscriberAverageRevenue ||
                    (this.NonSubscriberAverageRevenue != null &&
                    this.NonSubscriberAverageRevenue.Equals(input.NonSubscriberAverageRevenue))
                ) && 
                (
                    this.LostRevenueDueToOOS == input.LostRevenueDueToOOS ||
                    (this.LostRevenueDueToOOS != null &&
                    this.LostRevenueDueToOOS.Equals(input.LostRevenueDueToOOS))
                ) && 
                (
                    this.SubscriberAverageReorders == input.SubscriberAverageReorders ||
                    (this.SubscriberAverageReorders != null &&
                    this.SubscriberAverageReorders.Equals(input.SubscriberAverageReorders))
                ) && 
                (
                    this.NonSubscriberAverageReorders == input.NonSubscriberAverageReorders ||
                    (this.NonSubscriberAverageReorders != null &&
                    this.NonSubscriberAverageReorders.Equals(input.NonSubscriberAverageReorders))
                ) && 
                (
                    this.CouponsRevenuePenetration == input.CouponsRevenuePenetration ||
                    (this.CouponsRevenuePenetration != null &&
                    this.CouponsRevenuePenetration.Equals(input.CouponsRevenuePenetration))
                ) && 
                (
                    this.RevenueFromSubscriptionsWithMultipleDeliveries == input.RevenueFromSubscriptionsWithMultipleDeliveries ||
                    (this.RevenueFromSubscriptionsWithMultipleDeliveries != null &&
                    this.RevenueFromSubscriptionsWithMultipleDeliveries.Equals(input.RevenueFromSubscriptionsWithMultipleDeliveries))
                ) && 
                (
                    this.RevenueFromActiveSubscriptionsWithSingleDelivery == input.RevenueFromActiveSubscriptionsWithSingleDelivery ||
                    (this.RevenueFromActiveSubscriptionsWithSingleDelivery != null &&
                    this.RevenueFromActiveSubscriptionsWithSingleDelivery.Equals(input.RevenueFromActiveSubscriptionsWithSingleDelivery))
                ) && 
                (
                    this.RevenueFromCancelledSubscriptionsAfterSingleDelivery == input.RevenueFromCancelledSubscriptionsAfterSingleDelivery ||
                    (this.RevenueFromCancelledSubscriptionsAfterSingleDelivery != null &&
                    this.RevenueFromCancelledSubscriptionsAfterSingleDelivery.Equals(input.RevenueFromCancelledSubscriptionsAfterSingleDelivery))
                ) && 
                (
                    this.SubscriberRetentionFor30Days == input.SubscriberRetentionFor30Days ||
                    (this.SubscriberRetentionFor30Days != null &&
                    this.SubscriberRetentionFor30Days.Equals(input.SubscriberRetentionFor30Days))
                ) && 
                (
                    this.SubscriberRetentionFor90Days == input.SubscriberRetentionFor90Days ||
                    (this.SubscriberRetentionFor90Days != null &&
                    this.SubscriberRetentionFor90Days.Equals(input.SubscriberRetentionFor90Days))
                ) && 
                (
                    this.RevenuePenetrationFor0PercentSellerFunding == input.RevenuePenetrationFor0PercentSellerFunding ||
                    (this.RevenuePenetrationFor0PercentSellerFunding != null &&
                    this.RevenuePenetrationFor0PercentSellerFunding.Equals(input.RevenuePenetrationFor0PercentSellerFunding))
                ) && 
                (
                    this.RevenuePenetrationFor5PercentSellerFunding == input.RevenuePenetrationFor5PercentSellerFunding ||
                    (this.RevenuePenetrationFor5PercentSellerFunding != null &&
                    this.RevenuePenetrationFor5PercentSellerFunding.Equals(input.RevenuePenetrationFor5PercentSellerFunding))
                ) && 
                (
                    this.RevenuePenetrationFor10PercentSellerFunding == input.RevenuePenetrationFor10PercentSellerFunding ||
                    (this.RevenuePenetrationFor10PercentSellerFunding != null &&
                    this.RevenuePenetrationFor10PercentSellerFunding.Equals(input.RevenuePenetrationFor10PercentSellerFunding))
                ) && 
                (
                    this.RevenuePenetrationFor5PlusPercentSellerFunding == input.RevenuePenetrationFor5PlusPercentSellerFunding ||
                    (this.RevenuePenetrationFor5PlusPercentSellerFunding != null &&
                    this.RevenuePenetrationFor5PlusPercentSellerFunding.Equals(input.RevenuePenetrationFor5PlusPercentSellerFunding))
                ) && 
                (
                    this.ShareOfCouponSubscriptions == input.ShareOfCouponSubscriptions ||
                    (this.ShareOfCouponSubscriptions != null &&
                    this.ShareOfCouponSubscriptions.Equals(input.ShareOfCouponSubscriptions))
                ) && 
                (
                    this.TimeInterval == input.TimeInterval ||
                    (this.TimeInterval != null &&
                    this.TimeInterval.Equals(input.TimeInterval))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NotDeliveredDueToOOS != null)
                    hashCode = hashCode * 59 + this.NotDeliveredDueToOOS.GetHashCode();
                if (this.TotalSubscriptionsRevenue != null)
                    hashCode = hashCode * 59 + this.TotalSubscriptionsRevenue.GetHashCode();
                if (this.ShippedSubscriptionUnits != null)
                    hashCode = hashCode * 59 + this.ShippedSubscriptionUnits.GetHashCode();
                if (this.ActiveSubscriptions != null)
                    hashCode = hashCode * 59 + this.ActiveSubscriptions.GetHashCode();
                if (this.SubscriberAverageRevenue != null)
                    hashCode = hashCode * 59 + this.SubscriberAverageRevenue.GetHashCode();
                if (this.NonSubscriberAverageRevenue != null)
                    hashCode = hashCode * 59 + this.NonSubscriberAverageRevenue.GetHashCode();
                if (this.LostRevenueDueToOOS != null)
                    hashCode = hashCode * 59 + this.LostRevenueDueToOOS.GetHashCode();
                if (this.SubscriberAverageReorders != null)
                    hashCode = hashCode * 59 + this.SubscriberAverageReorders.GetHashCode();
                if (this.NonSubscriberAverageReorders != null)
                    hashCode = hashCode * 59 + this.NonSubscriberAverageReorders.GetHashCode();
                if (this.CouponsRevenuePenetration != null)
                    hashCode = hashCode * 59 + this.CouponsRevenuePenetration.GetHashCode();
                if (this.RevenueFromSubscriptionsWithMultipleDeliveries != null)
                    hashCode = hashCode * 59 + this.RevenueFromSubscriptionsWithMultipleDeliveries.GetHashCode();
                if (this.RevenueFromActiveSubscriptionsWithSingleDelivery != null)
                    hashCode = hashCode * 59 + this.RevenueFromActiveSubscriptionsWithSingleDelivery.GetHashCode();
                if (this.RevenueFromCancelledSubscriptionsAfterSingleDelivery != null)
                    hashCode = hashCode * 59 + this.RevenueFromCancelledSubscriptionsAfterSingleDelivery.GetHashCode();
                if (this.SubscriberRetentionFor30Days != null)
                    hashCode = hashCode * 59 + this.SubscriberRetentionFor30Days.GetHashCode();
                if (this.SubscriberRetentionFor90Days != null)
                    hashCode = hashCode * 59 + this.SubscriberRetentionFor90Days.GetHashCode();
                if (this.RevenuePenetrationFor0PercentSellerFunding != null)
                    hashCode = hashCode * 59 + this.RevenuePenetrationFor0PercentSellerFunding.GetHashCode();
                if (this.RevenuePenetrationFor5PercentSellerFunding != null)
                    hashCode = hashCode * 59 + this.RevenuePenetrationFor5PercentSellerFunding.GetHashCode();
                if (this.RevenuePenetrationFor10PercentSellerFunding != null)
                    hashCode = hashCode * 59 + this.RevenuePenetrationFor10PercentSellerFunding.GetHashCode();
                if (this.RevenuePenetrationFor5PlusPercentSellerFunding != null)
                    hashCode = hashCode * 59 + this.RevenuePenetrationFor5PlusPercentSellerFunding.GetHashCode();
                if (this.ShareOfCouponSubscriptions != null)
                    hashCode = hashCode * 59 + this.ShareOfCouponSubscriptions.GetHashCode();
                if (this.TimeInterval != null)
                    hashCode = hashCode * 59 + this.TimeInterval.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NotDeliveredDueToOOS (double?) maximum
            if(this.NotDeliveredDueToOOS > (double?)100)
            {
                yield return new ValidationResult("Invalid value for NotDeliveredDueToOOS, must be a value less than or equal to 100.", new [] { "NotDeliveredDueToOOS" });
            }

            // NotDeliveredDueToOOS (double?) minimum
            if(this.NotDeliveredDueToOOS < (double?)0)
            {
                yield return new ValidationResult("Invalid value for NotDeliveredDueToOOS, must be a value greater than or equal to 0.", new [] { "NotDeliveredDueToOOS" });
            }

            // TotalSubscriptionsRevenue (double?) minimum
            if(this.TotalSubscriptionsRevenue < (double?)0)
            {
                yield return new ValidationResult("Invalid value for TotalSubscriptionsRevenue, must be a value greater than or equal to 0.", new [] { "TotalSubscriptionsRevenue" });
            }

            // ShippedSubscriptionUnits (decimal?) minimum
            if(this.ShippedSubscriptionUnits < (decimal?)0)
            {
                yield return new ValidationResult("Invalid value for ShippedSubscriptionUnits, must be a value greater than or equal to 0.", new [] { "ShippedSubscriptionUnits" });
            }

            // ActiveSubscriptions (decimal?) minimum
            if(this.ActiveSubscriptions < (decimal?)0)
            {
                yield return new ValidationResult("Invalid value for ActiveSubscriptions, must be a value greater than or equal to 0.", new [] { "ActiveSubscriptions" });
            }

            // SubscriberAverageRevenue (double?) minimum
            if(this.SubscriberAverageRevenue < (double?)0)
            {
                yield return new ValidationResult("Invalid value for SubscriberAverageRevenue, must be a value greater than or equal to 0.", new [] { "SubscriberAverageRevenue" });
            }

            // NonSubscriberAverageRevenue (double?) minimum
            if(this.NonSubscriberAverageRevenue < (double?)0)
            {
                yield return new ValidationResult("Invalid value for NonSubscriberAverageRevenue, must be a value greater than or equal to 0.", new [] { "NonSubscriberAverageRevenue" });
            }

            // LostRevenueDueToOOS (double?) minimum
            if(this.LostRevenueDueToOOS < (double?)0)
            {
                yield return new ValidationResult("Invalid value for LostRevenueDueToOOS, must be a value greater than or equal to 0.", new [] { "LostRevenueDueToOOS" });
            }

            // SubscriberAverageReorders (double?) minimum
            if(this.SubscriberAverageReorders < (double?)0)
            {
                yield return new ValidationResult("Invalid value for SubscriberAverageReorders, must be a value greater than or equal to 0.", new [] { "SubscriberAverageReorders" });
            }

            // NonSubscriberAverageReorders (double?) minimum
            if(this.NonSubscriberAverageReorders < (double?)0)
            {
                yield return new ValidationResult("Invalid value for NonSubscriberAverageReorders, must be a value greater than or equal to 0.", new [] { "NonSubscriberAverageReorders" });
            }

            // CouponsRevenuePenetration (double?) maximum
            if(this.CouponsRevenuePenetration > (double?)100)
            {
                yield return new ValidationResult("Invalid value for CouponsRevenuePenetration, must be a value less than or equal to 100.", new [] { "CouponsRevenuePenetration" });
            }

            // CouponsRevenuePenetration (double?) minimum
            if(this.CouponsRevenuePenetration < (double?)0)
            {
                yield return new ValidationResult("Invalid value for CouponsRevenuePenetration, must be a value greater than or equal to 0.", new [] { "CouponsRevenuePenetration" });
            }

            // RevenueFromSubscriptionsWithMultipleDeliveries (double?) minimum
            if(this.RevenueFromSubscriptionsWithMultipleDeliveries < (double?)0)
            {
                yield return new ValidationResult("Invalid value for RevenueFromSubscriptionsWithMultipleDeliveries, must be a value greater than or equal to 0.", new [] { "RevenueFromSubscriptionsWithMultipleDeliveries" });
            }

            // RevenueFromActiveSubscriptionsWithSingleDelivery (double?) minimum
            if(this.RevenueFromActiveSubscriptionsWithSingleDelivery < (double?)0)
            {
                yield return new ValidationResult("Invalid value for RevenueFromActiveSubscriptionsWithSingleDelivery, must be a value greater than or equal to 0.", new [] { "RevenueFromActiveSubscriptionsWithSingleDelivery" });
            }

            // RevenueFromCancelledSubscriptionsAfterSingleDelivery (double?) minimum
            if(this.RevenueFromCancelledSubscriptionsAfterSingleDelivery < (double?)0)
            {
                yield return new ValidationResult("Invalid value for RevenueFromCancelledSubscriptionsAfterSingleDelivery, must be a value greater than or equal to 0.", new [] { "RevenueFromCancelledSubscriptionsAfterSingleDelivery" });
            }

            // SubscriberRetentionFor30Days (double?) maximum
            if(this.SubscriberRetentionFor30Days > (double?)100)
            {
                yield return new ValidationResult("Invalid value for SubscriberRetentionFor30Days, must be a value less than or equal to 100.", new [] { "SubscriberRetentionFor30Days" });
            }

            // SubscriberRetentionFor30Days (double?) minimum
            if(this.SubscriberRetentionFor30Days < (double?)0)
            {
                yield return new ValidationResult("Invalid value for SubscriberRetentionFor30Days, must be a value greater than or equal to 0.", new [] { "SubscriberRetentionFor30Days" });
            }

            // SubscriberRetentionFor90Days (double?) maximum
            if(this.SubscriberRetentionFor90Days > (double?)100)
            {
                yield return new ValidationResult("Invalid value for SubscriberRetentionFor90Days, must be a value less than or equal to 100.", new [] { "SubscriberRetentionFor90Days" });
            }

            // SubscriberRetentionFor90Days (double?) minimum
            if(this.SubscriberRetentionFor90Days < (double?)0)
            {
                yield return new ValidationResult("Invalid value for SubscriberRetentionFor90Days, must be a value greater than or equal to 0.", new [] { "SubscriberRetentionFor90Days" });
            }

            // RevenuePenetrationFor0PercentSellerFunding (double?) maximum
            if(this.RevenuePenetrationFor0PercentSellerFunding > (double?)100)
            {
                yield return new ValidationResult("Invalid value for RevenuePenetrationFor0PercentSellerFunding, must be a value less than or equal to 100.", new [] { "RevenuePenetrationFor0PercentSellerFunding" });
            }

            // RevenuePenetrationFor0PercentSellerFunding (double?) minimum
            if(this.RevenuePenetrationFor0PercentSellerFunding < (double?)0)
            {
                yield return new ValidationResult("Invalid value for RevenuePenetrationFor0PercentSellerFunding, must be a value greater than or equal to 0.", new [] { "RevenuePenetrationFor0PercentSellerFunding" });
            }

            // RevenuePenetrationFor5PercentSellerFunding (double?) maximum
            if(this.RevenuePenetrationFor5PercentSellerFunding > (double?)100)
            {
                yield return new ValidationResult("Invalid value for RevenuePenetrationFor5PercentSellerFunding, must be a value less than or equal to 100.", new [] { "RevenuePenetrationFor5PercentSellerFunding" });
            }

            // RevenuePenetrationFor5PercentSellerFunding (double?) minimum
            if(this.RevenuePenetrationFor5PercentSellerFunding < (double?)0)
            {
                yield return new ValidationResult("Invalid value for RevenuePenetrationFor5PercentSellerFunding, must be a value greater than or equal to 0.", new [] { "RevenuePenetrationFor5PercentSellerFunding" });
            }

            // RevenuePenetrationFor10PercentSellerFunding (double?) maximum
            if(this.RevenuePenetrationFor10PercentSellerFunding > (double?)100)
            {
                yield return new ValidationResult("Invalid value for RevenuePenetrationFor10PercentSellerFunding, must be a value less than or equal to 100.", new [] { "RevenuePenetrationFor10PercentSellerFunding" });
            }

            // RevenuePenetrationFor10PercentSellerFunding (double?) minimum
            if(this.RevenuePenetrationFor10PercentSellerFunding < (double?)0)
            {
                yield return new ValidationResult("Invalid value for RevenuePenetrationFor10PercentSellerFunding, must be a value greater than or equal to 0.", new [] { "RevenuePenetrationFor10PercentSellerFunding" });
            }

            // RevenuePenetrationFor5PlusPercentSellerFunding (double?) maximum
            if(this.RevenuePenetrationFor5PlusPercentSellerFunding > (double?)100)
            {
                yield return new ValidationResult("Invalid value for RevenuePenetrationFor5PlusPercentSellerFunding, must be a value less than or equal to 100.", new [] { "RevenuePenetrationFor5PlusPercentSellerFunding" });
            }

            // RevenuePenetrationFor5PlusPercentSellerFunding (double?) minimum
            if(this.RevenuePenetrationFor5PlusPercentSellerFunding < (double?)0)
            {
                yield return new ValidationResult("Invalid value for RevenuePenetrationFor5PlusPercentSellerFunding, must be a value greater than or equal to 0.", new [] { "RevenuePenetrationFor5PlusPercentSellerFunding" });
            }

            // ShareOfCouponSubscriptions (double?) maximum
            if(this.ShareOfCouponSubscriptions > (double?)100)
            {
                yield return new ValidationResult("Invalid value for ShareOfCouponSubscriptions, must be a value less than or equal to 100.", new [] { "ShareOfCouponSubscriptions" });
            }

            // ShareOfCouponSubscriptions (double?) minimum
            if(this.ShareOfCouponSubscriptions < (double?)0)
            {
                yield return new ValidationResult("Invalid value for ShareOfCouponSubscriptions, must be a value greater than or equal to 0.", new [] { "ShareOfCouponSubscriptions" });
            }

            yield break;
        }
    }

}
