/* 
 * Selling Partner API for Replenishment
 *
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.
 *
 * OpenAPI spec version: 2022-11-07
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Replenishment
{
    /// <summary>
    /// An object which contains details about an offer.
    /// </summary>
    [DataContract]
    public partial class ListOffersResponseOffer :  IEquatable<ListOffersResponseOffer>, IValidatableObject
    {
        /// <summary>
        /// The offer eligibility status.
        /// </summary>
        /// <value>The offer eligibility status.</value>
        [DataMember(Name="eligibility", EmitDefaultValue=false)]
        public EligibilityStatus? Eligibility { get; set; }
        /// <summary>
        /// The replenishment program for the offer.
        /// </summary>
        /// <value>The replenishment program for the offer.</value>
        [DataMember(Name="programType", EmitDefaultValue=false)]
        public ProgramType? ProgramType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListOffersResponseOffer" /> class.
        /// </summary>
        /// <param name="sku">The SKU. This property is only supported for sellers and not for vendors..</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN)..</param>
        /// <param name="marketplaceId">The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL.  Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace..</param>
        /// <param name="eligibility">The offer eligibility status..</param>
        /// <param name="offerProgramConfiguration">offerProgramConfiguration.</param>
        /// <param name="programType">The replenishment program for the offer..</param>
        /// <param name="vendorCodes">A list of vendor codes associated with the offer..</param>
        public ListOffersResponseOffer(string sku = default, string asin = default, string marketplaceId = default, EligibilityStatus? eligibility = default, OfferProgramConfiguration offerProgramConfiguration = default, ProgramType? programType = default, List<string> vendorCodes = default)
        {
            this.Sku = sku;
            this.Asin = asin;
            this.MarketplaceId = marketplaceId;
            this.Eligibility = eligibility;
            this.OfferProgramConfiguration = offerProgramConfiguration;
            this.ProgramType = programType;
            this.VendorCodes = vendorCodes;
        }
        
        /// <summary>
        /// The SKU. This property is only supported for sellers and not for vendors.
        /// </summary>
        /// <value>The SKU. This property is only supported for sellers and not for vendors.</value>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN).
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN).</value>
        [DataMember(Name="asin", EmitDefaultValue=false)]
        public string Asin { get; set; }

        /// <summary>
        /// The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL.  Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace.
        /// </summary>
        /// <value>The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL.  Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace.</value>
        [DataMember(Name="marketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }


        /// <summary>
        /// Gets or Sets OfferProgramConfiguration
        /// </summary>
        [DataMember(Name="offerProgramConfiguration", EmitDefaultValue=false)]
        public OfferProgramConfiguration OfferProgramConfiguration { get; set; }


        /// <summary>
        /// A list of vendor codes associated with the offer.
        /// </summary>
        /// <value>A list of vendor codes associated with the offer.</value>
        [DataMember(Name="vendorCodes", EmitDefaultValue=false)]
        public List<string> VendorCodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListOffersResponseOffer {\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  Eligibility: ").Append(Eligibility).Append("\n");
            sb.Append("  OfferProgramConfiguration: ").Append(OfferProgramConfiguration).Append("\n");
            sb.Append("  ProgramType: ").Append(ProgramType).Append("\n");
            sb.Append("  VendorCodes: ").Append(VendorCodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListOffersResponseOffer);
        }

        /// <summary>
        /// Returns true if ListOffersResponseOffer instances are equal
        /// </summary>
        /// <param name="input">Instance of ListOffersResponseOffer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListOffersResponseOffer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.Asin == input.Asin ||
                    (this.Asin != null &&
                    this.Asin.Equals(input.Asin))
                ) && 
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) && 
                (
                    this.Eligibility == input.Eligibility ||
                    (this.Eligibility != null &&
                    this.Eligibility.Equals(input.Eligibility))
                ) && 
                (
                    this.OfferProgramConfiguration == input.OfferProgramConfiguration ||
                    (this.OfferProgramConfiguration != null &&
                    this.OfferProgramConfiguration.Equals(input.OfferProgramConfiguration))
                ) && 
                (
                    this.ProgramType == input.ProgramType ||
                    (this.ProgramType != null &&
                    this.ProgramType.Equals(input.ProgramType))
                ) && 
                (
                    this.VendorCodes == input.VendorCodes ||
                    this.VendorCodes != null &&
                    this.VendorCodes.SequenceEqual(input.VendorCodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.Asin != null)
                    hashCode = hashCode * 59 + this.Asin.GetHashCode();
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.Eligibility != null)
                    hashCode = hashCode * 59 + this.Eligibility.GetHashCode();
                if (this.OfferProgramConfiguration != null)
                    hashCode = hashCode * 59 + this.OfferProgramConfiguration.GetHashCode();
                if (this.ProgramType != null)
                    hashCode = hashCode * 59 + this.ProgramType.GetHashCode();
                if (this.VendorCodes != null)
                    hashCode = hashCode * 59 + this.VendorCodes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
