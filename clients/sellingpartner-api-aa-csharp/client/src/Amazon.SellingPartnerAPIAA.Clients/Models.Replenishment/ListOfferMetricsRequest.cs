/* 
 * Selling Partner API for Replenishment
 *
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.
 *
 * OpenAPI spec version: 2022-11-07
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Replenishment
{
    /// <summary>
    /// The request body for the &#x60;listOfferMetrics&#x60; operation.
    /// </summary>
    [DataContract]
    public partial class ListOfferMetricsRequest : IEquatable<ListOfferMetricsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListOfferMetricsRequest" /> class.
        /// </summary>
        [JsonConstructor]
        protected ListOfferMetricsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListOfferMetricsRequest" /> class.
        /// </summary>
        /// <param name="pagination">Use these parameters to paginate through the response. (required).</param>
        /// <param name="sort">Use these parameters to sort the response..</param>
        /// <param name="filters">Use these parameters to filter results. Any result must match all provided parameters. For any parameter that is an array, the result must match at least one element in the provided array. (required).</param>
        public ListOfferMetricsRequest(ListOfferMetricsRequestPagination pagination = default, ListOfferMetricsRequestSort sort = default, ListOfferMetricsRequestFilters filters = default)
        {
            // to ensure "pagination" is required (not null)
            if (pagination == null)
            {
                throw new InvalidDataException("pagination is a required property for ListOfferMetricsRequest and cannot be null");
            }
            else
            {
                this.Pagination = pagination;
            }
            // to ensure "filters" is required (not null)
            if (filters == null)
            {
                throw new InvalidDataException("filters is a required property for ListOfferMetricsRequest and cannot be null");
            }
            else
            {
                this.Filters = filters;
            }
            this.Sort = sort;
        }

        /// <summary>
        /// Use these parameters to paginate through the response.
        /// </summary>
        /// <value>Use these parameters to paginate through the response.</value>
        [DataMember(Name = "pagination", EmitDefaultValue = false)]
        public ListOfferMetricsRequestPagination Pagination { get; set; }

        /// <summary>
        /// Use these parameters to sort the response.
        /// </summary>
        /// <value>Use these parameters to sort the response.</value>
        [DataMember(Name = "sort", EmitDefaultValue = false)]
        public ListOfferMetricsRequestSort Sort { get; set; }

        /// <summary>
        /// Use these parameters to filter results. Any result must match all provided parameters. For any parameter that is an array, the result must match at least one element in the provided array.
        /// </summary>
        /// <value>Use these parameters to filter results. Any result must match all provided parameters. For any parameter that is an array, the result must match at least one element in the provided array.</value>
        [DataMember(Name = "filters", EmitDefaultValue = false)]
        public ListOfferMetricsRequestFilters Filters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListOfferMetricsRequest {\n");
            sb.Append("  Pagination: ").Append(Pagination).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListOfferMetricsRequest);
        }

        /// <summary>
        /// Returns true if ListOfferMetricsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ListOfferMetricsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListOfferMetricsRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Pagination == input.Pagination ||
                    (this.Pagination != null &&
                    this.Pagination.Equals(input.Pagination))
                ) &&
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                ) &&
                (
                    this.Filters == input.Filters ||
                    (this.Filters != null &&
                    this.Filters.Equals(input.Filters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pagination != null)
                    hashCode = hashCode * 59 + this.Pagination.GetHashCode();
                if (this.Sort != null)
                    hashCode = hashCode * 59 + this.Sort.GetHashCode();
                if (this.Filters != null)
                    hashCode = hashCode * 59 + this.Filters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
