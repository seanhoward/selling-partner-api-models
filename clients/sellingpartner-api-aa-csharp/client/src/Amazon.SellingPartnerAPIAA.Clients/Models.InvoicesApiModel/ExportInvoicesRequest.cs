/* 
 * The Selling Partner API for Invoices.
 *
 * Use the Selling Partner API for Invoices to retrieve and manage invoice-related operations, which can help selling partners manage their bookkeeping processes.
 *
 * OpenAPI spec version: 2024-06-19
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.InvoicesApiModel
{
    /// <summary>
    /// The information required to create the export request.
    /// </summary>
    [DataContract]
    public partial class ExportInvoicesRequest :  IEquatable<ExportInvoicesRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets FileFormat
        /// </summary>
        [DataMember(Name="fileFormat", EmitDefaultValue=false)]
        public FileFormat? FileFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportInvoicesRequest" /> class.
        /// </summary>
        [JsonConstructor]
        protected ExportInvoicesRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportInvoicesRequest" /> class.
        /// </summary>
        /// <param name="dateEnd">The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the time of the request..</param>
        /// <param name="dateStart">The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request..</param>
        /// <param name="externalInvoiceId">The external ID of the invoices you want included in the response..</param>
        /// <param name="fileFormat">fileFormat.</param>
        /// <param name="invoiceType">The marketplace-specific classification of the invoice type. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;invoiceType&#x60; options..</param>
        /// <param name="marketplaceId">The ID of the marketplace from which you want the invoices. (required).</param>
        /// <param name="series">The series number of the invoices you want included in the response..</param>
        /// <param name="statuses">A list of statuses that you can use to filter invoices. Use the &#x60;getInvoicesAttributes&#x60; operation to check invoice status options.  Min count: 1.</param>
        /// <param name="transactionIdentifier">transactionIdentifier.</param>
        /// <param name="transactionType">The marketplace-specific classification of the transaction type for which the invoice was created. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionType&#x60; options.</param>
        public ExportInvoicesRequest(DateTime? dateEnd = default, DateTime? dateStart = default, string externalInvoiceId = default, FileFormat? fileFormat = default, string invoiceType = default, string marketplaceId = default, string series = default, List<string> statuses = default, TransactionIdentifier transactionIdentifier = default, string transactionType = default)
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for ExportInvoicesRequest and cannot be null");
            }
            else
            {
                this.MarketplaceId = marketplaceId;
            }
            this.DateEnd = dateEnd;
            this.DateStart = dateStart;
            this.ExternalInvoiceId = externalInvoiceId;
            this.FileFormat = fileFormat;
            this.InvoiceType = invoiceType;
            this.Series = series;
            this.Statuses = statuses;
            this.TransactionIdentifier = transactionIdentifier;
            this.TransactionType = transactionType;
        }
        
        /// <summary>
        /// The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the time of the request.
        /// </summary>
        /// <value>The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the time of the request.</value>
        [DataMember(Name="dateEnd", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DateEnd { get; set; }

        /// <summary>
        /// The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request.
        /// </summary>
        /// <value>The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request.</value>
        [DataMember(Name="dateStart", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DateStart { get; set; }

        /// <summary>
        /// The external ID of the invoices you want included in the response.
        /// </summary>
        /// <value>The external ID of the invoices you want included in the response.</value>
        [DataMember(Name="externalInvoiceId", EmitDefaultValue=false)]
        public string ExternalInvoiceId { get; set; }


        /// <summary>
        /// The marketplace-specific classification of the invoice type. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;invoiceType&#x60; options.
        /// </summary>
        /// <value>The marketplace-specific classification of the invoice type. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;invoiceType&#x60; options.</value>
        [DataMember(Name="invoiceType", EmitDefaultValue=false)]
        public string InvoiceType { get; set; }

        /// <summary>
        /// The ID of the marketplace from which you want the invoices.
        /// </summary>
        /// <value>The ID of the marketplace from which you want the invoices.</value>
        [DataMember(Name="marketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The series number of the invoices you want included in the response.
        /// </summary>
        /// <value>The series number of the invoices you want included in the response.</value>
        [DataMember(Name="series", EmitDefaultValue=false)]
        public string Series { get; set; }

        /// <summary>
        /// A list of statuses that you can use to filter invoices. Use the &#x60;getInvoicesAttributes&#x60; operation to check invoice status options.  Min count: 1
        /// </summary>
        /// <value>A list of statuses that you can use to filter invoices. Use the &#x60;getInvoicesAttributes&#x60; operation to check invoice status options.  Min count: 1</value>
        [DataMember(Name="statuses", EmitDefaultValue=false)]
        public List<string> Statuses { get; set; }

        /// <summary>
        /// Gets or Sets TransactionIdentifier
        /// </summary>
        [DataMember(Name="transactionIdentifier", EmitDefaultValue=false)]
        public TransactionIdentifier TransactionIdentifier { get; set; }

        /// <summary>
        /// The marketplace-specific classification of the transaction type for which the invoice was created. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionType&#x60; options
        /// </summary>
        /// <value>The marketplace-specific classification of the transaction type for which the invoice was created. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionType&#x60; options</value>
        [DataMember(Name="transactionType", EmitDefaultValue=false)]
        public string TransactionType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExportInvoicesRequest {\n");
            sb.Append("  DateEnd: ").Append(DateEnd).Append("\n");
            sb.Append("  DateStart: ").Append(DateStart).Append("\n");
            sb.Append("  ExternalInvoiceId: ").Append(ExternalInvoiceId).Append("\n");
            sb.Append("  FileFormat: ").Append(FileFormat).Append("\n");
            sb.Append("  InvoiceType: ").Append(InvoiceType).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  Series: ").Append(Series).Append("\n");
            sb.Append("  Statuses: ").Append(Statuses).Append("\n");
            sb.Append("  TransactionIdentifier: ").Append(TransactionIdentifier).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExportInvoicesRequest);
        }

        /// <summary>
        /// Returns true if ExportInvoicesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ExportInvoicesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExportInvoicesRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DateEnd == input.DateEnd ||
                    (this.DateEnd != null &&
                    this.DateEnd.Equals(input.DateEnd))
                ) && 
                (
                    this.DateStart == input.DateStart ||
                    (this.DateStart != null &&
                    this.DateStart.Equals(input.DateStart))
                ) && 
                (
                    this.ExternalInvoiceId == input.ExternalInvoiceId ||
                    (this.ExternalInvoiceId != null &&
                    this.ExternalInvoiceId.Equals(input.ExternalInvoiceId))
                ) && 
                (
                    this.FileFormat == input.FileFormat ||
                    (this.FileFormat != null &&
                    this.FileFormat.Equals(input.FileFormat))
                ) && 
                (
                    this.InvoiceType == input.InvoiceType ||
                    (this.InvoiceType != null &&
                    this.InvoiceType.Equals(input.InvoiceType))
                ) && 
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) && 
                (
                    this.Series == input.Series ||
                    (this.Series != null &&
                    this.Series.Equals(input.Series))
                ) && 
                (
                    this.Statuses == input.Statuses ||
                    this.Statuses != null &&
                    this.Statuses.SequenceEqual(input.Statuses)
                ) && 
                (
                    this.TransactionIdentifier == input.TransactionIdentifier ||
                    (this.TransactionIdentifier != null &&
                    this.TransactionIdentifier.Equals(input.TransactionIdentifier))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateEnd != null)
                    hashCode = hashCode * 59 + this.DateEnd.GetHashCode();
                if (this.DateStart != null)
                    hashCode = hashCode * 59 + this.DateStart.GetHashCode();
                if (this.ExternalInvoiceId != null)
                    hashCode = hashCode * 59 + this.ExternalInvoiceId.GetHashCode();
                if (this.FileFormat != null)
                    hashCode = hashCode * 59 + this.FileFormat.GetHashCode();
                if (this.InvoiceType != null)
                    hashCode = hashCode * 59 + this.InvoiceType.GetHashCode();
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.Series != null)
                    hashCode = hashCode * 59 + this.Series.GetHashCode();
                if (this.Statuses != null)
                    hashCode = hashCode * 59 + this.Statuses.GetHashCode();
                if (this.TransactionIdentifier != null)
                    hashCode = hashCode * 59 + this.TransactionIdentifier.GetHashCode();
                if (this.TransactionType != null)
                    hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
