/* 
 * The Selling Partner API for Invoices.
 *
 * Use the Selling Partner API for Invoices to retrieve and manage invoice-related operations, which can help selling partners manage their bookkeeping processes.
 *
 * OpenAPI spec version: 2024-06-19
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.InvoicesApiModel
{
    /// <summary>
    /// An object that contains the invoice attributes definition.
    /// </summary>
    [DataContract]
    public partial class InvoicesAttributes : IEquatable<InvoicesAttributes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicesAttributes" /> class.
        /// </summary>
        /// <param name="invoiceStatusOptions">A list of all the options that are available for the invoice status attribute..</param>
        /// <param name="invoiceTypeOptions">A list of all the options that are available for the invoice type attribute..</param>
        /// <param name="transactionIdentifierNameOptions">A list of all the options that are available for the transaction identifier name attribute..</param>
        /// <param name="transactionTypeOptions">A list of all the options that are available for the transaction type attribute..</param>
        public InvoicesAttributes(List<AttributeOption> invoiceStatusOptions = default, List<AttributeOption> invoiceTypeOptions = default, List<AttributeOption> transactionIdentifierNameOptions = default, List<AttributeOption> transactionTypeOptions = default)
        {
            this.InvoiceStatusOptions = invoiceStatusOptions;
            this.InvoiceTypeOptions = invoiceTypeOptions;
            this.TransactionIdentifierNameOptions = transactionIdentifierNameOptions;
            this.TransactionTypeOptions = transactionTypeOptions;
        }

        /// <summary>
        /// A list of all the options that are available for the invoice status attribute.
        /// </summary>
        /// <value>A list of all the options that are available for the invoice status attribute.</value>
        [DataMember(Name = "invoiceStatusOptions", EmitDefaultValue = false)]
        public List<AttributeOption> InvoiceStatusOptions { get; set; }

        /// <summary>
        /// A list of all the options that are available for the invoice type attribute.
        /// </summary>
        /// <value>A list of all the options that are available for the invoice type attribute.</value>
        [DataMember(Name = "invoiceTypeOptions", EmitDefaultValue = false)]
        public List<AttributeOption> InvoiceTypeOptions { get; set; }

        /// <summary>
        /// A list of all the options that are available for the transaction identifier name attribute.
        /// </summary>
        /// <value>A list of all the options that are available for the transaction identifier name attribute.</value>
        [DataMember(Name = "transactionIdentifierNameOptions", EmitDefaultValue = false)]
        public List<AttributeOption> TransactionIdentifierNameOptions { get; set; }

        /// <summary>
        /// A list of all the options that are available for the transaction type attribute.
        /// </summary>
        /// <value>A list of all the options that are available for the transaction type attribute.</value>
        [DataMember(Name = "transactionTypeOptions", EmitDefaultValue = false)]
        public List<AttributeOption> TransactionTypeOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoicesAttributes {\n");
            sb.Append("  InvoiceStatusOptions: ").Append(InvoiceStatusOptions).Append("\n");
            sb.Append("  InvoiceTypeOptions: ").Append(InvoiceTypeOptions).Append("\n");
            sb.Append("  TransactionIdentifierNameOptions: ").Append(TransactionIdentifierNameOptions).Append("\n");
            sb.Append("  TransactionTypeOptions: ").Append(TransactionTypeOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoicesAttributes);
        }

        /// <summary>
        /// Returns true if InvoicesAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoicesAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoicesAttributes input)
        {
            if (input == null)
                return false;

            return
                (
                    this.InvoiceStatusOptions == input.InvoiceStatusOptions ||
                    this.InvoiceStatusOptions != null &&
                    this.InvoiceStatusOptions.SequenceEqual(input.InvoiceStatusOptions)
                ) &&
                (
                    this.InvoiceTypeOptions == input.InvoiceTypeOptions ||
                    this.InvoiceTypeOptions != null &&
                    this.InvoiceTypeOptions.SequenceEqual(input.InvoiceTypeOptions)
                ) &&
                (
                    this.TransactionIdentifierNameOptions == input.TransactionIdentifierNameOptions ||
                    this.TransactionIdentifierNameOptions != null &&
                    this.TransactionIdentifierNameOptions.SequenceEqual(input.TransactionIdentifierNameOptions)
                ) &&
                (
                    this.TransactionTypeOptions == input.TransactionTypeOptions ||
                    this.TransactionTypeOptions != null &&
                    this.TransactionTypeOptions.SequenceEqual(input.TransactionTypeOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvoiceStatusOptions != null)
                    hashCode = hashCode * 59 + this.InvoiceStatusOptions.GetHashCode();
                if (this.InvoiceTypeOptions != null)
                    hashCode = hashCode * 59 + this.InvoiceTypeOptions.GetHashCode();
                if (this.TransactionIdentifierNameOptions != null)
                    hashCode = hashCode * 59 + this.TransactionIdentifierNameOptions.GetHashCode();
                if (this.TransactionTypeOptions != null)
                    hashCode = hashCode * 59 + this.TransactionTypeOptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
