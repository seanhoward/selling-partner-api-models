/* 
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-05-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Pricing
{
    /// <summary>
    /// The input required for building &#x60;LowestPricedOffers&#x60; data in the response.
    /// </summary>
    [DataContract]
    public partial class LowestPricedOffersInput :  IEquatable<LowestPricedOffersInput>, IValidatableObject
    {
        /// <summary>
        /// The input parameter specifies the &#x60;itemCondition&#x60; of the offer that is requested for &#x60;LowestPricedOffers&#x60;. &#x60;New&#x60; is the default value for &#x60;itemCondition&#x60;.
        /// </summary>
        /// <value>The input parameter specifies the &#x60;itemCondition&#x60; of the offer that is requested for &#x60;LowestPricedOffers&#x60;. &#x60;New&#x60; is the default value for &#x60;itemCondition&#x60;.</value>
        [DataMember(Name="itemCondition", EmitDefaultValue=false)]
        public Condition ItemCondition { get; set; }
        /// <summary>
        /// The input parameter specifies the type of offers requested for &#x60;LowestPricedOffers&#x60;. This applies to &#x60;Consumer&#x60; and &#x60;Business&#x60; offers. &#x60;Consumer&#x60; is the default &#x60;offerType&#x60;.
        /// </summary>
        /// <value>The input parameter specifies the type of offers requested for &#x60;LowestPricedOffers&#x60;. This applies to &#x60;Consumer&#x60; and &#x60;Business&#x60; offers. &#x60;Consumer&#x60; is the default &#x60;offerType&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OfferTypeEnum
        {            
            /// <summary>
            /// Enum CONSUMER for value: CONSUMER
            /// </summary>
            [EnumMember(Value = "Consumer")]
            CONSUMER = 1,
            [EnumMember(Value = "Business")]
            BUSINESS = 2
        }

        /// <summary>
        /// The input parameter specifies the type of offers requested for &#x60;LowestPricedOffers&#x60;. This applies to &#x60;Consumer&#x60; and &#x60;Business&#x60; offers. &#x60;Consumer&#x60; is the default &#x60;offerType&#x60;.
        /// </summary>
        /// <value>The input parameter specifies the type of offers requested for &#x60;LowestPricedOffers&#x60;. This applies to &#x60;Consumer&#x60; and &#x60;Business&#x60; offers. &#x60;Consumer&#x60; is the default &#x60;offerType&#x60;.</value>
        [DataMember(Name="offerType", EmitDefaultValue=false)]
        public OfferTypeEnum OfferType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LowestPricedOffersInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LowestPricedOffersInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LowestPricedOffersInput" /> class.
        /// </summary>
        /// <param name="itemCondition">The input parameter specifies the &#x60;itemCondition&#x60; of the offer that is requested for &#x60;LowestPricedOffers&#x60;. &#x60;New&#x60; is the default value for &#x60;itemCondition&#x60;. (required).</param>
        /// <param name="offerType">The input parameter specifies the type of offers requested for &#x60;LowestPricedOffers&#x60;. This applies to &#x60;Consumer&#x60; and &#x60;Business&#x60; offers. &#x60;Consumer&#x60; is the default &#x60;offerType&#x60;. (required).</param>
        public LowestPricedOffersInput(Condition itemCondition = default(Condition), OfferTypeEnum offerType = default(OfferTypeEnum))
        {
            // to ensure "itemCondition" is required (not null)
            if (itemCondition == null)
            {
                throw new InvalidDataException("itemCondition is a required property for LowestPricedOffersInput and cannot be null");
            }
            else
            {
                this.ItemCondition = itemCondition;
            }
            // to ensure "offerType" is required (not null)
            if (offerType == null)
            {
                throw new InvalidDataException("offerType is a required property for LowestPricedOffersInput and cannot be null");
            }
            else
            {
                this.OfferType = offerType;
            }
        }
        


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LowestPricedOffersInput {\n");
            sb.Append("  ItemCondition: ").Append(ItemCondition).Append("\n");
            sb.Append("  OfferType: ").Append(OfferType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LowestPricedOffersInput);
        }

        /// <summary>
        /// Returns true if LowestPricedOffersInput instances are equal
        /// </summary>
        /// <param name="input">Instance of LowestPricedOffersInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LowestPricedOffersInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemCondition == input.ItemCondition ||
                    (this.ItemCondition != null &&
                    this.ItemCondition.Equals(input.ItemCondition))
                ) && 
                (
                    this.OfferType == input.OfferType ||
                    (this.OfferType != null &&
                    this.OfferType.Equals(input.OfferType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemCondition != null)
                    hashCode = hashCode * 59 + this.ItemCondition.GetHashCode();
                if (this.OfferType != null)
                    hashCode = hashCode * 59 + this.OfferType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
