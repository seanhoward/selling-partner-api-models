/* 
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-05-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Pricing
{
    /// <summary>
    /// A product offer with segment information indicating where it&#39;s featured.
    /// </summary>
    [DataContract]
    public partial class SegmentedFeaturedOffer : Offer,  IEquatable<SegmentedFeaturedOffer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentedFeaturedOffer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SegmentedFeaturedOffer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentedFeaturedOffer" /> class.
        /// </summary>
        /// <param name="featuredOfferSegments">The list of segment information in which the offer is featured. (required).</param>
        public SegmentedFeaturedOffer(List<FeaturedOfferSegment> featuredOfferSegments = default(List<FeaturedOfferSegment>), string sellerId = default(string), Condition condition = default(Condition), SubConditionEnum? subCondition = default(SubConditionEnum?), FulfillmentType fulfillmentType = default(FulfillmentType), MoneyType listingPrice = default(MoneyType), List<ShippingOption> shippingOptions = default(List<ShippingOption>), Points points = default(Points), PrimeDetails primeDetails = default(PrimeDetails)) : base(sellerId, condition, subCondition, fulfillmentType, listingPrice, shippingOptions, points, primeDetails)
        {
            // to ensure "featuredOfferSegments" is required (not null)
            if (featuredOfferSegments == null)
            {
                throw new InvalidDataException("featuredOfferSegments is a required property for SegmentedFeaturedOffer and cannot be null");
            }
            else
            {
                this.FeaturedOfferSegments = featuredOfferSegments;
            }
        }
        
        /// <summary>
        /// The list of segment information in which the offer is featured.
        /// </summary>
        /// <value>The list of segment information in which the offer is featured.</value>
        [DataMember(Name="featuredOfferSegments", EmitDefaultValue=false)]
        public List<FeaturedOfferSegment> FeaturedOfferSegments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SegmentedFeaturedOffer {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  FeaturedOfferSegments: ").Append(FeaturedOfferSegments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SegmentedFeaturedOffer);
        }

        /// <summary>
        /// Returns true if SegmentedFeaturedOffer instances are equal
        /// </summary>
        /// <param name="input">Instance of SegmentedFeaturedOffer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SegmentedFeaturedOffer input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.FeaturedOfferSegments == input.FeaturedOfferSegments ||
                    this.FeaturedOfferSegments != null &&
                    this.FeaturedOfferSegments.SequenceEqual(input.FeaturedOfferSegments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.FeaturedOfferSegments != null)
                    hashCode = hashCode * 59 + this.FeaturedOfferSegments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            //foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
