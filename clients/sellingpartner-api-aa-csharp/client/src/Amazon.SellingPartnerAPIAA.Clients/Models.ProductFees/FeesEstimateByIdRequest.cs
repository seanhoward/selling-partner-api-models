/* 
 * Selling Partner API for Product Fees
 *
 * The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.ProductFees
{
    /// <summary>
    /// A product, marketplace, and proposed price used to request estimated fees.
    /// </summary>
    [DataContract]
    public partial class FeesEstimateByIdRequest : IEquatable<FeesEstimateByIdRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets IdType
        /// </summary>
        [DataMember(Name = "IdType", EmitDefaultValue = false)]
        public IdType IdType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeesEstimateByIdRequest" /> class.
        /// </summary>
        [JsonConstructor]
        protected FeesEstimateByIdRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeesEstimateByIdRequest" /> class.
        /// </summary>
        /// <param name="feesEstimateRequest">feesEstimateRequest.</param>
        /// <param name="idType">idType (required).</param>
        /// <param name="idValue">The item identifier. (required).</param>
        public FeesEstimateByIdRequest(FeesEstimateRequest feesEstimateRequest = default, IdType idType = default, string idValue = default)
        {
            // to ensure "idType" is required (not null)
            if (idType == null)
            {
                throw new InvalidDataException("idType is a required property for FeesEstimateByIdRequest and cannot be null");
            }
            else
            {
                this.IdType = idType;
            }
            // to ensure "idValue" is required (not null)
            if (idValue == null)
            {
                throw new InvalidDataException("idValue is a required property for FeesEstimateByIdRequest and cannot be null");
            }
            else
            {
                this.IdValue = idValue;
            }
            this.FeesEstimateRequest = feesEstimateRequest;
        }

        /// <summary>
        /// Gets or Sets FeesEstimateRequest
        /// </summary>
        [DataMember(Name = "FeesEstimateRequest", EmitDefaultValue = false)]
        public FeesEstimateRequest FeesEstimateRequest { get; set; }


        /// <summary>
        /// The item identifier.
        /// </summary>
        /// <value>The item identifier.</value>
        [DataMember(Name = "IdValue", EmitDefaultValue = false)]
        public string IdValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeesEstimateByIdRequest {\n");
            sb.Append("  FeesEstimateRequest: ").Append(FeesEstimateRequest).Append("\n");
            sb.Append("  IdType: ").Append(IdType).Append("\n");
            sb.Append("  IdValue: ").Append(IdValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeesEstimateByIdRequest);
        }

        /// <summary>
        /// Returns true if FeesEstimateByIdRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FeesEstimateByIdRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeesEstimateByIdRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    this.FeesEstimateRequest == input.FeesEstimateRequest ||
                    (this.FeesEstimateRequest != null &&
                    this.FeesEstimateRequest.Equals(input.FeesEstimateRequest))
                ) &&
                (
                    this.IdType == input.IdType ||
                    (this.IdType != null &&
                    this.IdType.Equals(input.IdType))
                ) &&
                (
                    this.IdValue == input.IdValue ||
                    (this.IdValue != null &&
                    this.IdValue.Equals(input.IdValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeesEstimateRequest != null)
                    hashCode = hashCode * 59 + this.FeesEstimateRequest.GetHashCode();
                if (this.IdType != null)
                    hashCode = hashCode * 59 + this.IdType.GetHashCode();
                if (this.IdValue != null)
                    hashCode = hashCode * 59 + this.IdValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
