/* 
 * Selling Partner API for Product Fees
 *
 * The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.ProductFees
{
    /// <summary>
    /// A product, marketplace, and proposed price used to request estimated fees.
    /// </summary>
    [DataContract]
    public partial class FeesEstimateRequest :  IEquatable<FeesEstimateRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets OptionalFulfillmentProgram
        /// </summary>
        [DataMember(Name="OptionalFulfillmentProgram", EmitDefaultValue=false)]
        public OptionalFulfillmentProgram? OptionalFulfillmentProgram { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeesEstimateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeesEstimateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeesEstimateRequest" /> class.
        /// </summary>
        /// <param name="marketplaceId">A marketplace identifier. (required).</param>
        /// <param name="isAmazonFulfilled">When true, the offer is fulfilled by Amazon..</param>
        /// <param name="priceToEstimateFees">The product price that the fee estimate is based on. (required).</param>
        /// <param name="identifier">A unique identifier provided by the caller to track this request. (required).</param>
        /// <param name="optionalFulfillmentProgram">optionalFulfillmentProgram.</param>
        public FeesEstimateRequest(string marketplaceId = default(string), bool? isAmazonFulfilled = default(bool?), PriceToEstimateFees priceToEstimateFees = default(PriceToEstimateFees), string identifier = default(string), OptionalFulfillmentProgram? optionalFulfillmentProgram = default(OptionalFulfillmentProgram?))
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for FeesEstimateRequest and cannot be null");
            }
            else
            {
                this.MarketplaceId = marketplaceId;
            }
            // to ensure "priceToEstimateFees" is required (not null)
            if (priceToEstimateFees == null)
            {
                throw new InvalidDataException("priceToEstimateFees is a required property for FeesEstimateRequest and cannot be null");
            }
            else
            {
                this.PriceToEstimateFees = priceToEstimateFees;
            }
            // to ensure "identifier" is required (not null)
            if (identifier == null)
            {
                throw new InvalidDataException("identifier is a required property for FeesEstimateRequest and cannot be null");
            }
            else
            {
                this.Identifier = identifier;
            }
            this.IsAmazonFulfilled = isAmazonFulfilled;
            this.OptionalFulfillmentProgram = optionalFulfillmentProgram;
        }
        
        /// <summary>
        /// A marketplace identifier.
        /// </summary>
        /// <value>A marketplace identifier.</value>
        [DataMember(Name="MarketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// When true, the offer is fulfilled by Amazon.
        /// </summary>
        /// <value>When true, the offer is fulfilled by Amazon.</value>
        [DataMember(Name="IsAmazonFulfilled", EmitDefaultValue=false)]
        public bool? IsAmazonFulfilled { get; set; }

        /// <summary>
        /// The product price that the fee estimate is based on.
        /// </summary>
        /// <value>The product price that the fee estimate is based on.</value>
        [DataMember(Name="PriceToEstimateFees", EmitDefaultValue=false)]
        public PriceToEstimateFees PriceToEstimateFees { get; set; }

        /// <summary>
        /// A unique identifier provided by the caller to track this request.
        /// </summary>
        /// <value>A unique identifier provided by the caller to track this request.</value>
        [DataMember(Name="Identifier", EmitDefaultValue=false)]
        public string Identifier { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeesEstimateRequest {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  IsAmazonFulfilled: ").Append(IsAmazonFulfilled).Append("\n");
            sb.Append("  PriceToEstimateFees: ").Append(PriceToEstimateFees).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  OptionalFulfillmentProgram: ").Append(OptionalFulfillmentProgram).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeesEstimateRequest);
        }

        /// <summary>
        /// Returns true if FeesEstimateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FeesEstimateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeesEstimateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) && 
                (
                    this.IsAmazonFulfilled == input.IsAmazonFulfilled ||
                    (this.IsAmazonFulfilled != null &&
                    this.IsAmazonFulfilled.Equals(input.IsAmazonFulfilled))
                ) && 
                (
                    this.PriceToEstimateFees == input.PriceToEstimateFees ||
                    (this.PriceToEstimateFees != null &&
                    this.PriceToEstimateFees.Equals(input.PriceToEstimateFees))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.OptionalFulfillmentProgram == input.OptionalFulfillmentProgram ||
                    (this.OptionalFulfillmentProgram != null &&
                    this.OptionalFulfillmentProgram.Equals(input.OptionalFulfillmentProgram))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.IsAmazonFulfilled != null)
                    hashCode = hashCode * 59 + this.IsAmazonFulfilled.GetHashCode();
                if (this.PriceToEstimateFees != null)
                    hashCode = hashCode * 59 + this.PriceToEstimateFees.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                if (this.OptionalFulfillmentProgram != null)
                    hashCode = hashCode * 59 + this.OptionalFulfillmentProgram.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
