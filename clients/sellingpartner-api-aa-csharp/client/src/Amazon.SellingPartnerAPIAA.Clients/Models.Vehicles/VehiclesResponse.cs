/* 
 * The Selling Partner API for Automotive.
 *
 * The Selling Partner API for Automotive provides programmatic access to information needed by selling partners to provide compatibility information about their listed products.
 *
 * OpenAPI spec version: 2024-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Vehicles
{
    /// <summary>
    /// Get paginated list of vehicle from Amazon&#39;s catalog
    /// </summary>
    [DataContract]
    public partial class VehiclesResponse : IEquatable<VehiclesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VehiclesResponse" /> class.
        /// </summary>
        [JsonConstructor]
        protected VehiclesResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VehiclesResponse" /> class.
        /// </summary>
        /// <param name="pagination">If available, the &#x60;nextToken&#x60; and/or &#x60;previousToken&#x60; values required to return paginated results..</param>
        /// <param name="vehicles">List of vehicles from Amazon&#39;s catalog. (required).</param>
        public VehiclesResponse(Pagination pagination = default, List<Vehicle> vehicles = default)
        {
            // to ensure "vehicles" is required (not null)
            if (vehicles == null)
            {
                throw new InvalidDataException("vehicles is a required property for VehiclesResponse and cannot be null");
            }
            else
            {
                this.Vehicles = vehicles;
            }
            this.Pagination = pagination;
        }

        /// <summary>
        /// If available, the &#x60;nextToken&#x60; and/or &#x60;previousToken&#x60; values required to return paginated results.
        /// </summary>
        /// <value>If available, the &#x60;nextToken&#x60; and/or &#x60;previousToken&#x60; values required to return paginated results.</value>
        [DataMember(Name = "pagination", EmitDefaultValue = false)]
        public Pagination Pagination { get; set; }

        /// <summary>
        /// List of vehicles from Amazon&#39;s catalog.
        /// </summary>
        /// <value>List of vehicles from Amazon&#39;s catalog.</value>
        [DataMember(Name = "vehicles", EmitDefaultValue = false)]
        public List<Vehicle> Vehicles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VehiclesResponse {\n");
            sb.Append("  Pagination: ").Append(Pagination).Append("\n");
            sb.Append("  Vehicles: ").Append(Vehicles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VehiclesResponse);
        }

        /// <summary>
        /// Returns true if VehiclesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of VehiclesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VehiclesResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Pagination == input.Pagination ||
                    (this.Pagination != null &&
                    this.Pagination.Equals(input.Pagination))
                ) &&
                (
                    this.Vehicles == input.Vehicles ||
                    this.Vehicles != null &&
                    this.Vehicles.SequenceEqual(input.Vehicles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pagination != null)
                    hashCode = hashCode * 59 + this.Pagination.GetHashCode();
                if (this.Vehicles != null)
                    hashCode = hashCode * 59 + this.Vehicles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
