/* 
 * The Selling Partner API for Automotive.
 *
 * The Selling Partner API for Automotive provides programmatic access to information needed by selling partners to provide compatibility information about their listed products.
 *
 * OpenAPI spec version: 2024-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Vehicles
{
    /// <summary>
    /// Combinations of attributes and unique identifier that represents a vehicle in vehicle list.
    /// </summary>
    [DataContract]
    public partial class Vehicle : IEquatable<Vehicle>, IValidatableObject
    {
        /// <summary>
        /// Denotes if the vehicle is active or deleted from Amazon&#39;s catalog.
        /// </summary>
        /// <value>Denotes if the vehicle is active or deleted from Amazon&#39;s catalog.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public VehicleStatusInCatalog? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Vehicle" /> class.
        /// </summary>
        [JsonConstructor]
        protected Vehicle() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Vehicle" /> class.
        /// </summary>
        /// <param name="make">Vehicle Brand. (required).</param>
        /// <param name="model">Specific model of a vehicle. (required).</param>
        /// <param name="variantName">Name of the vehicle variant..</param>
        /// <param name="bodyStyle">Body style of vehicle (example: Hatchback, Cabriolet)..</param>
        /// <param name="driveType">Drive type of vehicle(example: Rear wheel drive)..</param>
        /// <param name="energy">Energy Source for the vehicle(example: Petrol).</param>
        /// <param name="engineOutput">Engine output of vehicle..</param>
        /// <param name="manufacturingStartDate">Vehicle manufacturing start date..</param>
        /// <param name="manufacturingStopDate">Vehicle manufacturing stop date. If it is empty, then the vehicle is still being manufactured..</param>
        /// <param name="lastProcessedDate">The date on which the vehicle was last updated, in ISO-8601 date/time format..</param>
        /// <param name="status">Denotes if the vehicle is active or deleted from Amazon&#39;s catalog..</param>
        /// <param name="identifiers">Identifiers that can be used to identify the vehicle uniquely (required).</param>
        public Vehicle(string make = default, string model = default, string variantName = default, string bodyStyle = default, string driveType = default, string energy = default, List<EngineOutput> engineOutput = default, MonthAndYear manufacturingStartDate = default, MonthAndYear manufacturingStopDate = default, string lastProcessedDate = default, VehicleStatusInCatalog? status = default, List<VehicleIdentifiers> identifiers = default)
        {
            // to ensure "make" is required (not null)
            if (make == null)
            {
                throw new InvalidDataException("make is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.Make = make;
            }
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new InvalidDataException("model is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.Model = model;
            }
            // to ensure "identifiers" is required (not null)
            if (identifiers == null)
            {
                throw new InvalidDataException("identifiers is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.Identifiers = identifiers;
            }
            this.VariantName = variantName;
            this.BodyStyle = bodyStyle;
            this.DriveType = driveType;
            this.Energy = energy;
            this.EngineOutput = engineOutput;
            this.ManufacturingStartDate = manufacturingStartDate;
            this.ManufacturingStopDate = manufacturingStopDate;
            this.LastProcessedDate = lastProcessedDate;
            this.Status = status;
        }

        /// <summary>
        /// Vehicle Brand.
        /// </summary>
        /// <value>Vehicle Brand.</value>
        [DataMember(Name = "make", EmitDefaultValue = false)]
        public string Make { get; set; }

        /// <summary>
        /// Specific model of a vehicle.
        /// </summary>
        /// <value>Specific model of a vehicle.</value>
        [DataMember(Name = "model", EmitDefaultValue = false)]
        public string Model { get; set; }

        /// <summary>
        /// Name of the vehicle variant.
        /// </summary>
        /// <value>Name of the vehicle variant.</value>
        [DataMember(Name = "variantName", EmitDefaultValue = false)]
        public string VariantName { get; set; }

        /// <summary>
        /// Body style of vehicle (example: Hatchback, Cabriolet).
        /// </summary>
        /// <value>Body style of vehicle (example: Hatchback, Cabriolet).</value>
        [DataMember(Name = "bodyStyle", EmitDefaultValue = false)]
        public string BodyStyle { get; set; }

        /// <summary>
        /// Drive type of vehicle(example: Rear wheel drive).
        /// </summary>
        /// <value>Drive type of vehicle(example: Rear wheel drive).</value>
        [DataMember(Name = "driveType", EmitDefaultValue = false)]
        public string DriveType { get; set; }

        /// <summary>
        /// Energy Source for the vehicle(example: Petrol)
        /// </summary>
        /// <value>Energy Source for the vehicle(example: Petrol)</value>
        [DataMember(Name = "energy", EmitDefaultValue = false)]
        public string Energy { get; set; }

        /// <summary>
        /// Engine output of vehicle.
        /// </summary>
        /// <value>Engine output of vehicle.</value>
        [DataMember(Name = "engineOutput", EmitDefaultValue = false)]
        public List<EngineOutput> EngineOutput { get; set; }

        /// <summary>
        /// Vehicle manufacturing start date.
        /// </summary>
        /// <value>Vehicle manufacturing start date.</value>
        [DataMember(Name = "manufacturingStartDate", EmitDefaultValue = false)]
        public MonthAndYear ManufacturingStartDate { get; set; }

        /// <summary>
        /// Vehicle manufacturing stop date. If it is empty, then the vehicle is still being manufactured.
        /// </summary>
        /// <value>Vehicle manufacturing stop date. If it is empty, then the vehicle is still being manufactured.</value>
        [DataMember(Name = "manufacturingStopDate", EmitDefaultValue = false)]
        public MonthAndYear ManufacturingStopDate { get; set; }

        /// <summary>
        /// The date on which the vehicle was last updated, in ISO-8601 date/time format.
        /// </summary>
        /// <value>The date on which the vehicle was last updated, in ISO-8601 date/time format.</value>
        [DataMember(Name = "lastProcessedDate", EmitDefaultValue = false)]
        public string LastProcessedDate { get; set; }


        /// <summary>
        /// Identifiers that can be used to identify the vehicle uniquely
        /// </summary>
        /// <value>Identifiers that can be used to identify the vehicle uniquely</value>
        [DataMember(Name = "identifiers", EmitDefaultValue = false)]
        public List<VehicleIdentifiers> Identifiers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Vehicle {\n");
            sb.Append("  Make: ").Append(Make).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  VariantName: ").Append(VariantName).Append("\n");
            sb.Append("  BodyStyle: ").Append(BodyStyle).Append("\n");
            sb.Append("  DriveType: ").Append(DriveType).Append("\n");
            sb.Append("  Energy: ").Append(Energy).Append("\n");
            sb.Append("  EngineOutput: ").Append(EngineOutput).Append("\n");
            sb.Append("  ManufacturingStartDate: ").Append(ManufacturingStartDate).Append("\n");
            sb.Append("  ManufacturingStopDate: ").Append(ManufacturingStopDate).Append("\n");
            sb.Append("  LastProcessedDate: ").Append(LastProcessedDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Vehicle);
        }

        /// <summary>
        /// Returns true if Vehicle instances are equal
        /// </summary>
        /// <param name="input">Instance of Vehicle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Vehicle input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Make == input.Make ||
                    (this.Make != null &&
                    this.Make.Equals(input.Make))
                ) &&
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) &&
                (
                    this.VariantName == input.VariantName ||
                    (this.VariantName != null &&
                    this.VariantName.Equals(input.VariantName))
                ) &&
                (
                    this.BodyStyle == input.BodyStyle ||
                    (this.BodyStyle != null &&
                    this.BodyStyle.Equals(input.BodyStyle))
                ) &&
                (
                    this.DriveType == input.DriveType ||
                    (this.DriveType != null &&
                    this.DriveType.Equals(input.DriveType))
                ) &&
                (
                    this.Energy == input.Energy ||
                    (this.Energy != null &&
                    this.Energy.Equals(input.Energy))
                ) &&
                (
                    this.EngineOutput == input.EngineOutput ||
                    this.EngineOutput != null &&
                    this.EngineOutput.SequenceEqual(input.EngineOutput)
                ) &&
                (
                    this.ManufacturingStartDate == input.ManufacturingStartDate ||
                    (this.ManufacturingStartDate != null &&
                    this.ManufacturingStartDate.Equals(input.ManufacturingStartDate))
                ) &&
                (
                    this.ManufacturingStopDate == input.ManufacturingStopDate ||
                    (this.ManufacturingStopDate != null &&
                    this.ManufacturingStopDate.Equals(input.ManufacturingStopDate))
                ) &&
                (
                    this.LastProcessedDate == input.LastProcessedDate ||
                    (this.LastProcessedDate != null &&
                    this.LastProcessedDate.Equals(input.LastProcessedDate))
                ) &&
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) &&
                (
                    this.Identifiers == input.Identifiers ||
                    this.Identifiers != null &&
                    this.Identifiers.SequenceEqual(input.Identifiers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Make != null)
                    hashCode = hashCode * 59 + this.Make.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.VariantName != null)
                    hashCode = hashCode * 59 + this.VariantName.GetHashCode();
                if (this.BodyStyle != null)
                    hashCode = hashCode * 59 + this.BodyStyle.GetHashCode();
                if (this.DriveType != null)
                    hashCode = hashCode * 59 + this.DriveType.GetHashCode();
                if (this.Energy != null)
                    hashCode = hashCode * 59 + this.Energy.GetHashCode();
                if (this.EngineOutput != null)
                    hashCode = hashCode * 59 + this.EngineOutput.GetHashCode();
                if (this.ManufacturingStartDate != null)
                    hashCode = hashCode * 59 + this.ManufacturingStartDate.GetHashCode();
                if (this.ManufacturingStopDate != null)
                    hashCode = hashCode * 59 + this.ManufacturingStopDate.GetHashCode();
                if (this.LastProcessedDate != null)
                    hashCode = hashCode * 59 + this.LastProcessedDate.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Identifiers != null)
                    hashCode = hashCode * 59 + this.Identifiers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
