//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Amazon.SellingPartnerAPIAA.Clients.Schemas.Notifications.FBAInventoryAvailabilityChange
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// The root schema comprises the entire JSON document.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FBAInventoryAvailabilityChangeNotification
    {
        /// <summary>
        /// The version of this notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NotificationVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationVersion { get; set; }

        /// <summary>
        /// The type of this notification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NotificationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FBAInventoryAvailabilityChangeNotificationNotificationType NotificationType { get; set; }

        /// <summary>
        /// The version of the payload.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PayloadVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayloadVersion { get; set; }

        /// <summary>
        /// Timestamp of the event. Formatted as ISO 8601 date-time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EventTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EventTime { get; set; }

        /// <summary>
        /// The details of this notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Payload", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Payload Payload { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FBAInventoryAvailabilityChangeNotification FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FBAInventoryAvailabilityChangeNotification>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum FBAInventoryAvailabilityChangeNotificationNotificationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INVENTORY_AVAILABILITY_CHANGES")]
        FBA_INVENTORY_AVAILABILITY_CHANGES = 0,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Payload
    {
        /// <summary>
        /// Selling partner identifier, such as a merchant account, for the affected inventory item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerId { get; set; }

        /// <summary>
        /// The Fulfillment Network SKU of the affected inventory item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FNSKU", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FNSKU { get; set; }

        /// <summary>
        /// Amazon Standard Identification Number of the affected inventory item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ASIN", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ASIN { get; set; }

        /// <summary>
        /// Seller SKU of the affected inventory item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SKU", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SKU { get; set; }

        /// <summary>
        /// List of Fulfillment Inventory Details for each marketplace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FulfillmentInventoryByMarketplace", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FulfillmentInventoryByMarketplace> FulfillmentInventoryByMarketplace { get; set; } = new System.Collections.ObjectModel.Collection<FulfillmentInventoryByMarketplace>();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Payload FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Payload>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FulfillmentInventoryByMarketplace
    {
        /// <summary>
        /// The marketplace identifier for the destination where the affected inventory can be used to fulfill the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketplaceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The product title of the affected inventory item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ItemName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ItemName { get; set; }

        /// <summary>
        /// Detail of the affected item's inventory availability
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FulfillmentInventory", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FulfillmentInventory FulfillmentInventory { get; set; } = new FulfillmentInventory();

        /// <summary>
        /// List of seller-enrolled stores for the affected inventory item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Stores", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Stores { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FulfillmentInventoryByMarketplace FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FulfillmentInventoryByMarketplace>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FulfillmentInventory
    {
        /// <summary>
        /// Details of the affected item's inbound units, which are either still in WORKING status or on the way to be received in Amazon warehouses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InboundQuantityBreakdown", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public InboundQuantityBreakdown InboundQuantityBreakdown { get; set; } = new InboundQuantityBreakdown();

        /// <summary>
        /// The number of units of the affected item that can be used to fulfill orders in the given marketplace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Fulfillable", Required = Newtonsoft.Json.Required.Always)]
        public int Fulfillable { get; set; }

        /// <summary>
        /// The number of units of the affected item that can not be used to fulfill orders due to the item's current disposition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Unfulfillable", Required = Newtonsoft.Json.Required.Always)]
        public int Unfulfillable { get; set; } = 0;

        /// <summary>
        /// The number of units of the affected item that are currently being investigated upon adjustments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Researching", Required = Newtonsoft.Json.Required.Always)]
        public int Researching { get; set; } = 0;

        /// <summary>
        /// Details of the inventory that is temporarily undergoing internal processes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReservedQuantityBreakdown", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ReservedQuantityBreakdown ReservedQuantityBreakdown { get; set; } = new ReservedQuantityBreakdown();

        /// <summary>
        /// The number of units available for customers to find and buy while inventory is on its way to an Amazon fulfillment center through In-Stock Head Start.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FutureSupplyBuyable", Required = Newtonsoft.Json.Required.Always)]
        public int FutureSupplyBuyable { get; set; } = 0;

        /// <summary>
        /// The number of units that customers have purchased while inventory is on its way to an Amazon fulfillment center through In-Stock Head Start
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PendingCustomerOrderInTransit", Required = Newtonsoft.Json.Required.Always)]
        public int PendingCustomerOrderInTransit { get; set; } = 0;



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FulfillmentInventory FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FulfillmentInventory>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InboundQuantityBreakdown
    {
        /// <summary>
        /// The number of units of the affected item that are currently residing in a WORKING status shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Working", Required = Newtonsoft.Json.Required.Always)]
        public int Working { get; set; }

        /// <summary>
        /// The number of units of the affected item that are currently residing in a SHIPPED, IN_TRANSIT, DELIVERED or CHECKED_IN status shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Shipped", Required = Newtonsoft.Json.Required.Always)]
        public int Shipped { get; set; }

        /// <summary>
        /// The number of units of the affected item that has arrived and are in progress to be received in Amazon warehouses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Receiving", Required = Newtonsoft.Json.Required.Always)]
        public int Receiving { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InboundQuantityBreakdown FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InboundQuantityBreakdown>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReservedQuantityBreakdown
    {
        /// <summary>
        /// The number of units of the affected item that are temporarily sidelined for internal processing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("WarehouseProcessing", Required = Newtonsoft.Json.Required.Always)]
        public int WarehouseProcessing { get; set; } = 0;

        /// <summary>
        /// The number of units of the affected item that are in progress to be trans-shipped to another Amazon Warehouse location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("WarehouseTransfer", Required = Newtonsoft.Json.Required.Always)]
        public int WarehouseTransfer { get; set; } = 0;

        /// <summary>
        /// The number of units of the affected item that will soon be shipped out as customer order shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PendingCustomerOrder", Required = Newtonsoft.Json.Required.Always)]
        public int PendingCustomerOrder { get; set; } = 0;



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReservedQuantityBreakdown FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReservedQuantityBreakdown>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }
}