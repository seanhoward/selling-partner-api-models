//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Amazon.SellingPartnerAPIAA.Clients.Schemas.Notifications.OrderChange
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// The notification response schema that comprises the entire JSON document for ORDER_CHANGE notification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OrderChangeNotification
    {
        /// <summary>
        /// The notification version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NotificationVersion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NotificationVersion { get; set; }

        /// <summary>
        /// The type of this notification, used to differentiate different notifications. Combined with payload version, this controls the structure of the payload object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NotificationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NotificationType { get; set; }

        /// <summary>
        /// The payload version of the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PayloadVersion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PayloadVersion { get; set; }

        /// <summary>
        /// The time when this notification was published, in ISO-8601 date/time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EventTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EventTime { get; set; }

        /// <summary>
        /// The payload for the ORDER_CHANGE notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Payload Payload { get; set; } = new Payload();

        /// <summary>
        /// The notification metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NotificationMetadata", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public NotificationMetadata NotificationMetadata { get; set; } = new NotificationMetadata();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OrderChangeNotification FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderChangeNotification>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Payload
    {
        /// <summary>
        /// An explanation about the ORDER_CHANGE notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrderChangeNotification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OrderChangeNotification2 OrderChangeNotification { get; set; } = new OrderChangeNotification2();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Payload FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Payload>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NotificationMetadata
    {
        /// <summary>
        /// The identifier for the application that uses the notifications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ApplicationId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// A unique identifier for the subscription which resulted in this notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SubscriptionId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SubscriptionId { get; set; }

        /// <summary>
        /// The date and time (in UTC) that the notification was sent, in ISO-8601 date/time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PublishTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PublishTime { get; set; }

        /// <summary>
        /// A unique identifier for this notification instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NotificationId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NotificationId { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OrderChangeNotification2
    {
        /// <summary>
        /// The notification level of current notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NotificationLevel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderChangeNotification2NotificationLevel NotificationLevel { get; set; }

        /// <summary>
        /// The selling partner identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerId { get; set; }

        /// <summary>
        /// The Amazon order identifier, in 3-7-7 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AmazonOrderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        /// The type of order change that caused the notification to be sent. Possible values are BuyerRequestedChange and OrderStatusChange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrderChangeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderChangeNotification2OrderChangeType OrderChangeType { get; set; }

        /// <summary>
        /// Details about what caused this ORDER_CHANGE notification to be sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrderChangeTrigger", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OrderChangeTrigger OrderChangeTrigger { get; set; } = new OrderChangeTrigger();

        /// <summary>
        /// Information about the order and order items that had the change.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Summary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Summary Summary { get; set; } = new Summary();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OrderChangeNotification2 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderChangeNotification2>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum OrderChangeNotification2NotificationLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OrderItemLevel")]
        OrderItemLevel = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"OrderLevel")]
        OrderLevel = 1,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum OrderChangeNotification2OrderChangeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BuyerRequestedChange")]
        BuyerRequestedChange = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"OrderStatusChange")]
        OrderStatusChange = 1,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OrderChangeTrigger
    {
        /// <summary>
        /// The time of the change that caused this notification, in ISO-8601 date/time format. Will be null when there is no related timestamp.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TimeOfOrderChange", Required = Newtonsoft.Json.Required.AllowNull)]
        public string TimeOfOrderChange { get; set; }

        /// <summary>
        /// The reason this ORDER_CHANGE notification was sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ChangeReason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ChangeReason { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OrderChangeTrigger FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderChangeTrigger>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Summary
    {
        /// <summary>
        /// The Amazon marketplace identifier of the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketplaceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The current order status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrderStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SummaryOrderStatus OrderStatus { get; set; }

        /// <summary>
        /// The purchase date of the order, in ISO-8601 date/time format. It will be null when there is no related information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PurchaseDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public string PurchaseDate { get; set; }

        /// <summary>
        /// The destination postal code. It will be null when there is no related information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DestinationPostalCode", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DestinationPostalCode { get; set; }

        /// <summary>
        /// Fulfillment type of the affected order, MFN or AFN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FulfillmentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SummaryFulfillmentType FulfillmentType { get; set; }

        /// <summary>
        /// The type of the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrderType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SummaryOrderType OrderType { get; set; }

        /// <summary>
        /// The number of items shipped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NumberOfItemsShipped", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NumberOfItemsShipped { get; set; }

        /// <summary>
        /// The number of items unshipped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NumberOfItemsUnshipped", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NumberOfItemsUnshipped { get; set; }

        /// <summary>
        /// The start of the time period during which you committed to fulfill the order, in ISO-8601 date/time format. Returned only for seller-fulfilled orders.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EarliestDeliveryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EarliestDeliveryDate { get; set; }

        /// <summary>
        /// The end of the time period during which you committed to fulfill the order, in ISO-8601 date/time format. Returned only for seller-fulfilled orders that do not have a PendingAvailability, Pending, or Canceled status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LatestDeliveryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LatestDeliveryDate { get; set; }

        /// <summary>
        /// The start of the time period during which you committed to ship the order, in ISO-8601 date/time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EarliestShipDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EarliestShipDate { get; set; }

        /// <summary>
        /// The end of the time period during which you committed to ship the order, in ISO-8601 date/time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LatestShipDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LatestShipDate { get; set; }

        /// <summary>
        /// The end of the time period during which you must notify the seller of possible cancellation, in ISO-8601 date/time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CancelNotifyDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CancelNotifyDate { get; set; }

        /// <summary>
        /// The order programs in which this order participates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrderPrograms", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<OrderPrograms> OrderPrograms { get; set; }

        /// <summary>
        /// The shipping programs in which this order participates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShippingPrograms", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ShippingPrograms> ShippingPrograms { get; set; }

        /// <summary>
        /// The status of the Amazon Easy Ship order. This property is included only for Amazon Easy Ship orders.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EasyShipShipmentStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SummaryEasyShipShipmentStatus EasyShipShipmentStatus { get; set; }

        /// <summary>
        /// The status of the electronic invoice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ElectronicInvoiceStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SummaryElectronicInvoiceStatus ElectronicInvoiceStatus { get; set; }

        /// <summary>
        /// Information about order items included in this order. For OrderItemLevel notifications, one payload includes one item, while for OrderLevel notifications, one payload includes all items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrderItems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderItems> OrderItems { get; set; } = new System.Collections.ObjectModel.Collection<OrderItems>();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Summary FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Summary>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SummaryOrderStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Unshipped")]
        Unshipped = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"PartiallyShipped")]
        PartiallyShipped = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Shipped")]
        Shipped = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Canceled")]
        Canceled = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Unfulfillable")]
        Unfulfillable = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceUnconfirmed")]
        InvoiceUnconfirmed = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"PendingAvailability")]
        PendingAvailability = 7,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SummaryFulfillmentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AFN")]
        AFN = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"MFN")]
        MFN = 1,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SummaryOrderType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"StandardOrder")]
        StandardOrder = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"LongLeadTimeOrder")]
        LongLeadTimeOrder = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Preorder")]
        Preorder = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"BackOrder")]
        BackOrder = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"SourcingOnDemandOrder")]
        SourcingOnDemandOrder = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum OrderPrograms
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Business")]
        Business = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Prime")]
        Prime = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Premium")]
        Premium = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"IBA")]
        IBA = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Replacement")]
        Replacement = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ShippingPrograms
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ShipDateSet")]
        ShipDateSet = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"GlobalExpress")]
        GlobalExpress = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"ISPU")]
        ISPU = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"AccessPoint")]
        AccessPoint = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"TFM")]
        TFM = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"EasyShip")]
        EasyShip = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SummaryEasyShipShipmentStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PendingSchedule")]
        PendingSchedule = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"PendingPickUp")]
        PendingPickUp = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"PendingDropOff")]
        PendingDropOff = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"LabelCanceled")]
        LabelCanceled = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"PickedUp")]
        PickedUp = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"DroppedOff")]
        DroppedOff = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"AtOriginFC")]
        AtOriginFC = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"AtDestinationFC")]
        AtDestinationFC = 7,


        [System.Runtime.Serialization.EnumMember(Value = @"Delivered")]
        Delivered = 8,


        [System.Runtime.Serialization.EnumMember(Value = @"RejectedByBuyer")]
        RejectedByBuyer = 9,


        [System.Runtime.Serialization.EnumMember(Value = @"Undeliverable")]
        Undeliverable = 10,


        [System.Runtime.Serialization.EnumMember(Value = @"ReturningToSeller")]
        ReturningToSeller = 11,


        [System.Runtime.Serialization.EnumMember(Value = @"ReturnedToSeller")]
        ReturnedToSeller = 12,


        [System.Runtime.Serialization.EnumMember(Value = @"Lost")]
        Lost = 13,


        [System.Runtime.Serialization.EnumMember(Value = @"OutForDelivery")]
        OutForDelivery = 14,


        [System.Runtime.Serialization.EnumMember(Value = @"Damaged")]
        Damaged = 15,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SummaryElectronicInvoiceStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NotRequired")]
        NotRequired = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"NotFound")]
        NotFound = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Processing")]
        Processing = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Errored")]
        Errored = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Accepted")]
        Accepted = 4,


    }

    /// <summary>
    /// Information about every order item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OrderItems
    {
        /// <summary>
        /// The Amazon-defined order item identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrderItemId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderItemId { get; set; }

        /// <summary>
        /// The seller-specific SKU for an item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerSKU", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// The unique identifier of the supply source. Will be null when there is no related information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SupplySourceId", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SupplySourceId { get; set; }

        /// <summary>
        /// The current status of the order item. This field Will have a non-null value when items' statuses are different.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrderItemStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderItemStatus OrderItemStatus { get; set; }

        /// <summary>
        /// The number of items in the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }

        /// <summary>
        /// The number of items shipped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QuantityShipped", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int QuantityShipped { get; set; }

        /// <summary>
        /// True when the buyer has requested cancelation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsBuyerRequestedCancel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsBuyerRequestedCancel { get; set; }

        /// <summary>
        /// The start of the time period during which you have committed to fulfill the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ItemEarliestDeliveryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemEarliestDeliveryDate { get; set; }

        /// <summary>
        /// The end of the time period during which you have committed to fulfill the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ItemLatestDeliveryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemLatestDeliveryDate { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OrderItems FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderItems>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum OrderItemStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unshipped")]
        Unshipped = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Shipped")]
        Shipped = 1,


    }
}