/* 
 * Selling Partner API for FBA Inventory
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FbaInventory
{
    /// <summary>
    /// The payload schema for the getInventorySummaries operation.
    /// </summary>
    [DataContract]
    public partial class GetInventorySummariesResult :  IEquatable<GetInventorySummariesResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetInventorySummariesResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetInventorySummariesResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetInventorySummariesResult" /> class.
        /// </summary>
        /// <param name="granularity">granularity (required).</param>
        /// <param name="inventorySummaries">inventorySummaries (required).</param>
        public GetInventorySummariesResult(Granularity granularity = default(Granularity), InventorySummaries inventorySummaries = default(InventorySummaries))
        {
            // to ensure "granularity" is required (not null)
            if (granularity == null)
            {
                throw new InvalidDataException("granularity is a required property for GetInventorySummariesResult and cannot be null");
            }
            else
            {
                this.Granularity = granularity;
            }
            // to ensure "inventorySummaries" is required (not null)
            if (inventorySummaries == null)
            {
                throw new InvalidDataException("inventorySummaries is a required property for GetInventorySummariesResult and cannot be null");
            }
            else
            {
                this.InventorySummaries = inventorySummaries;
            }
        }
        
        /// <summary>
        /// Gets or Sets Granularity
        /// </summary>
        [DataMember(Name="granularity", EmitDefaultValue=false)]
        public Granularity Granularity { get; set; }

        /// <summary>
        /// Gets or Sets InventorySummaries
        /// </summary>
        [DataMember(Name="inventorySummaries", EmitDefaultValue=false)]
        public InventorySummaries InventorySummaries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetInventorySummariesResult {\n");
            sb.Append("  Granularity: ").Append(Granularity).Append("\n");
            sb.Append("  InventorySummaries: ").Append(InventorySummaries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetInventorySummariesResult);
        }

        /// <summary>
        /// Returns true if GetInventorySummariesResult instances are equal
        /// </summary>
        /// <param name="input">Instance of GetInventorySummariesResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetInventorySummariesResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Granularity == input.Granularity ||
                    (this.Granularity != null &&
                    this.Granularity.Equals(input.Granularity))
                ) && 
                (
                    this.InventorySummaries == input.InventorySummaries ||
                    (this.InventorySummaries != null &&
                    this.InventorySummaries.Equals(input.InventorySummaries))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Granularity != null)
                    hashCode = hashCode * 59 + this.Granularity.GetHashCode();
                if (this.InventorySummaries != null)
                    hashCode = hashCode * 59 + this.InventorySummaries.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
