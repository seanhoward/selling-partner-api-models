/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.MerchantFulfillment
{
    /// <summary>
    /// An object representing an excluded benefit that is excluded for a shipping offer or rate.
    /// </summary>
    [DataContract]
    public partial class ExcludedBenefit :  IEquatable<ExcludedBenefit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExcludedBenefit" /> class.
        /// </summary>
        /// <param name="benefit">A benefit that is being excluded from a shipment..</param>
        /// <param name="reasonCodes">reasonCodes.</param>
        public ExcludedBenefit(string benefit = default(string), ExcludedBenefitReasonCodes reasonCodes = default(ExcludedBenefitReasonCodes))
        {
            this.Benefit = benefit;
            this.ReasonCodes = reasonCodes;
        }
        
        /// <summary>
        /// A benefit that is being excluded from a shipment.
        /// </summary>
        /// <value>A benefit that is being excluded from a shipment.</value>
        [DataMember(Name="Benefit", EmitDefaultValue=false)]
        public string Benefit { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCodes
        /// </summary>
        [DataMember(Name="ReasonCodes", EmitDefaultValue=false)]
        public ExcludedBenefitReasonCodes ReasonCodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExcludedBenefit {\n");
            sb.Append("  Benefit: ").Append(Benefit).Append("\n");
            sb.Append("  ReasonCodes: ").Append(ReasonCodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExcludedBenefit);
        }

        /// <summary>
        /// Returns true if ExcludedBenefit instances are equal
        /// </summary>
        /// <param name="input">Instance of ExcludedBenefit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExcludedBenefit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Benefit == input.Benefit ||
                    (this.Benefit != null &&
                    this.Benefit.Equals(input.Benefit))
                ) && 
                (
                    this.ReasonCodes == input.ReasonCodes ||
                    (this.ReasonCodes != null &&
                    this.ReasonCodes.Equals(input.ReasonCodes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Benefit != null)
                    hashCode = hashCode * 59 + this.Benefit.GetHashCode();
                if (this.ReasonCodes != null)
                    hashCode = hashCode * 59 + this.ReasonCodes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
