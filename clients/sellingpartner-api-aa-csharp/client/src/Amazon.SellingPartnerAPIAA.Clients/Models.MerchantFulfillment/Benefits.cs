/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.MerchantFulfillment
{
    /// <summary>
    /// Benefits that are included and excluded for each shipping offer. Benefits represents services provided by Amazon (for example, &#x60;CLAIMS_PROTECTED&#x60;) when sellers purchase shipping through Amazon. Benefit details are made available for any shipment placed on or after January 1st 2024 00:00 UTC.
    /// </summary>
    [DataContract]
    public partial class Benefits :  IEquatable<Benefits>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Benefits" /> class.
        /// </summary>
        /// <param name="includedBenefits">includedBenefits.</param>
        /// <param name="excludedBenefits">excludedBenefits.</param>
        public Benefits(IncludedBenefits includedBenefits = default(IncludedBenefits), ExcludedBenefits excludedBenefits = default(ExcludedBenefits))
        {
            this.IncludedBenefits = includedBenefits;
            this.ExcludedBenefits = excludedBenefits;
        }
        
        /// <summary>
        /// Gets or Sets IncludedBenefits
        /// </summary>
        [DataMember(Name="IncludedBenefits", EmitDefaultValue=false)]
        public IncludedBenefits IncludedBenefits { get; set; }

        /// <summary>
        /// Gets or Sets ExcludedBenefits
        /// </summary>
        [DataMember(Name="ExcludedBenefits", EmitDefaultValue=false)]
        public ExcludedBenefits ExcludedBenefits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Benefits {\n");
            sb.Append("  IncludedBenefits: ").Append(IncludedBenefits).Append("\n");
            sb.Append("  ExcludedBenefits: ").Append(ExcludedBenefits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Benefits);
        }

        /// <summary>
        /// Returns true if Benefits instances are equal
        /// </summary>
        /// <param name="input">Instance of Benefits to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Benefits input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IncludedBenefits == input.IncludedBenefits ||
                    (this.IncludedBenefits != null &&
                    this.IncludedBenefits.Equals(input.IncludedBenefits))
                ) && 
                (
                    this.ExcludedBenefits == input.ExcludedBenefits ||
                    (this.ExcludedBenefits != null &&
                    this.ExcludedBenefits.Equals(input.ExcludedBenefits))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IncludedBenefits != null)
                    hashCode = hashCode * 59 + this.IncludedBenefits.GetHashCode();
                if (this.ExcludedBenefits != null)
                    hashCode = hashCode * 59 + this.ExcludedBenefits.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
