/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Services
{
    /// <summary>
    /// &#x60;AvailabilityRecord&#x60; to represent the capacity of a resource over a time range.
    /// </summary>
    [DataContract]
    public partial class AvailabilityRecord :  IEquatable<AvailabilityRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailabilityRecord" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AvailabilityRecord() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailabilityRecord" /> class.
        /// </summary>
        /// <param name="startTime">Denotes the time from when the resource is available in a day in ISO-8601 format. (required).</param>
        /// <param name="endTime">Denotes the time till when the resource is available in a day in ISO-8601 format. (required).</param>
        /// <param name="recurrence">Recurrence object containing the recurrence pattern of schedule..</param>
        /// <param name="capacity">Signifies the capacity of a resource which is available..</param>
        public AvailabilityRecord(DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), Recurrence recurrence = default(Recurrence), int? capacity = default(int?))
        {
            // to ensure "startTime" is required (not null)
            if (startTime == null)
            {
                throw new InvalidDataException("startTime is a required property for AvailabilityRecord and cannot be null");
            }
            else
            {
                this.StartTime = startTime;
            }
            // to ensure "endTime" is required (not null)
            if (endTime == null)
            {
                throw new InvalidDataException("endTime is a required property for AvailabilityRecord and cannot be null");
            }
            else
            {
                this.EndTime = endTime;
            }
            this.Recurrence = recurrence;
            this.Capacity = capacity;
        }
        
        /// <summary>
        /// Denotes the time from when the resource is available in a day in ISO-8601 format.
        /// </summary>
        /// <value>Denotes the time from when the resource is available in a day in ISO-8601 format.</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// Denotes the time till when the resource is available in a day in ISO-8601 format.
        /// </summary>
        /// <value>Denotes the time till when the resource is available in a day in ISO-8601 format.</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// Recurrence object containing the recurrence pattern of schedule.
        /// </summary>
        /// <value>Recurrence object containing the recurrence pattern of schedule.</value>
        [DataMember(Name="recurrence", EmitDefaultValue=false)]
        public Recurrence Recurrence { get; set; }

        /// <summary>
        /// Signifies the capacity of a resource which is available.
        /// </summary>
        /// <value>Signifies the capacity of a resource which is available.</value>
        [DataMember(Name="capacity", EmitDefaultValue=false)]
        public int? Capacity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvailabilityRecord {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Recurrence: ").Append(Recurrence).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AvailabilityRecord);
        }

        /// <summary>
        /// Returns true if AvailabilityRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of AvailabilityRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailabilityRecord input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.Recurrence == input.Recurrence ||
                    (this.Recurrence != null &&
                    this.Recurrence.Equals(input.Recurrence))
                ) && 
                (
                    this.Capacity == input.Capacity ||
                    (this.Capacity != null &&
                    this.Capacity.Equals(input.Capacity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.Recurrence != null)
                    hashCode = hashCode * 59 + this.Recurrence.GetHashCode();
                if (this.Capacity != null)
                    hashCode = hashCode * 59 + this.Capacity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Capacity (int?) minimum
            if(this.Capacity < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Capacity, must be a value greater than or equal to 1.", new [] { "Capacity" });
            }

            yield break;
        }
    }

}
