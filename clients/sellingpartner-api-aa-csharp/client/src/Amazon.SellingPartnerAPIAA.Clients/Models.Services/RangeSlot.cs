/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Services
{
    /// <summary>
    /// Capacity slots represented in a format similar to availability rules.
    /// </summary>
    [DataContract]
    public partial class RangeSlot : IEquatable<RangeSlot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RangeSlot" /> class.
        /// </summary>
        /// <param name="startDateTime">Start date time of slot in ISO 8601 format with precision of seconds..</param>
        /// <param name="endDateTime">End date time of slot in ISO 8601 format with precision of seconds..</param>
        /// <param name="capacity">Capacity of the slot..</param>
        public RangeSlot(DateTime? startDateTime = default, DateTime? endDateTime = default, int? capacity = default)
        {
            this.StartDateTime = startDateTime;
            this.EndDateTime = endDateTime;
            this.Capacity = capacity;
        }

        /// <summary>
        /// Start date time of slot in ISO 8601 format with precision of seconds.
        /// </summary>
        /// <value>Start date time of slot in ISO 8601 format with precision of seconds.</value>
        [DataMember(Name = "startDateTime", EmitDefaultValue = false)]
        public DateTime? StartDateTime { get; set; }

        /// <summary>
        /// End date time of slot in ISO 8601 format with precision of seconds.
        /// </summary>
        /// <value>End date time of slot in ISO 8601 format with precision of seconds.</value>
        [DataMember(Name = "endDateTime", EmitDefaultValue = false)]
        public DateTime? EndDateTime { get; set; }

        /// <summary>
        /// Capacity of the slot.
        /// </summary>
        /// <value>Capacity of the slot.</value>
        [DataMember(Name = "capacity", EmitDefaultValue = false)]
        public int? Capacity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RangeSlot {\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RangeSlot);
        }

        /// <summary>
        /// Returns true if RangeSlot instances are equal
        /// </summary>
        /// <param name="input">Instance of RangeSlot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RangeSlot input)
        {
            if (input == null)
                return false;

            return
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) &&
                (
                    this.EndDateTime == input.EndDateTime ||
                    (this.EndDateTime != null &&
                    this.EndDateTime.Equals(input.EndDateTime))
                ) &&
                (
                    this.Capacity == input.Capacity ||
                    (this.Capacity != null &&
                    this.Capacity.Equals(input.Capacity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDateTime != null)
                    hashCode = hashCode * 59 + this.StartDateTime.GetHashCode();
                if (this.EndDateTime != null)
                    hashCode = hashCode * 59 + this.EndDateTime.GetHashCode();
                if (this.Capacity != null)
                    hashCode = hashCode * 59 + this.Capacity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
