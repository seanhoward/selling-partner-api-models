/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Services
{
    /// <summary>
    /// Request schema for the &#x60;createReservation&#x60; operation.
    /// </summary>
    [DataContract]
    public partial class CreateReservationRequest :  IEquatable<CreateReservationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateReservationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateReservationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateReservationRequest" /> class.
        /// </summary>
        /// <param name="resourceId">Resource (store) identifier. (required).</param>
        /// <param name="reservation">&#x60;Reservation&#x60; object to reduce the capacity of a resource. (required).</param>
        public CreateReservationRequest(string resourceId = default(string), Reservation reservation = default(Reservation))
        {
            // to ensure "resourceId" is required (not null)
            if (resourceId == null)
            {
                throw new InvalidDataException("resourceId is a required property for CreateReservationRequest and cannot be null");
            }
            else
            {
                this.ResourceId = resourceId;
            }
            // to ensure "reservation" is required (not null)
            if (reservation == null)
            {
                throw new InvalidDataException("reservation is a required property for CreateReservationRequest and cannot be null");
            }
            else
            {
                this.Reservation = reservation;
            }
        }
        
        /// <summary>
        /// Resource (store) identifier.
        /// </summary>
        /// <value>Resource (store) identifier.</value>
        [DataMember(Name="resourceId", EmitDefaultValue=false)]
        public string ResourceId { get; set; }

        /// <summary>
        /// &#x60;Reservation&#x60; object to reduce the capacity of a resource.
        /// </summary>
        /// <value>&#x60;Reservation&#x60; object to reduce the capacity of a resource.</value>
        [DataMember(Name="reservation", EmitDefaultValue=false)]
        public Reservation Reservation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateReservationRequest {\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  Reservation: ").Append(Reservation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateReservationRequest);
        }

        /// <summary>
        /// Returns true if CreateReservationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateReservationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateReservationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResourceId == input.ResourceId ||
                    (this.ResourceId != null &&
                    this.ResourceId.Equals(input.ResourceId))
                ) && 
                (
                    this.Reservation == input.Reservation ||
                    (this.Reservation != null &&
                    this.Reservation.Equals(input.Reservation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResourceId != null)
                    hashCode = hashCode * 59 + this.ResourceId.GetHashCode();
                if (this.Reservation != null)
                    hashCode = hashCode * 59 + this.Reservation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
