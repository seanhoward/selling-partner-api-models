/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Services
{
    /// <summary>
    /// The details of an appointment.
    /// </summary>
    [DataContract]
    public partial class Appointment :  IEquatable<Appointment>, IValidatableObject
    {
        /// <summary>
        /// The status of the appointment.
        /// </summary>
        /// <value>The status of the appointment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AppointmentStatusEnum
        {
            
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,
            
            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 2,
            
            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 3
        }

        /// <summary>
        /// The status of the appointment.
        /// </summary>
        /// <value>The status of the appointment.</value>
        [DataMember(Name="appointmentStatus", EmitDefaultValue=false)]
        public AppointmentStatusEnum? AppointmentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Appointment" /> class.
        /// </summary>
        /// <param name="appointmentId">The appointment identifier..</param>
        /// <param name="appointmentStatus">The status of the appointment..</param>
        /// <param name="appointmentTime">The time of the appointment window..</param>
        /// <param name="assignedTechnicians">A list of technicians assigned to the service job..</param>
        /// <param name="rescheduledAppointmentId">The identifier of a rescheduled appointment..</param>
        /// <param name="poa">Proof of Appointment (POA) details..</param>
        public Appointment(string appointmentId = default(string), AppointmentStatusEnum? appointmentStatus = default(AppointmentStatusEnum?), AppointmentTime appointmentTime = default(AppointmentTime), List<Technician> assignedTechnicians = default(List<Technician>), string rescheduledAppointmentId = default(string), Poa poa = default(Poa))
        {
            this.AppointmentId = appointmentId;
            this.AppointmentStatus = appointmentStatus;
            this.AppointmentTime = appointmentTime;
            this.AssignedTechnicians = assignedTechnicians;
            this.RescheduledAppointmentId = rescheduledAppointmentId;
            this.Poa = poa;
        }
        
        /// <summary>
        /// The appointment identifier.
        /// </summary>
        /// <value>The appointment identifier.</value>
        [DataMember(Name="appointmentId", EmitDefaultValue=false)]
        public string AppointmentId { get; set; }


        /// <summary>
        /// The time of the appointment window.
        /// </summary>
        /// <value>The time of the appointment window.</value>
        [DataMember(Name="appointmentTime", EmitDefaultValue=false)]
        public AppointmentTime AppointmentTime { get; set; }

        /// <summary>
        /// A list of technicians assigned to the service job.
        /// </summary>
        /// <value>A list of technicians assigned to the service job.</value>
        [DataMember(Name="assignedTechnicians", EmitDefaultValue=false)]
        public List<Technician> AssignedTechnicians { get; set; }

        /// <summary>
        /// The identifier of a rescheduled appointment.
        /// </summary>
        /// <value>The identifier of a rescheduled appointment.</value>
        [DataMember(Name="rescheduledAppointmentId", EmitDefaultValue=false)]
        public string RescheduledAppointmentId { get; set; }

        /// <summary>
        /// Proof of Appointment (POA) details.
        /// </summary>
        /// <value>Proof of Appointment (POA) details.</value>
        [DataMember(Name="poa", EmitDefaultValue=false)]
        public Poa Poa { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Appointment {\n");
            sb.Append("  AppointmentId: ").Append(AppointmentId).Append("\n");
            sb.Append("  AppointmentStatus: ").Append(AppointmentStatus).Append("\n");
            sb.Append("  AppointmentTime: ").Append(AppointmentTime).Append("\n");
            sb.Append("  AssignedTechnicians: ").Append(AssignedTechnicians).Append("\n");
            sb.Append("  RescheduledAppointmentId: ").Append(RescheduledAppointmentId).Append("\n");
            sb.Append("  Poa: ").Append(Poa).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Appointment);
        }

        /// <summary>
        /// Returns true if Appointment instances are equal
        /// </summary>
        /// <param name="input">Instance of Appointment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Appointment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppointmentId == input.AppointmentId ||
                    (this.AppointmentId != null &&
                    this.AppointmentId.Equals(input.AppointmentId))
                ) && 
                (
                    this.AppointmentStatus == input.AppointmentStatus ||
                    (this.AppointmentStatus != null &&
                    this.AppointmentStatus.Equals(input.AppointmentStatus))
                ) && 
                (
                    this.AppointmentTime == input.AppointmentTime ||
                    (this.AppointmentTime != null &&
                    this.AppointmentTime.Equals(input.AppointmentTime))
                ) && 
                (
                    this.AssignedTechnicians == input.AssignedTechnicians ||
                    this.AssignedTechnicians != null &&
                    this.AssignedTechnicians.SequenceEqual(input.AssignedTechnicians)
                ) && 
                (
                    this.RescheduledAppointmentId == input.RescheduledAppointmentId ||
                    (this.RescheduledAppointmentId != null &&
                    this.RescheduledAppointmentId.Equals(input.RescheduledAppointmentId))
                ) && 
                (
                    this.Poa == input.Poa ||
                    (this.Poa != null &&
                    this.Poa.Equals(input.Poa))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppointmentId != null)
                    hashCode = hashCode * 59 + this.AppointmentId.GetHashCode();
                if (this.AppointmentStatus != null)
                    hashCode = hashCode * 59 + this.AppointmentStatus.GetHashCode();
                if (this.AppointmentTime != null)
                    hashCode = hashCode * 59 + this.AppointmentTime.GetHashCode();
                if (this.AssignedTechnicians != null)
                    hashCode = hashCode * 59 + this.AssignedTechnicians.GetHashCode();
                if (this.RescheduledAppointmentId != null)
                    hashCode = hashCode * 59 + this.RescheduledAppointmentId.GetHashCode();
                if (this.Poa != null)
                    hashCode = hashCode * 59 + this.Poa.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
