/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Services
{
    /// <summary>
    /// Input for to be uploaded document.
    /// </summary>
    [DataContract]
    public partial class ServiceUploadDocument : IEquatable<ServiceUploadDocument>, IValidatableObject
    {
        /// <summary>
        /// The content type of the to-be-uploaded file
        /// </summary>
        /// <value>The content type of the to-be-uploaded file</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContentTypeEnum
        {

            /// <summary>
            /// Enum TIFF for value: TIFF
            /// </summary>
            [EnumMember(Value = "TIFF")]
            TIFF = 1,

            /// <summary>
            /// Enum JPG for value: JPG
            /// </summary>
            [EnumMember(Value = "JPG")]
            JPG = 2,

            /// <summary>
            /// Enum PNG for value: PNG
            /// </summary>
            [EnumMember(Value = "PNG")]
            PNG = 3,

            /// <summary>
            /// Enum JPEG for value: JPEG
            /// </summary>
            [EnumMember(Value = "JPEG")]
            JPEG = 4,

            /// <summary>
            /// Enum GIF for value: GIF
            /// </summary>
            [EnumMember(Value = "GIF")]
            GIF = 5,

            /// <summary>
            /// Enum PDF for value: PDF
            /// </summary>
            [EnumMember(Value = "PDF")]
            PDF = 6
        }

        /// <summary>
        /// The content type of the to-be-uploaded file
        /// </summary>
        /// <value>The content type of the to-be-uploaded file</value>
        [DataMember(Name = "contentType", EmitDefaultValue = false)]
        public ContentTypeEnum ContentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceUploadDocument" /> class.
        /// </summary>
        [JsonConstructor]
        protected ServiceUploadDocument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceUploadDocument" /> class.
        /// </summary>
        /// <param name="contentType">The content type of the to-be-uploaded file (required).</param>
        /// <param name="contentLength">The content length of the to-be-uploaded file (required).</param>
        /// <param name="contentMD5">An MD5 hash of the content to be submitted to the upload destination. This value is used to determine if the data has been corrupted or tampered with during transit..</param>
        public ServiceUploadDocument(ContentTypeEnum contentType = default, decimal? contentLength = default, string contentMD5 = default)
        {
            // to ensure "contentType" is required (not null)
            if (contentType == null)
            {
                throw new InvalidDataException("contentType is a required property for ServiceUploadDocument and cannot be null");
            }
            else
            {
                this.ContentType = contentType;
            }
            // to ensure "contentLength" is required (not null)
            if (contentLength == null)
            {
                throw new InvalidDataException("contentLength is a required property for ServiceUploadDocument and cannot be null");
            }
            else
            {
                this.ContentLength = contentLength;
            }
            this.ContentMD5 = contentMD5;
        }


        /// <summary>
        /// The content length of the to-be-uploaded file
        /// </summary>
        /// <value>The content length of the to-be-uploaded file</value>
        [DataMember(Name = "contentLength", EmitDefaultValue = false)]
        public decimal? ContentLength { get; set; }

        /// <summary>
        /// An MD5 hash of the content to be submitted to the upload destination. This value is used to determine if the data has been corrupted or tampered with during transit.
        /// </summary>
        /// <value>An MD5 hash of the content to be submitted to the upload destination. This value is used to determine if the data has been corrupted or tampered with during transit.</value>
        [DataMember(Name = "contentMD5", EmitDefaultValue = false)]
        public string ContentMD5 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceUploadDocument {\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  ContentLength: ").Append(ContentLength).Append("\n");
            sb.Append("  ContentMD5: ").Append(ContentMD5).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceUploadDocument);
        }

        /// <summary>
        /// Returns true if ServiceUploadDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceUploadDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceUploadDocument input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) &&
                (
                    this.ContentLength == input.ContentLength ||
                    (this.ContentLength != null &&
                    this.ContentLength.Equals(input.ContentLength))
                ) &&
                (
                    this.ContentMD5 == input.ContentMD5 ||
                    (this.ContentMD5 != null &&
                    this.ContentMD5.Equals(input.ContentMD5))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.ContentLength != null)
                    hashCode = hashCode * 59 + this.ContentLength.GetHashCode();
                if (this.ContentMD5 != null)
                    hashCode = hashCode * 59 + this.ContentMD5.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ContentLength (decimal?) maximum
            if (this.ContentLength > (decimal?)5242880)
            {
                yield return new ValidationResult("Invalid value for ContentLength, must be a value less than or equal to 5242880.", new[] { "ContentLength" });
            }

            // ContentLength (decimal?) minimum
            if (this.ContentLength < (decimal?)1)
            {
                yield return new ValidationResult("Invalid value for ContentLength, must be a value greater than or equal to 1.", new[] { "ContentLength" });
            }

            // ContentMD5 (string) pattern
            Regex regexContentMD5 = new Regex(@"^[A-Za-z0-9\\\\+\/]{22}={2}$", RegexOptions.CultureInvariant);
            if (false == regexContentMD5.Match(this.ContentMD5).Success)
            {
                yield return new ValidationResult("Invalid value for ContentMD5, must match a pattern of " + regexContentMD5, new[] { "ContentMD5" });
            }

            yield break;
        }
    }

}
