/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Services
{
    /// <summary>
    /// In this slot format each slot only has the requested capacity types. This slot size is as specified by slot duration.
    /// </summary>
    [DataContract]
    public partial class FixedSlot :  IEquatable<FixedSlot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FixedSlot" /> class.
        /// </summary>
        /// <param name="startDateTime">Start date time of slot in ISO 8601 format with precision of seconds..</param>
        /// <param name="scheduledCapacity">Scheduled capacity corresponding to the slot. This capacity represents the originally allocated capacity as per resource schedule..</param>
        /// <param name="availableCapacity">Available capacity corresponding to the slot. This capacity represents the capacity available for allocation to reservations..</param>
        /// <param name="encumberedCapacity">Encumbered capacity corresponding to the slot. This capacity represents the capacity allocated for Amazon Jobs/Appointments/Orders..</param>
        /// <param name="reservedCapacity">Reserved capacity corresponding to the slot. This capacity represents the capacity made unavailable due to events like Breaks/Leaves/Lunch..</param>
        public FixedSlot(DateTime? startDateTime = default(DateTime?), int? scheduledCapacity = default(int?), int? availableCapacity = default(int?), int? encumberedCapacity = default(int?), int? reservedCapacity = default(int?))
        {
            this.StartDateTime = startDateTime;
            this.ScheduledCapacity = scheduledCapacity;
            this.AvailableCapacity = availableCapacity;
            this.EncumberedCapacity = encumberedCapacity;
            this.ReservedCapacity = reservedCapacity;
        }
        
        /// <summary>
        /// Start date time of slot in ISO 8601 format with precision of seconds.
        /// </summary>
        /// <value>Start date time of slot in ISO 8601 format with precision of seconds.</value>
        [DataMember(Name="startDateTime", EmitDefaultValue=false)]
        public DateTime? StartDateTime { get; set; }

        /// <summary>
        /// Scheduled capacity corresponding to the slot. This capacity represents the originally allocated capacity as per resource schedule.
        /// </summary>
        /// <value>Scheduled capacity corresponding to the slot. This capacity represents the originally allocated capacity as per resource schedule.</value>
        [DataMember(Name="scheduledCapacity", EmitDefaultValue=false)]
        public int? ScheduledCapacity { get; set; }

        /// <summary>
        /// Available capacity corresponding to the slot. This capacity represents the capacity available for allocation to reservations.
        /// </summary>
        /// <value>Available capacity corresponding to the slot. This capacity represents the capacity available for allocation to reservations.</value>
        [DataMember(Name="availableCapacity", EmitDefaultValue=false)]
        public int? AvailableCapacity { get; set; }

        /// <summary>
        /// Encumbered capacity corresponding to the slot. This capacity represents the capacity allocated for Amazon Jobs/Appointments/Orders.
        /// </summary>
        /// <value>Encumbered capacity corresponding to the slot. This capacity represents the capacity allocated for Amazon Jobs/Appointments/Orders.</value>
        [DataMember(Name="encumberedCapacity", EmitDefaultValue=false)]
        public int? EncumberedCapacity { get; set; }

        /// <summary>
        /// Reserved capacity corresponding to the slot. This capacity represents the capacity made unavailable due to events like Breaks/Leaves/Lunch.
        /// </summary>
        /// <value>Reserved capacity corresponding to the slot. This capacity represents the capacity made unavailable due to events like Breaks/Leaves/Lunch.</value>
        [DataMember(Name="reservedCapacity", EmitDefaultValue=false)]
        public int? ReservedCapacity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FixedSlot {\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  ScheduledCapacity: ").Append(ScheduledCapacity).Append("\n");
            sb.Append("  AvailableCapacity: ").Append(AvailableCapacity).Append("\n");
            sb.Append("  EncumberedCapacity: ").Append(EncumberedCapacity).Append("\n");
            sb.Append("  ReservedCapacity: ").Append(ReservedCapacity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FixedSlot);
        }

        /// <summary>
        /// Returns true if FixedSlot instances are equal
        /// </summary>
        /// <param name="input">Instance of FixedSlot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FixedSlot input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.ScheduledCapacity == input.ScheduledCapacity ||
                    (this.ScheduledCapacity != null &&
                    this.ScheduledCapacity.Equals(input.ScheduledCapacity))
                ) && 
                (
                    this.AvailableCapacity == input.AvailableCapacity ||
                    (this.AvailableCapacity != null &&
                    this.AvailableCapacity.Equals(input.AvailableCapacity))
                ) && 
                (
                    this.EncumberedCapacity == input.EncumberedCapacity ||
                    (this.EncumberedCapacity != null &&
                    this.EncumberedCapacity.Equals(input.EncumberedCapacity))
                ) && 
                (
                    this.ReservedCapacity == input.ReservedCapacity ||
                    (this.ReservedCapacity != null &&
                    this.ReservedCapacity.Equals(input.ReservedCapacity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDateTime != null)
                    hashCode = hashCode * 59 + this.StartDateTime.GetHashCode();
                if (this.ScheduledCapacity != null)
                    hashCode = hashCode * 59 + this.ScheduledCapacity.GetHashCode();
                if (this.AvailableCapacity != null)
                    hashCode = hashCode * 59 + this.AvailableCapacity.GetHashCode();
                if (this.EncumberedCapacity != null)
                    hashCode = hashCode * 59 + this.EncumberedCapacity.GetHashCode();
                if (this.ReservedCapacity != null)
                    hashCode = hashCode * 59 + this.ReservedCapacity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
