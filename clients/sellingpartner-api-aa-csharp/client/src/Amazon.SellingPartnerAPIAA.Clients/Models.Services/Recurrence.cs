/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Services
{
    /// <summary>
    /// Repeated occurrence of an event in a time range.
    /// </summary>
    [DataContract]
    public partial class Recurrence :  IEquatable<Recurrence>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Recurrence" /> class.
        /// </summary>
        [JsonConstructor]
        protected Recurrence() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Recurrence" /> class.
        /// </summary>
        /// <param name="endTime">End time of the recurrence. (required).</param>
        /// <param name="daysOfWeek">Days of the week when recurrence is valid. If the schedule is valid every Monday, input will only contain &#x60;MONDAY&#x60; in the list..</param>
        /// <param name="daysOfMonth">Days of the month when recurrence is valid..</param>
        public Recurrence(DateTime? endTime = default, List<DayOfWeek> daysOfWeek = default, List<int?> daysOfMonth = default)
        {
            // to ensure "endTime" is required (not null)
            if (endTime == null)
            {
                throw new InvalidDataException("endTime is a required property for Recurrence and cannot be null");
            }
            else
            {
                this.EndTime = endTime;
            }
            this.DaysOfWeek = daysOfWeek;
            this.DaysOfMonth = daysOfMonth;
        }
        
        /// <summary>
        /// End time of the recurrence.
        /// </summary>
        /// <value>End time of the recurrence.</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// Days of the week when recurrence is valid. If the schedule is valid every Monday, input will only contain &#x60;MONDAY&#x60; in the list.
        /// </summary>
        /// <value>Days of the week when recurrence is valid. If the schedule is valid every Monday, input will only contain &#x60;MONDAY&#x60; in the list.</value>
        [DataMember(Name="daysOfWeek", EmitDefaultValue=false)]
        public List<DayOfWeek> DaysOfWeek { get; set; }

        /// <summary>
        /// Days of the month when recurrence is valid.
        /// </summary>
        /// <value>Days of the month when recurrence is valid.</value>
        [DataMember(Name="daysOfMonth", EmitDefaultValue=false)]
        public List<int?> DaysOfMonth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Recurrence {\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  DaysOfWeek: ").Append(DaysOfWeek).Append("\n");
            sb.Append("  DaysOfMonth: ").Append(DaysOfMonth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Recurrence);
        }

        /// <summary>
        /// Returns true if Recurrence instances are equal
        /// </summary>
        /// <param name="input">Instance of Recurrence to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Recurrence input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.DaysOfWeek == input.DaysOfWeek ||
                    this.DaysOfWeek != null &&
                    this.DaysOfWeek.SequenceEqual(input.DaysOfWeek)
                ) && 
                (
                    this.DaysOfMonth == input.DaysOfMonth ||
                    this.DaysOfMonth != null &&
                    this.DaysOfMonth.SequenceEqual(input.DaysOfMonth)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.DaysOfWeek != null)
                    hashCode = hashCode * 59 + this.DaysOfWeek.GetHashCode();
                if (this.DaysOfMonth != null)
                    hashCode = hashCode * 59 + this.DaysOfMonth.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
