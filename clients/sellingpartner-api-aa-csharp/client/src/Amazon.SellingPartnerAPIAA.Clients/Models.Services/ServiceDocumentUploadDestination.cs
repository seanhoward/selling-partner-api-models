/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Services
{
    /// <summary>
    /// Information about an upload destination.
    /// </summary>
    [DataContract]
    public partial class ServiceDocumentUploadDestination : IEquatable<ServiceDocumentUploadDestination>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceDocumentUploadDestination" /> class.
        /// </summary>
        [JsonConstructor]
        protected ServiceDocumentUploadDestination() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceDocumentUploadDestination" /> class.
        /// </summary>
        /// <param name="uploadDestinationId">The unique identifier to be used by APIs that reference the upload destination. (required).</param>
        /// <param name="url">The URL to which to upload the file. (required).</param>
        /// <param name="encryptionDetails">encryptionDetails (required).</param>
        /// <param name="headers">The headers to include in the upload request..</param>
        public ServiceDocumentUploadDestination(string uploadDestinationId = default, string url = default, EncryptionDetails encryptionDetails = default, Object headers = default)
        {
            // to ensure "uploadDestinationId" is required (not null)
            if (uploadDestinationId == null)
            {
                throw new InvalidDataException("uploadDestinationId is a required property for ServiceDocumentUploadDestination and cannot be null");
            }
            else
            {
                this.UploadDestinationId = uploadDestinationId;
            }
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for ServiceDocumentUploadDestination and cannot be null");
            }
            else
            {
                this.Url = url;
            }
            // to ensure "encryptionDetails" is required (not null)
            if (encryptionDetails == null)
            {
                throw new InvalidDataException("encryptionDetails is a required property for ServiceDocumentUploadDestination and cannot be null");
            }
            else
            {
                this.EncryptionDetails = encryptionDetails;
            }
            this.Headers = headers;
        }

        /// <summary>
        /// The unique identifier to be used by APIs that reference the upload destination.
        /// </summary>
        /// <value>The unique identifier to be used by APIs that reference the upload destination.</value>
        [DataMember(Name = "uploadDestinationId", EmitDefaultValue = false)]
        public string UploadDestinationId { get; set; }

        /// <summary>
        /// The URL to which to upload the file.
        /// </summary>
        /// <value>The URL to which to upload the file.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets EncryptionDetails
        /// </summary>
        [DataMember(Name = "encryptionDetails", EmitDefaultValue = false)]
        public EncryptionDetails EncryptionDetails { get; set; }

        /// <summary>
        /// The headers to include in the upload request.
        /// </summary>
        /// <value>The headers to include in the upload request.</value>
        [DataMember(Name = "headers", EmitDefaultValue = false)]
        public Object Headers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceDocumentUploadDestination {\n");
            sb.Append("  UploadDestinationId: ").Append(UploadDestinationId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  EncryptionDetails: ").Append(EncryptionDetails).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceDocumentUploadDestination);
        }

        /// <summary>
        /// Returns true if ServiceDocumentUploadDestination instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceDocumentUploadDestination to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceDocumentUploadDestination input)
        {
            if (input == null)
                return false;

            return
                (
                    this.UploadDestinationId == input.UploadDestinationId ||
                    (this.UploadDestinationId != null &&
                    this.UploadDestinationId.Equals(input.UploadDestinationId))
                ) &&
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) &&
                (
                    this.EncryptionDetails == input.EncryptionDetails ||
                    (this.EncryptionDetails != null &&
                    this.EncryptionDetails.Equals(input.EncryptionDetails))
                ) &&
                (
                    this.Headers == input.Headers ||
                    (this.Headers != null &&
                    this.Headers.Equals(input.Headers))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UploadDestinationId != null)
                    hashCode = hashCode * 59 + this.UploadDestinationId.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.EncryptionDetails != null)
                    hashCode = hashCode * 59 + this.EncryptionDetails.GetHashCode();
                if (this.Headers != null)
                    hashCode = hashCode * 59 + this.Headers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
