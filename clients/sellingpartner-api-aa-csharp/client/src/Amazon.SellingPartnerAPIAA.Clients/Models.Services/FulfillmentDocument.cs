/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Services
{
    /// <summary>
    /// Document that captured during service appointment fulfillment that portrays proof of completion
    /// </summary>
    [DataContract]
    public partial class FulfillmentDocument :  IEquatable<FulfillmentDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentDocument" /> class.
        /// </summary>
        /// <param name="uploadDestinationId">The identifier of the upload destination. Get this value by calling the &#x60;createServiceDocumentUploadDestination&#x60; operation of the Services API..</param>
        /// <param name="contentSha256">Sha256 hash of the file content. This value is used to determine if the file has been corrupted or tampered with during transit..</param>
        public FulfillmentDocument(string uploadDestinationId = default, string contentSha256 = default)
        {
            this.UploadDestinationId = uploadDestinationId;
            this.ContentSha256 = contentSha256;
        }
        
        /// <summary>
        /// The identifier of the upload destination. Get this value by calling the &#x60;createServiceDocumentUploadDestination&#x60; operation of the Services API.
        /// </summary>
        /// <value>The identifier of the upload destination. Get this value by calling the &#x60;createServiceDocumentUploadDestination&#x60; operation of the Services API.</value>
        [DataMember(Name="uploadDestinationId", EmitDefaultValue=false)]
        public string UploadDestinationId { get; set; }

        /// <summary>
        /// Sha256 hash of the file content. This value is used to determine if the file has been corrupted or tampered with during transit.
        /// </summary>
        /// <value>Sha256 hash of the file content. This value is used to determine if the file has been corrupted or tampered with during transit.</value>
        [DataMember(Name="contentSha256", EmitDefaultValue=false)]
        public string ContentSha256 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentDocument {\n");
            sb.Append("  UploadDestinationId: ").Append(UploadDestinationId).Append("\n");
            sb.Append("  ContentSha256: ").Append(ContentSha256).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentDocument);
        }

        /// <summary>
        /// Returns true if FulfillmentDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UploadDestinationId == input.UploadDestinationId ||
                    (this.UploadDestinationId != null &&
                    this.UploadDestinationId.Equals(input.UploadDestinationId))
                ) && 
                (
                    this.ContentSha256 == input.ContentSha256 ||
                    (this.ContentSha256 != null &&
                    this.ContentSha256.Equals(input.ContentSha256))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UploadDestinationId != null)
                    hashCode = hashCode * 59 + this.UploadDestinationId.GetHashCode();
                if (this.ContentSha256 != null)
                    hashCode = hashCode * 59 + this.ContentSha256.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
