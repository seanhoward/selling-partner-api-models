/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Services
{
    /// <summary>
    /// &#x60;UpdateReservationRecord&#x60; entity contains the &#x60;Reservation&#x60; if there is an error/warning while performing the requested operation on it, otherwise it will contain the new &#x60;reservationId&#x60;.
    /// </summary>
    [DataContract]
    public partial class UpdateReservationRecord :  IEquatable<UpdateReservationRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateReservationRecord" /> class.
        /// </summary>
        /// <param name="reservation">Reservation record if the operation failed. It will only contain the new &#x60;reservationId&#x60; if the operation is successful..</param>
        /// <param name="warnings">Warnings encountered, if any..</param>
        /// <param name="errors">Errors encountered, if any..</param>
        public UpdateReservationRecord(Reservation reservation = default, WarningList warnings = default, ErrorList errors = default)
        {
            this.Reservation = reservation;
            this.Warnings = warnings;
            this.Errors = errors;
        }
        
        /// <summary>
        /// Reservation record if the operation failed. It will only contain the new &#x60;reservationId&#x60; if the operation is successful.
        /// </summary>
        /// <value>Reservation record if the operation failed. It will only contain the new &#x60;reservationId&#x60; if the operation is successful.</value>
        [DataMember(Name="reservation", EmitDefaultValue=false)]
        public Reservation Reservation { get; set; }

        /// <summary>
        /// Warnings encountered, if any.
        /// </summary>
        /// <value>Warnings encountered, if any.</value>
        [DataMember(Name="warnings", EmitDefaultValue=false)]
        public WarningList Warnings { get; set; }

        /// <summary>
        /// Errors encountered, if any.
        /// </summary>
        /// <value>Errors encountered, if any.</value>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public ErrorList Errors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateReservationRecord {\n");
            sb.Append("  Reservation: ").Append(Reservation).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateReservationRecord);
        }

        /// <summary>
        /// Returns true if UpdateReservationRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateReservationRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateReservationRecord input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Reservation == input.Reservation ||
                    (this.Reservation != null &&
                    this.Reservation.Equals(input.Reservation))
                ) && 
                (
                    this.Warnings == input.Warnings ||
                    (this.Warnings != null &&
                    this.Warnings.Equals(input.Warnings))
                ) && 
                (
                    this.Errors == input.Errors ||
                    (this.Errors != null &&
                    this.Errors.Equals(input.Errors))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reservation != null)
                    hashCode = hashCode * 59 + this.Reservation.GetHashCode();
                if (this.Warnings != null)
                    hashCode = hashCode * 59 + this.Warnings.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
