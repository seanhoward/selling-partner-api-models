/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Services
{
    /// <summary>
    /// Range capacity entity where each entry has a capacity type and corresponding slots.
    /// </summary>
    [DataContract]
    public partial class RangeCapacity :  IEquatable<RangeCapacity>, IValidatableObject
    {
        /// <summary>
        /// Capacity type corresponding to the slots.
        /// </summary>
        /// <value>Capacity type corresponding to the slots.</value>
        [DataMember(Name="capacityType", EmitDefaultValue=false)]
        public CapacityType? CapacityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RangeCapacity" /> class.
        /// </summary>
        /// <param name="capacityType">Capacity type corresponding to the slots..</param>
        /// <param name="slots">Array of capacity slots in range slot format..</param>
        public RangeCapacity(CapacityType? capacityType = default, List<RangeSlot> slots = default)
        {
            this.CapacityType = capacityType;
            this.Slots = slots;
        }
        

        /// <summary>
        /// Array of capacity slots in range slot format.
        /// </summary>
        /// <value>Array of capacity slots in range slot format.</value>
        [DataMember(Name="slots", EmitDefaultValue=false)]
        public List<RangeSlot> Slots { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RangeCapacity {\n");
            sb.Append("  CapacityType: ").Append(CapacityType).Append("\n");
            sb.Append("  Slots: ").Append(Slots).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RangeCapacity);
        }

        /// <summary>
        /// Returns true if RangeCapacity instances are equal
        /// </summary>
        /// <param name="input">Instance of RangeCapacity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RangeCapacity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CapacityType == input.CapacityType ||
                    (this.CapacityType != null &&
                    this.CapacityType.Equals(input.CapacityType))
                ) && 
                (
                    this.Slots == input.Slots ||
                    this.Slots != null &&
                    this.Slots.SequenceEqual(input.Slots)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CapacityType != null)
                    hashCode = hashCode * 59 + this.CapacityType.GetHashCode();
                if (this.Slots != null)
                    hashCode = hashCode * 59 + this.Slots.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
