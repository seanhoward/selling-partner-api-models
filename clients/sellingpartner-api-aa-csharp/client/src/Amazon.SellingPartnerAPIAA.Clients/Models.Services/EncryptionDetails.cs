/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Services
{
    /// <summary>
    /// Encryption details for required client-side encryption and decryption of document contents.
    /// </summary>
    [DataContract]
    public partial class EncryptionDetails :  IEquatable<EncryptionDetails>, IValidatableObject
    {
        /// <summary>
        /// The encryption standard required to encrypt or decrypt the document contents.
        /// </summary>
        /// <value>The encryption standard required to encrypt or decrypt the document contents.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StandardEnum
        {
            
            /// <summary>
            /// Enum AES for value: AES
            /// </summary>
            [EnumMember(Value = "AES")]
            AES = 1
        }

        /// <summary>
        /// The encryption standard required to encrypt or decrypt the document contents.
        /// </summary>
        /// <value>The encryption standard required to encrypt or decrypt the document contents.</value>
        [DataMember(Name="standard", EmitDefaultValue=false)]
        public StandardEnum Standard { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EncryptionDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EncryptionDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EncryptionDetails" /> class.
        /// </summary>
        /// <param name="standard">The encryption standard required to encrypt or decrypt the document contents. (required).</param>
        /// <param name="initializationVector">The vector to encrypt or decrypt the document contents using Cipher Block Chaining (CBC). (required).</param>
        /// <param name="key">The encryption key used to encrypt or decrypt the document contents. (required).</param>
        public EncryptionDetails(StandardEnum standard = default(StandardEnum), string initializationVector = default(string), string key = default(string))
        {
            // to ensure "standard" is required (not null)
            if (standard == null)
            {
                throw new InvalidDataException("standard is a required property for EncryptionDetails and cannot be null");
            }
            else
            {
                this.Standard = standard;
            }
            // to ensure "initializationVector" is required (not null)
            if (initializationVector == null)
            {
                throw new InvalidDataException("initializationVector is a required property for EncryptionDetails and cannot be null");
            }
            else
            {
                this.InitializationVector = initializationVector;
            }
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new InvalidDataException("key is a required property for EncryptionDetails and cannot be null");
            }
            else
            {
                this.Key = key;
            }
        }
        

        /// <summary>
        /// The vector to encrypt or decrypt the document contents using Cipher Block Chaining (CBC).
        /// </summary>
        /// <value>The vector to encrypt or decrypt the document contents using Cipher Block Chaining (CBC).</value>
        [DataMember(Name="initializationVector", EmitDefaultValue=false)]
        public string InitializationVector { get; set; }

        /// <summary>
        /// The encryption key used to encrypt or decrypt the document contents.
        /// </summary>
        /// <value>The encryption key used to encrypt or decrypt the document contents.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EncryptionDetails {\n");
            sb.Append("  Standard: ").Append(Standard).Append("\n");
            sb.Append("  InitializationVector: ").Append(InitializationVector).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EncryptionDetails);
        }

        /// <summary>
        /// Returns true if EncryptionDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of EncryptionDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EncryptionDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Standard == input.Standard ||
                    (this.Standard != null &&
                    this.Standard.Equals(input.Standard))
                ) && 
                (
                    this.InitializationVector == input.InitializationVector ||
                    (this.InitializationVector != null &&
                    this.InitializationVector.Equals(input.InitializationVector))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Standard != null)
                    hashCode = hashCode * 59 + this.Standard.GetHashCode();
                if (this.InitializationVector != null)
                    hashCode = hashCode * 59 + this.InitializationVector.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
