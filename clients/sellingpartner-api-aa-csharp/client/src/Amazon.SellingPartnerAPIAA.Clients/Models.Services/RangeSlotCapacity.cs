/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Services
{
    /// <summary>
    /// Response schema for the &#x60;getRangeSlotCapacity&#x60; operation.
    /// </summary>
    [DataContract]
    public partial class RangeSlotCapacity : IEquatable<RangeSlotCapacity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RangeSlotCapacity" /> class.
        /// </summary>
        /// <param name="resourceId">Resource Identifier..</param>
        /// <param name="capacities">Array of range capacities where each entry is for a specific capacity type..</param>
        /// <param name="nextPageToken">Next page token, if there are more pages..</param>
        public RangeSlotCapacity(string resourceId = default, List<RangeCapacity> capacities = default, string nextPageToken = default)
        {
            this.ResourceId = resourceId;
            this.Capacities = capacities;
            this.NextPageToken = nextPageToken;
        }

        /// <summary>
        /// Resource Identifier.
        /// </summary>
        /// <value>Resource Identifier.</value>
        [DataMember(Name = "resourceId", EmitDefaultValue = false)]
        public string ResourceId { get; set; }

        /// <summary>
        /// Array of range capacities where each entry is for a specific capacity type.
        /// </summary>
        /// <value>Array of range capacities where each entry is for a specific capacity type.</value>
        [DataMember(Name = "capacities", EmitDefaultValue = false)]
        public List<RangeCapacity> Capacities { get; set; }

        /// <summary>
        /// Next page token, if there are more pages.
        /// </summary>
        /// <value>Next page token, if there are more pages.</value>
        [DataMember(Name = "nextPageToken", EmitDefaultValue = false)]
        public string NextPageToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RangeSlotCapacity {\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  Capacities: ").Append(Capacities).Append("\n");
            sb.Append("  NextPageToken: ").Append(NextPageToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RangeSlotCapacity);
        }

        /// <summary>
        /// Returns true if RangeSlotCapacity instances are equal
        /// </summary>
        /// <param name="input">Instance of RangeSlotCapacity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RangeSlotCapacity input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ResourceId == input.ResourceId ||
                    (this.ResourceId != null &&
                    this.ResourceId.Equals(input.ResourceId))
                ) &&
                (
                    this.Capacities == input.Capacities ||
                    this.Capacities != null &&
                    this.Capacities.SequenceEqual(input.Capacities)
                ) &&
                (
                    this.NextPageToken == input.NextPageToken ||
                    (this.NextPageToken != null &&
                    this.NextPageToken.Equals(input.NextPageToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResourceId != null)
                    hashCode = hashCode * 59 + this.ResourceId.GetHashCode();
                if (this.Capacities != null)
                    hashCode = hashCode * 59 + this.Capacities.GetHashCode();
                if (this.NextPageToken != null)
                    hashCode = hashCode * 59 + this.NextPageToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
