/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentInbound
{
    /// <summary>
    /// Measurement of a package&#39;s dimensions.
    /// </summary>
    [DataContract]
    public partial class Dimensions : IEquatable<Dimensions>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets UnitOfMeasurement
        /// </summary>
        [DataMember(Name = "unitOfMeasurement", EmitDefaultValue = false)]
        public UnitOfMeasurement UnitOfMeasurement { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Dimensions" /> class.
        /// </summary>
        [JsonConstructor]
        protected Dimensions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Dimensions" /> class.
        /// </summary>
        /// <param name="height">The height of a package. (required).</param>
        /// <param name="length">The length of a package. (required).</param>
        /// <param name="unitOfMeasurement">unitOfMeasurement (required).</param>
        /// <param name="width">The width of a package. (required).</param>
        public Dimensions(decimal? height = default, decimal? length = default, UnitOfMeasurement unitOfMeasurement = default, decimal? width = default)
        {
            // to ensure "height" is required (not null)
            if (height == null)
            {
                throw new InvalidDataException("height is a required property for Dimensions and cannot be null");
            }
            else
            {
                this.Height = height;
            }
            // to ensure "length" is required (not null)
            if (length == null)
            {
                throw new InvalidDataException("length is a required property for Dimensions and cannot be null");
            }
            else
            {
                this.Length = length;
            }
            // to ensure "unitOfMeasurement" is required (not null)
            if (unitOfMeasurement == null)
            {
                throw new InvalidDataException("unitOfMeasurement is a required property for Dimensions and cannot be null");
            }
            else
            {
                this.UnitOfMeasurement = unitOfMeasurement;
            }
            // to ensure "width" is required (not null)
            if (width == null)
            {
                throw new InvalidDataException("width is a required property for Dimensions and cannot be null");
            }
            else
            {
                this.Width = width;
            }
        }

        /// <summary>
        /// The height of a package.
        /// </summary>
        /// <value>The height of a package.</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public decimal? Height { get; set; }

        /// <summary>
        /// The length of a package.
        /// </summary>
        /// <value>The length of a package.</value>
        [DataMember(Name = "length", EmitDefaultValue = false)]
        public decimal? Length { get; set; }


        /// <summary>
        /// The width of a package.
        /// </summary>
        /// <value>The width of a package.</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public decimal? Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Dimensions {\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  UnitOfMeasurement: ").Append(UnitOfMeasurement).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Dimensions);
        }

        /// <summary>
        /// Returns true if Dimensions instances are equal
        /// </summary>
        /// <param name="input">Instance of Dimensions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Dimensions input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) &&
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) &&
                (
                    this.UnitOfMeasurement == input.UnitOfMeasurement ||
                    (this.UnitOfMeasurement != null &&
                    this.UnitOfMeasurement.Equals(input.UnitOfMeasurement))
                ) &&
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.UnitOfMeasurement != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasurement.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Height (decimal?) maximum
            if (this.Height > (decimal?)100000)
            {
                yield return new ValidationResult("Invalid value for Height, must be a value less than or equal to 100000.", new[] { "Height" });
            }

            // Height (decimal?) minimum
            if (this.Height < (decimal?)0)
            {
                yield return new ValidationResult("Invalid value for Height, must be a value greater than or equal to 0.", new[] { "Height" });
            }

            // Length (decimal?) maximum
            if (this.Length > (decimal?)100000)
            {
                yield return new ValidationResult("Invalid value for Length, must be a value less than or equal to 100000.", new[] { "Length" });
            }

            // Length (decimal?) minimum
            if (this.Length < (decimal?)0)
            {
                yield return new ValidationResult("Invalid value for Length, must be a value greater than or equal to 0.", new[] { "Length" });
            }

            // Width (decimal?) maximum
            if (this.Width > (decimal?)100000)
            {
                yield return new ValidationResult("Invalid value for Width, must be a value less than or equal to 100000.", new[] { "Width" });
            }

            // Width (decimal?) minimum
            if (this.Width < (decimal?)0)
            {
                yield return new ValidationResult("Invalid value for Width, must be a value greater than or equal to 0.", new[] { "Width" });
            }

            yield break;
        }
    }

}
