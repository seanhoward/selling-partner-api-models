/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentInbound
{
    /// <summary>
    /// The range of weights that are allowed for a package.
    /// </summary>
    [DataContract]
    public partial class WeightRange : IEquatable<WeightRange>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name = "unit", EmitDefaultValue = false)]
        public UnitOfWeight Unit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WeightRange" /> class.
        /// </summary>
        [JsonConstructor]
        protected WeightRange() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WeightRange" /> class.
        /// </summary>
        /// <param name="maximum">Maximum allowed weight. (required).</param>
        /// <param name="minimum">Minimum allowed weight. (required).</param>
        /// <param name="unit">unit (required).</param>
        public WeightRange(decimal? maximum = default, decimal? minimum = default, UnitOfWeight unit = default)
        {
            // to ensure "maximum" is required (not null)
            if (maximum == null)
            {
                throw new InvalidDataException("maximum is a required property for WeightRange and cannot be null");
            }
            else
            {
                this.Maximum = maximum;
            }
            // to ensure "minimum" is required (not null)
            if (minimum == null)
            {
                throw new InvalidDataException("minimum is a required property for WeightRange and cannot be null");
            }
            else
            {
                this.Minimum = minimum;
            }
            // to ensure "unit" is required (not null)
            if (unit == null)
            {
                throw new InvalidDataException("unit is a required property for WeightRange and cannot be null");
            }
            else
            {
                this.Unit = unit;
            }
        }

        /// <summary>
        /// Maximum allowed weight.
        /// </summary>
        /// <value>Maximum allowed weight.</value>
        [DataMember(Name = "maximum", EmitDefaultValue = false)]
        public decimal? Maximum { get; set; }

        /// <summary>
        /// Minimum allowed weight.
        /// </summary>
        /// <value>Minimum allowed weight.</value>
        [DataMember(Name = "minimum", EmitDefaultValue = false)]
        public decimal? Minimum { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WeightRange {\n");
            sb.Append("  Maximum: ").Append(Maximum).Append("\n");
            sb.Append("  Minimum: ").Append(Minimum).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WeightRange);
        }

        /// <summary>
        /// Returns true if WeightRange instances are equal
        /// </summary>
        /// <param name="input">Instance of WeightRange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WeightRange input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Maximum == input.Maximum ||
                    (this.Maximum != null &&
                    this.Maximum.Equals(input.Maximum))
                ) &&
                (
                    this.Minimum == input.Minimum ||
                    (this.Minimum != null &&
                    this.Minimum.Equals(input.Minimum))
                ) &&
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Maximum != null)
                    hashCode = hashCode * 59 + this.Maximum.GetHashCode();
                if (this.Minimum != null)
                    hashCode = hashCode * 59 + this.Minimum.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Maximum (decimal?) maximum
            if (this.Maximum > (decimal?)100000)
            {
                yield return new ValidationResult("Invalid value for Maximum, must be a value less than or equal to 100000.", new[] { "Maximum" });
            }

            // Maximum (decimal?) minimum
            if (this.Maximum < (decimal?)0)
            {
                yield return new ValidationResult("Invalid value for Maximum, must be a value greater than or equal to 0.", new[] { "Maximum" });
            }

            // Minimum (decimal?) maximum
            if (this.Minimum > (decimal?)100000)
            {
                yield return new ValidationResult("Invalid value for Minimum, must be a value less than or equal to 100000.", new[] { "Minimum" });
            }

            // Minimum (decimal?) minimum
            if (this.Minimum < (decimal?)0)
            {
                yield return new ValidationResult("Invalid value for Minimum, must be a value greater than or equal to 0.", new[] { "Minimum" });
            }

            yield break;
        }
    }

}
