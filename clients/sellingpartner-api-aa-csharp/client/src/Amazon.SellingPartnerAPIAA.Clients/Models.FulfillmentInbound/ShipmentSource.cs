/* 
 * Fulfillment Inbound v2024-03-20
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentInbound
{
    /// <summary>
    /// Specifies the &#39;ship from&#39; address for the shipment.
    /// </summary>
    [DataContract]
    public partial class ShipmentSource :  IEquatable<ShipmentSource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentSource" /> class.
        /// </summary>
        [JsonConstructor]
        protected ShipmentSource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentSource" /> class.
        /// </summary>
        /// <param name="address">address.</param>
        /// <param name="sourceType">The type of source for this shipment. Possible values: &#x60;SELLER_FACILITY&#x60;. (required).</param>
        public ShipmentSource(Address address = default, string sourceType = default)
        {
            // to ensure "sourceType" is required (not null)
            if (sourceType == null)
            {
                throw new InvalidDataException("sourceType is a required property for ShipmentSource and cannot be null");
            }
            else
            {
                this.SourceType = sourceType;
            }
            this.Address = address;
        }
        
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address Address { get; set; }

        /// <summary>
        /// The type of source for this shipment. Possible values: &#x60;SELLER_FACILITY&#x60;.
        /// </summary>
        /// <value>The type of source for this shipment. Possible values: &#x60;SELLER_FACILITY&#x60;.</value>
        [DataMember(Name="sourceType", EmitDefaultValue=false)]
        public string SourceType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipmentSource {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipmentSource);
        }

        /// <summary>
        /// Returns true if ShipmentSource instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipmentSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentSource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.SourceType == input.SourceType ||
                    (this.SourceType != null &&
                    this.SourceType.Equals(input.SourceType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.SourceType != null)
                    hashCode = hashCode * 59 + this.SourceType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SourceType (string) maxLength
            if(this.SourceType != null && this.SourceType.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for SourceType, length must be less than 1024.", new [] { "SourceType" });
            }

            // SourceType (string) minLength
            if(this.SourceType != null && this.SourceType.Length < 1)
            {
                yield return new ValidationResult("Invalid value for SourceType, length must be greater than 1.", new [] { "SourceType" });
            }

            yield break;
        }
    }

}
