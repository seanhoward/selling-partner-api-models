/* 
 * Fulfillment Inbound v2024-03-20
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentInbound
{
    /// <summary>
    /// Summary information about a placement option.
    /// </summary>
    [DataContract]
    public partial class PlacementOptionSummary :  IEquatable<PlacementOptionSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlacementOptionSummary" /> class.
        /// </summary>
        [JsonConstructor]
        protected PlacementOptionSummary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlacementOptionSummary" /> class.
        /// </summary>
        /// <param name="placementOptionId">The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs. (required).</param>
        /// <param name="status">The status of a placement option. Possible values: &#x60;OFFERED&#x60;, &#x60;ACCEPTED&#x60;. (required).</param>
        public PlacementOptionSummary(string placementOptionId = default, string status = default)
        {
            // to ensure "placementOptionId" is required (not null)
            if (placementOptionId == null)
            {
                throw new InvalidDataException("placementOptionId is a required property for PlacementOptionSummary and cannot be null");
            }
            else
            {
                this.PlacementOptionId = placementOptionId;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for PlacementOptionSummary and cannot be null");
            }
            else
            {
                this.Status = status;
            }
        }
        
        /// <summary>
        /// The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.
        /// </summary>
        /// <value>The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.</value>
        [DataMember(Name="placementOptionId", EmitDefaultValue=false)]
        public string PlacementOptionId { get; set; }

        /// <summary>
        /// The status of a placement option. Possible values: &#x60;OFFERED&#x60;, &#x60;ACCEPTED&#x60;.
        /// </summary>
        /// <value>The status of a placement option. Possible values: &#x60;OFFERED&#x60;, &#x60;ACCEPTED&#x60;.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlacementOptionSummary {\n");
            sb.Append("  PlacementOptionId: ").Append(PlacementOptionId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlacementOptionSummary);
        }

        /// <summary>
        /// Returns true if PlacementOptionSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of PlacementOptionSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlacementOptionSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PlacementOptionId == input.PlacementOptionId ||
                    (this.PlacementOptionId != null &&
                    this.PlacementOptionId.Equals(input.PlacementOptionId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PlacementOptionId != null)
                    hashCode = hashCode * 59 + this.PlacementOptionId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PlacementOptionId (string) maxLength
            if(this.PlacementOptionId != null && this.PlacementOptionId.Length > 38)
            {
                yield return new ValidationResult("Invalid value for PlacementOptionId, length must be less than 38.", new [] { "PlacementOptionId" });
            }

            // PlacementOptionId (string) minLength
            if(this.PlacementOptionId != null && this.PlacementOptionId.Length < 38)
            {
                yield return new ValidationResult("Invalid value for PlacementOptionId, length must be greater than 38.", new [] { "PlacementOptionId" });
            }

            // PlacementOptionId (string) pattern
            Regex regexPlacementOptionId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexPlacementOptionId.Match(this.PlacementOptionId).Success)
            {
                yield return new ValidationResult("Invalid value for PlacementOptionId, must match a pattern of " + regexPlacementOptionId, new [] { "PlacementOptionId" });
            }

            // Status (string) maxLength
            if(this.Status != null && this.Status.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Status, length must be less than 1024.", new [] { "Status" });
            }

            // Status (string) minLength
            if(this.Status != null && this.Status.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Status, length must be greater than 1.", new [] { "Status" });
            }

            yield break;
        }
    }

}
