/* 
 * Fulfillment Inbound v2024-03-20
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentInbound
{
    /// <summary>
    /// Input information for a given box.
    /// </summary>
    [DataContract]
    public partial class BoxInput :  IEquatable<BoxInput>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ContentInformationSource
        /// </summary>
        [DataMember(Name="contentInformationSource", EmitDefaultValue=false)]
        public BoxContentInformationSource ContentInformationSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoxInput" /> class.
        /// </summary>
        [JsonConstructor]
        protected BoxInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoxInput" /> class.
        /// </summary>
        /// <param name="contentInformationSource">contentInformationSource (required).</param>
        /// <param name="dimensions">dimensions (required).</param>
        /// <param name="items">The items and their quantity in the box. This must be empty if the box &#x60;contentInformationSource&#x60; is &#x60;BARCODE_2D&#x60; or &#x60;MANUAL_PROCESS&#x60;..</param>
        /// <param name="quantity">The number of containers where all other properties like weight or dimensions are identical. (required).</param>
        /// <param name="weight">weight (required).</param>
        public BoxInput(BoxContentInformationSource contentInformationSource = default, Dimensions dimensions = default, List<ItemInput> items = default, int? quantity = default, Weight weight = default)
        {
            // to ensure "contentInformationSource" is required (not null)
            if (contentInformationSource == null)
            {
                throw new InvalidDataException("contentInformationSource is a required property for BoxInput and cannot be null");
            }
            else
            {
                this.ContentInformationSource = contentInformationSource;
            }
            // to ensure "dimensions" is required (not null)
            if (dimensions == null)
            {
                throw new InvalidDataException("dimensions is a required property for BoxInput and cannot be null");
            }
            else
            {
                this.Dimensions = dimensions;
            }
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for BoxInput and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            // to ensure "weight" is required (not null)
            if (weight == null)
            {
                throw new InvalidDataException("weight is a required property for BoxInput and cannot be null");
            }
            else
            {
                this.Weight = weight;
            }
            this.Items = items;
        }
        

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name="dimensions", EmitDefaultValue=false)]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        /// The items and their quantity in the box. This must be empty if the box &#x60;contentInformationSource&#x60; is &#x60;BARCODE_2D&#x60; or &#x60;MANUAL_PROCESS&#x60;.
        /// </summary>
        /// <value>The items and their quantity in the box. This must be empty if the box &#x60;contentInformationSource&#x60; is &#x60;BARCODE_2D&#x60; or &#x60;MANUAL_PROCESS&#x60;.</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<ItemInput> Items { get; set; }

        /// <summary>
        /// The number of containers where all other properties like weight or dimensions are identical.
        /// </summary>
        /// <value>The number of containers where all other properties like weight or dimensions are identical.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public Weight Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BoxInput {\n");
            sb.Append("  ContentInformationSource: ").Append(ContentInformationSource).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BoxInput);
        }

        /// <summary>
        /// Returns true if BoxInput instances are equal
        /// </summary>
        /// <param name="input">Instance of BoxInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BoxInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContentInformationSource == input.ContentInformationSource ||
                    (this.ContentInformationSource != null &&
                    this.ContentInformationSource.Equals(input.ContentInformationSource))
                ) && 
                (
                    this.Dimensions == input.Dimensions ||
                    (this.Dimensions != null &&
                    this.Dimensions.Equals(input.Dimensions))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContentInformationSource != null)
                    hashCode = hashCode * 59 + this.ContentInformationSource.GetHashCode();
                if (this.Dimensions != null)
                    hashCode = hashCode * 59 + this.Dimensions.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Quantity (int?) maximum
            if(this.Quantity > (int?)10000)
            {
                yield return new ValidationResult("Invalid value for Quantity, must be a value less than or equal to 10000.", new [] { "Quantity" });
            }

            // Quantity (int?) minimum
            if(this.Quantity < (int?)1)
            {
                yield return new ValidationResult("Invalid value for Quantity, must be a value greater than or equal to 1.", new [] { "Quantity" });
            }

            yield break;
        }
    }

}
