/* 
 * Fulfillment Inbound v2024-03-20
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentInbound
{
    /// <summary>
    /// The &#x60;listShipmentBoxes&#x60; response.
    /// </summary>
    [DataContract]
    public partial class ListShipmentBoxesResponse :  IEquatable<ListShipmentBoxesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListShipmentBoxesResponse" /> class.
        /// </summary>
        [JsonConstructor]
        protected ListShipmentBoxesResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListShipmentBoxesResponse" /> class.
        /// </summary>
        /// <param name="boxes">A list of boxes in a shipment. (required).</param>
        /// <param name="pagination">pagination.</param>
        public ListShipmentBoxesResponse(List<Box> boxes = default, Pagination pagination = default)
        {
            // to ensure "boxes" is required (not null)
            if (boxes == null)
            {
                throw new InvalidDataException("boxes is a required property for ListShipmentBoxesResponse and cannot be null");
            }
            else
            {
                this.Boxes = boxes;
            }
            this.Pagination = pagination;
        }
        
        /// <summary>
        /// A list of boxes in a shipment.
        /// </summary>
        /// <value>A list of boxes in a shipment.</value>
        [DataMember(Name="boxes", EmitDefaultValue=false)]
        public List<Box> Boxes { get; set; }

        /// <summary>
        /// Gets or Sets Pagination
        /// </summary>
        [DataMember(Name="pagination", EmitDefaultValue=false)]
        public Pagination Pagination { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListShipmentBoxesResponse {\n");
            sb.Append("  Boxes: ").Append(Boxes).Append("\n");
            sb.Append("  Pagination: ").Append(Pagination).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListShipmentBoxesResponse);
        }

        /// <summary>
        /// Returns true if ListShipmentBoxesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ListShipmentBoxesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListShipmentBoxesResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Boxes == input.Boxes ||
                    this.Boxes != null &&
                    this.Boxes.SequenceEqual(input.Boxes)
                ) && 
                (
                    this.Pagination == input.Pagination ||
                    (this.Pagination != null &&
                    this.Pagination.Equals(input.Pagination))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Boxes != null)
                    hashCode = hashCode * 59 + this.Boxes.GetHashCode();
                if (this.Pagination != null)
                    hashCode = hashCode * 59 + this.Pagination.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
