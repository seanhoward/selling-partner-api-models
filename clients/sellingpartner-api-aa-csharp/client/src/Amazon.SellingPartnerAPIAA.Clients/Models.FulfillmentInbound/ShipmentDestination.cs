/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentInbound
{
    /// <summary>
    /// The Amazon fulfillment center address and warehouse ID.
    /// </summary>
    [DataContract]
    public partial class ShipmentDestination : IEquatable<ShipmentDestination>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentDestination" /> class.
        /// </summary>
        [JsonConstructor]
        protected ShipmentDestination() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentDestination" /> class.
        /// </summary>
        /// <param name="address">The address the shipment should be sent to. Empty if the destination type is &#x60;AMAZON_OPTIMIZED&#x60;..</param>
        /// <param name="destinationType">The type of destination for this shipment. Possible values: &#x60;AMAZON_OPTIMIZED&#x60;, &#x60;AMAZON_WAREHOUSE&#x60;. (required).</param>
        /// <param name="warehouseId">The warehouse that the shipment should be sent to. Empty if the destination type is &#x60;AMAZON_OPTIMIZED&#x60;..</param>
        public ShipmentDestination(Address address = default, string destinationType = default, string warehouseId = default)
        {
            // to ensure "destinationType" is required (not null)
            if (destinationType == null)
            {
                throw new InvalidDataException("destinationType is a required property for ShipmentDestination and cannot be null");
            }
            else
            {
                this.DestinationType = destinationType;
            }
            this.Address = address;
            this.WarehouseId = warehouseId;
        }

        /// <summary>
        /// The address the shipment should be sent to. Empty if the destination type is &#x60;AMAZON_OPTIMIZED&#x60;.
        /// </summary>
        /// <value>The address the shipment should be sent to. Empty if the destination type is &#x60;AMAZON_OPTIMIZED&#x60;.</value>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public Address Address { get; set; }

        /// <summary>
        /// The type of destination for this shipment. Possible values: &#x60;AMAZON_OPTIMIZED&#x60;, &#x60;AMAZON_WAREHOUSE&#x60;.
        /// </summary>
        /// <value>The type of destination for this shipment. Possible values: &#x60;AMAZON_OPTIMIZED&#x60;, &#x60;AMAZON_WAREHOUSE&#x60;.</value>
        [DataMember(Name = "destinationType", EmitDefaultValue = false)]
        public string DestinationType { get; set; }

        /// <summary>
        /// The warehouse that the shipment should be sent to. Empty if the destination type is &#x60;AMAZON_OPTIMIZED&#x60;.
        /// </summary>
        /// <value>The warehouse that the shipment should be sent to. Empty if the destination type is &#x60;AMAZON_OPTIMIZED&#x60;.</value>
        [DataMember(Name = "warehouseId", EmitDefaultValue = false)]
        public string WarehouseId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipmentDestination {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  DestinationType: ").Append(DestinationType).Append("\n");
            sb.Append("  WarehouseId: ").Append(WarehouseId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipmentDestination);
        }

        /// <summary>
        /// Returns true if ShipmentDestination instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipmentDestination to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentDestination input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) &&
                (
                    this.DestinationType == input.DestinationType ||
                    (this.DestinationType != null &&
                    this.DestinationType.Equals(input.DestinationType))
                ) &&
                (
                    this.WarehouseId == input.WarehouseId ||
                    (this.WarehouseId != null &&
                    this.WarehouseId.Equals(input.WarehouseId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.DestinationType != null)
                    hashCode = hashCode * 59 + this.DestinationType.GetHashCode();
                if (this.WarehouseId != null)
                    hashCode = hashCode * 59 + this.WarehouseId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DestinationType (string) maxLength
            if (this.DestinationType != null && this.DestinationType.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for DestinationType, length must be less than 1024.", new[] { "DestinationType" });
            }

            // DestinationType (string) minLength
            if (this.DestinationType != null && this.DestinationType.Length < 1)
            {
                yield return new ValidationResult("Invalid value for DestinationType, length must be greater than 1.", new[] { "DestinationType" });
            }

            // WarehouseId (string) maxLength
            if (this.WarehouseId != null && this.WarehouseId.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for WarehouseId, length must be less than 1024.", new[] { "WarehouseId" });
            }

            // WarehouseId (string) minLength
            if (this.WarehouseId != null && this.WarehouseId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for WarehouseId, length must be greater than 1.", new[] { "WarehouseId" });
            }

            yield break;
        }
    }

}
