/* 
 * Fulfillment Inbound v2024-03-20
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentInbound
{
    /// <summary>
    /// Contains input information to update Less-Than-Truckload (LTL) tracking information.
    /// </summary>
    [DataContract]
    public partial class LtlTrackingDetailInput :  IEquatable<LtlTrackingDetailInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LtlTrackingDetailInput" /> class.
        /// </summary>
        [JsonConstructor]
        protected LtlTrackingDetailInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LtlTrackingDetailInput" /> class.
        /// </summary>
        /// <param name="billOfLadingNumber">The number of the carrier shipment acknowledgement document..</param>
        /// <param name="freightBillNumber">Number associated with the freight bill. (required).</param>
        public LtlTrackingDetailInput(string billOfLadingNumber = default, List<string> freightBillNumber = default)
        {
            // to ensure "freightBillNumber" is required (not null)
            if (freightBillNumber == null)
            {
                throw new InvalidDataException("freightBillNumber is a required property for LtlTrackingDetailInput and cannot be null");
            }
            else
            {
                this.FreightBillNumber = freightBillNumber;
            }
            this.BillOfLadingNumber = billOfLadingNumber;
        }
        
        /// <summary>
        /// The number of the carrier shipment acknowledgement document.
        /// </summary>
        /// <value>The number of the carrier shipment acknowledgement document.</value>
        [DataMember(Name="billOfLadingNumber", EmitDefaultValue=false)]
        public string BillOfLadingNumber { get; set; }

        /// <summary>
        /// Number associated with the freight bill.
        /// </summary>
        /// <value>Number associated with the freight bill.</value>
        [DataMember(Name="freightBillNumber", EmitDefaultValue=false)]
        public List<string> FreightBillNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LtlTrackingDetailInput {\n");
            sb.Append("  BillOfLadingNumber: ").Append(BillOfLadingNumber).Append("\n");
            sb.Append("  FreightBillNumber: ").Append(FreightBillNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LtlTrackingDetailInput);
        }

        /// <summary>
        /// Returns true if LtlTrackingDetailInput instances are equal
        /// </summary>
        /// <param name="input">Instance of LtlTrackingDetailInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LtlTrackingDetailInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BillOfLadingNumber == input.BillOfLadingNumber ||
                    (this.BillOfLadingNumber != null &&
                    this.BillOfLadingNumber.Equals(input.BillOfLadingNumber))
                ) && 
                (
                    this.FreightBillNumber == input.FreightBillNumber ||
                    this.FreightBillNumber != null &&
                    this.FreightBillNumber.SequenceEqual(input.FreightBillNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BillOfLadingNumber != null)
                    hashCode = hashCode * 59 + this.BillOfLadingNumber.GetHashCode();
                if (this.FreightBillNumber != null)
                    hashCode = hashCode * 59 + this.FreightBillNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BillOfLadingNumber (string) maxLength
            if(this.BillOfLadingNumber != null && this.BillOfLadingNumber.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for BillOfLadingNumber, length must be less than 1024.", new [] { "BillOfLadingNumber" });
            }

            // BillOfLadingNumber (string) minLength
            if(this.BillOfLadingNumber != null && this.BillOfLadingNumber.Length < 1)
            {
                yield return new ValidationResult("Invalid value for BillOfLadingNumber, length must be greater than 1.", new [] { "BillOfLadingNumber" });
            }

            yield break;
        }
    }

}
