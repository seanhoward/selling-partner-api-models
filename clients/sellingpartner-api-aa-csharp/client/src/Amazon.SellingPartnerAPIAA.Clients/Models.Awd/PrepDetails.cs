/* 
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * OpenAPI spec version: 2024-05-09
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Awd
{
    /// <summary>
    /// The preparation details for a product. This contains the prep category, prep owner, and label owner. Prep instructions are generated based on the specified category.
    /// </summary>
    [DataContract]
    public partial class PrepDetails : IEquatable<PrepDetails>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets LabelOwner
        /// </summary>
        [DataMember(Name = "labelOwner", EmitDefaultValue = false)]
        public LabelOwner? LabelOwner { get; set; }
        /// <summary>
        /// The preparation category for shipping an item to Amazon&#39;s fulfillment network.
        /// </summary>
        /// <value>The preparation category for shipping an item to Amazon&#39;s fulfillment network.</value>
        [DataMember(Name = "prepCategory", EmitDefaultValue = false)]
        public PrepCategory? PrepCategory { get; set; }
        /// <summary>
        /// Gets or Sets PrepOwner
        /// </summary>
        [DataMember(Name = "prepOwner", EmitDefaultValue = false)]
        public PrepOwner? PrepOwner { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepDetails" /> class.
        /// </summary>
        /// <param name="labelOwner">labelOwner.</param>
        /// <param name="prepCategory">The preparation category for shipping an item to Amazon&#39;s fulfillment network..</param>
        /// <param name="prepInstructions">Contains information about the preparation of the inbound products. The system auto-generates this field with the use of the &#x60;prepCategory&#x60;, and if you attempt to pass a value for this field, the system will ignore it..</param>
        /// <param name="prepOwner">prepOwner.</param>
        public PrepDetails(LabelOwner? labelOwner = default, PrepCategory? prepCategory = default, List<PrepInstruction> prepInstructions = default, PrepOwner? prepOwner = default)
        {
            this.LabelOwner = labelOwner;
            this.PrepCategory = prepCategory;
            this.PrepInstructions = prepInstructions;
            this.PrepOwner = prepOwner;
        }



        /// <summary>
        /// Contains information about the preparation of the inbound products. The system auto-generates this field with the use of the &#x60;prepCategory&#x60;, and if you attempt to pass a value for this field, the system will ignore it.
        /// </summary>
        /// <value>Contains information about the preparation of the inbound products. The system auto-generates this field with the use of the &#x60;prepCategory&#x60;, and if you attempt to pass a value for this field, the system will ignore it.</value>
        [DataMember(Name = "prepInstructions", EmitDefaultValue = false)]
        public List<PrepInstruction> PrepInstructions { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PrepDetails {\n");
            sb.Append("  LabelOwner: ").Append(LabelOwner).Append("\n");
            sb.Append("  PrepCategory: ").Append(PrepCategory).Append("\n");
            sb.Append("  PrepInstructions: ").Append(PrepInstructions).Append("\n");
            sb.Append("  PrepOwner: ").Append(PrepOwner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrepDetails);
        }

        /// <summary>
        /// Returns true if PrepDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PrepDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrepDetails input)
        {
            if (input == null)
                return false;

            return
                (
                    this.LabelOwner == input.LabelOwner ||
                    (this.LabelOwner != null &&
                    this.LabelOwner.Equals(input.LabelOwner))
                ) &&
                (
                    this.PrepCategory == input.PrepCategory ||
                    (this.PrepCategory != null &&
                    this.PrepCategory.Equals(input.PrepCategory))
                ) &&
                (
                    this.PrepInstructions == input.PrepInstructions ||
                    this.PrepInstructions != null &&
                    this.PrepInstructions.SequenceEqual(input.PrepInstructions)
                ) &&
                (
                    this.PrepOwner == input.PrepOwner ||
                    (this.PrepOwner != null &&
                    this.PrepOwner.Equals(input.PrepOwner))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LabelOwner != null)
                    hashCode = hashCode * 59 + this.LabelOwner.GetHashCode();
                if (this.PrepCategory != null)
                    hashCode = hashCode * 59 + this.PrepCategory.GetHashCode();
                if (this.PrepInstructions != null)
                    hashCode = hashCode * 59 + this.PrepInstructions.GetHashCode();
                if (this.PrepOwner != null)
                    hashCode = hashCode * 59 + this.PrepOwner.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
