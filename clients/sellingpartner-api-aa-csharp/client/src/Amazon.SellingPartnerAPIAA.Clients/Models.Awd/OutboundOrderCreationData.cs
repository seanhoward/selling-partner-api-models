/* 
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory. 
 *
 * OpenAPI spec version: 2024-05-09
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Awd
{
    /// <summary>
    /// Payload for creating an outbound order.
    /// </summary>
    [DataContract]
    public partial class OutboundOrderCreationData :  IEquatable<OutboundOrderCreationData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutboundOrderCreationData" /> class.
        /// </summary>
        /// <param name="orderPreferences">Order preferences for the outbound order..</param>
        /// <param name="packagesToOutbound">List of packages to be outbound..</param>
        /// <param name="productsToOutbound">List of product units to be outbound..</param>
        public OutboundOrderCreationData(List<OrderAttribute> orderPreferences = default(List<OrderAttribute>), List<DistributionPackageQuantity> packagesToOutbound = default(List<DistributionPackageQuantity>), List<ProductQuantity> productsToOutbound = default(List<ProductQuantity>))
        {
            this.OrderPreferences = orderPreferences;
            this.PackagesToOutbound = packagesToOutbound;
            this.ProductsToOutbound = productsToOutbound;
        }
        
        /// <summary>
        /// Order preferences for the outbound order.
        /// </summary>
        /// <value>Order preferences for the outbound order.</value>
        [DataMember(Name="orderPreferences", EmitDefaultValue=false)]
        public List<OrderAttribute> OrderPreferences { get; set; }

        /// <summary>
        /// List of packages to be outbound.
        /// </summary>
        /// <value>List of packages to be outbound.</value>
        [DataMember(Name="packagesToOutbound", EmitDefaultValue=false)]
        public List<DistributionPackageQuantity> PackagesToOutbound { get; set; }

        /// <summary>
        /// List of product units to be outbound.
        /// </summary>
        /// <value>List of product units to be outbound.</value>
        [DataMember(Name="productsToOutbound", EmitDefaultValue=false)]
        public List<ProductQuantity> ProductsToOutbound { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OutboundOrderCreationData {\n");
            sb.Append("  OrderPreferences: ").Append(OrderPreferences).Append("\n");
            sb.Append("  PackagesToOutbound: ").Append(PackagesToOutbound).Append("\n");
            sb.Append("  ProductsToOutbound: ").Append(ProductsToOutbound).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutboundOrderCreationData);
        }

        /// <summary>
        /// Returns true if OutboundOrderCreationData instances are equal
        /// </summary>
        /// <param name="input">Instance of OutboundOrderCreationData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutboundOrderCreationData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderPreferences == input.OrderPreferences ||
                    this.OrderPreferences != null &&
                    this.OrderPreferences.SequenceEqual(input.OrderPreferences)
                ) && 
                (
                    this.PackagesToOutbound == input.PackagesToOutbound ||
                    this.PackagesToOutbound != null &&
                    this.PackagesToOutbound.SequenceEqual(input.PackagesToOutbound)
                ) && 
                (
                    this.ProductsToOutbound == input.ProductsToOutbound ||
                    this.ProductsToOutbound != null &&
                    this.ProductsToOutbound.SequenceEqual(input.ProductsToOutbound)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderPreferences != null)
                    hashCode = hashCode * 59 + this.OrderPreferences.GetHashCode();
                if (this.PackagesToOutbound != null)
                    hashCode = hashCode * 59 + this.PackagesToOutbound.GetHashCode();
                if (this.ProductsToOutbound != null)
                    hashCode = hashCode * 59 + this.ProductsToOutbound.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
