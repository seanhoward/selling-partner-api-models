/* 
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory. 
 *
 * OpenAPI spec version: 2024-05-09
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Awd
{
    /// <summary>
    /// Represents an AWD inbound shipment.
    /// </summary>
    [DataContract]
    public partial class InboundShipment :  IEquatable<InboundShipment>, IValidatableObject
    {
        /// <summary>
        /// Current status of this shipment.
        /// </summary>
        /// <value>Current status of this shipment.</value>
        [DataMember(Name="shipmentStatus", EmitDefaultValue=false)]
        public InboundShipmentStatus ShipmentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundShipment" /> class.
        /// </summary>
        [JsonConstructor]
        protected InboundShipment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundShipment" /> class.
        /// </summary>
        /// <param name="carrierCode">The shipment carrier code..</param>
        /// <param name="createdAt">Timestamp when the shipment was created. The date is returned in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format..</param>
        /// <param name="destinationAddress">Destination address for this shipment. (required).</param>
        /// <param name="externalReferenceId">Client-provided reference ID that can correlate this shipment to client resources. For example, to map this shipment to an internal bookkeeping order record..</param>
        /// <param name="orderId">The AWD inbound order ID that this inbound shipment belongs to. (required).</param>
        /// <param name="originAddress">Origin address for this shipment. (required).</param>
        /// <param name="receivedQuantity">Quantity received (at the receiving end) as part of this shipment..</param>
        /// <param name="shipBy">Timestamp when the shipment will be shipped..</param>
        /// <param name="shipmentContainerQuantities">Packages that are part of this shipment. (required).</param>
        /// <param name="shipmentId">Unique shipment ID. (required).</param>
        /// <param name="shipmentSkuQuantities">Quantity details at SKU level for the shipment. This attribute will only appear if the skuQuantities parameter in the request is set to SHOW..</param>
        /// <param name="destinationRegion">Assigned region where the order will be shipped. This can differ from what was passed as preference. AWD currently supports following region IDs: [us-west, us-east].</param>
        /// <param name="shipmentStatus">Current status of this shipment. (required).</param>
        /// <param name="trackingId">Carrier-unique tracking ID for this shipment..</param>
        /// <param name="updatedAt">Timestamp when the shipment was updated. The date is returned in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format..</param>
        /// <param name="warehouseReferenceId">An AWD-provided reference ID that you can use to interact with the warehouse. For example, a carrier appointment booking..</param>
        public InboundShipment(CarrierCode carrierCode = default, DateTime? createdAt = default, Address destinationAddress = default, string externalReferenceId = default, string orderId = default, Address originAddress = default, List<InventoryQuantity> receivedQuantity = default, DateTime? shipBy = default, List<DistributionPackageQuantity> shipmentContainerQuantities = default, string shipmentId = default, List<SkuQuantity> shipmentSkuQuantities = default, string destinationRegion = default, InboundShipmentStatus shipmentStatus = default, string trackingId = default, DateTime? updatedAt = default, string warehouseReferenceId = default)
        {
            // to ensure "destinationAddress" is required (not null)
            if (destinationAddress == null)
            {
                throw new InvalidDataException("destinationAddress is a required property for InboundShipment and cannot be null");
            }
            else
            {
                this.DestinationAddress = destinationAddress;
            }
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new InvalidDataException("orderId is a required property for InboundShipment and cannot be null");
            }
            else
            {
                this.OrderId = orderId;
            }
            // to ensure "originAddress" is required (not null)
            if (originAddress == null)
            {
                throw new InvalidDataException("originAddress is a required property for InboundShipment and cannot be null");
            }
            else
            {
                this.OriginAddress = originAddress;
            }
            // to ensure "shipmentContainerQuantities" is required (not null)
            if (shipmentContainerQuantities == null)
            {
                throw new InvalidDataException("shipmentContainerQuantities is a required property for InboundShipment and cannot be null");
            }
            else
            {
                this.ShipmentContainerQuantities = shipmentContainerQuantities;
            }
            // to ensure "shipmentId" is required (not null)
            if (shipmentId == null)
            {
                throw new InvalidDataException("shipmentId is a required property for InboundShipment and cannot be null");
            }
            else
            {
                this.ShipmentId = shipmentId;
            }
            // to ensure "shipmentStatus" is required (not null)
            if (shipmentStatus == null)
            {
                throw new InvalidDataException("shipmentStatus is a required property for InboundShipment and cannot be null");
            }
            else
            {
                this.ShipmentStatus = shipmentStatus;
            }
            this.CarrierCode = carrierCode;
            this.CreatedAt = createdAt;
            this.ExternalReferenceId = externalReferenceId;
            this.ReceivedQuantity = receivedQuantity;
            this.ShipBy = shipBy;
            this.ShipmentSkuQuantities = shipmentSkuQuantities;
            this.DestinationRegion = destinationRegion;
            this.TrackingId = trackingId;
            this.UpdatedAt = updatedAt;
            this.WarehouseReferenceId = warehouseReferenceId;
        }
        
        /// <summary>
        /// The shipment carrier code.
        /// </summary>
        /// <value>The shipment carrier code.</value>
        [DataMember(Name="carrierCode", EmitDefaultValue=false)]
        public CarrierCode CarrierCode { get; set; }

        /// <summary>
        /// Timestamp when the shipment was created. The date is returned in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format.
        /// </summary>
        /// <value>Timestamp when the shipment was created. The date is returned in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format.</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Destination address for this shipment.
        /// </summary>
        /// <value>Destination address for this shipment.</value>
        [DataMember(Name="destinationAddress", EmitDefaultValue=false)]
        public Address DestinationAddress { get; set; }

        /// <summary>
        /// Client-provided reference ID that can correlate this shipment to client resources. For example, to map this shipment to an internal bookkeeping order record.
        /// </summary>
        /// <value>Client-provided reference ID that can correlate this shipment to client resources. For example, to map this shipment to an internal bookkeeping order record.</value>
        [DataMember(Name="externalReferenceId", EmitDefaultValue=false)]
        public string ExternalReferenceId { get; set; }

        /// <summary>
        /// The AWD inbound order ID that this inbound shipment belongs to.
        /// </summary>
        /// <value>The AWD inbound order ID that this inbound shipment belongs to.</value>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Origin address for this shipment.
        /// </summary>
        /// <value>Origin address for this shipment.</value>
        [DataMember(Name="originAddress", EmitDefaultValue=false)]
        public Address OriginAddress { get; set; }

        /// <summary>
        /// Quantity received (at the receiving end) as part of this shipment.
        /// </summary>
        /// <value>Quantity received (at the receiving end) as part of this shipment.</value>
        [DataMember(Name="receivedQuantity", EmitDefaultValue=false)]
        public List<InventoryQuantity> ReceivedQuantity { get; set; }

        /// <summary>
        /// Timestamp when the shipment will be shipped.
        /// </summary>
        /// <value>Timestamp when the shipment will be shipped.</value>
        [DataMember(Name="shipBy", EmitDefaultValue=false)]
        public DateTime? ShipBy { get; set; }

        /// <summary>
        /// Packages that are part of this shipment.
        /// </summary>
        /// <value>Packages that are part of this shipment.</value>
        [DataMember(Name="shipmentContainerQuantities", EmitDefaultValue=false)]
        public List<DistributionPackageQuantity> ShipmentContainerQuantities { get; set; }

        /// <summary>
        /// Unique shipment ID.
        /// </summary>
        /// <value>Unique shipment ID.</value>
        [DataMember(Name="shipmentId", EmitDefaultValue=false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Quantity details at SKU level for the shipment. This attribute will only appear if the skuQuantities parameter in the request is set to SHOW.
        /// </summary>
        /// <value>Quantity details at SKU level for the shipment. This attribute will only appear if the skuQuantities parameter in the request is set to SHOW.</value>
        [DataMember(Name="shipmentSkuQuantities", EmitDefaultValue=false)]
        public List<SkuQuantity> ShipmentSkuQuantities { get; set; }

        /// <summary>
        /// Assigned region where the order will be shipped. This can differ from what was passed as preference. AWD currently supports following region IDs: [us-west, us-east]
        /// </summary>
        /// <value>Assigned region where the order will be shipped. This can differ from what was passed as preference. AWD currently supports following region IDs: [us-west, us-east]</value>
        [DataMember(Name="destinationRegion", EmitDefaultValue=false)]
        public string DestinationRegion { get; set; }


        /// <summary>
        /// Carrier-unique tracking ID for this shipment.
        /// </summary>
        /// <value>Carrier-unique tracking ID for this shipment.</value>
        [DataMember(Name="trackingId", EmitDefaultValue=false)]
        public string TrackingId { get; set; }

        /// <summary>
        /// Timestamp when the shipment was updated. The date is returned in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format.
        /// </summary>
        /// <value>Timestamp when the shipment was updated. The date is returned in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format.</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// An AWD-provided reference ID that you can use to interact with the warehouse. For example, a carrier appointment booking.
        /// </summary>
        /// <value>An AWD-provided reference ID that you can use to interact with the warehouse. For example, a carrier appointment booking.</value>
        [DataMember(Name="warehouseReferenceId", EmitDefaultValue=false)]
        public string WarehouseReferenceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InboundShipment {\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DestinationAddress: ").Append(DestinationAddress).Append("\n");
            sb.Append("  ExternalReferenceId: ").Append(ExternalReferenceId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OriginAddress: ").Append(OriginAddress).Append("\n");
            sb.Append("  ReceivedQuantity: ").Append(ReceivedQuantity).Append("\n");
            sb.Append("  ShipBy: ").Append(ShipBy).Append("\n");
            sb.Append("  ShipmentContainerQuantities: ").Append(ShipmentContainerQuantities).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ShipmentSkuQuantities: ").Append(ShipmentSkuQuantities).Append("\n");
            sb.Append("  DestinationRegion: ").Append(DestinationRegion).Append("\n");
            sb.Append("  ShipmentStatus: ").Append(ShipmentStatus).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  WarehouseReferenceId: ").Append(WarehouseReferenceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InboundShipment);
        }

        /// <summary>
        /// Returns true if InboundShipment instances are equal
        /// </summary>
        /// <param name="input">Instance of InboundShipment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InboundShipment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CarrierCode == input.CarrierCode ||
                    (this.CarrierCode != null &&
                    this.CarrierCode.Equals(input.CarrierCode))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.DestinationAddress == input.DestinationAddress ||
                    (this.DestinationAddress != null &&
                    this.DestinationAddress.Equals(input.DestinationAddress))
                ) && 
                (
                    this.ExternalReferenceId == input.ExternalReferenceId ||
                    (this.ExternalReferenceId != null &&
                    this.ExternalReferenceId.Equals(input.ExternalReferenceId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.OriginAddress == input.OriginAddress ||
                    (this.OriginAddress != null &&
                    this.OriginAddress.Equals(input.OriginAddress))
                ) && 
                (
                    this.ReceivedQuantity == input.ReceivedQuantity ||
                    this.ReceivedQuantity != null &&
                    this.ReceivedQuantity.SequenceEqual(input.ReceivedQuantity)
                ) && 
                (
                    this.ShipBy == input.ShipBy ||
                    (this.ShipBy != null &&
                    this.ShipBy.Equals(input.ShipBy))
                ) && 
                (
                    this.ShipmentContainerQuantities == input.ShipmentContainerQuantities ||
                    this.ShipmentContainerQuantities != null &&
                    this.ShipmentContainerQuantities.SequenceEqual(input.ShipmentContainerQuantities)
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                ) && 
                (
                    this.ShipmentSkuQuantities == input.ShipmentSkuQuantities ||
                    this.ShipmentSkuQuantities != null &&
                    this.ShipmentSkuQuantities.SequenceEqual(input.ShipmentSkuQuantities)
                ) && 
                (
                    this.DestinationRegion == input.DestinationRegion ||
                    (this.DestinationRegion != null &&
                    this.DestinationRegion.Equals(input.DestinationRegion))
                ) && 
                (
                    this.ShipmentStatus == input.ShipmentStatus ||
                    (this.ShipmentStatus != null &&
                    this.ShipmentStatus.Equals(input.ShipmentStatus))
                ) && 
                (
                    this.TrackingId == input.TrackingId ||
                    (this.TrackingId != null &&
                    this.TrackingId.Equals(input.TrackingId))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.WarehouseReferenceId == input.WarehouseReferenceId ||
                    (this.WarehouseReferenceId != null &&
                    this.WarehouseReferenceId.Equals(input.WarehouseReferenceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CarrierCode != null)
                    hashCode = hashCode * 59 + this.CarrierCode.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.DestinationAddress != null)
                    hashCode = hashCode * 59 + this.DestinationAddress.GetHashCode();
                if (this.ExternalReferenceId != null)
                    hashCode = hashCode * 59 + this.ExternalReferenceId.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.OriginAddress != null)
                    hashCode = hashCode * 59 + this.OriginAddress.GetHashCode();
                if (this.ReceivedQuantity != null)
                    hashCode = hashCode * 59 + this.ReceivedQuantity.GetHashCode();
                if (this.ShipBy != null)
                    hashCode = hashCode * 59 + this.ShipBy.GetHashCode();
                if (this.ShipmentContainerQuantities != null)
                    hashCode = hashCode * 59 + this.ShipmentContainerQuantities.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                if (this.ShipmentSkuQuantities != null)
                    hashCode = hashCode * 59 + this.ShipmentSkuQuantities.GetHashCode();
                if (this.DestinationRegion != null)
                    hashCode = hashCode * 59 + this.DestinationRegion.GetHashCode();
                if (this.ShipmentStatus != null)
                    hashCode = hashCode * 59 + this.ShipmentStatus.GetHashCode();
                if (this.TrackingId != null)
                    hashCode = hashCode * 59 + this.TrackingId.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.WarehouseReferenceId != null)
                    hashCode = hashCode * 59 + this.WarehouseReferenceId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // OrderId (string) minLength
            if(this.OrderId != null && this.OrderId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for OrderId, length must be greater than 1.", new [] { "OrderId" });
            }

            // ShipmentId (string) minLength
            if(this.ShipmentId != null && this.ShipmentId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ShipmentId, length must be greater than 1.", new [] { "ShipmentId" });
            }

            // TrackingId (string) minLength
            if(this.TrackingId != null && this.TrackingId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for TrackingId, length must be greater than 1.", new [] { "TrackingId" });
            }

            yield break;
        }
    }

}
