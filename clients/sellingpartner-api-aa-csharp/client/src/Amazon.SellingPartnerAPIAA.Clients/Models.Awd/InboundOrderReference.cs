/* 
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory. 
 *
 * OpenAPI spec version: 2024-05-09
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Awd
{
    /// <summary>
    /// A response that contains the reference identifiers for the newly created or updated inbound order. Consists of an order ID and version.
    /// </summary>
    [DataContract]
    public partial class InboundOrderReference :  IEquatable<InboundOrderReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundOrderReference" /> class.
        /// </summary>
        [JsonConstructor]
        protected InboundOrderReference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundOrderReference" /> class.
        /// </summary>
        /// <param name="orderId">Order ID of the inbound order. (required).</param>
        /// <param name="orderVersion">Order version of the inbound order. (required).</param>
        public InboundOrderReference(string orderId = default, string orderVersion = default)
        {
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new InvalidDataException("orderId is a required property for InboundOrderReference and cannot be null");
            }
            else
            {
                this.OrderId = orderId;
            }
            // to ensure "orderVersion" is required (not null)
            if (orderVersion == null)
            {
                throw new InvalidDataException("orderVersion is a required property for InboundOrderReference and cannot be null");
            }
            else
            {
                this.OrderVersion = orderVersion;
            }
        }
        
        /// <summary>
        /// Order ID of the inbound order.
        /// </summary>
        /// <value>Order ID of the inbound order.</value>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Order version of the inbound order.
        /// </summary>
        /// <value>Order version of the inbound order.</value>
        [DataMember(Name="orderVersion", EmitDefaultValue=false)]
        public string OrderVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InboundOrderReference {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderVersion: ").Append(OrderVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InboundOrderReference);
        }

        /// <summary>
        /// Returns true if InboundOrderReference instances are equal
        /// </summary>
        /// <param name="input">Instance of InboundOrderReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InboundOrderReference input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.OrderVersion == input.OrderVersion ||
                    (this.OrderVersion != null &&
                    this.OrderVersion.Equals(input.OrderVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.OrderVersion != null)
                    hashCode = hashCode * 59 + this.OrderVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
