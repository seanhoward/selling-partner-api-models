/* 
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory. 
 *
 * OpenAPI spec version: 2024-05-09
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Awd
{
    /// <summary>
    /// Execution errors associated with the outbound order. This field will be populated if the order failed validation.
    /// </summary>
    [DataContract]
    public partial class OutboundExecutionError :  IEquatable<OutboundExecutionError>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutboundExecutionError" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OutboundExecutionError() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutboundExecutionError" /> class.
        /// </summary>
        /// <param name="failureCode">Failure code details for the error. (required).</param>
        /// <param name="failureReasons">Failure reasons for the error. (required).</param>
        /// <param name="sku">MSKU associated with the error..</param>
        public OutboundExecutionError(string failureCode = default(string), List<string> failureReasons = default(List<string>), string sku = default(string))
        {
            // to ensure "failureCode" is required (not null)
            if (failureCode == null)
            {
                throw new InvalidDataException("failureCode is a required property for OutboundExecutionError and cannot be null");
            }
            else
            {
                this.FailureCode = failureCode;
            }
            // to ensure "failureReasons" is required (not null)
            if (failureReasons == null)
            {
                throw new InvalidDataException("failureReasons is a required property for OutboundExecutionError and cannot be null");
            }
            else
            {
                this.FailureReasons = failureReasons;
            }
            this.Sku = sku;
        }
        
        /// <summary>
        /// Failure code details for the error.
        /// </summary>
        /// <value>Failure code details for the error.</value>
        [DataMember(Name="failureCode", EmitDefaultValue=false)]
        public string FailureCode { get; set; }

        /// <summary>
        /// Failure reasons for the error.
        /// </summary>
        /// <value>Failure reasons for the error.</value>
        [DataMember(Name="failureReasons", EmitDefaultValue=false)]
        public List<string> FailureReasons { get; set; }

        /// <summary>
        /// MSKU associated with the error.
        /// </summary>
        /// <value>MSKU associated with the error.</value>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OutboundExecutionError {\n");
            sb.Append("  FailureCode: ").Append(FailureCode).Append("\n");
            sb.Append("  FailureReasons: ").Append(FailureReasons).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutboundExecutionError);
        }

        /// <summary>
        /// Returns true if OutboundExecutionError instances are equal
        /// </summary>
        /// <param name="input">Instance of OutboundExecutionError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutboundExecutionError input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FailureCode == input.FailureCode ||
                    (this.FailureCode != null &&
                    this.FailureCode.Equals(input.FailureCode))
                ) && 
                (
                    this.FailureReasons == input.FailureReasons ||
                    this.FailureReasons != null &&
                    this.FailureReasons.SequenceEqual(input.FailureReasons)
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FailureCode != null)
                    hashCode = hashCode * 59 + this.FailureCode.GetHashCode();
                if (this.FailureReasons != null)
                    hashCode = hashCode * 59 + this.FailureReasons.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
