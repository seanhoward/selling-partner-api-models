/* 
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory. 
 *
 * OpenAPI spec version: 2024-05-09
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Awd
{
    /// <summary>
    /// Represents an AWD outbound shipment.
    /// </summary>
    [DataContract]
    public partial class OutboundShipment :  IEquatable<OutboundShipment>, IValidatableObject
    {
        /// <summary>
        /// Current status of this shipment.
        /// </summary>
        /// <value>Current status of this shipment.</value>
        [DataMember(Name="shipmentStatus", EmitDefaultValue=false)]
        public OutboundShipmentStatus ShipmentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutboundShipment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OutboundShipment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutboundShipment" /> class.
        /// </summary>
        /// <param name="createdAt">Timestamp when the shipment was created..</param>
        /// <param name="destinationAddress">Destination address for this shipment. (required).</param>
        /// <param name="orderId">Outbound order ID this outbound shipment belongs to. (required).</param>
        /// <param name="originAddress">Origin address for this shipment. (required).</param>
        /// <param name="shipmentPackageQuantities">Specific distribution packages that are included in the context of this shipment..</param>
        /// <param name="shipmentId">Unique shipment ID. (required).</param>
        /// <param name="shipmentProductQuantities">Specific product units that are included in the context of this shipment..</param>
        /// <param name="shipmentStatus">Current status of this shipment. (required).</param>
        /// <param name="updatedAt">Timestamp when the shipment was updated..</param>
        public OutboundShipment(DateTime? createdAt = default(DateTime?), Address destinationAddress = default(Address), string orderId = default(string), Address originAddress = default(Address), List<DistributionPackageQuantity> shipmentPackageQuantities = default(List<DistributionPackageQuantity>), string shipmentId = default(string), List<ProductQuantity> shipmentProductQuantities = default(List<ProductQuantity>), OutboundShipmentStatus shipmentStatus = default(OutboundShipmentStatus), DateTime? updatedAt = default(DateTime?))
        {
            // to ensure "destinationAddress" is required (not null)
            if (destinationAddress == null)
            {
                throw new InvalidDataException("destinationAddress is a required property for OutboundShipment and cannot be null");
            }
            else
            {
                this.DestinationAddress = destinationAddress;
            }
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new InvalidDataException("orderId is a required property for OutboundShipment and cannot be null");
            }
            else
            {
                this.OrderId = orderId;
            }
            // to ensure "originAddress" is required (not null)
            if (originAddress == null)
            {
                throw new InvalidDataException("originAddress is a required property for OutboundShipment and cannot be null");
            }
            else
            {
                this.OriginAddress = originAddress;
            }
            // to ensure "shipmentId" is required (not null)
            if (shipmentId == null)
            {
                throw new InvalidDataException("shipmentId is a required property for OutboundShipment and cannot be null");
            }
            else
            {
                this.ShipmentId = shipmentId;
            }
            // to ensure "shipmentStatus" is required (not null)
            if (shipmentStatus == null)
            {
                throw new InvalidDataException("shipmentStatus is a required property for OutboundShipment and cannot be null");
            }
            else
            {
                this.ShipmentStatus = shipmentStatus;
            }
            this.CreatedAt = createdAt;
            this.ShipmentPackageQuantities = shipmentPackageQuantities;
            this.ShipmentProductQuantities = shipmentProductQuantities;
            this.UpdatedAt = updatedAt;
        }
        
        /// <summary>
        /// Timestamp when the shipment was created.
        /// </summary>
        /// <value>Timestamp when the shipment was created.</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Destination address for this shipment.
        /// </summary>
        /// <value>Destination address for this shipment.</value>
        [DataMember(Name="destinationAddress", EmitDefaultValue=false)]
        public Address DestinationAddress { get; set; }

        /// <summary>
        /// Outbound order ID this outbound shipment belongs to.
        /// </summary>
        /// <value>Outbound order ID this outbound shipment belongs to.</value>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Origin address for this shipment.
        /// </summary>
        /// <value>Origin address for this shipment.</value>
        [DataMember(Name="originAddress", EmitDefaultValue=false)]
        public Address OriginAddress { get; set; }

        /// <summary>
        /// Specific distribution packages that are included in the context of this shipment.
        /// </summary>
        /// <value>Specific distribution packages that are included in the context of this shipment.</value>
        [DataMember(Name="shipmentPackageQuantities", EmitDefaultValue=false)]
        public List<DistributionPackageQuantity> ShipmentPackageQuantities { get; set; }

        /// <summary>
        /// Unique shipment ID.
        /// </summary>
        /// <value>Unique shipment ID.</value>
        [DataMember(Name="shipmentId", EmitDefaultValue=false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Specific product units that are included in the context of this shipment.
        /// </summary>
        /// <value>Specific product units that are included in the context of this shipment.</value>
        [DataMember(Name="shipmentProductQuantities", EmitDefaultValue=false)]
        public List<ProductQuantity> ShipmentProductQuantities { get; set; }


        /// <summary>
        /// Timestamp when the shipment was updated.
        /// </summary>
        /// <value>Timestamp when the shipment was updated.</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OutboundShipment {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DestinationAddress: ").Append(DestinationAddress).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OriginAddress: ").Append(OriginAddress).Append("\n");
            sb.Append("  ShipmentPackageQuantities: ").Append(ShipmentPackageQuantities).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ShipmentProductQuantities: ").Append(ShipmentProductQuantities).Append("\n");
            sb.Append("  ShipmentStatus: ").Append(ShipmentStatus).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutboundShipment);
        }

        /// <summary>
        /// Returns true if OutboundShipment instances are equal
        /// </summary>
        /// <param name="input">Instance of OutboundShipment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutboundShipment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.DestinationAddress == input.DestinationAddress ||
                    (this.DestinationAddress != null &&
                    this.DestinationAddress.Equals(input.DestinationAddress))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.OriginAddress == input.OriginAddress ||
                    (this.OriginAddress != null &&
                    this.OriginAddress.Equals(input.OriginAddress))
                ) && 
                (
                    this.ShipmentPackageQuantities == input.ShipmentPackageQuantities ||
                    this.ShipmentPackageQuantities != null &&
                    this.ShipmentPackageQuantities.SequenceEqual(input.ShipmentPackageQuantities)
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                ) && 
                (
                    this.ShipmentProductQuantities == input.ShipmentProductQuantities ||
                    this.ShipmentProductQuantities != null &&
                    this.ShipmentProductQuantities.SequenceEqual(input.ShipmentProductQuantities)
                ) && 
                (
                    this.ShipmentStatus == input.ShipmentStatus ||
                    (this.ShipmentStatus != null &&
                    this.ShipmentStatus.Equals(input.ShipmentStatus))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.DestinationAddress != null)
                    hashCode = hashCode * 59 + this.DestinationAddress.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.OriginAddress != null)
                    hashCode = hashCode * 59 + this.OriginAddress.GetHashCode();
                if (this.ShipmentPackageQuantities != null)
                    hashCode = hashCode * 59 + this.ShipmentPackageQuantities.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                if (this.ShipmentProductQuantities != null)
                    hashCode = hashCode * 59 + this.ShipmentProductQuantities.GetHashCode();
                if (this.ShipmentStatus != null)
                    hashCode = hashCode * 59 + this.ShipmentStatus.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
