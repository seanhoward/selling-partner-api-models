/* 
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory. 
 *
 * OpenAPI spec version: 2024-05-09
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Awd
{
    /// <summary>
    /// Represents the eligibility status of the inbound packages.
    /// </summary>
    [DataContract]
    public partial class InboundEligibility :  IEquatable<InboundEligibility>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public InboundEligibilityStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundEligibility" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InboundEligibility() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundEligibility" /> class.
        /// </summary>
        /// <param name="ineligibilityReasons">If there are order level eligibility issues, then this list will contain those error codes and descriptions..</param>
        /// <param name="packagesToInbound">Details on SKU eligibility for each inbound package. (required).</param>
        /// <param name="previewedAt">Timestamp when the eligibility check is performed. (required).</param>
        /// <param name="status">status (required).</param>
        public InboundEligibility(List<OrderIneligibilityReason> ineligibilityReasons = default(List<OrderIneligibilityReason>), List<SkuEligibility> packagesToInbound = default(List<SkuEligibility>), DateTime? previewedAt = default(DateTime?), InboundEligibilityStatus status = default(InboundEligibilityStatus))
        {
            // to ensure "packagesToInbound" is required (not null)
            if (packagesToInbound == null)
            {
                throw new InvalidDataException("packagesToInbound is a required property for InboundEligibility and cannot be null");
            }
            else
            {
                this.PackagesToInbound = packagesToInbound;
            }
            // to ensure "previewedAt" is required (not null)
            if (previewedAt == null)
            {
                throw new InvalidDataException("previewedAt is a required property for InboundEligibility and cannot be null");
            }
            else
            {
                this.PreviewedAt = previewedAt;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for InboundEligibility and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.IneligibilityReasons = ineligibilityReasons;
        }
        
        /// <summary>
        /// If there are order level eligibility issues, then this list will contain those error codes and descriptions.
        /// </summary>
        /// <value>If there are order level eligibility issues, then this list will contain those error codes and descriptions.</value>
        [DataMember(Name="ineligibilityReasons", EmitDefaultValue=false)]
        public List<OrderIneligibilityReason> IneligibilityReasons { get; set; }

        /// <summary>
        /// Details on SKU eligibility for each inbound package.
        /// </summary>
        /// <value>Details on SKU eligibility for each inbound package.</value>
        [DataMember(Name="packagesToInbound", EmitDefaultValue=false)]
        public List<SkuEligibility> PackagesToInbound { get; set; }

        /// <summary>
        /// Timestamp when the eligibility check is performed.
        /// </summary>
        /// <value>Timestamp when the eligibility check is performed.</value>
        [DataMember(Name="previewedAt", EmitDefaultValue=false)]
        public DateTime? PreviewedAt { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InboundEligibility {\n");
            sb.Append("  IneligibilityReasons: ").Append(IneligibilityReasons).Append("\n");
            sb.Append("  PackagesToInbound: ").Append(PackagesToInbound).Append("\n");
            sb.Append("  PreviewedAt: ").Append(PreviewedAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InboundEligibility);
        }

        /// <summary>
        /// Returns true if InboundEligibility instances are equal
        /// </summary>
        /// <param name="input">Instance of InboundEligibility to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InboundEligibility input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IneligibilityReasons == input.IneligibilityReasons ||
                    this.IneligibilityReasons != null &&
                    this.IneligibilityReasons.SequenceEqual(input.IneligibilityReasons)
                ) && 
                (
                    this.PackagesToInbound == input.PackagesToInbound ||
                    this.PackagesToInbound != null &&
                    this.PackagesToInbound.SequenceEqual(input.PackagesToInbound)
                ) && 
                (
                    this.PreviewedAt == input.PreviewedAt ||
                    (this.PreviewedAt != null &&
                    this.PreviewedAt.Equals(input.PreviewedAt))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IneligibilityReasons != null)
                    hashCode = hashCode * 59 + this.IneligibilityReasons.GetHashCode();
                if (this.PackagesToInbound != null)
                    hashCode = hashCode * 59 + this.PackagesToInbound.GetHashCode();
                if (this.PreviewedAt != null)
                    hashCode = hashCode * 59 + this.PreviewedAt.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
