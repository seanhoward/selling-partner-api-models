/* 
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * OpenAPI spec version: 2024-05-09
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Awd
{
    /// <summary>
    /// Tracking details for the shipment. If using SPD transportation, this can be for each case. If not using SPD transportation, this is a single tracking entry for the entire shipment.
    /// </summary>
    [DataContract]
    public partial class TrackingDetails : IEquatable<TrackingDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingDetails" /> class.
        /// </summary>
        [JsonConstructor]
        protected TrackingDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingDetails" /> class.
        /// </summary>
        /// <param name="carrierCode">Unique or identifying code for the carrier..</param>
        /// <param name="bookingId">The identifier that is received from transportation to uniquely identify a booking. (required).</param>
        public TrackingDetails(CarrierCode carrierCode = default, string bookingId = default)
        {
            // to ensure "bookingId" is required (not null)
            if (bookingId == null)
            {
                throw new InvalidDataException("bookingId is a required property for TrackingDetails and cannot be null");
            }
            else
            {
                this.BookingId = bookingId;
            }
            this.CarrierCode = carrierCode;
        }

        /// <summary>
        /// Unique or identifying code for the carrier.
        /// </summary>
        /// <value>Unique or identifying code for the carrier.</value>
        [DataMember(Name = "carrierCode", EmitDefaultValue = false)]
        public CarrierCode CarrierCode { get; set; }

        /// <summary>
        /// The identifier that is received from transportation to uniquely identify a booking.
        /// </summary>
        /// <value>The identifier that is received from transportation to uniquely identify a booking.</value>
        [DataMember(Name = "bookingId", EmitDefaultValue = false)]
        public string BookingId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackingDetails {\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  BookingId: ").Append(BookingId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrackingDetails);
        }

        /// <summary>
        /// Returns true if TrackingDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of TrackingDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackingDetails input)
        {
            if (input == null)
                return false;

            return
                (
                    this.CarrierCode == input.CarrierCode ||
                    (this.CarrierCode != null &&
                    this.CarrierCode.Equals(input.CarrierCode))
                ) &&
                (
                    this.BookingId == input.BookingId ||
                    (this.BookingId != null &&
                    this.BookingId.Equals(input.BookingId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CarrierCode != null)
                    hashCode = hashCode * 59 + this.CarrierCode.GetHashCode();
                if (this.BookingId != null)
                    hashCode = hashCode * 59 + this.BookingId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BookingId (string) minLength
            if (this.BookingId != null && this.BookingId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for BookingId, length must be greater than 1.", new[] { "BookingId" });
            }

            yield break;
        }
    }

}
