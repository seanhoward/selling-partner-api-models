/* 
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory. 
 *
 * OpenAPI spec version: 2024-05-09
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Awd
{
    /// <summary>
    /// Quantity details for a SKU as part of a shipment
    /// </summary>
    [DataContract]
    public partial class SkuQuantity :  IEquatable<SkuQuantity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SkuQuantity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SkuQuantity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SkuQuantity" /> class.
        /// </summary>
        /// <param name="expectedQuantity">expectedQuantity (required).</param>
        /// <param name="receivedQuantity">receivedQuantity.</param>
        /// <param name="sku">The merchant stock keeping unit (required).</param>
        public SkuQuantity(InventoryQuantity expectedQuantity = default(InventoryQuantity), InventoryQuantity receivedQuantity = default(InventoryQuantity), string sku = default(string))
        {
            // to ensure "expectedQuantity" is required (not null)
            if (expectedQuantity == null)
            {
                throw new InvalidDataException("expectedQuantity is a required property for SkuQuantity and cannot be null");
            }
            else
            {
                this.ExpectedQuantity = expectedQuantity;
            }
            // to ensure "sku" is required (not null)
            if (sku == null)
            {
                throw new InvalidDataException("sku is a required property for SkuQuantity and cannot be null");
            }
            else
            {
                this.Sku = sku;
            }
            this.ReceivedQuantity = receivedQuantity;
        }
        
        /// <summary>
        /// Gets or Sets ExpectedQuantity
        /// </summary>
        [DataMember(Name="expectedQuantity", EmitDefaultValue=false)]
        public InventoryQuantity ExpectedQuantity { get; set; }

        /// <summary>
        /// Gets or Sets ReceivedQuantity
        /// </summary>
        [DataMember(Name="receivedQuantity", EmitDefaultValue=false)]
        public InventoryQuantity ReceivedQuantity { get; set; }

        /// <summary>
        /// The merchant stock keeping unit
        /// </summary>
        /// <value>The merchant stock keeping unit</value>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SkuQuantity {\n");
            sb.Append("  ExpectedQuantity: ").Append(ExpectedQuantity).Append("\n");
            sb.Append("  ReceivedQuantity: ").Append(ReceivedQuantity).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SkuQuantity);
        }

        /// <summary>
        /// Returns true if SkuQuantity instances are equal
        /// </summary>
        /// <param name="input">Instance of SkuQuantity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SkuQuantity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExpectedQuantity == input.ExpectedQuantity ||
                    (this.ExpectedQuantity != null &&
                    this.ExpectedQuantity.Equals(input.ExpectedQuantity))
                ) && 
                (
                    this.ReceivedQuantity == input.ReceivedQuantity ||
                    (this.ReceivedQuantity != null &&
                    this.ReceivedQuantity.Equals(input.ReceivedQuantity))
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExpectedQuantity != null)
                    hashCode = hashCode * 59 + this.ExpectedQuantity.GetHashCode();
                if (this.ReceivedQuantity != null)
                    hashCode = hashCode * 59 + this.ReceivedQuantity.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
