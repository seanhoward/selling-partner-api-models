/* 
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory. 
 *
 * OpenAPI spec version: 2024-05-09
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Awd
{
    /// <summary>
    /// Consists of the order preference and corresponding preference value.
    /// </summary>
    [DataContract]
    public partial class OrderAttribute :  IEquatable<OrderAttribute>, IValidatableObject
    {
        /// <summary>
        /// Preference for the distribution order.
        /// </summary>
        /// <value>Preference for the distribution order.</value>
        [DataMember(Name="orderPreference", EmitDefaultValue=false)]
        public OrderPreference OrderPreference { get; set; }
        /// <summary>
        /// Value for the order preference.
        /// </summary>
        /// <value>Value for the order preference.</value>
        [DataMember(Name="orderPreferenceValue", EmitDefaultValue=false)]
        public OrderPreferenceValue OrderPreferenceValue { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderAttribute" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderAttribute() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderAttribute" /> class.
        /// </summary>
        /// <param name="orderPreference">Preference for the distribution order. (required).</param>
        /// <param name="orderPreferenceValue">Value for the order preference. (required).</param>
        public OrderAttribute(OrderPreference orderPreference = default(OrderPreference), OrderPreferenceValue orderPreferenceValue = default(OrderPreferenceValue))
        {
            // to ensure "orderPreference" is required (not null)
            if (orderPreference == null)
            {
                throw new InvalidDataException("orderPreference is a required property for OrderAttribute and cannot be null");
            }
            else
            {
                this.OrderPreference = orderPreference;
            }
            // to ensure "orderPreferenceValue" is required (not null)
            if (orderPreferenceValue == null)
            {
                throw new InvalidDataException("orderPreferenceValue is a required property for OrderAttribute and cannot be null");
            }
            else
            {
                this.OrderPreferenceValue = orderPreferenceValue;
            }
        }
        


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderAttribute {\n");
            sb.Append("  OrderPreference: ").Append(OrderPreference).Append("\n");
            sb.Append("  OrderPreferenceValue: ").Append(OrderPreferenceValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderAttribute);
        }

        /// <summary>
        /// Returns true if OrderAttribute instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderAttribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderAttribute input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderPreference == input.OrderPreference ||
                    (this.OrderPreference != null &&
                    this.OrderPreference.Equals(input.OrderPreference))
                ) && 
                (
                    this.OrderPreferenceValue == input.OrderPreferenceValue ||
                    (this.OrderPreferenceValue != null &&
                    this.OrderPreferenceValue.Equals(input.OrderPreferenceValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderPreference != null)
                    hashCode = hashCode * 59 + this.OrderPreference.GetHashCode();
                if (this.OrderPreferenceValue != null)
                    hashCode = hashCode * 59 + this.OrderPreferenceValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
