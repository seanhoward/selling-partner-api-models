/* 
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * OpenAPI spec version: 2024-05-09
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Awd
{
    /// <summary>
    /// Destination details of an inbound order based on the assigned region and DC for the order.
    /// </summary>
    [DataContract]
    public partial class DestinationDetails : IEquatable<DestinationDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinationDetails" /> class.
        /// </summary>
        /// <param name="destinationAddress">Destination address of the AWD facility where the shipment will be shipped to.</param>
        /// <param name="destinationRegion">Assigned region where the order will be shipped. This can differ from what was passed as preference. AWD currently supports following region IDs: [us-west, us-east, us-southcentral, us-southeast].</param>
        /// <param name="shipmentId">Unique ID of the confirmed shipment being shipped to the assigned destination. This will be available only after an inbound order is confirmed and can be used to track the shipment..</param>
        public DestinationDetails(Address destinationAddress = default, string destinationRegion = default, string shipmentId = default)
        {
            this.DestinationAddress = destinationAddress;
            this.DestinationRegion = destinationRegion;
            this.ShipmentId = shipmentId;
        }

        /// <summary>
        /// Destination address of the AWD facility where the shipment will be shipped to
        /// </summary>
        /// <value>Destination address of the AWD facility where the shipment will be shipped to</value>
        [DataMember(Name = "destinationAddress", EmitDefaultValue = false)]
        public Address DestinationAddress { get; set; }

        /// <summary>
        /// Assigned region where the order will be shipped. This can differ from what was passed as preference. AWD currently supports following region IDs: [us-west, us-east, us-southcentral, us-southeast]
        /// </summary>
        /// <value>Assigned region where the order will be shipped. This can differ from what was passed as preference. AWD currently supports following region IDs: [us-west, us-east, us-southcentral, us-southeast]</value>
        [DataMember(Name = "destinationRegion", EmitDefaultValue = false)]
        public string DestinationRegion { get; set; }

        /// <summary>
        /// Unique ID of the confirmed shipment being shipped to the assigned destination. This will be available only after an inbound order is confirmed and can be used to track the shipment.
        /// </summary>
        /// <value>Unique ID of the confirmed shipment being shipped to the assigned destination. This will be available only after an inbound order is confirmed and can be used to track the shipment.</value>
        [DataMember(Name = "shipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinationDetails {\n");
            sb.Append("  DestinationAddress: ").Append(DestinationAddress).Append("\n");
            sb.Append("  DestinationRegion: ").Append(DestinationRegion).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinationDetails);
        }

        /// <summary>
        /// Returns true if DestinationDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinationDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinationDetails input)
        {
            if (input == null)
                return false;

            return
                (
                    this.DestinationAddress == input.DestinationAddress ||
                    (this.DestinationAddress != null &&
                    this.DestinationAddress.Equals(input.DestinationAddress))
                ) &&
                (
                    this.DestinationRegion == input.DestinationRegion ||
                    (this.DestinationRegion != null &&
                    this.DestinationRegion.Equals(input.DestinationRegion))
                ) &&
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DestinationAddress != null)
                    hashCode = hashCode * 59 + this.DestinationAddress.GetHashCode();
                if (this.DestinationRegion != null)
                    hashCode = hashCode * 59 + this.DestinationRegion.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ShipmentId (string) minLength
            if (this.ShipmentId != null && this.ShipmentId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ShipmentId, length must be greater than 1.", new[] { "ShipmentId" });
            }

            yield break;
        }
    }

}
