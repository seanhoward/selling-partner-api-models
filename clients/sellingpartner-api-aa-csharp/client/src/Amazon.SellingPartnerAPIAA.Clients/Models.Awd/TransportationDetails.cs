/* 
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory. 
 *
 * OpenAPI spec version: 2024-05-09
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Awd
{
    /// <summary>
    /// Transportation details for the shipment.
    /// </summary>
    [DataContract]
    public partial class TransportationDetails : IEquatable<TransportationDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransportationDetails" /> class.
        /// </summary>
        [JsonConstructor]
        protected TransportationDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransportationDetails" /> class.
        /// </summary>
        /// <param name="trackingDetails">Tracking details for the shipment. If using SPD transportation, this can be for each case. If not using SPD transportation, this is a single tracking entry for the entire shipment. (required).</param>
        public TransportationDetails(List<TrackingDetails> trackingDetails = default)
        {
            // to ensure "trackingDetails" is required (not null)
            if (trackingDetails == null)
            {
                throw new InvalidDataException("trackingDetails is a required property for TransportationDetails and cannot be null");
            }
            else
            {
                this.TrackingDetails = trackingDetails;
            }
        }

        /// <summary>
        /// Tracking details for the shipment. If using SPD transportation, this can be for each case. If not using SPD transportation, this is a single tracking entry for the entire shipment.
        /// </summary>
        /// <value>Tracking details for the shipment. If using SPD transportation, this can be for each case. If not using SPD transportation, this is a single tracking entry for the entire shipment.</value>
        [DataMember(Name = "trackingDetails", EmitDefaultValue = false)]
        public List<TrackingDetails> TrackingDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransportationDetails {\n");
            sb.Append("  TrackingDetails: ").Append(TrackingDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransportationDetails);
        }

        /// <summary>
        /// Returns true if TransportationDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of TransportationDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransportationDetails input)
        {
            if (input == null)
                return false;

            return
                (
                    this.TrackingDetails == input.TrackingDetails ||
                    this.TrackingDetails != null &&
                    this.TrackingDetails.SequenceEqual(input.TrackingDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TrackingDetails != null)
                    hashCode = hashCode * 59 + this.TrackingDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
