/* 
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory. 
 *
 * OpenAPI spec version: 2024-05-09
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Awd
{
    /// <summary>
    /// Preferences that can be passed in context of an inbound order
    /// </summary>
    [DataContract]
    public partial class InboundPreferences :  IEquatable<InboundPreferences>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundPreferences" /> class.
        /// </summary>
        /// <param name="destinationRegion">Pass a preferred region so that the inbound order can be shipped to an AWD warehouse located in that region. This doesn&#39;t guarantee the order to be assigned in the specified destination region as it depends on warehouse capacity availability. AWD currently supports following region IDs: [us-west, us-east].</param>
        public InboundPreferences(string destinationRegion = default(string))
        {
            this.DestinationRegion = destinationRegion;
        }
        
        /// <summary>
        /// Pass a preferred region so that the inbound order can be shipped to an AWD warehouse located in that region. This doesn&#39;t guarantee the order to be assigned in the specified destination region as it depends on warehouse capacity availability. AWD currently supports following region IDs: [us-west, us-east]
        /// </summary>
        /// <value>Pass a preferred region so that the inbound order can be shipped to an AWD warehouse located in that region. This doesn&#39;t guarantee the order to be assigned in the specified destination region as it depends on warehouse capacity availability. AWD currently supports following region IDs: [us-west, us-east]</value>
        [DataMember(Name="destinationRegion", EmitDefaultValue=false)]
        public string DestinationRegion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InboundPreferences {\n");
            sb.Append("  DestinationRegion: ").Append(DestinationRegion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InboundPreferences);
        }

        /// <summary>
        /// Returns true if InboundPreferences instances are equal
        /// </summary>
        /// <param name="input">Instance of InboundPreferences to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InboundPreferences input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DestinationRegion == input.DestinationRegion ||
                    (this.DestinationRegion != null &&
                    this.DestinationRegion.Equals(input.DestinationRegion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DestinationRegion != null)
                    hashCode = hashCode * 59 + this.DestinationRegion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
