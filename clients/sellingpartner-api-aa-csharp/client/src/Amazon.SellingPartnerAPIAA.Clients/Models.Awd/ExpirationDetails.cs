/* 
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory. 
 *
 * OpenAPI spec version: 2024-05-09
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Awd
{
    /// <summary>
    /// The expiration details of the inventory. This object will only appear if the details parameter in the request is set to &#x60;SHOW&#x60;.
    /// </summary>
    [DataContract]
    public partial class ExpirationDetails :  IEquatable<ExpirationDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpirationDetails" /> class.
        /// </summary>
        /// <param name="expiration">The expiration date of the SKU..</param>
        /// <param name="onhandQuantity">The quantity that is present in AWD..</param>
        public ExpirationDetails(DateTime? expiration = default, long? onhandQuantity = default)
        {
            this.Expiration = expiration;
            this.OnhandQuantity = onhandQuantity;
        }
        
        /// <summary>
        /// The expiration date of the SKU.
        /// </summary>
        /// <value>The expiration date of the SKU.</value>
        [DataMember(Name="expiration", EmitDefaultValue=false)]
        public DateTime? Expiration { get; set; }

        /// <summary>
        /// The quantity that is present in AWD.
        /// </summary>
        /// <value>The quantity that is present in AWD.</value>
        [DataMember(Name="onhandQuantity", EmitDefaultValue=false)]
        public long? OnhandQuantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExpirationDetails {\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  OnhandQuantity: ").Append(OnhandQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExpirationDetails);
        }

        /// <summary>
        /// Returns true if ExpirationDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ExpirationDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpirationDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Expiration == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                ) && 
                (
                    this.OnhandQuantity == input.OnhandQuantity ||
                    (this.OnhandQuantity != null &&
                    this.OnhandQuantity.Equals(input.OnhandQuantity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Expiration != null)
                    hashCode = hashCode * 59 + this.Expiration.GetHashCode();
                if (this.OnhandQuantity != null)
                    hashCode = hashCode * 59 + this.OnhandQuantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
