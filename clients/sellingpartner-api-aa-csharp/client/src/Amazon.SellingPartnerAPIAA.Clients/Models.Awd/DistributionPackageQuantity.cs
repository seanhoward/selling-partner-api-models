/* 
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory. 
 *
 * OpenAPI spec version: 2024-05-09
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Awd
{
    /// <summary>
    /// Represents a distribution package with its respective quantity.
    /// </summary>
    [DataContract]
    public partial class DistributionPackageQuantity :  IEquatable<DistributionPackageQuantity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DistributionPackageQuantity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DistributionPackageQuantity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DistributionPackageQuantity" /> class.
        /// </summary>
        /// <param name="count">Number of cases or pallets with the same package configuration. (required).</param>
        /// <param name="distributionPackage">distributionPackage (required).</param>
        public DistributionPackageQuantity(int? count = default(int?), DistributionPackage distributionPackage = default(DistributionPackage))
        {
            // to ensure "count" is required (not null)
            if (count == null)
            {
                throw new InvalidDataException("count is a required property for DistributionPackageQuantity and cannot be null");
            }
            else
            {
                this.Count = count;
            }
            // to ensure "distributionPackage" is required (not null)
            if (distributionPackage == null)
            {
                throw new InvalidDataException("distributionPackage is a required property for DistributionPackageQuantity and cannot be null");
            }
            else
            {
                this.DistributionPackage = distributionPackage;
            }
        }
        
        /// <summary>
        /// Number of cases or pallets with the same package configuration.
        /// </summary>
        /// <value>Number of cases or pallets with the same package configuration.</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }

        /// <summary>
        /// Gets or Sets DistributionPackage
        /// </summary>
        [DataMember(Name="distributionPackage", EmitDefaultValue=false)]
        public DistributionPackage DistributionPackage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DistributionPackageQuantity {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  DistributionPackage: ").Append(DistributionPackage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DistributionPackageQuantity);
        }

        /// <summary>
        /// Returns true if DistributionPackageQuantity instances are equal
        /// </summary>
        /// <param name="input">Instance of DistributionPackageQuantity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DistributionPackageQuantity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.DistributionPackage == input.DistributionPackage ||
                    (this.DistributionPackage != null &&
                    this.DistributionPackage.Equals(input.DistributionPackage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.DistributionPackage != null)
                    hashCode = hashCode * 59 + this.DistributionPackage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
