/* 
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory. 
 *
 * OpenAPI spec version: 2024-05-09
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Awd
{
    /// <summary>
    /// Represents the contents inside a package, which can be products or a nested package.
    /// </summary>
    [DataContract]
    public partial class DistributionPackageContents :  IEquatable<DistributionPackageContents>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DistributionPackageContents" /> class.
        /// </summary>
        /// <param name="packages">This is required only when &#x60;DistributionPackageType&#x3D;PALLET&#x60;..</param>
        /// <param name="products">This is required only when &#x60;DistributionPackageType&#x3D;CASE&#x60;..</param>
        public DistributionPackageContents(List<DistributionPackageQuantity> packages = default(List<DistributionPackageQuantity>), List<ProductQuantity> products = default(List<ProductQuantity>))
        {
            this.Packages = packages;
            this.Products = products;
        }
        
        /// <summary>
        /// This is required only when &#x60;DistributionPackageType&#x3D;PALLET&#x60;.
        /// </summary>
        /// <value>This is required only when &#x60;DistributionPackageType&#x3D;PALLET&#x60;.</value>
        [DataMember(Name="packages", EmitDefaultValue=false)]
        public List<DistributionPackageQuantity> Packages { get; set; }

        /// <summary>
        /// This is required only when &#x60;DistributionPackageType&#x3D;CASE&#x60;.
        /// </summary>
        /// <value>This is required only when &#x60;DistributionPackageType&#x3D;CASE&#x60;.</value>
        [DataMember(Name="products", EmitDefaultValue=false)]
        public List<ProductQuantity> Products { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DistributionPackageContents {\n");
            sb.Append("  Packages: ").Append(Packages).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DistributionPackageContents);
        }

        /// <summary>
        /// Returns true if DistributionPackageContents instances are equal
        /// </summary>
        /// <param name="input">Instance of DistributionPackageContents to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DistributionPackageContents input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Packages == input.Packages ||
                    this.Packages != null &&
                    this.Packages.SequenceEqual(input.Packages)
                ) && 
                (
                    this.Products == input.Products ||
                    this.Products != null &&
                    this.Products.SequenceEqual(input.Products)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Packages != null)
                    hashCode = hashCode * 59 + this.Packages.GetHashCode();
                if (this.Products != null)
                    hashCode = hashCode * 59 + this.Products.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
