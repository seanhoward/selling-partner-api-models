/* 
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory. 
 *
 * OpenAPI spec version: 2024-05-09
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Awd
{
    /// <summary>
    /// Summary for an AWD inbound shipment containing the shipment ID, which can be used to retrieve the actual shipment.
    /// </summary>
    [DataContract]
    public partial class InboundShipmentSummary :  IEquatable<InboundShipmentSummary>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ShipmentStatus
        /// </summary>
        [DataMember(Name="shipmentStatus", EmitDefaultValue=false)]
        public InboundShipmentStatus ShipmentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundShipmentSummary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InboundShipmentSummary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundShipmentSummary" /> class.
        /// </summary>
        /// <param name="createdAt">Timestamp when the shipment was created..</param>
        /// <param name="externalReferenceId">Optional client-provided reference ID that can be used to correlate this shipment with client resources. For example, to map this shipment to an internal bookkeeping order record..</param>
        /// <param name="orderId">The AWD inbound order ID that this inbound shipment belongs to. (required).</param>
        /// <param name="shipmentId">A unique shipment ID. (required).</param>
        /// <param name="shipmentStatus">shipmentStatus (required).</param>
        /// <param name="updatedAt">Timestamp when the shipment was updated..</param>
        public InboundShipmentSummary(DateTime? createdAt = default(DateTime?), string externalReferenceId = default(string), string orderId = default(string), string shipmentId = default(string), InboundShipmentStatus shipmentStatus = default(InboundShipmentStatus), DateTime? updatedAt = default(DateTime?))
        {
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new InvalidDataException("orderId is a required property for InboundShipmentSummary and cannot be null");
            }
            else
            {
                this.OrderId = orderId;
            }
            // to ensure "shipmentId" is required (not null)
            if (shipmentId == null)
            {
                throw new InvalidDataException("shipmentId is a required property for InboundShipmentSummary and cannot be null");
            }
            else
            {
                this.ShipmentId = shipmentId;
            }
            // to ensure "shipmentStatus" is required (not null)
            if (shipmentStatus == null)
            {
                throw new InvalidDataException("shipmentStatus is a required property for InboundShipmentSummary and cannot be null");
            }
            else
            {
                this.ShipmentStatus = shipmentStatus;
            }
            this.CreatedAt = createdAt;
            this.ExternalReferenceId = externalReferenceId;
            this.UpdatedAt = updatedAt;
        }
        
        /// <summary>
        /// Timestamp when the shipment was created.
        /// </summary>
        /// <value>Timestamp when the shipment was created.</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Optional client-provided reference ID that can be used to correlate this shipment with client resources. For example, to map this shipment to an internal bookkeeping order record.
        /// </summary>
        /// <value>Optional client-provided reference ID that can be used to correlate this shipment with client resources. For example, to map this shipment to an internal bookkeeping order record.</value>
        [DataMember(Name="externalReferenceId", EmitDefaultValue=false)]
        public string ExternalReferenceId { get; set; }

        /// <summary>
        /// The AWD inbound order ID that this inbound shipment belongs to.
        /// </summary>
        /// <value>The AWD inbound order ID that this inbound shipment belongs to.</value>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// A unique shipment ID.
        /// </summary>
        /// <value>A unique shipment ID.</value>
        [DataMember(Name="shipmentId", EmitDefaultValue=false)]
        public string ShipmentId { get; set; }


        /// <summary>
        /// Timestamp when the shipment was updated.
        /// </summary>
        /// <value>Timestamp when the shipment was updated.</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InboundShipmentSummary {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ExternalReferenceId: ").Append(ExternalReferenceId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ShipmentStatus: ").Append(ShipmentStatus).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InboundShipmentSummary);
        }

        /// <summary>
        /// Returns true if InboundShipmentSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of InboundShipmentSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InboundShipmentSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ExternalReferenceId == input.ExternalReferenceId ||
                    (this.ExternalReferenceId != null &&
                    this.ExternalReferenceId.Equals(input.ExternalReferenceId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                ) && 
                (
                    this.ShipmentStatus == input.ShipmentStatus ||
                    (this.ShipmentStatus != null &&
                    this.ShipmentStatus.Equals(input.ShipmentStatus))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.ExternalReferenceId != null)
                    hashCode = hashCode * 59 + this.ExternalReferenceId.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                if (this.ShipmentStatus != null)
                    hashCode = hashCode * 59 + this.ShipmentStatus.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // OrderId (string) minLength
            if(this.OrderId != null && this.OrderId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderId, length must be greater than 1.", new [] { "OrderId" });
            }

            // ShipmentId (string) minLength
            if(this.ShipmentId != null && this.ShipmentId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipmentId, length must be greater than 1.", new [] { "ShipmentId" });
            }

            yield break;
        }
    }

}
