/* 
 * Selling Partner API for Retail Procurement Payments
 *
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorInvoices
{
    /// <summary>
    /// Represents an invoice or credit note document with details about the transaction, parties involved, and line items.
    /// </summary>
    [DataContract]
    public partial class Invoice : IEquatable<Invoice>, IValidatableObject
    {
        /// <summary>
        /// Identifies the type of invoice.
        /// </summary>
        /// <value>Identifies the type of invoice.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InvoiceTypeEnum
        {

            /// <summary>
            /// Enum Invoice for value: Invoice
            /// </summary>
            [EnumMember(Value = "Invoice")]
            Invoice = 1,

            /// <summary>
            /// Enum CreditNote for value: CreditNote
            /// </summary>
            [EnumMember(Value = "CreditNote")]
            CreditNote = 2
        }

        /// <summary>
        /// Identifies the type of invoice.
        /// </summary>
        /// <value>Identifies the type of invoice.</value>
        [DataMember(Name = "invoiceType", EmitDefaultValue = false)]
        public InvoiceTypeEnum InvoiceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Invoice" /> class.
        /// </summary>
        [JsonConstructor]
        protected Invoice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Invoice" /> class.
        /// </summary>
        /// <param name="invoiceType">Identifies the type of invoice. (required).</param>
        /// <param name="id">Unique number relating to the charges defined in this document. This will be invoice number if the document type is Invoice or CreditNote number if the document type is Credit Note. Failure to provide this reference will result in a rejection. (required).</param>
        /// <param name="referenceNumber">An additional unique reference number used for regulatory or other purposes..</param>
        /// <param name="date">Date when the invoice/credit note information was generated in the origin&#39;s accounting system. The invoice date should be on or after the purchase order creation date. (required).</param>
        /// <param name="remitToParty">Name, address and tax details of the party receiving the payment of this invoice. (required).</param>
        /// <param name="shipToParty">Name, address and tax details of the party receiving a shipment of products..</param>
        /// <param name="shipFromParty">Name, address and tax details of the party sending a shipment of products..</param>
        /// <param name="billToParty">Name, address and tax details of the party to whom this invoice is issued..</param>
        /// <param name="paymentTerms">The payment terms for the invoice..</param>
        /// <param name="invoiceTotal">Total monetary amount charged in the invoice or full value of credit note to be paid including all relevant taxes. It is the total amount of invoice (including charges, less allowances) before terms discount (if discount is applicable). (required).</param>
        /// <param name="taxDetails">Total tax amount details for all line items..</param>
        /// <param name="additionalDetails">Additional details provided by the selling party, for tax related or other purposes..</param>
        /// <param name="chargeDetails">Total charge amount details for all line items..</param>
        /// <param name="allowanceDetails">Total allowance amount details for all line items..</param>
        /// <param name="items">The list of invoice items..</param>
        public Invoice(InvoiceTypeEnum invoiceType = default, string id = default, string referenceNumber = default, DateTime? date = default, PartyIdentification remitToParty = default, PartyIdentification shipToParty = default, PartyIdentification shipFromParty = default, PartyIdentification billToParty = default, PaymentTerms paymentTerms = default, Money invoiceTotal = default, List<TaxDetails> taxDetails = default, List<AdditionalDetails> additionalDetails = default, List<ChargeDetails> chargeDetails = default, List<AllowanceDetails> allowanceDetails = default, List<InvoiceItem> items = default)
        {
            // to ensure "invoiceType" is required (not null)
            if (invoiceType == null)
            {
                throw new InvalidDataException("invoiceType is a required property for Invoice and cannot be null");
            }
            else
            {
                this.InvoiceType = invoiceType;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Invoice and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new InvalidDataException("date is a required property for Invoice and cannot be null");
            }
            else
            {
                this.Date = date;
            }
            // to ensure "remitToParty" is required (not null)
            if (remitToParty == null)
            {
                throw new InvalidDataException("remitToParty is a required property for Invoice and cannot be null");
            }
            else
            {
                this.RemitToParty = remitToParty;
            }
            // to ensure "invoiceTotal" is required (not null)
            if (invoiceTotal == null)
            {
                throw new InvalidDataException("invoiceTotal is a required property for Invoice and cannot be null");
            }
            else
            {
                this.InvoiceTotal = invoiceTotal;
            }
            this.ReferenceNumber = referenceNumber;
            this.ShipToParty = shipToParty;
            this.ShipFromParty = shipFromParty;
            this.BillToParty = billToParty;
            this.PaymentTerms = paymentTerms;
            this.TaxDetails = taxDetails;
            this.AdditionalDetails = additionalDetails;
            this.ChargeDetails = chargeDetails;
            this.AllowanceDetails = allowanceDetails;
            this.Items = items;
        }


        /// <summary>
        /// Unique number relating to the charges defined in this document. This will be invoice number if the document type is Invoice or CreditNote number if the document type is Credit Note. Failure to provide this reference will result in a rejection.
        /// </summary>
        /// <value>Unique number relating to the charges defined in this document. This will be invoice number if the document type is Invoice or CreditNote number if the document type is Credit Note. Failure to provide this reference will result in a rejection.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// An additional unique reference number used for regulatory or other purposes.
        /// </summary>
        /// <value>An additional unique reference number used for regulatory or other purposes.</value>
        [DataMember(Name = "referenceNumber", EmitDefaultValue = false)]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Date when the invoice/credit note information was generated in the origin&#39;s accounting system. The invoice date should be on or after the purchase order creation date.
        /// </summary>
        /// <value>Date when the invoice/credit note information was generated in the origin&#39;s accounting system. The invoice date should be on or after the purchase order creation date.</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Name, address and tax details of the party receiving the payment of this invoice.
        /// </summary>
        /// <value>Name, address and tax details of the party receiving the payment of this invoice.</value>
        [DataMember(Name = "remitToParty", EmitDefaultValue = false)]
        public PartyIdentification RemitToParty { get; set; }

        /// <summary>
        /// Name, address and tax details of the party receiving a shipment of products.
        /// </summary>
        /// <value>Name, address and tax details of the party receiving a shipment of products.</value>
        [DataMember(Name = "shipToParty", EmitDefaultValue = false)]
        public PartyIdentification ShipToParty { get; set; }

        /// <summary>
        /// Name, address and tax details of the party sending a shipment of products.
        /// </summary>
        /// <value>Name, address and tax details of the party sending a shipment of products.</value>
        [DataMember(Name = "shipFromParty", EmitDefaultValue = false)]
        public PartyIdentification ShipFromParty { get; set; }

        /// <summary>
        /// Name, address and tax details of the party to whom this invoice is issued.
        /// </summary>
        /// <value>Name, address and tax details of the party to whom this invoice is issued.</value>
        [DataMember(Name = "billToParty", EmitDefaultValue = false)]
        public PartyIdentification BillToParty { get; set; }

        /// <summary>
        /// The payment terms for the invoice.
        /// </summary>
        /// <value>The payment terms for the invoice.</value>
        [DataMember(Name = "paymentTerms", EmitDefaultValue = false)]
        public PaymentTerms PaymentTerms { get; set; }

        /// <summary>
        /// Total monetary amount charged in the invoice or full value of credit note to be paid including all relevant taxes. It is the total amount of invoice (including charges, less allowances) before terms discount (if discount is applicable).
        /// </summary>
        /// <value>Total monetary amount charged in the invoice or full value of credit note to be paid including all relevant taxes. It is the total amount of invoice (including charges, less allowances) before terms discount (if discount is applicable).</value>
        [DataMember(Name = "invoiceTotal", EmitDefaultValue = false)]
        public Money InvoiceTotal { get; set; }

        /// <summary>
        /// Total tax amount details for all line items.
        /// </summary>
        /// <value>Total tax amount details for all line items.</value>
        [DataMember(Name = "taxDetails", EmitDefaultValue = false)]
        public List<TaxDetails> TaxDetails { get; set; }

        /// <summary>
        /// Additional details provided by the selling party, for tax related or other purposes.
        /// </summary>
        /// <value>Additional details provided by the selling party, for tax related or other purposes.</value>
        [DataMember(Name = "additionalDetails", EmitDefaultValue = false)]
        public List<AdditionalDetails> AdditionalDetails { get; set; }

        /// <summary>
        /// Total charge amount details for all line items.
        /// </summary>
        /// <value>Total charge amount details for all line items.</value>
        [DataMember(Name = "chargeDetails", EmitDefaultValue = false)]
        public List<ChargeDetails> ChargeDetails { get; set; }

        /// <summary>
        /// Total allowance amount details for all line items.
        /// </summary>
        /// <value>Total allowance amount details for all line items.</value>
        [DataMember(Name = "allowanceDetails", EmitDefaultValue = false)]
        public List<AllowanceDetails> AllowanceDetails { get; set; }

        /// <summary>
        /// The list of invoice items.
        /// </summary>
        /// <value>The list of invoice items.</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<InvoiceItem> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Invoice {\n");
            sb.Append("  InvoiceType: ").Append(InvoiceType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  RemitToParty: ").Append(RemitToParty).Append("\n");
            sb.Append("  ShipToParty: ").Append(ShipToParty).Append("\n");
            sb.Append("  ShipFromParty: ").Append(ShipFromParty).Append("\n");
            sb.Append("  BillToParty: ").Append(BillToParty).Append("\n");
            sb.Append("  PaymentTerms: ").Append(PaymentTerms).Append("\n");
            sb.Append("  InvoiceTotal: ").Append(InvoiceTotal).Append("\n");
            sb.Append("  TaxDetails: ").Append(TaxDetails).Append("\n");
            sb.Append("  AdditionalDetails: ").Append(AdditionalDetails).Append("\n");
            sb.Append("  ChargeDetails: ").Append(ChargeDetails).Append("\n");
            sb.Append("  AllowanceDetails: ").Append(AllowanceDetails).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Invoice);
        }

        /// <summary>
        /// Returns true if Invoice instances are equal
        /// </summary>
        /// <param name="input">Instance of Invoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Invoice input)
        {
            if (input == null)
                return false;

            return
                (
                    this.InvoiceType == input.InvoiceType ||
                    (this.InvoiceType != null &&
                    this.InvoiceType.Equals(input.InvoiceType))
                ) &&
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) &&
                (
                    this.ReferenceNumber == input.ReferenceNumber ||
                    (this.ReferenceNumber != null &&
                    this.ReferenceNumber.Equals(input.ReferenceNumber))
                ) &&
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) &&
                (
                    this.RemitToParty == input.RemitToParty ||
                    (this.RemitToParty != null &&
                    this.RemitToParty.Equals(input.RemitToParty))
                ) &&
                (
                    this.ShipToParty == input.ShipToParty ||
                    (this.ShipToParty != null &&
                    this.ShipToParty.Equals(input.ShipToParty))
                ) &&
                (
                    this.ShipFromParty == input.ShipFromParty ||
                    (this.ShipFromParty != null &&
                    this.ShipFromParty.Equals(input.ShipFromParty))
                ) &&
                (
                    this.BillToParty == input.BillToParty ||
                    (this.BillToParty != null &&
                    this.BillToParty.Equals(input.BillToParty))
                ) &&
                (
                    this.PaymentTerms == input.PaymentTerms ||
                    (this.PaymentTerms != null &&
                    this.PaymentTerms.Equals(input.PaymentTerms))
                ) &&
                (
                    this.InvoiceTotal == input.InvoiceTotal ||
                    (this.InvoiceTotal != null &&
                    this.InvoiceTotal.Equals(input.InvoiceTotal))
                ) &&
                (
                    this.TaxDetails == input.TaxDetails ||
                    this.TaxDetails != null &&
                    this.TaxDetails.SequenceEqual(input.TaxDetails)
                ) &&
                (
                    this.AdditionalDetails == input.AdditionalDetails ||
                    this.AdditionalDetails != null &&
                    this.AdditionalDetails.SequenceEqual(input.AdditionalDetails)
                ) &&
                (
                    this.ChargeDetails == input.ChargeDetails ||
                    this.ChargeDetails != null &&
                    this.ChargeDetails.SequenceEqual(input.ChargeDetails)
                ) &&
                (
                    this.AllowanceDetails == input.AllowanceDetails ||
                    this.AllowanceDetails != null &&
                    this.AllowanceDetails.SequenceEqual(input.AllowanceDetails)
                ) &&
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvoiceType != null)
                    hashCode = hashCode * 59 + this.InvoiceType.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ReferenceNumber != null)
                    hashCode = hashCode * 59 + this.ReferenceNumber.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.RemitToParty != null)
                    hashCode = hashCode * 59 + this.RemitToParty.GetHashCode();
                if (this.ShipToParty != null)
                    hashCode = hashCode * 59 + this.ShipToParty.GetHashCode();
                if (this.ShipFromParty != null)
                    hashCode = hashCode * 59 + this.ShipFromParty.GetHashCode();
                if (this.BillToParty != null)
                    hashCode = hashCode * 59 + this.BillToParty.GetHashCode();
                if (this.PaymentTerms != null)
                    hashCode = hashCode * 59 + this.PaymentTerms.GetHashCode();
                if (this.InvoiceTotal != null)
                    hashCode = hashCode * 59 + this.InvoiceTotal.GetHashCode();
                if (this.TaxDetails != null)
                    hashCode = hashCode * 59 + this.TaxDetails.GetHashCode();
                if (this.AdditionalDetails != null)
                    hashCode = hashCode * 59 + this.AdditionalDetails.GetHashCode();
                if (this.ChargeDetails != null)
                    hashCode = hashCode * 59 + this.ChargeDetails.GetHashCode();
                if (this.AllowanceDetails != null)
                    hashCode = hashCode * 59 + this.AllowanceDetails.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
