/* 
 * Selling Partner API for Retail Procurement Payments
 *
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorInvoices
{
    /// <summary>
    /// References required in order to process a credit note. This information is required only if InvoiceType is CreditNote.
    /// </summary>
    [DataContract]
    public partial class CreditNoteDetails : IEquatable<CreditNoteDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditNoteDetails" /> class.
        /// </summary>
        /// <param name="referenceInvoiceNumber">Original Invoice Number when sending a credit note relating to an existing invoice. One Invoice only to be processed per Credit Note. This is mandatory for AP Credit Notes..</param>
        /// <param name="debitNoteNumber">Debit Note Number as generated by Amazon. Recommended for Returns and COOP Credit Notes..</param>
        /// <param name="returnsReferenceNumber">Identifies the Returns Notice Number. Mandatory for all Returns Credit Notes..</param>
        /// <param name="goodsReturnDate">Date that a return is received by the vendor. It is mandatory for Returns Credit Note..</param>
        /// <param name="rmaId">Identifies the Returned Merchandise Authorization ID, if generated..</param>
        /// <param name="coopReferenceNumber">Identifies the COOP reference used for COOP agreement. Failure to provide the COOP reference number or the Debit Note number may lead to a rejection of the Credit Note..</param>
        /// <param name="consignorsReferenceNumber">Identifies the consignor reference number (VRET number), if generated by Amazon..</param>
        public CreditNoteDetails(string referenceInvoiceNumber = default, string debitNoteNumber = default, string returnsReferenceNumber = default, DateTime? goodsReturnDate = default, string rmaId = default, string coopReferenceNumber = default, string consignorsReferenceNumber = default)
        {
            this.ReferenceInvoiceNumber = referenceInvoiceNumber;
            this.DebitNoteNumber = debitNoteNumber;
            this.ReturnsReferenceNumber = returnsReferenceNumber;
            this.GoodsReturnDate = goodsReturnDate;
            this.RmaId = rmaId;
            this.CoopReferenceNumber = coopReferenceNumber;
            this.ConsignorsReferenceNumber = consignorsReferenceNumber;
        }

        /// <summary>
        /// Original Invoice Number when sending a credit note relating to an existing invoice. One Invoice only to be processed per Credit Note. This is mandatory for AP Credit Notes.
        /// </summary>
        /// <value>Original Invoice Number when sending a credit note relating to an existing invoice. One Invoice only to be processed per Credit Note. This is mandatory for AP Credit Notes.</value>
        [DataMember(Name = "referenceInvoiceNumber", EmitDefaultValue = false)]
        public string ReferenceInvoiceNumber { get; set; }

        /// <summary>
        /// Debit Note Number as generated by Amazon. Recommended for Returns and COOP Credit Notes.
        /// </summary>
        /// <value>Debit Note Number as generated by Amazon. Recommended for Returns and COOP Credit Notes.</value>
        [DataMember(Name = "debitNoteNumber", EmitDefaultValue = false)]
        public string DebitNoteNumber { get; set; }

        /// <summary>
        /// Identifies the Returns Notice Number. Mandatory for all Returns Credit Notes.
        /// </summary>
        /// <value>Identifies the Returns Notice Number. Mandatory for all Returns Credit Notes.</value>
        [DataMember(Name = "returnsReferenceNumber", EmitDefaultValue = false)]
        public string ReturnsReferenceNumber { get; set; }

        /// <summary>
        /// Date that a return is received by the vendor. It is mandatory for Returns Credit Note.
        /// </summary>
        /// <value>Date that a return is received by the vendor. It is mandatory for Returns Credit Note.</value>
        [DataMember(Name = "goodsReturnDate", EmitDefaultValue = false)]
        public DateTime? GoodsReturnDate { get; set; }

        /// <summary>
        /// Identifies the Returned Merchandise Authorization ID, if generated.
        /// </summary>
        /// <value>Identifies the Returned Merchandise Authorization ID, if generated.</value>
        [DataMember(Name = "rmaId", EmitDefaultValue = false)]
        public string RmaId { get; set; }

        /// <summary>
        /// Identifies the COOP reference used for COOP agreement. Failure to provide the COOP reference number or the Debit Note number may lead to a rejection of the Credit Note.
        /// </summary>
        /// <value>Identifies the COOP reference used for COOP agreement. Failure to provide the COOP reference number or the Debit Note number may lead to a rejection of the Credit Note.</value>
        [DataMember(Name = "coopReferenceNumber", EmitDefaultValue = false)]
        public string CoopReferenceNumber { get; set; }

        /// <summary>
        /// Identifies the consignor reference number (VRET number), if generated by Amazon.
        /// </summary>
        /// <value>Identifies the consignor reference number (VRET number), if generated by Amazon.</value>
        [DataMember(Name = "consignorsReferenceNumber", EmitDefaultValue = false)]
        public string ConsignorsReferenceNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditNoteDetails {\n");
            sb.Append("  ReferenceInvoiceNumber: ").Append(ReferenceInvoiceNumber).Append("\n");
            sb.Append("  DebitNoteNumber: ").Append(DebitNoteNumber).Append("\n");
            sb.Append("  ReturnsReferenceNumber: ").Append(ReturnsReferenceNumber).Append("\n");
            sb.Append("  GoodsReturnDate: ").Append(GoodsReturnDate).Append("\n");
            sb.Append("  RmaId: ").Append(RmaId).Append("\n");
            sb.Append("  CoopReferenceNumber: ").Append(CoopReferenceNumber).Append("\n");
            sb.Append("  ConsignorsReferenceNumber: ").Append(ConsignorsReferenceNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditNoteDetails);
        }

        /// <summary>
        /// Returns true if CreditNoteDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditNoteDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditNoteDetails input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ReferenceInvoiceNumber == input.ReferenceInvoiceNumber ||
                    (this.ReferenceInvoiceNumber != null &&
                    this.ReferenceInvoiceNumber.Equals(input.ReferenceInvoiceNumber))
                ) &&
                (
                    this.DebitNoteNumber == input.DebitNoteNumber ||
                    (this.DebitNoteNumber != null &&
                    this.DebitNoteNumber.Equals(input.DebitNoteNumber))
                ) &&
                (
                    this.ReturnsReferenceNumber == input.ReturnsReferenceNumber ||
                    (this.ReturnsReferenceNumber != null &&
                    this.ReturnsReferenceNumber.Equals(input.ReturnsReferenceNumber))
                ) &&
                (
                    this.GoodsReturnDate == input.GoodsReturnDate ||
                    (this.GoodsReturnDate != null &&
                    this.GoodsReturnDate.Equals(input.GoodsReturnDate))
                ) &&
                (
                    this.RmaId == input.RmaId ||
                    (this.RmaId != null &&
                    this.RmaId.Equals(input.RmaId))
                ) &&
                (
                    this.CoopReferenceNumber == input.CoopReferenceNumber ||
                    (this.CoopReferenceNumber != null &&
                    this.CoopReferenceNumber.Equals(input.CoopReferenceNumber))
                ) &&
                (
                    this.ConsignorsReferenceNumber == input.ConsignorsReferenceNumber ||
                    (this.ConsignorsReferenceNumber != null &&
                    this.ConsignorsReferenceNumber.Equals(input.ConsignorsReferenceNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReferenceInvoiceNumber != null)
                    hashCode = hashCode * 59 + this.ReferenceInvoiceNumber.GetHashCode();
                if (this.DebitNoteNumber != null)
                    hashCode = hashCode * 59 + this.DebitNoteNumber.GetHashCode();
                if (this.ReturnsReferenceNumber != null)
                    hashCode = hashCode * 59 + this.ReturnsReferenceNumber.GetHashCode();
                if (this.GoodsReturnDate != null)
                    hashCode = hashCode * 59 + this.GoodsReturnDate.GetHashCode();
                if (this.RmaId != null)
                    hashCode = hashCode * 59 + this.RmaId.GetHashCode();
                if (this.CoopReferenceNumber != null)
                    hashCode = hashCode * 59 + this.CoopReferenceNumber.GetHashCode();
                if (this.ConsignorsReferenceNumber != null)
                    hashCode = hashCode * 59 + this.ConsignorsReferenceNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
