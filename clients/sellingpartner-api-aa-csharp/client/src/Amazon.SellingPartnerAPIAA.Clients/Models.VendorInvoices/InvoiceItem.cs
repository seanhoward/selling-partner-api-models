/* 
 * Vendor Invoices v1
 *
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorInvoices
{
    /// <summary>
    /// Details of the item being invoiced.
    /// </summary>
    [DataContract]
    public partial class InvoiceItem :  IEquatable<InvoiceItem>, IValidatableObject
    {
        /// <summary>
        /// This field represents weight unit of measure of items that are ordered by cases and supporting priced by weight.
        /// </summary>
        /// <value>This field represents weight unit of measure of items that are ordered by cases and supporting priced by weight.</value>
        [DataMember(Name="netCostUnitOfMeasure", EmitDefaultValue=false)]
        public NetCostUnitOfMeasure? NetCostUnitOfMeasure { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvoiceItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceItem" /> class.
        /// </summary>
        /// <param name="itemSequenceNumber">Unique number related to this line item. (required).</param>
        /// <param name="amazonProductIdentifier">Amazon Standard Identification Number (ASIN) of an item..</param>
        /// <param name="vendorProductIdentifier">The vendor selected product identifier of the item. Should be the same as was provided in the purchase order..</param>
        /// <param name="invoicedQuantity">Invoiced quantity of this item. Quantity must be greater than zero. (required).</param>
        /// <param name="netCost">The item cost to Amazon, which should match the cost on the order. Price information should not be zero or negative. It indicates net unit price. Net cost means VAT is not included in cost. If items are priced by weight, this cost need to be considered in conjunction with netCostUnitOfMeasure. E.g.: $5/LB (required).</param>
        /// <param name="netCostUnitOfMeasure">This field represents weight unit of measure of items that are ordered by cases and supporting priced by weight..</param>
        /// <param name="purchaseOrderNumber">The Amazon purchase order number for this invoiced line item. Formatting Notes: 8-character alpha-numeric code. This value is mandatory only when invoiceType is Invoice, and is not required when invoiceType is CreditNote..</param>
        /// <param name="hsnCode">HSN Tax code. The HSN number cannot contain alphabets..</param>
        /// <param name="creditNoteDetails">Details required in order to process a credit note. This information is required only if invoiceType is CreditNote..</param>
        /// <param name="taxDetails">Individual tax details per line item..</param>
        /// <param name="chargeDetails">Individual charge details per line item..</param>
        /// <param name="allowanceDetails">Individual allowance details per line item..</param>
        public InvoiceItem(int? itemSequenceNumber = default(int?), string amazonProductIdentifier = default(string), string vendorProductIdentifier = default(string), ItemQuantity invoicedQuantity = default(ItemQuantity), Money netCost = default(Money), NetCostUnitOfMeasure? netCostUnitOfMeasure = default(NetCostUnitOfMeasure?), string purchaseOrderNumber = default(string), string hsnCode = default(string), CreditNoteDetails creditNoteDetails = default(CreditNoteDetails), List<TaxDetails> taxDetails = default(List<TaxDetails>), List<ChargeDetails> chargeDetails = default(List<ChargeDetails>), List<AllowanceDetails> allowanceDetails = default(List<AllowanceDetails>))
        {
            // to ensure "itemSequenceNumber" is required (not null)
            if (itemSequenceNumber == null)
            {
                throw new InvalidDataException("itemSequenceNumber is a required property for InvoiceItem and cannot be null");
            }
            else
            {
                this.ItemSequenceNumber = itemSequenceNumber;
            }
            // to ensure "invoicedQuantity" is required (not null)
            if (invoicedQuantity == null)
            {
                throw new InvalidDataException("invoicedQuantity is a required property for InvoiceItem and cannot be null");
            }
            else
            {
                this.InvoicedQuantity = invoicedQuantity;
            }
            // to ensure "netCost" is required (not null)
            if (netCost == null)
            {
                throw new InvalidDataException("netCost is a required property for InvoiceItem and cannot be null");
            }
            else
            {
                this.NetCost = netCost;
            }
            this.AmazonProductIdentifier = amazonProductIdentifier;
            this.VendorProductIdentifier = vendorProductIdentifier;
            this.NetCostUnitOfMeasure = netCostUnitOfMeasure;
            this.PurchaseOrderNumber = purchaseOrderNumber;
            this.HsnCode = hsnCode;
            this.CreditNoteDetails = creditNoteDetails;
            this.TaxDetails = taxDetails;
            this.ChargeDetails = chargeDetails;
            this.AllowanceDetails = allowanceDetails;
        }
        
        /// <summary>
        /// Unique number related to this line item.
        /// </summary>
        /// <value>Unique number related to this line item.</value>
        [DataMember(Name="itemSequenceNumber", EmitDefaultValue=false)]
        public int? ItemSequenceNumber { get; set; }

        /// <summary>
        /// Amazon Standard Identification Number (ASIN) of an item.
        /// </summary>
        /// <value>Amazon Standard Identification Number (ASIN) of an item.</value>
        [DataMember(Name="amazonProductIdentifier", EmitDefaultValue=false)]
        public string AmazonProductIdentifier { get; set; }

        /// <summary>
        /// The vendor selected product identifier of the item. Should be the same as was provided in the purchase order.
        /// </summary>
        /// <value>The vendor selected product identifier of the item. Should be the same as was provided in the purchase order.</value>
        [DataMember(Name="vendorProductIdentifier", EmitDefaultValue=false)]
        public string VendorProductIdentifier { get; set; }

        /// <summary>
        /// Invoiced quantity of this item. Quantity must be greater than zero.
        /// </summary>
        /// <value>Invoiced quantity of this item. Quantity must be greater than zero.</value>
        [DataMember(Name="invoicedQuantity", EmitDefaultValue=false)]
        public ItemQuantity InvoicedQuantity { get; set; }

        /// <summary>
        /// The item cost to Amazon, which should match the cost on the order. Price information should not be zero or negative. It indicates net unit price. Net cost means VAT is not included in cost. If items are priced by weight, this cost need to be considered in conjunction with netCostUnitOfMeasure. E.g.: $5/LB
        /// </summary>
        /// <value>The item cost to Amazon, which should match the cost on the order. Price information should not be zero or negative. It indicates net unit price. Net cost means VAT is not included in cost. If items are priced by weight, this cost need to be considered in conjunction with netCostUnitOfMeasure. E.g.: $5/LB</value>
        [DataMember(Name="netCost", EmitDefaultValue=false)]
        public Money NetCost { get; set; }


        /// <summary>
        /// The Amazon purchase order number for this invoiced line item. Formatting Notes: 8-character alpha-numeric code. This value is mandatory only when invoiceType is Invoice, and is not required when invoiceType is CreditNote.
        /// </summary>
        /// <value>The Amazon purchase order number for this invoiced line item. Formatting Notes: 8-character alpha-numeric code. This value is mandatory only when invoiceType is Invoice, and is not required when invoiceType is CreditNote.</value>
        [DataMember(Name="purchaseOrderNumber", EmitDefaultValue=false)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// HSN Tax code. The HSN number cannot contain alphabets.
        /// </summary>
        /// <value>HSN Tax code. The HSN number cannot contain alphabets.</value>
        [DataMember(Name="hsnCode", EmitDefaultValue=false)]
        public string HsnCode { get; set; }

        /// <summary>
        /// Details required in order to process a credit note. This information is required only if invoiceType is CreditNote.
        /// </summary>
        /// <value>Details required in order to process a credit note. This information is required only if invoiceType is CreditNote.</value>
        [DataMember(Name="creditNoteDetails", EmitDefaultValue=false)]
        public CreditNoteDetails CreditNoteDetails { get; set; }

        /// <summary>
        /// Individual tax details per line item.
        /// </summary>
        /// <value>Individual tax details per line item.</value>
        [DataMember(Name="taxDetails", EmitDefaultValue=false)]
        public List<TaxDetails> TaxDetails { get; set; }

        /// <summary>
        /// Individual charge details per line item.
        /// </summary>
        /// <value>Individual charge details per line item.</value>
        [DataMember(Name="chargeDetails", EmitDefaultValue=false)]
        public List<ChargeDetails> ChargeDetails { get; set; }

        /// <summary>
        /// Individual allowance details per line item.
        /// </summary>
        /// <value>Individual allowance details per line item.</value>
        [DataMember(Name="allowanceDetails", EmitDefaultValue=false)]
        public List<AllowanceDetails> AllowanceDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoiceItem {\n");
            sb.Append("  ItemSequenceNumber: ").Append(ItemSequenceNumber).Append("\n");
            sb.Append("  AmazonProductIdentifier: ").Append(AmazonProductIdentifier).Append("\n");
            sb.Append("  VendorProductIdentifier: ").Append(VendorProductIdentifier).Append("\n");
            sb.Append("  InvoicedQuantity: ").Append(InvoicedQuantity).Append("\n");
            sb.Append("  NetCost: ").Append(NetCost).Append("\n");
            sb.Append("  NetCostUnitOfMeasure: ").Append(NetCostUnitOfMeasure).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  HsnCode: ").Append(HsnCode).Append("\n");
            sb.Append("  CreditNoteDetails: ").Append(CreditNoteDetails).Append("\n");
            sb.Append("  TaxDetails: ").Append(TaxDetails).Append("\n");
            sb.Append("  ChargeDetails: ").Append(ChargeDetails).Append("\n");
            sb.Append("  AllowanceDetails: ").Append(AllowanceDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceItem);
        }

        /// <summary>
        /// Returns true if InvoiceItem instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemSequenceNumber == input.ItemSequenceNumber ||
                    (this.ItemSequenceNumber != null &&
                    this.ItemSequenceNumber.Equals(input.ItemSequenceNumber))
                ) && 
                (
                    this.AmazonProductIdentifier == input.AmazonProductIdentifier ||
                    (this.AmazonProductIdentifier != null &&
                    this.AmazonProductIdentifier.Equals(input.AmazonProductIdentifier))
                ) && 
                (
                    this.VendorProductIdentifier == input.VendorProductIdentifier ||
                    (this.VendorProductIdentifier != null &&
                    this.VendorProductIdentifier.Equals(input.VendorProductIdentifier))
                ) && 
                (
                    this.InvoicedQuantity == input.InvoicedQuantity ||
                    (this.InvoicedQuantity != null &&
                    this.InvoicedQuantity.Equals(input.InvoicedQuantity))
                ) && 
                (
                    this.NetCost == input.NetCost ||
                    (this.NetCost != null &&
                    this.NetCost.Equals(input.NetCost))
                ) && 
                (
                    this.NetCostUnitOfMeasure == input.NetCostUnitOfMeasure ||
                    (this.NetCostUnitOfMeasure != null &&
                    this.NetCostUnitOfMeasure.Equals(input.NetCostUnitOfMeasure))
                ) && 
                (
                    this.PurchaseOrderNumber == input.PurchaseOrderNumber ||
                    (this.PurchaseOrderNumber != null &&
                    this.PurchaseOrderNumber.Equals(input.PurchaseOrderNumber))
                ) && 
                (
                    this.HsnCode == input.HsnCode ||
                    (this.HsnCode != null &&
                    this.HsnCode.Equals(input.HsnCode))
                ) && 
                (
                    this.CreditNoteDetails == input.CreditNoteDetails ||
                    (this.CreditNoteDetails != null &&
                    this.CreditNoteDetails.Equals(input.CreditNoteDetails))
                ) && 
                (
                    this.TaxDetails == input.TaxDetails ||
                    this.TaxDetails != null &&
                    this.TaxDetails.SequenceEqual(input.TaxDetails)
                ) && 
                (
                    this.ChargeDetails == input.ChargeDetails ||
                    this.ChargeDetails != null &&
                    this.ChargeDetails.SequenceEqual(input.ChargeDetails)
                ) && 
                (
                    this.AllowanceDetails == input.AllowanceDetails ||
                    this.AllowanceDetails != null &&
                    this.AllowanceDetails.SequenceEqual(input.AllowanceDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemSequenceNumber != null)
                    hashCode = hashCode * 59 + this.ItemSequenceNumber.GetHashCode();
                if (this.AmazonProductIdentifier != null)
                    hashCode = hashCode * 59 + this.AmazonProductIdentifier.GetHashCode();
                if (this.VendorProductIdentifier != null)
                    hashCode = hashCode * 59 + this.VendorProductIdentifier.GetHashCode();
                if (this.InvoicedQuantity != null)
                    hashCode = hashCode * 59 + this.InvoicedQuantity.GetHashCode();
                if (this.NetCost != null)
                    hashCode = hashCode * 59 + this.NetCost.GetHashCode();
                if (this.NetCostUnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.NetCostUnitOfMeasure.GetHashCode();
                if (this.PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderNumber.GetHashCode();
                if (this.HsnCode != null)
                    hashCode = hashCode * 59 + this.HsnCode.GetHashCode();
                if (this.CreditNoteDetails != null)
                    hashCode = hashCode * 59 + this.CreditNoteDetails.GetHashCode();
                if (this.TaxDetails != null)
                    hashCode = hashCode * 59 + this.TaxDetails.GetHashCode();
                if (this.ChargeDetails != null)
                    hashCode = hashCode * 59 + this.ChargeDetails.GetHashCode();
                if (this.AllowanceDetails != null)
                    hashCode = hashCode * 59 + this.AllowanceDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
