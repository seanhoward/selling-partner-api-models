/* 
 * Selling Partner API for Retail Procurement Payments
 *
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorInvoices
{
    /// <summary>
    /// The aggregate weight of this item being invoiced. This information will be available for items sold by weight.
    /// </summary>
    [DataContract]
    public partial class TotalWeight : IEquatable<TotalWeight>, IValidatableObject
    {
        /// <summary>
        /// The unit of measure for items sold by weight.
        /// </summary>
        /// <value>The unit of measure for items sold by weight.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnitOfMeasureEnum
        {

            /// <summary>
            /// Enum POUNDS for value: POUNDS
            /// </summary>
            [EnumMember(Value = "POUNDS")]
            POUNDS = 1,

            /// <summary>
            /// Enum OUNCES for value: OUNCES
            /// </summary>
            [EnumMember(Value = "OUNCES")]
            OUNCES = 2,

            /// <summary>
            /// Enum GRAMS for value: GRAMS
            /// </summary>
            [EnumMember(Value = "GRAMS")]
            GRAMS = 3,

            /// <summary>
            /// Enum KILOGRAMS for value: KILOGRAMS
            /// </summary>
            [EnumMember(Value = "KILOGRAMS")]
            KILOGRAMS = 4
        }

        /// <summary>
        /// The unit of measure for items sold by weight.
        /// </summary>
        /// <value>The unit of measure for items sold by weight.</value>
        [DataMember(Name = "unitOfMeasure", EmitDefaultValue = false)]
        public UnitOfMeasureEnum UnitOfMeasure { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TotalWeight" /> class.
        /// </summary>
        [JsonConstructor]
        protected TotalWeight() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TotalWeight" /> class.
        /// </summary>
        /// <param name="unitOfMeasure">The unit of measure for items sold by weight. (required).</param>
        /// <param name="amount">amount (required).</param>
        public TotalWeight(UnitOfMeasureEnum unitOfMeasure = default, string amount = default)
        {
            // to ensure "unitOfMeasure" is required (not null)
            if (unitOfMeasure == null)
            {
                throw new InvalidDataException("unitOfMeasure is a required property for TotalWeight and cannot be null");
            }
            else
            {
                this.UnitOfMeasure = unitOfMeasure;
            }
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for TotalWeight and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
        }


        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TotalWeight {\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TotalWeight);
        }

        /// <summary>
        /// Returns true if TotalWeight instances are equal
        /// </summary>
        /// <param name="input">Instance of TotalWeight to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TotalWeight input)
        {
            if (input == null)
                return false;

            return
                (
                    this.UnitOfMeasure == input.UnitOfMeasure ||
                    (this.UnitOfMeasure != null &&
                    this.UnitOfMeasure.Equals(input.UnitOfMeasure))
                ) &&
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasure.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
