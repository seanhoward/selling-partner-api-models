/* 
 * Vendor Invoices v1
 *
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorInvoices
{
    /// <summary>
    /// Additional information provided by the selling party for tax-related or any other purpose.
    /// </summary>
    [DataContract]
    public partial class AdditionalDetails :  IEquatable<AdditionalDetails>, IValidatableObject
    {
        /// <summary>
        /// The type of the additional information provided by the selling party.
        /// </summary>
        /// <value>The type of the additional information provided by the selling party.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum SUR for value: SUR
            /// </summary>
            [EnumMember(Value = "SUR")]
            SUR = 1,
            
            /// <summary>
            /// Enum OCR for value: OCR
            /// </summary>
            [EnumMember(Value = "OCR")]
            OCR = 2,
            
            /// <summary>
            /// Enum CartonCount for value: CartonCount
            /// </summary>
            [EnumMember(Value = "CartonCount")]
            CartonCount = 3
        }

        /// <summary>
        /// The type of the additional information provided by the selling party.
        /// </summary>
        /// <value>The type of the additional information provided by the selling party.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdditionalDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalDetails" /> class.
        /// </summary>
        /// <param name="type">The type of the additional information provided by the selling party. (required).</param>
        /// <param name="detail">The detail of the additional information provided by the selling party. (required).</param>
        /// <param name="languageCode">The language code of the additional information detail..</param>
        public AdditionalDetails(TypeEnum type = default(TypeEnum), string detail = default(string), string languageCode = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for AdditionalDetails and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "detail" is required (not null)
            if (detail == null)
            {
                throw new InvalidDataException("detail is a required property for AdditionalDetails and cannot be null");
            }
            else
            {
                this.Detail = detail;
            }
            this.LanguageCode = languageCode;
        }
        

        /// <summary>
        /// The detail of the additional information provided by the selling party.
        /// </summary>
        /// <value>The detail of the additional information provided by the selling party.</value>
        [DataMember(Name="detail", EmitDefaultValue=false)]
        public string Detail { get; set; }

        /// <summary>
        /// The language code of the additional information detail.
        /// </summary>
        /// <value>The language code of the additional information detail.</value>
        [DataMember(Name="languageCode", EmitDefaultValue=false)]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdditionalDetails {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdditionalDetails);
        }

        /// <summary>
        /// Returns true if AdditionalDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of AdditionalDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdditionalDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                ) && 
                (
                    this.LanguageCode == input.LanguageCode ||
                    (this.LanguageCode != null &&
                    this.LanguageCode.Equals(input.LanguageCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Detail != null)
                    hashCode = hashCode * 59 + this.Detail.GetHashCode();
                if (this.LanguageCode != null)
                    hashCode = hashCode * 59 + this.LanguageCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
