/* 
 * Selling Partner API for Data Kiosk
 *
 * The Selling Partner API for Data Kiosk lets you submit GraphQL queries from a variety of schemas to help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2023-11-15
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.DataKiosk
{
    /// <summary>
    /// Information required to create the query.
    /// </summary>
    [DataContract]
    public partial class CreateQuerySpecification :  IEquatable<CreateQuerySpecification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateQuerySpecification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateQuerySpecification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateQuerySpecification" /> class.
        /// </summary>
        /// <param name="query">The GraphQL query to submit. A query must be at most 8000 characters after unnecessary whitespace is removed. (required).</param>
        /// <param name="paginationToken">A token to fetch a certain page of query results when there are multiple pages of query results available. The value of this token must be fetched from the &#x60;pagination.nextToken&#x60; field of the &#x60;Query&#x60; object, and the &#x60;query&#x60; field for this object must also be set to the &#x60;query&#x60; field of the same &#x60;Query&#x60; object. A &#x60;Query&#x60; object can be retrieved from either the &#x60;getQueries&#x60; or &#x60;getQuery&#x60; operation. In the absence of this token value, the first page of query results will be requested..</param>
        public CreateQuerySpecification(string query = default(string), string paginationToken = default(string))
        {
            // to ensure "query" is required (not null)
            if (query == null)
            {
                throw new InvalidDataException("query is a required property for CreateQuerySpecification and cannot be null");
            }
            else
            {
                this.Query = query;
            }
            this.PaginationToken = paginationToken;
        }
        
        /// <summary>
        /// The GraphQL query to submit. A query must be at most 8000 characters after unnecessary whitespace is removed.
        /// </summary>
        /// <value>The GraphQL query to submit. A query must be at most 8000 characters after unnecessary whitespace is removed.</value>
        [DataMember(Name="query", EmitDefaultValue=false)]
        public string Query { get; set; }

        /// <summary>
        /// A token to fetch a certain page of query results when there are multiple pages of query results available. The value of this token must be fetched from the &#x60;pagination.nextToken&#x60; field of the &#x60;Query&#x60; object, and the &#x60;query&#x60; field for this object must also be set to the &#x60;query&#x60; field of the same &#x60;Query&#x60; object. A &#x60;Query&#x60; object can be retrieved from either the &#x60;getQueries&#x60; or &#x60;getQuery&#x60; operation. In the absence of this token value, the first page of query results will be requested.
        /// </summary>
        /// <value>A token to fetch a certain page of query results when there are multiple pages of query results available. The value of this token must be fetched from the &#x60;pagination.nextToken&#x60; field of the &#x60;Query&#x60; object, and the &#x60;query&#x60; field for this object must also be set to the &#x60;query&#x60; field of the same &#x60;Query&#x60; object. A &#x60;Query&#x60; object can be retrieved from either the &#x60;getQueries&#x60; or &#x60;getQuery&#x60; operation. In the absence of this token value, the first page of query results will be requested.</value>
        [DataMember(Name="paginationToken", EmitDefaultValue=false)]
        public string PaginationToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateQuerySpecification {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  PaginationToken: ").Append(PaginationToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateQuerySpecification);
        }

        /// <summary>
        /// Returns true if CreateQuerySpecification instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateQuerySpecification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateQuerySpecification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.PaginationToken == input.PaginationToken ||
                    (this.PaginationToken != null &&
                    this.PaginationToken.Equals(input.PaginationToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                if (this.PaginationToken != null)
                    hashCode = hashCode * 59 + this.PaginationToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
