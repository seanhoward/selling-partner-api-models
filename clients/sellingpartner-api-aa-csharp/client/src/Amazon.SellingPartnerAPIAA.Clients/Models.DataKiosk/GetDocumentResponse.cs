/* 
 * Selling Partner API for Data Kiosk
 *
 * The Selling Partner API for Data Kiosk lets you submit GraphQL queries from a variety of schemas to help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2023-11-15
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.DataKiosk
{
    /// <summary>
    /// The response for the &#x60;getDocument&#x60; operation.
    /// </summary>
    [DataContract]
    public partial class GetDocumentResponse :  IEquatable<GetDocumentResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDocumentResponse" /> class.
        /// </summary>
        [JsonConstructor]
        protected GetDocumentResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDocumentResponse" /> class.
        /// </summary>
        /// <param name="documentId">The identifier for the Data Kiosk document. This identifier is unique only in combination with a selling partner account ID. (required).</param>
        /// <param name="documentUrl">A presigned URL that can be used to retrieve the Data Kiosk document. This URL expires after 5 minutes. If the Data Kiosk document is compressed, the &#x60;Content-Encoding&#x60; header will indicate the compression algorithm.  **Note:** Most HTTP clients are capable of automatically decompressing downloaded files based on the &#x60;Content-Encoding&#x60; header. (required).</param>
        public GetDocumentResponse(string documentId = default, string documentUrl = default)
        {
            // to ensure "documentId" is required (not null)
            if (documentId == null)
            {
                throw new InvalidDataException("documentId is a required property for GetDocumentResponse and cannot be null");
            }
            else
            {
                this.DocumentId = documentId;
            }
            // to ensure "documentUrl" is required (not null)
            if (documentUrl == null)
            {
                throw new InvalidDataException("documentUrl is a required property for GetDocumentResponse and cannot be null");
            }
            else
            {
                this.DocumentUrl = documentUrl;
            }
        }
        
        /// <summary>
        /// The identifier for the Data Kiosk document. This identifier is unique only in combination with a selling partner account ID.
        /// </summary>
        /// <value>The identifier for the Data Kiosk document. This identifier is unique only in combination with a selling partner account ID.</value>
        [DataMember(Name="documentId", EmitDefaultValue=false)]
        public string DocumentId { get; set; }

        /// <summary>
        /// A presigned URL that can be used to retrieve the Data Kiosk document. This URL expires after 5 minutes. If the Data Kiosk document is compressed, the &#x60;Content-Encoding&#x60; header will indicate the compression algorithm.  **Note:** Most HTTP clients are capable of automatically decompressing downloaded files based on the &#x60;Content-Encoding&#x60; header.
        /// </summary>
        /// <value>A presigned URL that can be used to retrieve the Data Kiosk document. This URL expires after 5 minutes. If the Data Kiosk document is compressed, the &#x60;Content-Encoding&#x60; header will indicate the compression algorithm.  **Note:** Most HTTP clients are capable of automatically decompressing downloaded files based on the &#x60;Content-Encoding&#x60; header.</value>
        [DataMember(Name="documentUrl", EmitDefaultValue=false)]
        public string DocumentUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetDocumentResponse {\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  DocumentUrl: ").Append(DocumentUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetDocumentResponse);
        }

        /// <summary>
        /// Returns true if GetDocumentResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetDocumentResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetDocumentResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.DocumentUrl == input.DocumentUrl ||
                    (this.DocumentUrl != null &&
                    this.DocumentUrl.Equals(input.DocumentUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentId != null)
                    hashCode = hashCode * 59 + this.DocumentId.GetHashCode();
                if (this.DocumentUrl != null)
                    hashCode = hashCode * 59 + this.DocumentUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
