/* 
 * Selling Partner API for Data Kiosk
 *
 * The Selling Partner API for Data Kiosk lets you submit GraphQL queries from a variety of schemas to help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2023-11-15
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.DataKiosk
{
    /// <summary>
    /// Detailed information about the query.
    /// </summary>
    [DataContract]
    public partial class Query :  IEquatable<Query>, IValidatableObject
    {
        /// <summary>
        /// The processing status of the query.
        /// </summary>
        /// <value>The processing status of the query.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessingStatusEnum
        {
            
            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 1,
            
            /// <summary>
            /// Enum DONE for value: DONE
            /// </summary>
            [EnumMember(Value = "DONE")]
            DONE = 2,
            
            /// <summary>
            /// Enum FATAL for value: FATAL
            /// </summary>
            [EnumMember(Value = "FATAL")]
            FATAL = 3,
            
            /// <summary>
            /// Enum INPROGRESS for value: IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS = 4,
            
            /// <summary>
            /// Enum INQUEUE for value: IN_QUEUE
            /// </summary>
            [EnumMember(Value = "IN_QUEUE")]
            INQUEUE = 5
        }

        /// <summary>
        /// The processing status of the query.
        /// </summary>
        /// <value>The processing status of the query.</value>
        [DataMember(Name="processingStatus", EmitDefaultValue=false)]
        public ProcessingStatusEnum ProcessingStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Query" /> class.
        /// </summary>
        [JsonConstructor]
        protected Query() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Query" /> class.
        /// </summary>
        /// <param name="queryId">The query identifier. This identifier is unique only in combination with a selling partner account ID. (required).</param>
        /// <param name="query">The submitted query. (required).</param>
        /// <param name="createdTime">The date and time when the query was created, in ISO 8601 date time format. (required).</param>
        /// <param name="processingStatus">The processing status of the query. (required).</param>
        /// <param name="processingStartTime">The date and time when the query processing started, in ISO 8601 date time format..</param>
        /// <param name="processingEndTime">The date and time when the query processing completed, in ISO 8601 date time format..</param>
        /// <param name="dataDocumentId">The data document identifier. This identifier is only present when there is data available as a result of the query. This identifier is unique only in combination with a selling partner account ID. Pass this identifier into the &#x60;getDocument&#x60; operation to get the information required to retrieve the data document&#39;s contents..</param>
        /// <param name="errorDocumentId">The error document identifier. This identifier is only present when an error occurs during query processing. This identifier is unique only in combination with a selling partner account ID. Pass this identifier into the &#x60;getDocument&#x60; operation to get the information required to retrieve the error document&#39;s contents..</param>
        /// <param name="pagination">pagination.</param>
        public Query(string queryId = default, string query = default, DateTime? createdTime = default, ProcessingStatusEnum processingStatus = default, DateTime? processingStartTime = default, DateTime? processingEndTime = default, string dataDocumentId = default, string errorDocumentId = default, QueryPagination pagination = default)
        {
            // to ensure "queryId" is required (not null)
            if (queryId == null)
            {
                throw new InvalidDataException("queryId is a required property for Query and cannot be null");
            }
            else
            {
                this.QueryId = queryId;
            }
            // to ensure "query" is required (not null)
            if (query == null)
            {
                throw new InvalidDataException("query is a required property for Query and cannot be null");
            }
            else
            {
                this._Query = query;
            }
            // to ensure "createdTime" is required (not null)
            if (createdTime == null)
            {
                throw new InvalidDataException("createdTime is a required property for Query and cannot be null");
            }
            else
            {
                this.CreatedTime = createdTime;
            }
            // to ensure "processingStatus" is required (not null)
            if (processingStatus == null)
            {
                throw new InvalidDataException("processingStatus is a required property for Query and cannot be null");
            }
            else
            {
                this.ProcessingStatus = processingStatus;
            }
            this.ProcessingStartTime = processingStartTime;
            this.ProcessingEndTime = processingEndTime;
            this.DataDocumentId = dataDocumentId;
            this.ErrorDocumentId = errorDocumentId;
            this.Pagination = pagination;
        }
        
        /// <summary>
        /// The query identifier. This identifier is unique only in combination with a selling partner account ID.
        /// </summary>
        /// <value>The query identifier. This identifier is unique only in combination with a selling partner account ID.</value>
        [DataMember(Name="queryId", EmitDefaultValue=false)]
        public string QueryId { get; set; }

        /// <summary>
        /// The submitted query.
        /// </summary>
        /// <value>The submitted query.</value>
        [DataMember(Name="query", EmitDefaultValue=false)]
        public string _Query { get; set; }

        /// <summary>
        /// The date and time when the query was created, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time when the query was created, in ISO 8601 date time format.</value>
        [DataMember(Name="createdTime", EmitDefaultValue=false)]
        public DateTime? CreatedTime { get; set; }


        /// <summary>
        /// The date and time when the query processing started, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time when the query processing started, in ISO 8601 date time format.</value>
        [DataMember(Name="processingStartTime", EmitDefaultValue=false)]
        public DateTime? ProcessingStartTime { get; set; }

        /// <summary>
        /// The date and time when the query processing completed, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time when the query processing completed, in ISO 8601 date time format.</value>
        [DataMember(Name="processingEndTime", EmitDefaultValue=false)]
        public DateTime? ProcessingEndTime { get; set; }

        /// <summary>
        /// The data document identifier. This identifier is only present when there is data available as a result of the query. This identifier is unique only in combination with a selling partner account ID. Pass this identifier into the &#x60;getDocument&#x60; operation to get the information required to retrieve the data document&#39;s contents.
        /// </summary>
        /// <value>The data document identifier. This identifier is only present when there is data available as a result of the query. This identifier is unique only in combination with a selling partner account ID. Pass this identifier into the &#x60;getDocument&#x60; operation to get the information required to retrieve the data document&#39;s contents.</value>
        [DataMember(Name="dataDocumentId", EmitDefaultValue=false)]
        public string DataDocumentId { get; set; }

        /// <summary>
        /// The error document identifier. This identifier is only present when an error occurs during query processing. This identifier is unique only in combination with a selling partner account ID. Pass this identifier into the &#x60;getDocument&#x60; operation to get the information required to retrieve the error document&#39;s contents.
        /// </summary>
        /// <value>The error document identifier. This identifier is only present when an error occurs during query processing. This identifier is unique only in combination with a selling partner account ID. Pass this identifier into the &#x60;getDocument&#x60; operation to get the information required to retrieve the error document&#39;s contents.</value>
        [DataMember(Name="errorDocumentId", EmitDefaultValue=false)]
        public string ErrorDocumentId { get; set; }

        /// <summary>
        /// Gets or Sets Pagination
        /// </summary>
        [DataMember(Name="pagination", EmitDefaultValue=false)]
        public QueryPagination Pagination { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Query {\n");
            sb.Append("  QueryId: ").Append(QueryId).Append("\n");
            sb.Append("  _Query: ").Append(_Query).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  ProcessingStatus: ").Append(ProcessingStatus).Append("\n");
            sb.Append("  ProcessingStartTime: ").Append(ProcessingStartTime).Append("\n");
            sb.Append("  ProcessingEndTime: ").Append(ProcessingEndTime).Append("\n");
            sb.Append("  DataDocumentId: ").Append(DataDocumentId).Append("\n");
            sb.Append("  ErrorDocumentId: ").Append(ErrorDocumentId).Append("\n");
            sb.Append("  Pagination: ").Append(Pagination).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Query);
        }

        /// <summary>
        /// Returns true if Query instances are equal
        /// </summary>
        /// <param name="input">Instance of Query to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Query input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QueryId == input.QueryId ||
                    (this.QueryId != null &&
                    this.QueryId.Equals(input.QueryId))
                ) && 
                (
                    this._Query == input._Query ||
                    (this._Query != null &&
                    this._Query.Equals(input._Query))
                ) && 
                (
                    this.CreatedTime == input.CreatedTime ||
                    (this.CreatedTime != null &&
                    this.CreatedTime.Equals(input.CreatedTime))
                ) && 
                (
                    this.ProcessingStatus == input.ProcessingStatus ||
                    (this.ProcessingStatus != null &&
                    this.ProcessingStatus.Equals(input.ProcessingStatus))
                ) && 
                (
                    this.ProcessingStartTime == input.ProcessingStartTime ||
                    (this.ProcessingStartTime != null &&
                    this.ProcessingStartTime.Equals(input.ProcessingStartTime))
                ) && 
                (
                    this.ProcessingEndTime == input.ProcessingEndTime ||
                    (this.ProcessingEndTime != null &&
                    this.ProcessingEndTime.Equals(input.ProcessingEndTime))
                ) && 
                (
                    this.DataDocumentId == input.DataDocumentId ||
                    (this.DataDocumentId != null &&
                    this.DataDocumentId.Equals(input.DataDocumentId))
                ) && 
                (
                    this.ErrorDocumentId == input.ErrorDocumentId ||
                    (this.ErrorDocumentId != null &&
                    this.ErrorDocumentId.Equals(input.ErrorDocumentId))
                ) && 
                (
                    this.Pagination == input.Pagination ||
                    (this.Pagination != null &&
                    this.Pagination.Equals(input.Pagination))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QueryId != null)
                    hashCode = hashCode * 59 + this.QueryId.GetHashCode();
                if (this._Query != null)
                    hashCode = hashCode * 59 + this._Query.GetHashCode();
                if (this.CreatedTime != null)
                    hashCode = hashCode * 59 + this.CreatedTime.GetHashCode();
                if (this.ProcessingStatus != null)
                    hashCode = hashCode * 59 + this.ProcessingStatus.GetHashCode();
                if (this.ProcessingStartTime != null)
                    hashCode = hashCode * 59 + this.ProcessingStartTime.GetHashCode();
                if (this.ProcessingEndTime != null)
                    hashCode = hashCode * 59 + this.ProcessingEndTime.GetHashCode();
                if (this.DataDocumentId != null)
                    hashCode = hashCode * 59 + this.DataDocumentId.GetHashCode();
                if (this.ErrorDocumentId != null)
                    hashCode = hashCode * 59 + this.ErrorDocumentId.GetHashCode();
                if (this.Pagination != null)
                    hashCode = hashCode * 59 + this.Pagination.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
