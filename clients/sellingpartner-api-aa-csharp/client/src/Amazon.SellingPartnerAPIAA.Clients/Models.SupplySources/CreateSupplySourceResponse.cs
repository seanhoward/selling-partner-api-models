/* 
 * Selling Partner API for Supply Sources
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SupplySources
{
    /// <summary>
    /// The result of creating a new supply source.
    /// </summary>
    [DataContract]
    public partial class CreateSupplySourceResponse : IEquatable<CreateSupplySourceResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSupplySourceResponse" /> class.
        /// </summary>
        [JsonConstructor]
        protected CreateSupplySourceResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSupplySourceResponse" /> class.
        /// </summary>
        /// <param name="supplySourceId">supplySourceId (required).</param>
        /// <param name="supplySourceCode">supplySourceCode (required).</param>
        public CreateSupplySourceResponse(string supplySourceId = default, string supplySourceCode = default)
        {
            // to ensure "supplySourceId" is required (not null)
            if (supplySourceId == null)
            {
                throw new InvalidDataException("supplySourceId is a required property for CreateSupplySourceResponse and cannot be null");
            }
            else
            {
                this.SupplySourceId = supplySourceId;
            }
            // to ensure "supplySourceCode" is required (not null)
            if (supplySourceCode == null)
            {
                throw new InvalidDataException("supplySourceCode is a required property for CreateSupplySourceResponse and cannot be null");
            }
            else
            {
                this.SupplySourceCode = supplySourceCode;
            }
        }

        /// <summary>
        /// Gets or Sets SupplySourceId
        /// </summary>
        [DataMember(Name = "supplySourceId", EmitDefaultValue = false)]
        public string SupplySourceId { get; set; }

        /// <summary>
        /// Gets or Sets SupplySourceCode
        /// </summary>
        [DataMember(Name = "supplySourceCode", EmitDefaultValue = false)]
        public string SupplySourceCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSupplySourceResponse {\n");
            sb.Append("  SupplySourceId: ").Append(SupplySourceId).Append("\n");
            sb.Append("  SupplySourceCode: ").Append(SupplySourceCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSupplySourceResponse);
        }

        /// <summary>
        /// Returns true if CreateSupplySourceResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSupplySourceResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSupplySourceResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    this.SupplySourceId == input.SupplySourceId ||
                    (this.SupplySourceId != null &&
                    this.SupplySourceId.Equals(input.SupplySourceId))
                ) &&
                (
                    this.SupplySourceCode == input.SupplySourceCode ||
                    (this.SupplySourceCode != null &&
                    this.SupplySourceCode.Equals(input.SupplySourceCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SupplySourceId != null)
                    hashCode = hashCode * 59 + this.SupplySourceId.GetHashCode();
                if (this.SupplySourceCode != null)
                    hashCode = hashCode * 59 + this.SupplySourceCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
