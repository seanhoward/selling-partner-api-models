/* 
 * Selling Partner API for Supply Sources
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SupplySources
{
    /// <summary>
    /// The pick up channel of a supply source.
    /// </summary>
    [DataContract]
    public partial class PickupChannel :  IEquatable<PickupChannel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PickupChannel" /> class.
        /// </summary>
        /// <param name="inventoryHoldPeriod">inventoryHoldPeriod.</param>
        /// <param name="isSupported">isSupported.</param>
        /// <param name="operationalConfiguration">operationalConfiguration.</param>
        /// <param name="inStorePickupConfiguration">The configuration for supporting in-store pickup..</param>
        /// <param name="curbsidePickupConfiguration">The configuration for supporting curbside pickup..</param>
        public PickupChannel(Duration inventoryHoldPeriod = default, bool? isSupported = default, OperationalConfiguration operationalConfiguration = default, InStorePickupConfiguration inStorePickupConfiguration = default, CurbsidePickupConfiguration curbsidePickupConfiguration = default)
        {
            this.InventoryHoldPeriod = inventoryHoldPeriod;
            this.IsSupported = isSupported;
            this.OperationalConfiguration = operationalConfiguration;
            this.InStorePickupConfiguration = inStorePickupConfiguration;
            this.CurbsidePickupConfiguration = curbsidePickupConfiguration;
        }
        
        /// <summary>
        /// Gets or Sets InventoryHoldPeriod
        /// </summary>
        [DataMember(Name="inventoryHoldPeriod", EmitDefaultValue=false)]
        public Duration InventoryHoldPeriod { get; set; }

        /// <summary>
        /// Gets or Sets IsSupported
        /// </summary>
        [DataMember(Name="isSupported", EmitDefaultValue=false)]
        public bool? IsSupported { get; set; }

        /// <summary>
        /// Gets or Sets OperationalConfiguration
        /// </summary>
        [DataMember(Name="operationalConfiguration", EmitDefaultValue=false)]
        public OperationalConfiguration OperationalConfiguration { get; set; }

        /// <summary>
        /// The configuration for supporting in-store pickup.
        /// </summary>
        /// <value>The configuration for supporting in-store pickup.</value>
        [DataMember(Name="inStorePickupConfiguration", EmitDefaultValue=false)]
        public InStorePickupConfiguration InStorePickupConfiguration { get; set; }

        /// <summary>
        /// The configuration for supporting curbside pickup.
        /// </summary>
        /// <value>The configuration for supporting curbside pickup.</value>
        [DataMember(Name="curbsidePickupConfiguration", EmitDefaultValue=false)]
        public CurbsidePickupConfiguration CurbsidePickupConfiguration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PickupChannel {\n");
            sb.Append("  InventoryHoldPeriod: ").Append(InventoryHoldPeriod).Append("\n");
            sb.Append("  IsSupported: ").Append(IsSupported).Append("\n");
            sb.Append("  OperationalConfiguration: ").Append(OperationalConfiguration).Append("\n");
            sb.Append("  InStorePickupConfiguration: ").Append(InStorePickupConfiguration).Append("\n");
            sb.Append("  CurbsidePickupConfiguration: ").Append(CurbsidePickupConfiguration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PickupChannel);
        }

        /// <summary>
        /// Returns true if PickupChannel instances are equal
        /// </summary>
        /// <param name="input">Instance of PickupChannel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PickupChannel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InventoryHoldPeriod == input.InventoryHoldPeriod ||
                    (this.InventoryHoldPeriod != null &&
                    this.InventoryHoldPeriod.Equals(input.InventoryHoldPeriod))
                ) && 
                (
                    this.IsSupported == input.IsSupported ||
                    (this.IsSupported != null &&
                    this.IsSupported.Equals(input.IsSupported))
                ) && 
                (
                    this.OperationalConfiguration == input.OperationalConfiguration ||
                    (this.OperationalConfiguration != null &&
                    this.OperationalConfiguration.Equals(input.OperationalConfiguration))
                ) && 
                (
                    this.InStorePickupConfiguration == input.InStorePickupConfiguration ||
                    (this.InStorePickupConfiguration != null &&
                    this.InStorePickupConfiguration.Equals(input.InStorePickupConfiguration))
                ) && 
                (
                    this.CurbsidePickupConfiguration == input.CurbsidePickupConfiguration ||
                    (this.CurbsidePickupConfiguration != null &&
                    this.CurbsidePickupConfiguration.Equals(input.CurbsidePickupConfiguration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InventoryHoldPeriod != null)
                    hashCode = hashCode * 59 + this.InventoryHoldPeriod.GetHashCode();
                if (this.IsSupported != null)
                    hashCode = hashCode * 59 + this.IsSupported.GetHashCode();
                if (this.OperationalConfiguration != null)
                    hashCode = hashCode * 59 + this.OperationalConfiguration.GetHashCode();
                if (this.InStorePickupConfiguration != null)
                    hashCode = hashCode * 59 + this.InStorePickupConfiguration.GetHashCode();
                if (this.CurbsidePickupConfiguration != null)
                    hashCode = hashCode * 59 + this.CurbsidePickupConfiguration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
