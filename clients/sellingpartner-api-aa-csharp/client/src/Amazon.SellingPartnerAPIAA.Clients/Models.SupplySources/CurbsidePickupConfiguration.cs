/* 
 * Selling Partner API for Supply Sources
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SupplySources
{
    /// <summary>
    /// The curbside pickup configuration of a supply source.
    /// </summary>
    [DataContract]
    public partial class CurbsidePickupConfiguration :  IEquatable<CurbsidePickupConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurbsidePickupConfiguration" /> class.
        /// </summary>
        /// <param name="isSupported">When true, curbside pickup is supported by the supply source..</param>
        /// <param name="operationalConfiguration">The operational configuration for the curbside pickup configuration..</param>
        /// <param name="parkingWithAddressConfiguration">The parking configuration for curbside pickup with address for customers to use..</param>
        public CurbsidePickupConfiguration(bool? isSupported = default, OperationalConfiguration operationalConfiguration = default, ParkingWithAddressConfiguration parkingWithAddressConfiguration = default)
        {
            this.IsSupported = isSupported;
            this.OperationalConfiguration = operationalConfiguration;
            this.ParkingWithAddressConfiguration = parkingWithAddressConfiguration;
        }
        
        /// <summary>
        /// When true, curbside pickup is supported by the supply source.
        /// </summary>
        /// <value>When true, curbside pickup is supported by the supply source.</value>
        [DataMember(Name="isSupported", EmitDefaultValue=false)]
        public bool? IsSupported { get; set; }

        /// <summary>
        /// The operational configuration for the curbside pickup configuration.
        /// </summary>
        /// <value>The operational configuration for the curbside pickup configuration.</value>
        [DataMember(Name="operationalConfiguration", EmitDefaultValue=false)]
        public OperationalConfiguration OperationalConfiguration { get; set; }

        /// <summary>
        /// The parking configuration for curbside pickup with address for customers to use.
        /// </summary>
        /// <value>The parking configuration for curbside pickup with address for customers to use.</value>
        [DataMember(Name="parkingWithAddressConfiguration", EmitDefaultValue=false)]
        public ParkingWithAddressConfiguration ParkingWithAddressConfiguration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurbsidePickupConfiguration {\n");
            sb.Append("  IsSupported: ").Append(IsSupported).Append("\n");
            sb.Append("  OperationalConfiguration: ").Append(OperationalConfiguration).Append("\n");
            sb.Append("  ParkingWithAddressConfiguration: ").Append(ParkingWithAddressConfiguration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurbsidePickupConfiguration);
        }

        /// <summary>
        /// Returns true if CurbsidePickupConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of CurbsidePickupConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurbsidePickupConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsSupported == input.IsSupported ||
                    (this.IsSupported != null &&
                    this.IsSupported.Equals(input.IsSupported))
                ) && 
                (
                    this.OperationalConfiguration == input.OperationalConfiguration ||
                    (this.OperationalConfiguration != null &&
                    this.OperationalConfiguration.Equals(input.OperationalConfiguration))
                ) && 
                (
                    this.ParkingWithAddressConfiguration == input.ParkingWithAddressConfiguration ||
                    (this.ParkingWithAddressConfiguration != null &&
                    this.ParkingWithAddressConfiguration.Equals(input.ParkingWithAddressConfiguration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsSupported != null)
                    hashCode = hashCode * 59 + this.IsSupported.GetHashCode();
                if (this.OperationalConfiguration != null)
                    hashCode = hashCode * 59 + this.OperationalConfiguration.GetHashCode();
                if (this.ParkingWithAddressConfiguration != null)
                    hashCode = hashCode * 59 + this.ParkingWithAddressConfiguration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
