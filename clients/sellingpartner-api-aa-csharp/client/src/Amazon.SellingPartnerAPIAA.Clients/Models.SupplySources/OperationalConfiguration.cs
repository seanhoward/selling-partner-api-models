/* 
 * Selling Partner API for Supply Sources
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SupplySources
{
    /// <summary>
    /// The operational configuration of &#x60;supplySources&#x60;.
    /// </summary>
    [DataContract]
    public partial class OperationalConfiguration :  IEquatable<OperationalConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationalConfiguration" /> class.
        /// </summary>
        /// <param name="contactDetails">contactDetails.</param>
        /// <param name="throughputConfig">throughputConfig.</param>
        /// <param name="operatingHoursByDay">operatingHoursByDay.</param>
        /// <param name="handlingTime">handlingTime.</param>
        public OperationalConfiguration(ContactDetails contactDetails = default, ThroughputConfig throughputConfig = default, OperatingHoursByDay operatingHoursByDay = default, Duration handlingTime = default)
        {
            this.ContactDetails = contactDetails;
            this.ThroughputConfig = throughputConfig;
            this.OperatingHoursByDay = operatingHoursByDay;
            this.HandlingTime = handlingTime;
        }
        
        /// <summary>
        /// Gets or Sets ContactDetails
        /// </summary>
        [DataMember(Name="contactDetails", EmitDefaultValue=false)]
        public ContactDetails ContactDetails { get; set; }

        /// <summary>
        /// Gets or Sets ThroughputConfig
        /// </summary>
        [DataMember(Name="throughputConfig", EmitDefaultValue=false)]
        public ThroughputConfig ThroughputConfig { get; set; }

        /// <summary>
        /// Gets or Sets OperatingHoursByDay
        /// </summary>
        [DataMember(Name="operatingHoursByDay", EmitDefaultValue=false)]
        public OperatingHoursByDay OperatingHoursByDay { get; set; }

        /// <summary>
        /// Gets or Sets HandlingTime
        /// </summary>
        [DataMember(Name="handlingTime", EmitDefaultValue=false)]
        public Duration HandlingTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OperationalConfiguration {\n");
            sb.Append("  ContactDetails: ").Append(ContactDetails).Append("\n");
            sb.Append("  ThroughputConfig: ").Append(ThroughputConfig).Append("\n");
            sb.Append("  OperatingHoursByDay: ").Append(OperatingHoursByDay).Append("\n");
            sb.Append("  HandlingTime: ").Append(HandlingTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OperationalConfiguration);
        }

        /// <summary>
        /// Returns true if OperationalConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of OperationalConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OperationalConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContactDetails == input.ContactDetails ||
                    (this.ContactDetails != null &&
                    this.ContactDetails.Equals(input.ContactDetails))
                ) && 
                (
                    this.ThroughputConfig == input.ThroughputConfig ||
                    (this.ThroughputConfig != null &&
                    this.ThroughputConfig.Equals(input.ThroughputConfig))
                ) && 
                (
                    this.OperatingHoursByDay == input.OperatingHoursByDay ||
                    (this.OperatingHoursByDay != null &&
                    this.OperatingHoursByDay.Equals(input.OperatingHoursByDay))
                ) && 
                (
                    this.HandlingTime == input.HandlingTime ||
                    (this.HandlingTime != null &&
                    this.HandlingTime.Equals(input.HandlingTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContactDetails != null)
                    hashCode = hashCode * 59 + this.ContactDetails.GetHashCode();
                if (this.ThroughputConfig != null)
                    hashCode = hashCode * 59 + this.ThroughputConfig.GetHashCode();
                if (this.OperatingHoursByDay != null)
                    hashCode = hashCode * 59 + this.OperatingHoursByDay.GetHashCode();
                if (this.HandlingTime != null)
                    hashCode = hashCode * 59 + this.HandlingTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
