/* 
 * Selling Partner API for Supply Sources
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SupplySources
{
    /// <summary>
    /// The delivery channel of a supply source.
    /// </summary>
    [DataContract]
    public partial class DeliveryChannel :  IEquatable<DeliveryChannel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryChannel" /> class.
        /// </summary>
        /// <param name="isSupported">isSupported.</param>
        /// <param name="operationalConfiguration">operationalConfiguration.</param>
        public DeliveryChannel(bool? isSupported = default(bool?), OperationalConfiguration operationalConfiguration = default(OperationalConfiguration))
        {
            this.IsSupported = isSupported;
            this.OperationalConfiguration = operationalConfiguration;
        }
        
        /// <summary>
        /// Gets or Sets IsSupported
        /// </summary>
        [DataMember(Name="isSupported", EmitDefaultValue=false)]
        public bool? IsSupported { get; set; }

        /// <summary>
        /// Gets or Sets OperationalConfiguration
        /// </summary>
        [DataMember(Name="operationalConfiguration", EmitDefaultValue=false)]
        public OperationalConfiguration OperationalConfiguration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeliveryChannel {\n");
            sb.Append("  IsSupported: ").Append(IsSupported).Append("\n");
            sb.Append("  OperationalConfiguration: ").Append(OperationalConfiguration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeliveryChannel);
        }

        /// <summary>
        /// Returns true if DeliveryChannel instances are equal
        /// </summary>
        /// <param name="input">Instance of DeliveryChannel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeliveryChannel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsSupported == input.IsSupported ||
                    (this.IsSupported != null &&
                    this.IsSupported.Equals(input.IsSupported))
                ) && 
                (
                    this.OperationalConfiguration == input.OperationalConfiguration ||
                    (this.OperationalConfiguration != null &&
                    this.OperationalConfiguration.Equals(input.OperationalConfiguration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsSupported != null)
                    hashCode = hashCode * 59 + this.IsSupported.GetHashCode();
                if (this.OperationalConfiguration != null)
                    hashCode = hashCode * 59 + this.OperationalConfiguration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
