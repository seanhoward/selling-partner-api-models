/* 
 * Selling Partner API for Supply Sources
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SupplySources
{
    /// <summary>
    /// The paginated list of supply sources.
    /// </summary>
    [DataContract]
    public partial class GetSupplySourcesResponse :  IEquatable<GetSupplySourcesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSupplySourcesResponse" /> class.
        /// </summary>
        /// <param name="supplySources">supplySources.</param>
        /// <param name="nextPageToken">If present, use this pagination token to retrieve the next page of supply sources..</param>
        public GetSupplySourcesResponse(SupplySourceList supplySources = default(SupplySourceList), string nextPageToken = default(string))
        {
            this.SupplySources = supplySources;
            this.NextPageToken = nextPageToken;
        }
        
        /// <summary>
        /// Gets or Sets SupplySources
        /// </summary>
        [DataMember(Name="supplySources", EmitDefaultValue=false)]
        public SupplySourceList SupplySources { get; set; }

        /// <summary>
        /// If present, use this pagination token to retrieve the next page of supply sources.
        /// </summary>
        /// <value>If present, use this pagination token to retrieve the next page of supply sources.</value>
        [DataMember(Name="nextPageToken", EmitDefaultValue=false)]
        public string NextPageToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetSupplySourcesResponse {\n");
            sb.Append("  SupplySources: ").Append(SupplySources).Append("\n");
            sb.Append("  NextPageToken: ").Append(NextPageToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSupplySourcesResponse);
        }

        /// <summary>
        /// Returns true if GetSupplySourcesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSupplySourcesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSupplySourcesResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SupplySources == input.SupplySources ||
                    (this.SupplySources != null &&
                    this.SupplySources.Equals(input.SupplySources))
                ) && 
                (
                    this.NextPageToken == input.NextPageToken ||
                    (this.NextPageToken != null &&
                    this.NextPageToken.Equals(input.NextPageToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SupplySources != null)
                    hashCode = hashCode * 59 + this.SupplySources.GetHashCode();
                if (this.NextPageToken != null)
                    hashCode = hashCode * 59 + this.NextPageToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
