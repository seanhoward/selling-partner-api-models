/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentOutbound
{
    /// <summary>
    /// Item information for a shipment in a fulfillment order.
    /// </summary>
    [DataContract]
    public partial class FulfillmentShipmentItem : IEquatable<FulfillmentShipmentItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentShipmentItem" /> class.
        /// </summary>
        [JsonConstructor]
        protected FulfillmentShipmentItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentShipmentItem" /> class.
        /// </summary>
        /// <param name="sellerSku">The seller SKU of the item. (required).</param>
        /// <param name="sellerFulfillmentOrderItemId">The fulfillment order item identifier that the seller created and submitted with a call to the &#x60;createFulfillmentOrder&#x60; operation. (required).</param>
        /// <param name="quantity">quantity (required).</param>
        /// <param name="packageNumber">An identifier for the package that contains the item quantity..</param>
        /// <param name="serialNumber">The serial number of the shipped item..</param>
        /// <param name="manufacturerLotCodes">The manufacturer lot codes of the shipped items..</param>
        public FulfillmentShipmentItem(string sellerSku = default, string sellerFulfillmentOrderItemId = default, int? quantity = default, int? packageNumber = default, string serialNumber = default, StringList manufacturerLotCodes = default)
        {
            // to ensure "sellerSku" is required (not null)
            if (sellerSku == null)
            {
                throw new InvalidDataException("sellerSku is a required property for FulfillmentShipmentItem and cannot be null");
            }
            else
            {
                this.SellerSku = sellerSku;
            }
            // to ensure "sellerFulfillmentOrderItemId" is required (not null)
            if (sellerFulfillmentOrderItemId == null)
            {
                throw new InvalidDataException("sellerFulfillmentOrderItemId is a required property for FulfillmentShipmentItem and cannot be null");
            }
            else
            {
                this.SellerFulfillmentOrderItemId = sellerFulfillmentOrderItemId;
            }
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for FulfillmentShipmentItem and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            this.PackageNumber = packageNumber;
            this.SerialNumber = serialNumber;
            this.ManufacturerLotCodes = manufacturerLotCodes;
        }

        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        /// <value>The seller SKU of the item.</value>
        [DataMember(Name = "sellerSku", EmitDefaultValue = false)]
        public string SellerSku { get; set; }

        /// <summary>
        /// The fulfillment order item identifier that the seller created and submitted with a call to the &#x60;createFulfillmentOrder&#x60; operation.
        /// </summary>
        /// <value>The fulfillment order item identifier that the seller created and submitted with a call to the &#x60;createFulfillmentOrder&#x60; operation.</value>
        [DataMember(Name = "sellerFulfillmentOrderItemId", EmitDefaultValue = false)]
        public string SellerFulfillmentOrderItemId { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// An identifier for the package that contains the item quantity.
        /// </summary>
        /// <value>An identifier for the package that contains the item quantity.</value>
        [DataMember(Name = "packageNumber", EmitDefaultValue = false)]
        public int? PackageNumber { get; set; }

        /// <summary>
        /// The serial number of the shipped item.
        /// </summary>
        /// <value>The serial number of the shipped item.</value>
        [DataMember(Name = "serialNumber", EmitDefaultValue = false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// The manufacturer lot codes of the shipped items.
        /// </summary>
        /// <value>The manufacturer lot codes of the shipped items.</value>
        [DataMember(Name = "manufacturerLotCodes", EmitDefaultValue = false)]
        public StringList ManufacturerLotCodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentShipmentItem {\n");
            sb.Append("  SellerSku: ").Append(SellerSku).Append("\n");
            sb.Append("  SellerFulfillmentOrderItemId: ").Append(SellerFulfillmentOrderItemId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  PackageNumber: ").Append(PackageNumber).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  ManufacturerLotCodes: ").Append(ManufacturerLotCodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentShipmentItem);
        }

        /// <summary>
        /// Returns true if FulfillmentShipmentItem instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentShipmentItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentShipmentItem input)
        {
            if (input == null)
                return false;

            return
                (
                    this.SellerSku == input.SellerSku ||
                    (this.SellerSku != null &&
                    this.SellerSku.Equals(input.SellerSku))
                ) &&
                (
                    this.SellerFulfillmentOrderItemId == input.SellerFulfillmentOrderItemId ||
                    (this.SellerFulfillmentOrderItemId != null &&
                    this.SellerFulfillmentOrderItemId.Equals(input.SellerFulfillmentOrderItemId))
                ) &&
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) &&
                (
                    this.PackageNumber == input.PackageNumber ||
                    (this.PackageNumber != null &&
                    this.PackageNumber.Equals(input.PackageNumber))
                ) &&
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) &&
                (
                    this.ManufacturerLotCodes == input.ManufacturerLotCodes ||
                    (this.ManufacturerLotCodes != null &&
                    this.ManufacturerLotCodes.Equals(input.ManufacturerLotCodes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SellerSku != null)
                    hashCode = hashCode * 59 + this.SellerSku.GetHashCode();
                if (this.SellerFulfillmentOrderItemId != null)
                    hashCode = hashCode * 59 + this.SellerFulfillmentOrderItemId.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.PackageNumber != null)
                    hashCode = hashCode * 59 + this.PackageNumber.GetHashCode();
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                if (this.ManufacturerLotCodes != null)
                    hashCode = hashCode * 59 + this.ManufacturerLotCodes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
