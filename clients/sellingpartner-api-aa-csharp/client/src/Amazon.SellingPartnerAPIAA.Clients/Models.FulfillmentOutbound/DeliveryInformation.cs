/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentOutbound
{
    /// <summary>
    /// The delivery information for the package. This information is available after the package is delivered.
    /// </summary>
    [DataContract]
    public partial class DeliveryInformation :  IEquatable<DeliveryInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryInformation" /> class.
        /// </summary>
        /// <param name="deliveryDocumentList">All of the delivery documents for a package..</param>
        /// <param name="dropOffLocation">The drop off location for a package..</param>
        public DeliveryInformation(DeliveryDocumentList deliveryDocumentList = default(DeliveryDocumentList), DropOffLocation dropOffLocation = default(DropOffLocation))
        {
            this.DeliveryDocumentList = deliveryDocumentList;
            this.DropOffLocation = dropOffLocation;
        }
        
        /// <summary>
        /// All of the delivery documents for a package.
        /// </summary>
        /// <value>All of the delivery documents for a package.</value>
        [DataMember(Name="deliveryDocumentList", EmitDefaultValue=false)]
        public DeliveryDocumentList DeliveryDocumentList { get; set; }

        /// <summary>
        /// The drop off location for a package.
        /// </summary>
        /// <value>The drop off location for a package.</value>
        [DataMember(Name="dropOffLocation", EmitDefaultValue=false)]
        public DropOffLocation DropOffLocation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeliveryInformation {\n");
            sb.Append("  DeliveryDocumentList: ").Append(DeliveryDocumentList).Append("\n");
            sb.Append("  DropOffLocation: ").Append(DropOffLocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeliveryInformation);
        }

        /// <summary>
        /// Returns true if DeliveryInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of DeliveryInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeliveryInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeliveryDocumentList == input.DeliveryDocumentList ||
                    (this.DeliveryDocumentList != null &&
                    this.DeliveryDocumentList.Equals(input.DeliveryDocumentList))
                ) && 
                (
                    this.DropOffLocation == input.DropOffLocation ||
                    (this.DropOffLocation != null &&
                    this.DropOffLocation.Equals(input.DropOffLocation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeliveryDocumentList != null)
                    hashCode = hashCode * 59 + this.DeliveryDocumentList.GetHashCode();
                if (this.DropOffLocation != null)
                    hashCode = hashCode * 59 + this.DropOffLocation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
