/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentOutbound
{
    /// <summary>
    /// An item that Amazon accepted for return.
    /// </summary>
    [DataContract]
    public partial class CreateReturnItem : IEquatable<CreateReturnItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateReturnItem" /> class.
        /// </summary>
        [JsonConstructor]
        protected CreateReturnItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateReturnItem" /> class.
        /// </summary>
        /// <param name="sellerReturnItemId">An identifier assigned by the seller to the return item. (required).</param>
        /// <param name="sellerFulfillmentOrderItemId">The identifier assigned to the item by the seller when the fulfillment order was created. (required).</param>
        /// <param name="amazonShipmentId">The identifier for the shipment that is associated with the return item. (required).</param>
        /// <param name="returnReasonCode">The return reason code assigned to the return item by the seller. (required).</param>
        /// <param name="returnComment">An optional comment about the return item..</param>
        public CreateReturnItem(string sellerReturnItemId = default, string sellerFulfillmentOrderItemId = default, string amazonShipmentId = default, string returnReasonCode = default, string returnComment = default)
        {
            // to ensure "sellerReturnItemId" is required (not null)
            if (sellerReturnItemId == null)
            {
                throw new InvalidDataException("sellerReturnItemId is a required property for CreateReturnItem and cannot be null");
            }
            else
            {
                this.SellerReturnItemId = sellerReturnItemId;
            }
            // to ensure "sellerFulfillmentOrderItemId" is required (not null)
            if (sellerFulfillmentOrderItemId == null)
            {
                throw new InvalidDataException("sellerFulfillmentOrderItemId is a required property for CreateReturnItem and cannot be null");
            }
            else
            {
                this.SellerFulfillmentOrderItemId = sellerFulfillmentOrderItemId;
            }
            // to ensure "amazonShipmentId" is required (not null)
            if (amazonShipmentId == null)
            {
                throw new InvalidDataException("amazonShipmentId is a required property for CreateReturnItem and cannot be null");
            }
            else
            {
                this.AmazonShipmentId = amazonShipmentId;
            }
            // to ensure "returnReasonCode" is required (not null)
            if (returnReasonCode == null)
            {
                throw new InvalidDataException("returnReasonCode is a required property for CreateReturnItem and cannot be null");
            }
            else
            {
                this.ReturnReasonCode = returnReasonCode;
            }
            this.ReturnComment = returnComment;
        }

        /// <summary>
        /// An identifier assigned by the seller to the return item.
        /// </summary>
        /// <value>An identifier assigned by the seller to the return item.</value>
        [DataMember(Name = "sellerReturnItemId", EmitDefaultValue = false)]
        public string SellerReturnItemId { get; set; }

        /// <summary>
        /// The identifier assigned to the item by the seller when the fulfillment order was created.
        /// </summary>
        /// <value>The identifier assigned to the item by the seller when the fulfillment order was created.</value>
        [DataMember(Name = "sellerFulfillmentOrderItemId", EmitDefaultValue = false)]
        public string SellerFulfillmentOrderItemId { get; set; }

        /// <summary>
        /// The identifier for the shipment that is associated with the return item.
        /// </summary>
        /// <value>The identifier for the shipment that is associated with the return item.</value>
        [DataMember(Name = "amazonShipmentId", EmitDefaultValue = false)]
        public string AmazonShipmentId { get; set; }

        /// <summary>
        /// The return reason code assigned to the return item by the seller.
        /// </summary>
        /// <value>The return reason code assigned to the return item by the seller.</value>
        [DataMember(Name = "returnReasonCode", EmitDefaultValue = false)]
        public string ReturnReasonCode { get; set; }

        /// <summary>
        /// An optional comment about the return item.
        /// </summary>
        /// <value>An optional comment about the return item.</value>
        [DataMember(Name = "returnComment", EmitDefaultValue = false)]
        public string ReturnComment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateReturnItem {\n");
            sb.Append("  SellerReturnItemId: ").Append(SellerReturnItemId).Append("\n");
            sb.Append("  SellerFulfillmentOrderItemId: ").Append(SellerFulfillmentOrderItemId).Append("\n");
            sb.Append("  AmazonShipmentId: ").Append(AmazonShipmentId).Append("\n");
            sb.Append("  ReturnReasonCode: ").Append(ReturnReasonCode).Append("\n");
            sb.Append("  ReturnComment: ").Append(ReturnComment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateReturnItem);
        }

        /// <summary>
        /// Returns true if CreateReturnItem instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateReturnItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateReturnItem input)
        {
            if (input == null)
                return false;

            return
                (
                    this.SellerReturnItemId == input.SellerReturnItemId ||
                    (this.SellerReturnItemId != null &&
                    this.SellerReturnItemId.Equals(input.SellerReturnItemId))
                ) &&
                (
                    this.SellerFulfillmentOrderItemId == input.SellerFulfillmentOrderItemId ||
                    (this.SellerFulfillmentOrderItemId != null &&
                    this.SellerFulfillmentOrderItemId.Equals(input.SellerFulfillmentOrderItemId))
                ) &&
                (
                    this.AmazonShipmentId == input.AmazonShipmentId ||
                    (this.AmazonShipmentId != null &&
                    this.AmazonShipmentId.Equals(input.AmazonShipmentId))
                ) &&
                (
                    this.ReturnReasonCode == input.ReturnReasonCode ||
                    (this.ReturnReasonCode != null &&
                    this.ReturnReasonCode.Equals(input.ReturnReasonCode))
                ) &&
                (
                    this.ReturnComment == input.ReturnComment ||
                    (this.ReturnComment != null &&
                    this.ReturnComment.Equals(input.ReturnComment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SellerReturnItemId != null)
                    hashCode = hashCode * 59 + this.SellerReturnItemId.GetHashCode();
                if (this.SellerFulfillmentOrderItemId != null)
                    hashCode = hashCode * 59 + this.SellerFulfillmentOrderItemId.GetHashCode();
                if (this.AmazonShipmentId != null)
                    hashCode = hashCode * 59 + this.AmazonShipmentId.GetHashCode();
                if (this.ReturnReasonCode != null)
                    hashCode = hashCode * 59 + this.ReturnReasonCode.GetHashCode();
                if (this.ReturnComment != null)
                    hashCode = hashCode * 59 + this.ReturnComment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SellerReturnItemId (string) maxLength
            if (this.SellerReturnItemId != null && this.SellerReturnItemId.Length > 80)
            {
                yield return new ValidationResult("Invalid value for SellerReturnItemId, length must be less than 80.", new[] { "SellerReturnItemId" });
            }

            // ReturnComment (string) maxLength
            if (this.ReturnComment != null && this.ReturnComment.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for ReturnComment, length must be less than 1000.", new[] { "ReturnComment" });
            }

            yield break;
        }
    }

}
