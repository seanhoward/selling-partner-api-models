/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentOutbound
{
    /// <summary>
    /// Product identifier input that locates a product for MCF.
    /// </summary>
    [DataContract]
    public partial class ProductIdentifier :  IEquatable<ProductIdentifier>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductIdentifier" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductIdentifier() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductIdentifier" /> class.
        /// </summary>
        /// <param name="merchantSku">The merchant SKU for the product. (required).</param>
        public ProductIdentifier(string merchantSku = default(string))
        {
            // to ensure "merchantSku" is required (not null)
            if (merchantSku == null)
            {
                throw new InvalidDataException("merchantSku is a required property for ProductIdentifier and cannot be null");
            }
            else
            {
                this.MerchantSku = merchantSku;
            }
        }
        
        /// <summary>
        /// The merchant SKU for the product.
        /// </summary>
        /// <value>The merchant SKU for the product.</value>
        [DataMember(Name="merchantSku", EmitDefaultValue=false)]
        public string MerchantSku { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductIdentifier {\n");
            sb.Append("  MerchantSku: ").Append(MerchantSku).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductIdentifier);
        }

        /// <summary>
        /// Returns true if ProductIdentifier instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductIdentifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductIdentifier input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MerchantSku == input.MerchantSku ||
                    (this.MerchantSku != null &&
                    this.MerchantSku.Equals(input.MerchantSku))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MerchantSku != null)
                    hashCode = hashCode * 59 + this.MerchantSku.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MerchantSku (string) maxLength
            if(this.MerchantSku != null && this.MerchantSku.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantSku, length must be less than 50.", new [] { "MerchantSku" });
            }

            yield break;
        }
    }

}
