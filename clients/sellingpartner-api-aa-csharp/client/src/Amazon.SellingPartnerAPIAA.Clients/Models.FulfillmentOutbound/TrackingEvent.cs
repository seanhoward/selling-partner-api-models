/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentOutbound
{
    /// <summary>
    /// Information for tracking package deliveries.
    /// </summary>
    [DataContract]
    public partial class TrackingEvent :  IEquatable<TrackingEvent>, IValidatableObject
    {
        /// <summary>
        /// The event code for the delivery event.
        /// </summary>
        /// <value>The event code for the delivery event.</value>
        [DataMember(Name="eventCode", EmitDefaultValue=false)]
        public EventCode EventCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrackingEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingEvent" /> class.
        /// </summary>
        /// <param name="eventDate">The date and time that the delivery event took place. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (required).</param>
        /// <param name="eventAddress">The city where the delivery event took place. (required).</param>
        /// <param name="eventCode">The event code for the delivery event. (required).</param>
        /// <param name="eventDescription">A description for the corresponding event code. (required).</param>
        public TrackingEvent(DateTime? eventDate = default(DateTime?), TrackingAddress eventAddress = default(TrackingAddress), EventCode eventCode = default(EventCode), string eventDescription = default(string))
        {
            // to ensure "eventDate" is required (not null)
            if (eventDate == null)
            {
                throw new InvalidDataException("eventDate is a required property for TrackingEvent and cannot be null");
            }
            else
            {
                this.EventDate = eventDate;
            }
            // to ensure "eventAddress" is required (not null)
            if (eventAddress == null)
            {
                throw new InvalidDataException("eventAddress is a required property for TrackingEvent and cannot be null");
            }
            else
            {
                this.EventAddress = eventAddress;
            }
            // to ensure "eventCode" is required (not null)
            if (eventCode == null)
            {
                throw new InvalidDataException("eventCode is a required property for TrackingEvent and cannot be null");
            }
            else
            {
                this.EventCode = eventCode;
            }
            // to ensure "eventDescription" is required (not null)
            if (eventDescription == null)
            {
                throw new InvalidDataException("eventDescription is a required property for TrackingEvent and cannot be null");
            }
            else
            {
                this.EventDescription = eventDescription;
            }
        }
        
        /// <summary>
        /// The date and time that the delivery event took place. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format.
        /// </summary>
        /// <value>The date and time that the delivery event took place. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format.</value>
        [DataMember(Name="eventDate", EmitDefaultValue=false)]
        public DateTime? EventDate { get; set; }

        /// <summary>
        /// The city where the delivery event took place.
        /// </summary>
        /// <value>The city where the delivery event took place.</value>
        [DataMember(Name="eventAddress", EmitDefaultValue=false)]
        public TrackingAddress EventAddress { get; set; }


        /// <summary>
        /// A description for the corresponding event code.
        /// </summary>
        /// <value>A description for the corresponding event code.</value>
        [DataMember(Name="eventDescription", EmitDefaultValue=false)]
        public string EventDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackingEvent {\n");
            sb.Append("  EventDate: ").Append(EventDate).Append("\n");
            sb.Append("  EventAddress: ").Append(EventAddress).Append("\n");
            sb.Append("  EventCode: ").Append(EventCode).Append("\n");
            sb.Append("  EventDescription: ").Append(EventDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrackingEvent);
        }

        /// <summary>
        /// Returns true if TrackingEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of TrackingEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackingEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EventDate == input.EventDate ||
                    (this.EventDate != null &&
                    this.EventDate.Equals(input.EventDate))
                ) && 
                (
                    this.EventAddress == input.EventAddress ||
                    (this.EventAddress != null &&
                    this.EventAddress.Equals(input.EventAddress))
                ) && 
                (
                    this.EventCode == input.EventCode ||
                    (this.EventCode != null &&
                    this.EventCode.Equals(input.EventCode))
                ) && 
                (
                    this.EventDescription == input.EventDescription ||
                    (this.EventDescription != null &&
                    this.EventDescription.Equals(input.EventDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventDate != null)
                    hashCode = hashCode * 59 + this.EventDate.GetHashCode();
                if (this.EventAddress != null)
                    hashCode = hashCode * 59 + this.EventAddress.GetHashCode();
                if (this.EventCode != null)
                    hashCode = hashCode * 59 + this.EventCode.GetHashCode();
                if (this.EventDescription != null)
                    hashCode = hashCode * 59 + this.EventDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
