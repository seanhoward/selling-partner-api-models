/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentOutbound
{
    /// <summary>
    /// The request body schema for the &#x60;createFulfillmentOrder&#x60; operation.
    /// </summary>
    [DataContract]
    public partial class CreateFulfillmentOrderRequest :  IEquatable<CreateFulfillmentOrderRequest>, IValidatableObject
    {
        /// <summary>
        /// The shipping method for the fulfillment order. When this value is &#x60;ScheduledDelivery&#x60;, choose Ship for the &#x60;fulfillmentAction&#x60;. Hold is not a valid &#x60;fulfillmentAction&#x60; value when the &#x60;shippingSpeedCategory&#x60; value is &#x60;ScheduledDelivery&#x60;. Note: Shipping method service level agreements vary by marketplace. Sellers can refer to [Seller Central]( https://developer-docs.amazon.com/sp-api/docs/seller-central-urls) for shipping method service-level agreements and multi-channel fulfillment fees.
        /// </summary>
        /// <value>The shipping method for the fulfillment order. When this value is &#x60;ScheduledDelivery&#x60;, choose Ship for the &#x60;fulfillmentAction&#x60;. Hold is not a valid &#x60;fulfillmentAction&#x60; value when the &#x60;shippingSpeedCategory&#x60; value is &#x60;ScheduledDelivery&#x60;. Note: Shipping method service level agreements vary by marketplace. Sellers can refer to [Seller Central]( https://developer-docs.amazon.com/sp-api/docs/seller-central-urls) for shipping method service-level agreements and multi-channel fulfillment fees.</value>
        [DataMember(Name="shippingSpeedCategory", EmitDefaultValue=false)]
        public ShippingSpeedCategory ShippingSpeedCategory { get; set; }
        /// <summary>
        /// Gets or Sets FulfillmentAction
        /// </summary>
        [DataMember(Name="fulfillmentAction", EmitDefaultValue=false)]
        public FulfillmentAction? FulfillmentAction { get; set; }
        /// <summary>
        /// Gets or Sets FulfillmentPolicy
        /// </summary>
        [DataMember(Name="fulfillmentPolicy", EmitDefaultValue=false)]
        public FulfillmentPolicy? FulfillmentPolicy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFulfillmentOrderRequest" /> class.
        /// </summary>
        [JsonConstructor]
        protected CreateFulfillmentOrderRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFulfillmentOrderRequest" /> class.
        /// </summary>
        /// <param name="marketplaceId">The marketplace the fulfillment order is placed against..</param>
        /// <param name="sellerFulfillmentOrderId">A fulfillment order identifier that the seller creates to track their fulfillment order. The &#x60;SellerFulfillmentOrderId&#x60; must be unique for each fulfillment order that a seller creates. If the seller&#39;s system already creates unique order identifiers, then these might be good values for them to use. (required).</param>
        /// <param name="displayableOrderId">A fulfillment order identifier that the seller creates. This value displays as the order identifier in recipient-facing materials such as the outbound shipment packing slip. The value of &#x60;DisplayableOrderId&#x60; should match the order identifier that the seller provides to the recipient. The seller can use the &#x60;SellerFulfillmentOrderId&#x60; for this value or they can specify an alternate value if they want the recipient to reference an alternate order identifier.  The value must be an alpha-numeric or ISO 8859-1 compliant string from one to 40 characters in length. Cannot contain two spaces in a row. Leading and trailing white space is removed. (required).</param>
        /// <param name="displayableOrderDate">The date and time of the fulfillment order. Displays as the order date in recipient-facing materials such as the outbound shipment packing slip. (required).</param>
        /// <param name="displayableOrderComment">Order-specific text that appears in recipient-facing materials such as the outbound shipment packing slip. (required).</param>
        /// <param name="shippingSpeedCategory">The shipping method for the fulfillment order. When this value is &#x60;ScheduledDelivery&#x60;, choose Ship for the &#x60;fulfillmentAction&#x60;. Hold is not a valid &#x60;fulfillmentAction&#x60; value when the &#x60;shippingSpeedCategory&#x60; value is &#x60;ScheduledDelivery&#x60;. Note: Shipping method service level agreements vary by marketplace. Sellers can refer to [Seller Central]( https://developer-docs.amazon.com/sp-api/docs/seller-central-urls) for shipping method service-level agreements and multi-channel fulfillment fees. (required).</param>
        /// <param name="deliveryWindow">deliveryWindow.</param>
        /// <param name="destinationAddress">The destination address for the fulfillment order. (required).</param>
        /// <param name="deliveryPreferences">The delivery preferences applied to the destination address. These preferences are applied when possible and are best effort. For eligible orders, the default delivery preference is to leave the package unattended at the front door. This feature is currently supported only in the JP marketplace and not applicable for other marketplaces. For eligible orders, the default delivery preference will be to deliver the package unattended at the front door, unless you specify otherwise..</param>
        /// <param name="fulfillmentAction">fulfillmentAction.</param>
        /// <param name="fulfillmentPolicy">fulfillmentPolicy.</param>
        /// <param name="codSettings">codSettings.</param>
        /// <param name="shipFromCountryCode">The two-character country code for the country from which the fulfillment order ships. Must be in ISO 3166-1 alpha-2 format..</param>
        /// <param name="notificationEmails">notificationEmails.</param>
        /// <param name="featureConstraints">A list of features and their fulfillment policies to apply to the order..</param>
        /// <param name="items">A list of items to include in the fulfillment order preview, including quantity. Maximum of 100 line items with a maximum of 250 units per order. (required).</param>
        /// <param name="paymentInformation">An array of various payment attributes related to this fulfillment order. This property is required if the order is placed against the India marketplace..</param>
        public CreateFulfillmentOrderRequest(string marketplaceId = default, string sellerFulfillmentOrderId = default, string displayableOrderId = default, DateTime? displayableOrderDate = default, string displayableOrderComment = default, ShippingSpeedCategory shippingSpeedCategory = default, DeliveryWindow deliveryWindow = default, Address destinationAddress = default, DeliveryPreferences deliveryPreferences = default, FulfillmentAction? fulfillmentAction = default, FulfillmentPolicy? fulfillmentPolicy = default, CODSettings codSettings = default, string shipFromCountryCode = default, NotificationEmailList notificationEmails = default, List<FeatureSettings> featureConstraints = default, CreateFulfillmentOrderItemList items = default, PaymentInformationList paymentInformation = default)
        {
            // to ensure "sellerFulfillmentOrderId" is required (not null)
            if (sellerFulfillmentOrderId == null)
            {
                throw new InvalidDataException("sellerFulfillmentOrderId is a required property for CreateFulfillmentOrderRequest and cannot be null");
            }
            else
            {
                this.SellerFulfillmentOrderId = sellerFulfillmentOrderId;
            }
            // to ensure "displayableOrderId" is required (not null)
            if (displayableOrderId == null)
            {
                throw new InvalidDataException("displayableOrderId is a required property for CreateFulfillmentOrderRequest and cannot be null");
            }
            else
            {
                this.DisplayableOrderId = displayableOrderId;
            }
            // to ensure "displayableOrderDate" is required (not null)
            if (displayableOrderDate == null)
            {
                throw new InvalidDataException("displayableOrderDate is a required property for CreateFulfillmentOrderRequest and cannot be null");
            }
            else
            {
                this.DisplayableOrderDate = displayableOrderDate;
            }
            // to ensure "displayableOrderComment" is required (not null)
            if (displayableOrderComment == null)
            {
                throw new InvalidDataException("displayableOrderComment is a required property for CreateFulfillmentOrderRequest and cannot be null");
            }
            else
            {
                this.DisplayableOrderComment = displayableOrderComment;
            }
            // to ensure "shippingSpeedCategory" is required (not null)
            if (shippingSpeedCategory == null)
            {
                throw new InvalidDataException("shippingSpeedCategory is a required property for CreateFulfillmentOrderRequest and cannot be null");
            }
            else
            {
                this.ShippingSpeedCategory = shippingSpeedCategory;
            }
            // to ensure "destinationAddress" is required (not null)
            if (destinationAddress == null)
            {
                throw new InvalidDataException("destinationAddress is a required property for CreateFulfillmentOrderRequest and cannot be null");
            }
            else
            {
                this.DestinationAddress = destinationAddress;
            }
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new InvalidDataException("items is a required property for CreateFulfillmentOrderRequest and cannot be null");
            }
            else
            {
                this.Items = items;
            }
            this.MarketplaceId = marketplaceId;
            this.DeliveryWindow = deliveryWindow;
            this.DeliveryPreferences = deliveryPreferences;
            this.FulfillmentAction = fulfillmentAction;
            this.FulfillmentPolicy = fulfillmentPolicy;
            this.CodSettings = codSettings;
            this.ShipFromCountryCode = shipFromCountryCode;
            this.NotificationEmails = notificationEmails;
            this.FeatureConstraints = featureConstraints;
            this.PaymentInformation = paymentInformation;
        }
        
        /// <summary>
        /// The marketplace the fulfillment order is placed against.
        /// </summary>
        /// <value>The marketplace the fulfillment order is placed against.</value>
        [DataMember(Name="marketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// A fulfillment order identifier that the seller creates to track their fulfillment order. The &#x60;SellerFulfillmentOrderId&#x60; must be unique for each fulfillment order that a seller creates. If the seller&#39;s system already creates unique order identifiers, then these might be good values for them to use.
        /// </summary>
        /// <value>A fulfillment order identifier that the seller creates to track their fulfillment order. The &#x60;SellerFulfillmentOrderId&#x60; must be unique for each fulfillment order that a seller creates. If the seller&#39;s system already creates unique order identifiers, then these might be good values for them to use.</value>
        [DataMember(Name="sellerFulfillmentOrderId", EmitDefaultValue=false)]
        public string SellerFulfillmentOrderId { get; set; }

        /// <summary>
        /// A fulfillment order identifier that the seller creates. This value displays as the order identifier in recipient-facing materials such as the outbound shipment packing slip. The value of &#x60;DisplayableOrderId&#x60; should match the order identifier that the seller provides to the recipient. The seller can use the &#x60;SellerFulfillmentOrderId&#x60; for this value or they can specify an alternate value if they want the recipient to reference an alternate order identifier.  The value must be an alpha-numeric or ISO 8859-1 compliant string from one to 40 characters in length. Cannot contain two spaces in a row. Leading and trailing white space is removed.
        /// </summary>
        /// <value>A fulfillment order identifier that the seller creates. This value displays as the order identifier in recipient-facing materials such as the outbound shipment packing slip. The value of &#x60;DisplayableOrderId&#x60; should match the order identifier that the seller provides to the recipient. The seller can use the &#x60;SellerFulfillmentOrderId&#x60; for this value or they can specify an alternate value if they want the recipient to reference an alternate order identifier.  The value must be an alpha-numeric or ISO 8859-1 compliant string from one to 40 characters in length. Cannot contain two spaces in a row. Leading and trailing white space is removed.</value>
        [DataMember(Name="displayableOrderId", EmitDefaultValue=false)]
        public string DisplayableOrderId { get; set; }

        /// <summary>
        /// The date and time of the fulfillment order. Displays as the order date in recipient-facing materials such as the outbound shipment packing slip.
        /// </summary>
        /// <value>The date and time of the fulfillment order. Displays as the order date in recipient-facing materials such as the outbound shipment packing slip.</value>
        [DataMember(Name="displayableOrderDate", EmitDefaultValue=false)]
        public DateTime? DisplayableOrderDate { get; set; }

        /// <summary>
        /// Order-specific text that appears in recipient-facing materials such as the outbound shipment packing slip.
        /// </summary>
        /// <value>Order-specific text that appears in recipient-facing materials such as the outbound shipment packing slip.</value>
        [DataMember(Name="displayableOrderComment", EmitDefaultValue=false)]
        public string DisplayableOrderComment { get; set; }


        /// <summary>
        /// Gets or Sets DeliveryWindow
        /// </summary>
        [DataMember(Name="deliveryWindow", EmitDefaultValue=false)]
        public DeliveryWindow DeliveryWindow { get; set; }

        /// <summary>
        /// The destination address for the fulfillment order.
        /// </summary>
        /// <value>The destination address for the fulfillment order.</value>
        [DataMember(Name="destinationAddress", EmitDefaultValue=false)]
        public Address DestinationAddress { get; set; }

        /// <summary>
        /// The delivery preferences applied to the destination address. These preferences are applied when possible and are best effort. For eligible orders, the default delivery preference is to leave the package unattended at the front door. This feature is currently supported only in the JP marketplace and not applicable for other marketplaces. For eligible orders, the default delivery preference will be to deliver the package unattended at the front door, unless you specify otherwise.
        /// </summary>
        /// <value>The delivery preferences applied to the destination address. These preferences are applied when possible and are best effort. For eligible orders, the default delivery preference is to leave the package unattended at the front door. This feature is currently supported only in the JP marketplace and not applicable for other marketplaces. For eligible orders, the default delivery preference will be to deliver the package unattended at the front door, unless you specify otherwise.</value>
        [DataMember(Name="deliveryPreferences", EmitDefaultValue=false)]
        public DeliveryPreferences DeliveryPreferences { get; set; }



        /// <summary>
        /// Gets or Sets CodSettings
        /// </summary>
        [DataMember(Name="codSettings", EmitDefaultValue=false)]
        public CODSettings CodSettings { get; set; }

        /// <summary>
        /// The two-character country code for the country from which the fulfillment order ships. Must be in ISO 3166-1 alpha-2 format.
        /// </summary>
        /// <value>The two-character country code for the country from which the fulfillment order ships. Must be in ISO 3166-1 alpha-2 format.</value>
        [DataMember(Name="shipFromCountryCode", EmitDefaultValue=false)]
        public string ShipFromCountryCode { get; set; }

        /// <summary>
        /// Gets or Sets NotificationEmails
        /// </summary>
        [DataMember(Name="notificationEmails", EmitDefaultValue=false)]
        public NotificationEmailList NotificationEmails { get; set; }

        /// <summary>
        /// A list of features and their fulfillment policies to apply to the order.
        /// </summary>
        /// <value>A list of features and their fulfillment policies to apply to the order.</value>
        [DataMember(Name="featureConstraints", EmitDefaultValue=false)]
        public List<FeatureSettings> FeatureConstraints { get; set; }

        /// <summary>
        /// A list of items to include in the fulfillment order preview, including quantity. Maximum of 100 line items with a maximum of 250 units per order.
        /// </summary>
        /// <value>A list of items to include in the fulfillment order preview, including quantity. Maximum of 100 line items with a maximum of 250 units per order.</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public CreateFulfillmentOrderItemList Items { get; set; }

        /// <summary>
        /// An array of various payment attributes related to this fulfillment order. This property is required if the order is placed against the India marketplace.
        /// </summary>
        /// <value>An array of various payment attributes related to this fulfillment order. This property is required if the order is placed against the India marketplace.</value>
        [DataMember(Name="paymentInformation", EmitDefaultValue=false)]
        public PaymentInformationList PaymentInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateFulfillmentOrderRequest {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  SellerFulfillmentOrderId: ").Append(SellerFulfillmentOrderId).Append("\n");
            sb.Append("  DisplayableOrderId: ").Append(DisplayableOrderId).Append("\n");
            sb.Append("  DisplayableOrderDate: ").Append(DisplayableOrderDate).Append("\n");
            sb.Append("  DisplayableOrderComment: ").Append(DisplayableOrderComment).Append("\n");
            sb.Append("  ShippingSpeedCategory: ").Append(ShippingSpeedCategory).Append("\n");
            sb.Append("  DeliveryWindow: ").Append(DeliveryWindow).Append("\n");
            sb.Append("  DestinationAddress: ").Append(DestinationAddress).Append("\n");
            sb.Append("  DeliveryPreferences: ").Append(DeliveryPreferences).Append("\n");
            sb.Append("  FulfillmentAction: ").Append(FulfillmentAction).Append("\n");
            sb.Append("  FulfillmentPolicy: ").Append(FulfillmentPolicy).Append("\n");
            sb.Append("  CodSettings: ").Append(CodSettings).Append("\n");
            sb.Append("  ShipFromCountryCode: ").Append(ShipFromCountryCode).Append("\n");
            sb.Append("  NotificationEmails: ").Append(NotificationEmails).Append("\n");
            sb.Append("  FeatureConstraints: ").Append(FeatureConstraints).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  PaymentInformation: ").Append(PaymentInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateFulfillmentOrderRequest);
        }

        /// <summary>
        /// Returns true if CreateFulfillmentOrderRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateFulfillmentOrderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateFulfillmentOrderRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) && 
                (
                    this.SellerFulfillmentOrderId == input.SellerFulfillmentOrderId ||
                    (this.SellerFulfillmentOrderId != null &&
                    this.SellerFulfillmentOrderId.Equals(input.SellerFulfillmentOrderId))
                ) && 
                (
                    this.DisplayableOrderId == input.DisplayableOrderId ||
                    (this.DisplayableOrderId != null &&
                    this.DisplayableOrderId.Equals(input.DisplayableOrderId))
                ) && 
                (
                    this.DisplayableOrderDate == input.DisplayableOrderDate ||
                    (this.DisplayableOrderDate != null &&
                    this.DisplayableOrderDate.Equals(input.DisplayableOrderDate))
                ) && 
                (
                    this.DisplayableOrderComment == input.DisplayableOrderComment ||
                    (this.DisplayableOrderComment != null &&
                    this.DisplayableOrderComment.Equals(input.DisplayableOrderComment))
                ) && 
                (
                    this.ShippingSpeedCategory == input.ShippingSpeedCategory ||
                    (this.ShippingSpeedCategory != null &&
                    this.ShippingSpeedCategory.Equals(input.ShippingSpeedCategory))
                ) && 
                (
                    this.DeliveryWindow == input.DeliveryWindow ||
                    (this.DeliveryWindow != null &&
                    this.DeliveryWindow.Equals(input.DeliveryWindow))
                ) && 
                (
                    this.DestinationAddress == input.DestinationAddress ||
                    (this.DestinationAddress != null &&
                    this.DestinationAddress.Equals(input.DestinationAddress))
                ) && 
                (
                    this.DeliveryPreferences == input.DeliveryPreferences ||
                    (this.DeliveryPreferences != null &&
                    this.DeliveryPreferences.Equals(input.DeliveryPreferences))
                ) && 
                (
                    this.FulfillmentAction == input.FulfillmentAction ||
                    (this.FulfillmentAction != null &&
                    this.FulfillmentAction.Equals(input.FulfillmentAction))
                ) && 
                (
                    this.FulfillmentPolicy == input.FulfillmentPolicy ||
                    (this.FulfillmentPolicy != null &&
                    this.FulfillmentPolicy.Equals(input.FulfillmentPolicy))
                ) && 
                (
                    this.CodSettings == input.CodSettings ||
                    (this.CodSettings != null &&
                    this.CodSettings.Equals(input.CodSettings))
                ) && 
                (
                    this.ShipFromCountryCode == input.ShipFromCountryCode ||
                    (this.ShipFromCountryCode != null &&
                    this.ShipFromCountryCode.Equals(input.ShipFromCountryCode))
                ) && 
                (
                    this.NotificationEmails == input.NotificationEmails ||
                    (this.NotificationEmails != null &&
                    this.NotificationEmails.Equals(input.NotificationEmails))
                ) && 
                (
                    this.FeatureConstraints == input.FeatureConstraints ||
                    this.FeatureConstraints != null &&
                    this.FeatureConstraints.SequenceEqual(input.FeatureConstraints)
                ) && 
                (
                    this.Items == input.Items ||
                    (this.Items != null &&
                    this.Items.Equals(input.Items))
                ) && 
                (
                    this.PaymentInformation == input.PaymentInformation ||
                    (this.PaymentInformation != null &&
                    this.PaymentInformation.Equals(input.PaymentInformation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.SellerFulfillmentOrderId != null)
                    hashCode = hashCode * 59 + this.SellerFulfillmentOrderId.GetHashCode();
                if (this.DisplayableOrderId != null)
                    hashCode = hashCode * 59 + this.DisplayableOrderId.GetHashCode();
                if (this.DisplayableOrderDate != null)
                    hashCode = hashCode * 59 + this.DisplayableOrderDate.GetHashCode();
                if (this.DisplayableOrderComment != null)
                    hashCode = hashCode * 59 + this.DisplayableOrderComment.GetHashCode();
                if (this.ShippingSpeedCategory != null)
                    hashCode = hashCode * 59 + this.ShippingSpeedCategory.GetHashCode();
                if (this.DeliveryWindow != null)
                    hashCode = hashCode * 59 + this.DeliveryWindow.GetHashCode();
                if (this.DestinationAddress != null)
                    hashCode = hashCode * 59 + this.DestinationAddress.GetHashCode();
                if (this.DeliveryPreferences != null)
                    hashCode = hashCode * 59 + this.DeliveryPreferences.GetHashCode();
                if (this.FulfillmentAction != null)
                    hashCode = hashCode * 59 + this.FulfillmentAction.GetHashCode();
                if (this.FulfillmentPolicy != null)
                    hashCode = hashCode * 59 + this.FulfillmentPolicy.GetHashCode();
                if (this.CodSettings != null)
                    hashCode = hashCode * 59 + this.CodSettings.GetHashCode();
                if (this.ShipFromCountryCode != null)
                    hashCode = hashCode * 59 + this.ShipFromCountryCode.GetHashCode();
                if (this.NotificationEmails != null)
                    hashCode = hashCode * 59 + this.NotificationEmails.GetHashCode();
                if (this.FeatureConstraints != null)
                    hashCode = hashCode * 59 + this.FeatureConstraints.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.PaymentInformation != null)
                    hashCode = hashCode * 59 + this.PaymentInformation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SellerFulfillmentOrderId (string) maxLength
            if(this.SellerFulfillmentOrderId != null && this.SellerFulfillmentOrderId.Length > 40)
            {
                yield return new ValidationResult("Invalid value for SellerFulfillmentOrderId, length must be less than 40.", new [] { "SellerFulfillmentOrderId" });
            }

            // DisplayableOrderId (string) maxLength
            if(this.DisplayableOrderId != null && this.DisplayableOrderId.Length > 40)
            {
                yield return new ValidationResult("Invalid value for DisplayableOrderId, length must be less than 40.", new [] { "DisplayableOrderId" });
            }

            // DisplayableOrderComment (string) maxLength
            if(this.DisplayableOrderComment != null && this.DisplayableOrderComment.Length > 750)
            {
                yield return new ValidationResult("Invalid value for DisplayableOrderComment, length must be less than 750.", new [] { "DisplayableOrderComment" });
            }

            yield break;
        }
    }

}
