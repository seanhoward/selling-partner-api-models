/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentOutbound
{
    /// <summary>
    /// The request body schema for the &#x60;getFulfillmentPreview&#x60; operation.
    /// </summary>
    [DataContract]
    public partial class GetFulfillmentPreviewRequest :  IEquatable<GetFulfillmentPreviewRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetFulfillmentPreviewRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetFulfillmentPreviewRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetFulfillmentPreviewRequest" /> class.
        /// </summary>
        /// <param name="marketplaceId">The marketplace the fulfillment order is placed against..</param>
        /// <param name="address">The destination address for the fulfillment order preview. (required).</param>
        /// <param name="items">Identifying information and quantity information for the items in the fulfillment order preview. Maximum of 100 line items with a maximum of 250 units per order.  (required).</param>
        /// <param name="shippingSpeedCategories">A list of shipping methods used for creating fulfillment order previews.  Possible values:  * &#x60;Standard&#x60; - Standard shipping method. * &#x60;Expedited&#x60; - Expedited shipping method. * &#x60;Priority&#x60; - Priority shipping method. * &#x60;ScheduledDelivery&#x60; - Scheduled Delivery shipping method. Note: Shipping method service level agreements vary by marketplace. Sellers should refer to the Seller Central website in their marketplace for shipping method service level agreements and fulfillment fees..</param>
        /// <param name="includeCODFulfillmentPreview">When true, returns all fulfillment order previews both for COD and not for COD. Otherwise, returns only fulfillment order previews that are not for COD..</param>
        /// <param name="includeDeliveryWindows">When true, returns the &#x60;ScheduledDeliveryInfo&#x60; response object, which contains the available delivery windows for a Scheduled Delivery. The &#x60;ScheduledDeliveryInfo&#x60; response object can only be returned for fulfillment order previews with &#x60;ShippingSpeedCategories&#x60; &#x3D; &#x60;ScheduledDelivery&#x60;..</param>
        /// <param name="featureConstraints">A list of features and their fulfillment policies to apply to the order..</param>
        public GetFulfillmentPreviewRequest(string marketplaceId = default(string), Address address = default(Address), GetFulfillmentPreviewItemList items = default(GetFulfillmentPreviewItemList), ShippingSpeedCategoryList shippingSpeedCategories = default(ShippingSpeedCategoryList), bool? includeCODFulfillmentPreview = default(bool?), bool? includeDeliveryWindows = default(bool?), List<FeatureSettings> featureConstraints = default(List<FeatureSettings>))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for GetFulfillmentPreviewRequest and cannot be null");
            }
            else
            {
                this.Address = address;
            }
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new InvalidDataException("items is a required property for GetFulfillmentPreviewRequest and cannot be null");
            }
            else
            {
                this.Items = items;
            }
            this.MarketplaceId = marketplaceId;
            this.ShippingSpeedCategories = shippingSpeedCategories;
            this.IncludeCODFulfillmentPreview = includeCODFulfillmentPreview;
            this.IncludeDeliveryWindows = includeDeliveryWindows;
            this.FeatureConstraints = featureConstraints;
        }
        
        /// <summary>
        /// The marketplace the fulfillment order is placed against.
        /// </summary>
        /// <value>The marketplace the fulfillment order is placed against.</value>
        [DataMember(Name="marketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The destination address for the fulfillment order preview.
        /// </summary>
        /// <value>The destination address for the fulfillment order preview.</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address Address { get; set; }

        /// <summary>
        /// Identifying information and quantity information for the items in the fulfillment order preview. Maximum of 100 line items with a maximum of 250 units per order. 
        /// </summary>
        /// <value>Identifying information and quantity information for the items in the fulfillment order preview. Maximum of 100 line items with a maximum of 250 units per order. </value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public GetFulfillmentPreviewItemList Items { get; set; }

        /// <summary>
        /// A list of shipping methods used for creating fulfillment order previews.  Possible values:  * &#x60;Standard&#x60; - Standard shipping method. * &#x60;Expedited&#x60; - Expedited shipping method. * &#x60;Priority&#x60; - Priority shipping method. * &#x60;ScheduledDelivery&#x60; - Scheduled Delivery shipping method. Note: Shipping method service level agreements vary by marketplace. Sellers should refer to the Seller Central website in their marketplace for shipping method service level agreements and fulfillment fees.
        /// </summary>
        /// <value>A list of shipping methods used for creating fulfillment order previews.  Possible values:  * &#x60;Standard&#x60; - Standard shipping method. * &#x60;Expedited&#x60; - Expedited shipping method. * &#x60;Priority&#x60; - Priority shipping method. * &#x60;ScheduledDelivery&#x60; - Scheduled Delivery shipping method. Note: Shipping method service level agreements vary by marketplace. Sellers should refer to the Seller Central website in their marketplace for shipping method service level agreements and fulfillment fees.</value>
        [DataMember(Name="shippingSpeedCategories", EmitDefaultValue=false)]
        public ShippingSpeedCategoryList ShippingSpeedCategories { get; set; }

        /// <summary>
        /// When true, returns all fulfillment order previews both for COD and not for COD. Otherwise, returns only fulfillment order previews that are not for COD.
        /// </summary>
        /// <value>When true, returns all fulfillment order previews both for COD and not for COD. Otherwise, returns only fulfillment order previews that are not for COD.</value>
        [DataMember(Name="includeCODFulfillmentPreview", EmitDefaultValue=false)]
        public bool? IncludeCODFulfillmentPreview { get; set; }

        /// <summary>
        /// When true, returns the &#x60;ScheduledDeliveryInfo&#x60; response object, which contains the available delivery windows for a Scheduled Delivery. The &#x60;ScheduledDeliveryInfo&#x60; response object can only be returned for fulfillment order previews with &#x60;ShippingSpeedCategories&#x60; &#x3D; &#x60;ScheduledDelivery&#x60;.
        /// </summary>
        /// <value>When true, returns the &#x60;ScheduledDeliveryInfo&#x60; response object, which contains the available delivery windows for a Scheduled Delivery. The &#x60;ScheduledDeliveryInfo&#x60; response object can only be returned for fulfillment order previews with &#x60;ShippingSpeedCategories&#x60; &#x3D; &#x60;ScheduledDelivery&#x60;.</value>
        [DataMember(Name="includeDeliveryWindows", EmitDefaultValue=false)]
        public bool? IncludeDeliveryWindows { get; set; }

        /// <summary>
        /// A list of features and their fulfillment policies to apply to the order.
        /// </summary>
        /// <value>A list of features and their fulfillment policies to apply to the order.</value>
        [DataMember(Name="featureConstraints", EmitDefaultValue=false)]
        public List<FeatureSettings> FeatureConstraints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetFulfillmentPreviewRequest {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  ShippingSpeedCategories: ").Append(ShippingSpeedCategories).Append("\n");
            sb.Append("  IncludeCODFulfillmentPreview: ").Append(IncludeCODFulfillmentPreview).Append("\n");
            sb.Append("  IncludeDeliveryWindows: ").Append(IncludeDeliveryWindows).Append("\n");
            sb.Append("  FeatureConstraints: ").Append(FeatureConstraints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetFulfillmentPreviewRequest);
        }

        /// <summary>
        /// Returns true if GetFulfillmentPreviewRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetFulfillmentPreviewRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetFulfillmentPreviewRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Items == input.Items ||
                    (this.Items != null &&
                    this.Items.Equals(input.Items))
                ) && 
                (
                    this.ShippingSpeedCategories == input.ShippingSpeedCategories ||
                    (this.ShippingSpeedCategories != null &&
                    this.ShippingSpeedCategories.Equals(input.ShippingSpeedCategories))
                ) && 
                (
                    this.IncludeCODFulfillmentPreview == input.IncludeCODFulfillmentPreview ||
                    (this.IncludeCODFulfillmentPreview != null &&
                    this.IncludeCODFulfillmentPreview.Equals(input.IncludeCODFulfillmentPreview))
                ) && 
                (
                    this.IncludeDeliveryWindows == input.IncludeDeliveryWindows ||
                    (this.IncludeDeliveryWindows != null &&
                    this.IncludeDeliveryWindows.Equals(input.IncludeDeliveryWindows))
                ) && 
                (
                    this.FeatureConstraints == input.FeatureConstraints ||
                    this.FeatureConstraints != null &&
                    this.FeatureConstraints.SequenceEqual(input.FeatureConstraints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.ShippingSpeedCategories != null)
                    hashCode = hashCode * 59 + this.ShippingSpeedCategories.GetHashCode();
                if (this.IncludeCODFulfillmentPreview != null)
                    hashCode = hashCode * 59 + this.IncludeCODFulfillmentPreview.GetHashCode();
                if (this.IncludeDeliveryWindows != null)
                    hashCode = hashCode * 59 + this.IncludeDeliveryWindows.GetHashCode();
                if (this.FeatureConstraints != null)
                    hashCode = hashCode * 59 + this.FeatureConstraints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
