/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentOutbound
{
    /// <summary>
    /// The request for the getFulfillmentOrder operation.
    /// </summary>
    [DataContract]
    public partial class GetFulfillmentOrderResult :  IEquatable<GetFulfillmentOrderResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetFulfillmentOrderResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetFulfillmentOrderResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetFulfillmentOrderResult" /> class.
        /// </summary>
        /// <param name="fulfillmentOrder">fulfillmentOrder (required).</param>
        /// <param name="fulfillmentOrderItems">fulfillmentOrderItems (required).</param>
        /// <param name="fulfillmentShipments">fulfillmentShipments.</param>
        /// <param name="returnItems">returnItems (required).</param>
        /// <param name="returnAuthorizations">returnAuthorizations (required).</param>
        /// <param name="paymentInformation">paymentInformation.</param>
        public GetFulfillmentOrderResult(FulfillmentOrder fulfillmentOrder = default(FulfillmentOrder), FulfillmentOrderItemList fulfillmentOrderItems = default(FulfillmentOrderItemList), FulfillmentShipmentList fulfillmentShipments = default(FulfillmentShipmentList), ReturnItemList returnItems = default(ReturnItemList), ReturnAuthorizationList returnAuthorizations = default(ReturnAuthorizationList), PaymentInformationList paymentInformation = default(PaymentInformationList))
        {
            // to ensure "fulfillmentOrder" is required (not null)
            if (fulfillmentOrder == null)
            {
                throw new InvalidDataException("fulfillmentOrder is a required property for GetFulfillmentOrderResult and cannot be null");
            }
            else
            {
                this.FulfillmentOrder = fulfillmentOrder;
            }
            // to ensure "fulfillmentOrderItems" is required (not null)
            if (fulfillmentOrderItems == null)
            {
                throw new InvalidDataException("fulfillmentOrderItems is a required property for GetFulfillmentOrderResult and cannot be null");
            }
            else
            {
                this.FulfillmentOrderItems = fulfillmentOrderItems;
            }
            // to ensure "returnItems" is required (not null)
            if (returnItems == null)
            {
                throw new InvalidDataException("returnItems is a required property for GetFulfillmentOrderResult and cannot be null");
            }
            else
            {
                this.ReturnItems = returnItems;
            }
            // to ensure "returnAuthorizations" is required (not null)
            if (returnAuthorizations == null)
            {
                throw new InvalidDataException("returnAuthorizations is a required property for GetFulfillmentOrderResult and cannot be null");
            }
            else
            {
                this.ReturnAuthorizations = returnAuthorizations;
            }
            this.FulfillmentShipments = fulfillmentShipments;
            this.PaymentInformation = paymentInformation;
        }
        
        /// <summary>
        /// Gets or Sets FulfillmentOrder
        /// </summary>
        [DataMember(Name="fulfillmentOrder", EmitDefaultValue=false)]
        public FulfillmentOrder FulfillmentOrder { get; set; }

        /// <summary>
        /// Gets or Sets FulfillmentOrderItems
        /// </summary>
        [DataMember(Name="fulfillmentOrderItems", EmitDefaultValue=false)]
        public FulfillmentOrderItemList FulfillmentOrderItems { get; set; }

        /// <summary>
        /// Gets or Sets FulfillmentShipments
        /// </summary>
        [DataMember(Name="fulfillmentShipments", EmitDefaultValue=false)]
        public FulfillmentShipmentList FulfillmentShipments { get; set; }

        /// <summary>
        /// Gets or Sets ReturnItems
        /// </summary>
        [DataMember(Name="returnItems", EmitDefaultValue=false)]
        public ReturnItemList ReturnItems { get; set; }

        /// <summary>
        /// Gets or Sets ReturnAuthorizations
        /// </summary>
        [DataMember(Name="returnAuthorizations", EmitDefaultValue=false)]
        public ReturnAuthorizationList ReturnAuthorizations { get; set; }

        /// <summary>
        /// Gets or Sets PaymentInformation
        /// </summary>
        [DataMember(Name="paymentInformation", EmitDefaultValue=false)]
        public PaymentInformationList PaymentInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetFulfillmentOrderResult {\n");
            sb.Append("  FulfillmentOrder: ").Append(FulfillmentOrder).Append("\n");
            sb.Append("  FulfillmentOrderItems: ").Append(FulfillmentOrderItems).Append("\n");
            sb.Append("  FulfillmentShipments: ").Append(FulfillmentShipments).Append("\n");
            sb.Append("  ReturnItems: ").Append(ReturnItems).Append("\n");
            sb.Append("  ReturnAuthorizations: ").Append(ReturnAuthorizations).Append("\n");
            sb.Append("  PaymentInformation: ").Append(PaymentInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetFulfillmentOrderResult);
        }

        /// <summary>
        /// Returns true if GetFulfillmentOrderResult instances are equal
        /// </summary>
        /// <param name="input">Instance of GetFulfillmentOrderResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetFulfillmentOrderResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FulfillmentOrder == input.FulfillmentOrder ||
                    (this.FulfillmentOrder != null &&
                    this.FulfillmentOrder.Equals(input.FulfillmentOrder))
                ) && 
                (
                    this.FulfillmentOrderItems == input.FulfillmentOrderItems ||
                    (this.FulfillmentOrderItems != null &&
                    this.FulfillmentOrderItems.Equals(input.FulfillmentOrderItems))
                ) && 
                (
                    this.FulfillmentShipments == input.FulfillmentShipments ||
                    (this.FulfillmentShipments != null &&
                    this.FulfillmentShipments.Equals(input.FulfillmentShipments))
                ) && 
                (
                    this.ReturnItems == input.ReturnItems ||
                    (this.ReturnItems != null &&
                    this.ReturnItems.Equals(input.ReturnItems))
                ) && 
                (
                    this.ReturnAuthorizations == input.ReturnAuthorizations ||
                    (this.ReturnAuthorizations != null &&
                    this.ReturnAuthorizations.Equals(input.ReturnAuthorizations))
                ) && 
                (
                    this.PaymentInformation == input.PaymentInformation ||
                    (this.PaymentInformation != null &&
                    this.PaymentInformation.Equals(input.PaymentInformation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FulfillmentOrder != null)
                    hashCode = hashCode * 59 + this.FulfillmentOrder.GetHashCode();
                if (this.FulfillmentOrderItems != null)
                    hashCode = hashCode * 59 + this.FulfillmentOrderItems.GetHashCode();
                if (this.FulfillmentShipments != null)
                    hashCode = hashCode * 59 + this.FulfillmentShipments.GetHashCode();
                if (this.ReturnItems != null)
                    hashCode = hashCode * 59 + this.ReturnItems.GetHashCode();
                if (this.ReturnAuthorizations != null)
                    hashCode = hashCode * 59 + this.ReturnAuthorizations.GetHashCode();
                if (this.PaymentInformation != null)
                    hashCode = hashCode * 59 + this.PaymentInformation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
