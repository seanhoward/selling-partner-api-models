/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentOutbound
{
    /// <summary>
    /// Delivery and item information for a shipment in a fulfillment order.
    /// </summary>
    [DataContract]
    public partial class FulfillmentShipment :  IEquatable<FulfillmentShipment>, IValidatableObject
    {
        /// <summary>
        /// The current status of the shipment.
        /// </summary>
        /// <value>The current status of the shipment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FulfillmentShipmentStatusEnum
        {
            
            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 1,
            
            /// <summary>
            /// Enum SHIPPED for value: SHIPPED
            /// </summary>
            [EnumMember(Value = "SHIPPED")]
            SHIPPED = 2,
            
            /// <summary>
            /// Enum CANCELLEDBYFULFILLER for value: CANCELLED_BY_FULFILLER
            /// </summary>
            [EnumMember(Value = "CANCELLED_BY_FULFILLER")]
            CANCELLEDBYFULFILLER = 3,
            
            /// <summary>
            /// Enum CANCELLEDBYSELLER for value: CANCELLED_BY_SELLER
            /// </summary>
            [EnumMember(Value = "CANCELLED_BY_SELLER")]
            CANCELLEDBYSELLER = 4
        }

        /// <summary>
        /// The current status of the shipment.
        /// </summary>
        /// <value>The current status of the shipment.</value>
        [DataMember(Name="fulfillmentShipmentStatus", EmitDefaultValue=false)]
        public FulfillmentShipmentStatusEnum FulfillmentShipmentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentShipment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FulfillmentShipment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentShipment" /> class.
        /// </summary>
        /// <param name="amazonShipmentId">A shipment identifier assigned by Amazon. (required).</param>
        /// <param name="fulfillmentCenterId">An identifier for the fulfillment center that the shipment will be sent from. (required).</param>
        /// <param name="fulfillmentShipmentStatus">The current status of the shipment. (required).</param>
        /// <param name="shippingDate">The meaning of the &#x60;shippingDate&#x60; value depends on the current status of the shipment. If the current value of &#x60;FulfillmentShipmentStatus&#x60; is:  * Pending - &#x60;shippingDate&#x60; represents the estimated time that the shipment will leave the Amazon fulfillment center.  * Shipped - &#x60;shippingDate&#x60; represents the date that the shipment left the Amazon fulfillment center. If a shipment includes more than one package, &#x60;shippingDate&#x60; applies to all of the packages in the shipment. If the value of &#x60;FulfillmentShipmentStatus&#x60; is &#x60;CancelledByFulfiller&#x60; or &#x60;CancelledBySeller&#x60;, &#x60;shippingDate&#x60; is not returned. The value must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format..</param>
        /// <param name="estimatedArrivalDate">The estimated arrival date and time of the shipment. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. Note that this value can change over time. If a shipment includes more than one package, &#x60;estimatedArrivalDate&#x60; applies to all of the packages in the shipment. If the shipment has been cancelled, &#x60;estimatedArrivalDate&#x60; is not returned..</param>
        /// <param name="shippingNotes">Provides additional insight into shipment timeline. Primairly used to communicate that actual delivery dates aren&#39;t available..</param>
        /// <param name="fulfillmentShipmentItem">fulfillmentShipmentItem (required).</param>
        /// <param name="fulfillmentShipmentPackage">fulfillmentShipmentPackage.</param>
        public FulfillmentShipment(string amazonShipmentId = default(string), string fulfillmentCenterId = default(string), FulfillmentShipmentStatusEnum fulfillmentShipmentStatus = default(FulfillmentShipmentStatusEnum), DateTime? shippingDate = default(DateTime?), DateTime? estimatedArrivalDate = default(DateTime?), List<string> shippingNotes = default(List<string>), FulfillmentShipmentItemList fulfillmentShipmentItem = default(FulfillmentShipmentItemList), FulfillmentShipmentPackageList fulfillmentShipmentPackage = default(FulfillmentShipmentPackageList))
        {
            // to ensure "amazonShipmentId" is required (not null)
            if (amazonShipmentId == null)
            {
                throw new InvalidDataException("amazonShipmentId is a required property for FulfillmentShipment and cannot be null");
            }
            else
            {
                this.AmazonShipmentId = amazonShipmentId;
            }
            // to ensure "fulfillmentCenterId" is required (not null)
            if (fulfillmentCenterId == null)
            {
                throw new InvalidDataException("fulfillmentCenterId is a required property for FulfillmentShipment and cannot be null");
            }
            else
            {
                this.FulfillmentCenterId = fulfillmentCenterId;
            }
            // to ensure "fulfillmentShipmentStatus" is required (not null)
            if (fulfillmentShipmentStatus == null)
            {
                throw new InvalidDataException("fulfillmentShipmentStatus is a required property for FulfillmentShipment and cannot be null");
            }
            else
            {
                this.FulfillmentShipmentStatus = fulfillmentShipmentStatus;
            }
            // to ensure "fulfillmentShipmentItem" is required (not null)
            if (fulfillmentShipmentItem == null)
            {
                throw new InvalidDataException("fulfillmentShipmentItem is a required property for FulfillmentShipment and cannot be null");
            }
            else
            {
                this.FulfillmentShipmentItem = fulfillmentShipmentItem;
            }
            this.ShippingDate = shippingDate;
            this.EstimatedArrivalDate = estimatedArrivalDate;
            this.ShippingNotes = shippingNotes;
            this.FulfillmentShipmentPackage = fulfillmentShipmentPackage;
        }
        
        /// <summary>
        /// A shipment identifier assigned by Amazon.
        /// </summary>
        /// <value>A shipment identifier assigned by Amazon.</value>
        [DataMember(Name="amazonShipmentId", EmitDefaultValue=false)]
        public string AmazonShipmentId { get; set; }

        /// <summary>
        /// An identifier for the fulfillment center that the shipment will be sent from.
        /// </summary>
        /// <value>An identifier for the fulfillment center that the shipment will be sent from.</value>
        [DataMember(Name="fulfillmentCenterId", EmitDefaultValue=false)]
        public string FulfillmentCenterId { get; set; }


        /// <summary>
        /// The meaning of the &#x60;shippingDate&#x60; value depends on the current status of the shipment. If the current value of &#x60;FulfillmentShipmentStatus&#x60; is:  * Pending - &#x60;shippingDate&#x60; represents the estimated time that the shipment will leave the Amazon fulfillment center.  * Shipped - &#x60;shippingDate&#x60; represents the date that the shipment left the Amazon fulfillment center. If a shipment includes more than one package, &#x60;shippingDate&#x60; applies to all of the packages in the shipment. If the value of &#x60;FulfillmentShipmentStatus&#x60; is &#x60;CancelledByFulfiller&#x60; or &#x60;CancelledBySeller&#x60;, &#x60;shippingDate&#x60; is not returned. The value must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format.
        /// </summary>
        /// <value>The meaning of the &#x60;shippingDate&#x60; value depends on the current status of the shipment. If the current value of &#x60;FulfillmentShipmentStatus&#x60; is:  * Pending - &#x60;shippingDate&#x60; represents the estimated time that the shipment will leave the Amazon fulfillment center.  * Shipped - &#x60;shippingDate&#x60; represents the date that the shipment left the Amazon fulfillment center. If a shipment includes more than one package, &#x60;shippingDate&#x60; applies to all of the packages in the shipment. If the value of &#x60;FulfillmentShipmentStatus&#x60; is &#x60;CancelledByFulfiller&#x60; or &#x60;CancelledBySeller&#x60;, &#x60;shippingDate&#x60; is not returned. The value must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format.</value>
        [DataMember(Name="shippingDate", EmitDefaultValue=false)]
        public DateTime? ShippingDate { get; set; }

        /// <summary>
        /// The estimated arrival date and time of the shipment. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. Note that this value can change over time. If a shipment includes more than one package, &#x60;estimatedArrivalDate&#x60; applies to all of the packages in the shipment. If the shipment has been cancelled, &#x60;estimatedArrivalDate&#x60; is not returned.
        /// </summary>
        /// <value>The estimated arrival date and time of the shipment. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. Note that this value can change over time. If a shipment includes more than one package, &#x60;estimatedArrivalDate&#x60; applies to all of the packages in the shipment. If the shipment has been cancelled, &#x60;estimatedArrivalDate&#x60; is not returned.</value>
        [DataMember(Name="estimatedArrivalDate", EmitDefaultValue=false)]
        public DateTime? EstimatedArrivalDate { get; set; }

        /// <summary>
        /// Provides additional insight into shipment timeline. Primairly used to communicate that actual delivery dates aren&#39;t available.
        /// </summary>
        /// <value>Provides additional insight into shipment timeline. Primairly used to communicate that actual delivery dates aren&#39;t available.</value>
        [DataMember(Name="shippingNotes", EmitDefaultValue=false)]
        public List<string> ShippingNotes { get; set; }

        /// <summary>
        /// Gets or Sets FulfillmentShipmentItem
        /// </summary>
        [DataMember(Name="fulfillmentShipmentItem", EmitDefaultValue=false)]
        public FulfillmentShipmentItemList FulfillmentShipmentItem { get; set; }

        /// <summary>
        /// Gets or Sets FulfillmentShipmentPackage
        /// </summary>
        [DataMember(Name="fulfillmentShipmentPackage", EmitDefaultValue=false)]
        public FulfillmentShipmentPackageList FulfillmentShipmentPackage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentShipment {\n");
            sb.Append("  AmazonShipmentId: ").Append(AmazonShipmentId).Append("\n");
            sb.Append("  FulfillmentCenterId: ").Append(FulfillmentCenterId).Append("\n");
            sb.Append("  FulfillmentShipmentStatus: ").Append(FulfillmentShipmentStatus).Append("\n");
            sb.Append("  ShippingDate: ").Append(ShippingDate).Append("\n");
            sb.Append("  EstimatedArrivalDate: ").Append(EstimatedArrivalDate).Append("\n");
            sb.Append("  ShippingNotes: ").Append(ShippingNotes).Append("\n");
            sb.Append("  FulfillmentShipmentItem: ").Append(FulfillmentShipmentItem).Append("\n");
            sb.Append("  FulfillmentShipmentPackage: ").Append(FulfillmentShipmentPackage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentShipment);
        }

        /// <summary>
        /// Returns true if FulfillmentShipment instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentShipment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentShipment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AmazonShipmentId == input.AmazonShipmentId ||
                    (this.AmazonShipmentId != null &&
                    this.AmazonShipmentId.Equals(input.AmazonShipmentId))
                ) && 
                (
                    this.FulfillmentCenterId == input.FulfillmentCenterId ||
                    (this.FulfillmentCenterId != null &&
                    this.FulfillmentCenterId.Equals(input.FulfillmentCenterId))
                ) && 
                (
                    this.FulfillmentShipmentStatus == input.FulfillmentShipmentStatus ||
                    (this.FulfillmentShipmentStatus != null &&
                    this.FulfillmentShipmentStatus.Equals(input.FulfillmentShipmentStatus))
                ) && 
                (
                    this.ShippingDate == input.ShippingDate ||
                    (this.ShippingDate != null &&
                    this.ShippingDate.Equals(input.ShippingDate))
                ) && 
                (
                    this.EstimatedArrivalDate == input.EstimatedArrivalDate ||
                    (this.EstimatedArrivalDate != null &&
                    this.EstimatedArrivalDate.Equals(input.EstimatedArrivalDate))
                ) && 
                (
                    this.ShippingNotes == input.ShippingNotes ||
                    this.ShippingNotes != null &&
                    this.ShippingNotes.SequenceEqual(input.ShippingNotes)
                ) && 
                (
                    this.FulfillmentShipmentItem == input.FulfillmentShipmentItem ||
                    (this.FulfillmentShipmentItem != null &&
                    this.FulfillmentShipmentItem.Equals(input.FulfillmentShipmentItem))
                ) && 
                (
                    this.FulfillmentShipmentPackage == input.FulfillmentShipmentPackage ||
                    (this.FulfillmentShipmentPackage != null &&
                    this.FulfillmentShipmentPackage.Equals(input.FulfillmentShipmentPackage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AmazonShipmentId != null)
                    hashCode = hashCode * 59 + this.AmazonShipmentId.GetHashCode();
                if (this.FulfillmentCenterId != null)
                    hashCode = hashCode * 59 + this.FulfillmentCenterId.GetHashCode();
                if (this.FulfillmentShipmentStatus != null)
                    hashCode = hashCode * 59 + this.FulfillmentShipmentStatus.GetHashCode();
                if (this.ShippingDate != null)
                    hashCode = hashCode * 59 + this.ShippingDate.GetHashCode();
                if (this.EstimatedArrivalDate != null)
                    hashCode = hashCode * 59 + this.EstimatedArrivalDate.GetHashCode();
                if (this.ShippingNotes != null)
                    hashCode = hashCode * 59 + this.ShippingNotes.GetHashCode();
                if (this.FulfillmentShipmentItem != null)
                    hashCode = hashCode * 59 + this.FulfillmentShipmentItem.GetHashCode();
                if (this.FulfillmentShipmentPackage != null)
                    hashCode = hashCode * 59 + this.FulfillmentShipmentPackage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
