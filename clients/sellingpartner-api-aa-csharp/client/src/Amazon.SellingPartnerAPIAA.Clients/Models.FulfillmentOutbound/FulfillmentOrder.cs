/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentOutbound
{
    /// <summary>
    /// General information about a fulfillment order, including its status.
    /// </summary>
    [DataContract]
    public partial class FulfillmentOrder :  IEquatable<FulfillmentOrder>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ShippingSpeedCategory
        /// </summary>
        [DataMember(Name="shippingSpeedCategory", EmitDefaultValue=false)]
        public ShippingSpeedCategory ShippingSpeedCategory { get; set; }
        /// <summary>
        /// Gets or Sets FulfillmentAction
        /// </summary>
        [DataMember(Name="fulfillmentAction", EmitDefaultValue=false)]
        public FulfillmentAction? FulfillmentAction { get; set; }
        /// <summary>
        /// Gets or Sets FulfillmentPolicy
        /// </summary>
        [DataMember(Name="fulfillmentPolicy", EmitDefaultValue=false)]
        public FulfillmentPolicy? FulfillmentPolicy { get; set; }
        /// <summary>
        /// Gets or Sets FulfillmentOrderStatus
        /// </summary>
        [DataMember(Name="fulfillmentOrderStatus", EmitDefaultValue=false)]
        public FulfillmentOrderStatus FulfillmentOrderStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FulfillmentOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentOrder" /> class.
        /// </summary>
        /// <param name="sellerFulfillmentOrderId">The fulfillment order identifier submitted with the &#x60;createFulfillmentOrder&#x60; operation. (required).</param>
        /// <param name="marketplaceId">The identifier for the marketplace the fulfillment order is placed against. (required).</param>
        /// <param name="displayableOrderId">A fulfillment order identifier submitted with the &#x60;createFulfillmentOrder&#x60; operation. Displays as the order identifier in recipient-facing materials such as the packing slip. (required).</param>
        /// <param name="displayableOrderDate">A date and time submitted with the &#x60;createFulfillmentOrder&#x60; operation. Displays as the order date in recipient-facing materials such as the packing slip. (required).</param>
        /// <param name="displayableOrderComment">A text block submitted with the &#x60;createFulfillmentOrder&#x60; operation. Displays in recipient-facing materials such as the packing slip. (required).</param>
        /// <param name="shippingSpeedCategory">shippingSpeedCategory (required).</param>
        /// <param name="deliveryWindow">deliveryWindow.</param>
        /// <param name="destinationAddress">The destination address submitted with the &#x60;createFulfillmentOrder&#x60; operation. (required).</param>
        /// <param name="fulfillmentAction">fulfillmentAction.</param>
        /// <param name="fulfillmentPolicy">fulfillmentPolicy.</param>
        /// <param name="codSettings">codSettings.</param>
        /// <param name="receivedDate">The date and time that the fulfillment order was received by an Amazon fulfillment center. (required).</param>
        /// <param name="fulfillmentOrderStatus">fulfillmentOrderStatus (required).</param>
        /// <param name="statusUpdatedDate">The date and time that the status of the fulfillment order last changed. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (required).</param>
        /// <param name="notificationEmails">notificationEmails.</param>
        /// <param name="featureConstraints">A list of features and their fulfillment policies to apply to the order..</param>
        public FulfillmentOrder(string sellerFulfillmentOrderId = default(string), string marketplaceId = default(string), string displayableOrderId = default(string), DateTime? displayableOrderDate = default(DateTime?), string displayableOrderComment = default(string), ShippingSpeedCategory shippingSpeedCategory = default(ShippingSpeedCategory), DeliveryWindow deliveryWindow = default(DeliveryWindow), Address destinationAddress = default(Address), FulfillmentAction? fulfillmentAction = default(FulfillmentAction?), FulfillmentPolicy? fulfillmentPolicy = default(FulfillmentPolicy?), CODSettings codSettings = default(CODSettings), DateTime? receivedDate = default(DateTime?), FulfillmentOrderStatus fulfillmentOrderStatus = default(FulfillmentOrderStatus), DateTime? statusUpdatedDate = default(DateTime?), NotificationEmailList notificationEmails = default(NotificationEmailList), List<FeatureSettings> featureConstraints = default(List<FeatureSettings>))
        {
            // to ensure "sellerFulfillmentOrderId" is required (not null)
            if (sellerFulfillmentOrderId == null)
            {
                throw new InvalidDataException("sellerFulfillmentOrderId is a required property for FulfillmentOrder and cannot be null");
            }
            else
            {
                this.SellerFulfillmentOrderId = sellerFulfillmentOrderId;
            }
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for FulfillmentOrder and cannot be null");
            }
            else
            {
                this.MarketplaceId = marketplaceId;
            }
            // to ensure "displayableOrderId" is required (not null)
            if (displayableOrderId == null)
            {
                throw new InvalidDataException("displayableOrderId is a required property for FulfillmentOrder and cannot be null");
            }
            else
            {
                this.DisplayableOrderId = displayableOrderId;
            }
            // to ensure "displayableOrderDate" is required (not null)
            if (displayableOrderDate == null)
            {
                throw new InvalidDataException("displayableOrderDate is a required property for FulfillmentOrder and cannot be null");
            }
            else
            {
                this.DisplayableOrderDate = displayableOrderDate;
            }
            // to ensure "displayableOrderComment" is required (not null)
            if (displayableOrderComment == null)
            {
                throw new InvalidDataException("displayableOrderComment is a required property for FulfillmentOrder and cannot be null");
            }
            else
            {
                this.DisplayableOrderComment = displayableOrderComment;
            }
            // to ensure "shippingSpeedCategory" is required (not null)
            if (shippingSpeedCategory == null)
            {
                throw new InvalidDataException("shippingSpeedCategory is a required property for FulfillmentOrder and cannot be null");
            }
            else
            {
                this.ShippingSpeedCategory = shippingSpeedCategory;
            }
            // to ensure "destinationAddress" is required (not null)
            if (destinationAddress == null)
            {
                throw new InvalidDataException("destinationAddress is a required property for FulfillmentOrder and cannot be null");
            }
            else
            {
                this.DestinationAddress = destinationAddress;
            }
            // to ensure "receivedDate" is required (not null)
            if (receivedDate == null)
            {
                throw new InvalidDataException("receivedDate is a required property for FulfillmentOrder and cannot be null");
            }
            else
            {
                this.ReceivedDate = receivedDate;
            }
            // to ensure "fulfillmentOrderStatus" is required (not null)
            if (fulfillmentOrderStatus == null)
            {
                throw new InvalidDataException("fulfillmentOrderStatus is a required property for FulfillmentOrder and cannot be null");
            }
            else
            {
                this.FulfillmentOrderStatus = fulfillmentOrderStatus;
            }
            // to ensure "statusUpdatedDate" is required (not null)
            if (statusUpdatedDate == null)
            {
                throw new InvalidDataException("statusUpdatedDate is a required property for FulfillmentOrder and cannot be null");
            }
            else
            {
                this.StatusUpdatedDate = statusUpdatedDate;
            }
            this.DeliveryWindow = deliveryWindow;
            this.FulfillmentAction = fulfillmentAction;
            this.FulfillmentPolicy = fulfillmentPolicy;
            this.CodSettings = codSettings;
            this.NotificationEmails = notificationEmails;
            this.FeatureConstraints = featureConstraints;
        }
        
        /// <summary>
        /// The fulfillment order identifier submitted with the &#x60;createFulfillmentOrder&#x60; operation.
        /// </summary>
        /// <value>The fulfillment order identifier submitted with the &#x60;createFulfillmentOrder&#x60; operation.</value>
        [DataMember(Name="sellerFulfillmentOrderId", EmitDefaultValue=false)]
        public string SellerFulfillmentOrderId { get; set; }

        /// <summary>
        /// The identifier for the marketplace the fulfillment order is placed against.
        /// </summary>
        /// <value>The identifier for the marketplace the fulfillment order is placed against.</value>
        [DataMember(Name="marketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// A fulfillment order identifier submitted with the &#x60;createFulfillmentOrder&#x60; operation. Displays as the order identifier in recipient-facing materials such as the packing slip.
        /// </summary>
        /// <value>A fulfillment order identifier submitted with the &#x60;createFulfillmentOrder&#x60; operation. Displays as the order identifier in recipient-facing materials such as the packing slip.</value>
        [DataMember(Name="displayableOrderId", EmitDefaultValue=false)]
        public string DisplayableOrderId { get; set; }

        /// <summary>
        /// A date and time submitted with the &#x60;createFulfillmentOrder&#x60; operation. Displays as the order date in recipient-facing materials such as the packing slip.
        /// </summary>
        /// <value>A date and time submitted with the &#x60;createFulfillmentOrder&#x60; operation. Displays as the order date in recipient-facing materials such as the packing slip.</value>
        [DataMember(Name="displayableOrderDate", EmitDefaultValue=false)]
        public DateTime? DisplayableOrderDate { get; set; }

        /// <summary>
        /// A text block submitted with the &#x60;createFulfillmentOrder&#x60; operation. Displays in recipient-facing materials such as the packing slip.
        /// </summary>
        /// <value>A text block submitted with the &#x60;createFulfillmentOrder&#x60; operation. Displays in recipient-facing materials such as the packing slip.</value>
        [DataMember(Name="displayableOrderComment", EmitDefaultValue=false)]
        public string DisplayableOrderComment { get; set; }


        /// <summary>
        /// Gets or Sets DeliveryWindow
        /// </summary>
        [DataMember(Name="deliveryWindow", EmitDefaultValue=false)]
        public DeliveryWindow DeliveryWindow { get; set; }

        /// <summary>
        /// The destination address submitted with the &#x60;createFulfillmentOrder&#x60; operation.
        /// </summary>
        /// <value>The destination address submitted with the &#x60;createFulfillmentOrder&#x60; operation.</value>
        [DataMember(Name="destinationAddress", EmitDefaultValue=false)]
        public Address DestinationAddress { get; set; }



        /// <summary>
        /// Gets or Sets CodSettings
        /// </summary>
        [DataMember(Name="codSettings", EmitDefaultValue=false)]
        public CODSettings CodSettings { get; set; }

        /// <summary>
        /// The date and time that the fulfillment order was received by an Amazon fulfillment center.
        /// </summary>
        /// <value>The date and time that the fulfillment order was received by an Amazon fulfillment center.</value>
        [DataMember(Name="receivedDate", EmitDefaultValue=false)]
        public DateTime? ReceivedDate { get; set; }


        /// <summary>
        /// The date and time that the status of the fulfillment order last changed. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format.
        /// </summary>
        /// <value>The date and time that the status of the fulfillment order last changed. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format.</value>
        [DataMember(Name="statusUpdatedDate", EmitDefaultValue=false)]
        public DateTime? StatusUpdatedDate { get; set; }

        /// <summary>
        /// Gets or Sets NotificationEmails
        /// </summary>
        [DataMember(Name="notificationEmails", EmitDefaultValue=false)]
        public NotificationEmailList NotificationEmails { get; set; }

        /// <summary>
        /// A list of features and their fulfillment policies to apply to the order.
        /// </summary>
        /// <value>A list of features and their fulfillment policies to apply to the order.</value>
        [DataMember(Name="featureConstraints", EmitDefaultValue=false)]
        public List<FeatureSettings> FeatureConstraints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentOrder {\n");
            sb.Append("  SellerFulfillmentOrderId: ").Append(SellerFulfillmentOrderId).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  DisplayableOrderId: ").Append(DisplayableOrderId).Append("\n");
            sb.Append("  DisplayableOrderDate: ").Append(DisplayableOrderDate).Append("\n");
            sb.Append("  DisplayableOrderComment: ").Append(DisplayableOrderComment).Append("\n");
            sb.Append("  ShippingSpeedCategory: ").Append(ShippingSpeedCategory).Append("\n");
            sb.Append("  DeliveryWindow: ").Append(DeliveryWindow).Append("\n");
            sb.Append("  DestinationAddress: ").Append(DestinationAddress).Append("\n");
            sb.Append("  FulfillmentAction: ").Append(FulfillmentAction).Append("\n");
            sb.Append("  FulfillmentPolicy: ").Append(FulfillmentPolicy).Append("\n");
            sb.Append("  CodSettings: ").Append(CodSettings).Append("\n");
            sb.Append("  ReceivedDate: ").Append(ReceivedDate).Append("\n");
            sb.Append("  FulfillmentOrderStatus: ").Append(FulfillmentOrderStatus).Append("\n");
            sb.Append("  StatusUpdatedDate: ").Append(StatusUpdatedDate).Append("\n");
            sb.Append("  NotificationEmails: ").Append(NotificationEmails).Append("\n");
            sb.Append("  FeatureConstraints: ").Append(FeatureConstraints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentOrder);
        }

        /// <summary>
        /// Returns true if FulfillmentOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SellerFulfillmentOrderId == input.SellerFulfillmentOrderId ||
                    (this.SellerFulfillmentOrderId != null &&
                    this.SellerFulfillmentOrderId.Equals(input.SellerFulfillmentOrderId))
                ) && 
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) && 
                (
                    this.DisplayableOrderId == input.DisplayableOrderId ||
                    (this.DisplayableOrderId != null &&
                    this.DisplayableOrderId.Equals(input.DisplayableOrderId))
                ) && 
                (
                    this.DisplayableOrderDate == input.DisplayableOrderDate ||
                    (this.DisplayableOrderDate != null &&
                    this.DisplayableOrderDate.Equals(input.DisplayableOrderDate))
                ) && 
                (
                    this.DisplayableOrderComment == input.DisplayableOrderComment ||
                    (this.DisplayableOrderComment != null &&
                    this.DisplayableOrderComment.Equals(input.DisplayableOrderComment))
                ) && 
                (
                    this.ShippingSpeedCategory == input.ShippingSpeedCategory ||
                    (this.ShippingSpeedCategory != null &&
                    this.ShippingSpeedCategory.Equals(input.ShippingSpeedCategory))
                ) && 
                (
                    this.DeliveryWindow == input.DeliveryWindow ||
                    (this.DeliveryWindow != null &&
                    this.DeliveryWindow.Equals(input.DeliveryWindow))
                ) && 
                (
                    this.DestinationAddress == input.DestinationAddress ||
                    (this.DestinationAddress != null &&
                    this.DestinationAddress.Equals(input.DestinationAddress))
                ) && 
                (
                    this.FulfillmentAction == input.FulfillmentAction ||
                    (this.FulfillmentAction != null &&
                    this.FulfillmentAction.Equals(input.FulfillmentAction))
                ) && 
                (
                    this.FulfillmentPolicy == input.FulfillmentPolicy ||
                    (this.FulfillmentPolicy != null &&
                    this.FulfillmentPolicy.Equals(input.FulfillmentPolicy))
                ) && 
                (
                    this.CodSettings == input.CodSettings ||
                    (this.CodSettings != null &&
                    this.CodSettings.Equals(input.CodSettings))
                ) && 
                (
                    this.ReceivedDate == input.ReceivedDate ||
                    (this.ReceivedDate != null &&
                    this.ReceivedDate.Equals(input.ReceivedDate))
                ) && 
                (
                    this.FulfillmentOrderStatus == input.FulfillmentOrderStatus ||
                    (this.FulfillmentOrderStatus != null &&
                    this.FulfillmentOrderStatus.Equals(input.FulfillmentOrderStatus))
                ) && 
                (
                    this.StatusUpdatedDate == input.StatusUpdatedDate ||
                    (this.StatusUpdatedDate != null &&
                    this.StatusUpdatedDate.Equals(input.StatusUpdatedDate))
                ) && 
                (
                    this.NotificationEmails == input.NotificationEmails ||
                    (this.NotificationEmails != null &&
                    this.NotificationEmails.Equals(input.NotificationEmails))
                ) && 
                (
                    this.FeatureConstraints == input.FeatureConstraints ||
                    this.FeatureConstraints != null &&
                    this.FeatureConstraints.SequenceEqual(input.FeatureConstraints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SellerFulfillmentOrderId != null)
                    hashCode = hashCode * 59 + this.SellerFulfillmentOrderId.GetHashCode();
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.DisplayableOrderId != null)
                    hashCode = hashCode * 59 + this.DisplayableOrderId.GetHashCode();
                if (this.DisplayableOrderDate != null)
                    hashCode = hashCode * 59 + this.DisplayableOrderDate.GetHashCode();
                if (this.DisplayableOrderComment != null)
                    hashCode = hashCode * 59 + this.DisplayableOrderComment.GetHashCode();
                if (this.ShippingSpeedCategory != null)
                    hashCode = hashCode * 59 + this.ShippingSpeedCategory.GetHashCode();
                if (this.DeliveryWindow != null)
                    hashCode = hashCode * 59 + this.DeliveryWindow.GetHashCode();
                if (this.DestinationAddress != null)
                    hashCode = hashCode * 59 + this.DestinationAddress.GetHashCode();
                if (this.FulfillmentAction != null)
                    hashCode = hashCode * 59 + this.FulfillmentAction.GetHashCode();
                if (this.FulfillmentPolicy != null)
                    hashCode = hashCode * 59 + this.FulfillmentPolicy.GetHashCode();
                if (this.CodSettings != null)
                    hashCode = hashCode * 59 + this.CodSettings.GetHashCode();
                if (this.ReceivedDate != null)
                    hashCode = hashCode * 59 + this.ReceivedDate.GetHashCode();
                if (this.FulfillmentOrderStatus != null)
                    hashCode = hashCode * 59 + this.FulfillmentOrderStatus.GetHashCode();
                if (this.StatusUpdatedDate != null)
                    hashCode = hashCode * 59 + this.StatusUpdatedDate.GetHashCode();
                if (this.NotificationEmails != null)
                    hashCode = hashCode * 59 + this.NotificationEmails.GetHashCode();
                if (this.FeatureConstraints != null)
                    hashCode = hashCode * 59 + this.FeatureConstraints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
