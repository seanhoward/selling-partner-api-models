/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentOutbound
{
    /// <summary>
    /// Package information for a shipment in a fulfillment order.
    /// </summary>
    [DataContract]
    public partial class FulfillmentShipmentPackage :  IEquatable<FulfillmentShipmentPackage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentShipmentPackage" /> class.
        /// </summary>
        [JsonConstructor]
        protected FulfillmentShipmentPackage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentShipmentPackage" /> class.
        /// </summary>
        /// <param name="packageNumber">Identifies a package in a shipment. (required).</param>
        /// <param name="carrierCode">Identifies the carrier who will deliver the shipment to the recipient. (required).</param>
        /// <param name="trackingNumber">The tracking number, if provided, can be used to obtain tracking and delivery information..</param>
        /// <param name="estimatedArrivalDate">The estimated arrival date and time of the package. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format..</param>
        /// <param name="lockerDetails">The locker details, if provided can be used to access locker delivery box..</param>
        /// <param name="deliveryInformation">The delivery information for the package. This information is available after the package is delivered..</param>
        public FulfillmentShipmentPackage(int? packageNumber = default, string carrierCode = default, string trackingNumber = default, DateTime? estimatedArrivalDate = default, LockerDetails lockerDetails = default, DeliveryInformation deliveryInformation = default)
        {
            // to ensure "packageNumber" is required (not null)
            if (packageNumber == null)
            {
                throw new InvalidDataException("packageNumber is a required property for FulfillmentShipmentPackage and cannot be null");
            }
            else
            {
                this.PackageNumber = packageNumber;
            }
            // to ensure "carrierCode" is required (not null)
            if (carrierCode == null)
            {
                throw new InvalidDataException("carrierCode is a required property for FulfillmentShipmentPackage and cannot be null");
            }
            else
            {
                this.CarrierCode = carrierCode;
            }
            this.TrackingNumber = trackingNumber;
            this.EstimatedArrivalDate = estimatedArrivalDate;
            this.LockerDetails = lockerDetails;
            this.DeliveryInformation = deliveryInformation;
        }
        
        /// <summary>
        /// Identifies a package in a shipment.
        /// </summary>
        /// <value>Identifies a package in a shipment.</value>
        [DataMember(Name="packageNumber", EmitDefaultValue=false)]
        public int? PackageNumber { get; set; }

        /// <summary>
        /// Identifies the carrier who will deliver the shipment to the recipient.
        /// </summary>
        /// <value>Identifies the carrier who will deliver the shipment to the recipient.</value>
        [DataMember(Name="carrierCode", EmitDefaultValue=false)]
        public string CarrierCode { get; set; }

        /// <summary>
        /// The tracking number, if provided, can be used to obtain tracking and delivery information.
        /// </summary>
        /// <value>The tracking number, if provided, can be used to obtain tracking and delivery information.</value>
        [DataMember(Name="trackingNumber", EmitDefaultValue=false)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// The estimated arrival date and time of the package. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format.
        /// </summary>
        /// <value>The estimated arrival date and time of the package. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format.</value>
        [DataMember(Name="estimatedArrivalDate", EmitDefaultValue=false)]
        public DateTime? EstimatedArrivalDate { get; set; }

        /// <summary>
        /// The locker details, if provided can be used to access locker delivery box.
        /// </summary>
        /// <value>The locker details, if provided can be used to access locker delivery box.</value>
        [DataMember(Name="lockerDetails", EmitDefaultValue=false)]
        public LockerDetails LockerDetails { get; set; }

        /// <summary>
        /// The delivery information for the package. This information is available after the package is delivered.
        /// </summary>
        /// <value>The delivery information for the package. This information is available after the package is delivered.</value>
        [DataMember(Name="deliveryInformation", EmitDefaultValue=false)]
        public DeliveryInformation DeliveryInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentShipmentPackage {\n");
            sb.Append("  PackageNumber: ").Append(PackageNumber).Append("\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  EstimatedArrivalDate: ").Append(EstimatedArrivalDate).Append("\n");
            sb.Append("  LockerDetails: ").Append(LockerDetails).Append("\n");
            sb.Append("  DeliveryInformation: ").Append(DeliveryInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentShipmentPackage);
        }

        /// <summary>
        /// Returns true if FulfillmentShipmentPackage instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentShipmentPackage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentShipmentPackage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PackageNumber == input.PackageNumber ||
                    (this.PackageNumber != null &&
                    this.PackageNumber.Equals(input.PackageNumber))
                ) && 
                (
                    this.CarrierCode == input.CarrierCode ||
                    (this.CarrierCode != null &&
                    this.CarrierCode.Equals(input.CarrierCode))
                ) && 
                (
                    this.TrackingNumber == input.TrackingNumber ||
                    (this.TrackingNumber != null &&
                    this.TrackingNumber.Equals(input.TrackingNumber))
                ) && 
                (
                    this.EstimatedArrivalDate == input.EstimatedArrivalDate ||
                    (this.EstimatedArrivalDate != null &&
                    this.EstimatedArrivalDate.Equals(input.EstimatedArrivalDate))
                ) && 
                (
                    this.LockerDetails == input.LockerDetails ||
                    (this.LockerDetails != null &&
                    this.LockerDetails.Equals(input.LockerDetails))
                ) && 
                (
                    this.DeliveryInformation == input.DeliveryInformation ||
                    (this.DeliveryInformation != null &&
                    this.DeliveryInformation.Equals(input.DeliveryInformation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PackageNumber != null)
                    hashCode = hashCode * 59 + this.PackageNumber.GetHashCode();
                if (this.CarrierCode != null)
                    hashCode = hashCode * 59 + this.CarrierCode.GetHashCode();
                if (this.TrackingNumber != null)
                    hashCode = hashCode * 59 + this.TrackingNumber.GetHashCode();
                if (this.EstimatedArrivalDate != null)
                    hashCode = hashCode * 59 + this.EstimatedArrivalDate.GetHashCode();
                if (this.LockerDetails != null)
                    hashCode = hashCode * 59 + this.LockerDetails.GetHashCode();
                if (this.DeliveryInformation != null)
                    hashCode = hashCode * 59 + this.DeliveryInformation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
