/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentOutbound
{
    /// <summary>
    /// A physical address with varying degrees of precision. A more precise address can provide more accurate results than country code and postal code alone.
    /// </summary>
    [DataContract]
    public partial class VariablePrecisionAddress :  IEquatable<VariablePrecisionAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VariablePrecisionAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VariablePrecisionAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VariablePrecisionAddress" /> class.
        /// </summary>
        /// <param name="addressLine1">The first line of the address..</param>
        /// <param name="addressLine2">Additional address information, if required..</param>
        /// <param name="addressLine3">Additional address information, if required..</param>
        /// <param name="city">The city where the person, business, or institution is located. This property should not be used in Japan..</param>
        /// <param name="districtOrCounty">The district or county where the person, business, or institution is located..</param>
        /// <param name="stateOrRegion">The state or region where the person, business or institution is located..</param>
        /// <param name="postalCode">The postal code of the address. (required).</param>
        /// <param name="countryCode">The two digit country code. In ISO 3166-1 alpha-2 format. (required).</param>
        public VariablePrecisionAddress(string addressLine1 = default(string), string addressLine2 = default(string), string addressLine3 = default(string), string city = default(string), string districtOrCounty = default(string), string stateOrRegion = default(string), string postalCode = default(string), string countryCode = default(string))
        {
            // to ensure "postalCode" is required (not null)
            if (postalCode == null)
            {
                throw new InvalidDataException("postalCode is a required property for VariablePrecisionAddress and cannot be null");
            }
            else
            {
                this.PostalCode = postalCode;
            }
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new InvalidDataException("countryCode is a required property for VariablePrecisionAddress and cannot be null");
            }
            else
            {
                this.CountryCode = countryCode;
            }
            this.AddressLine1 = addressLine1;
            this.AddressLine2 = addressLine2;
            this.AddressLine3 = addressLine3;
            this.City = city;
            this.DistrictOrCounty = districtOrCounty;
            this.StateOrRegion = stateOrRegion;
        }
        
        /// <summary>
        /// The first line of the address.
        /// </summary>
        /// <value>The first line of the address.</value>
        [DataMember(Name="addressLine1", EmitDefaultValue=false)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Additional address information, if required.
        /// </summary>
        /// <value>Additional address information, if required.</value>
        [DataMember(Name="addressLine2", EmitDefaultValue=false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Additional address information, if required.
        /// </summary>
        /// <value>Additional address information, if required.</value>
        [DataMember(Name="addressLine3", EmitDefaultValue=false)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The city where the person, business, or institution is located. This property should not be used in Japan.
        /// </summary>
        /// <value>The city where the person, business, or institution is located. This property should not be used in Japan.</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// The district or county where the person, business, or institution is located.
        /// </summary>
        /// <value>The district or county where the person, business, or institution is located.</value>
        [DataMember(Name="districtOrCounty", EmitDefaultValue=false)]
        public string DistrictOrCounty { get; set; }

        /// <summary>
        /// The state or region where the person, business or institution is located.
        /// </summary>
        /// <value>The state or region where the person, business or institution is located.</value>
        [DataMember(Name="stateOrRegion", EmitDefaultValue=false)]
        public string StateOrRegion { get; set; }

        /// <summary>
        /// The postal code of the address.
        /// </summary>
        /// <value>The postal code of the address.</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The two digit country code. In ISO 3166-1 alpha-2 format.
        /// </summary>
        /// <value>The two digit country code. In ISO 3166-1 alpha-2 format.</value>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VariablePrecisionAddress {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  DistrictOrCounty: ").Append(DistrictOrCounty).Append("\n");
            sb.Append("  StateOrRegion: ").Append(StateOrRegion).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VariablePrecisionAddress);
        }

        /// <summary>
        /// Returns true if VariablePrecisionAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of VariablePrecisionAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VariablePrecisionAddress input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddressLine1 == input.AddressLine1 ||
                    (this.AddressLine1 != null &&
                    this.AddressLine1.Equals(input.AddressLine1))
                ) && 
                (
                    this.AddressLine2 == input.AddressLine2 ||
                    (this.AddressLine2 != null &&
                    this.AddressLine2.Equals(input.AddressLine2))
                ) && 
                (
                    this.AddressLine3 == input.AddressLine3 ||
                    (this.AddressLine3 != null &&
                    this.AddressLine3.Equals(input.AddressLine3))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.DistrictOrCounty == input.DistrictOrCounty ||
                    (this.DistrictOrCounty != null &&
                    this.DistrictOrCounty.Equals(input.DistrictOrCounty))
                ) && 
                (
                    this.StateOrRegion == input.StateOrRegion ||
                    (this.StateOrRegion != null &&
                    this.StateOrRegion.Equals(input.StateOrRegion))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressLine1 != null)
                    hashCode = hashCode * 59 + this.AddressLine1.GetHashCode();
                if (this.AddressLine2 != null)
                    hashCode = hashCode * 59 + this.AddressLine2.GetHashCode();
                if (this.AddressLine3 != null)
                    hashCode = hashCode * 59 + this.AddressLine3.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.DistrictOrCounty != null)
                    hashCode = hashCode * 59 + this.DistrictOrCounty.GetHashCode();
                if (this.StateOrRegion != null)
                    hashCode = hashCode * 59 + this.StateOrRegion.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CountryCode (string) maxLength
            if(this.CountryCode != null && this.CountryCode.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryCode, length must be less than 2.", new [] { "CountryCode" });
            }

            // CountryCode (string) minLength
            if(this.CountryCode != null && this.CountryCode.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryCode, length must be greater than 2.", new [] { "CountryCode" });
            }

            yield break;
        }
    }

}
