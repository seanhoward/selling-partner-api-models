/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentOutbound
{
    /// <summary>
    /// The COD (Cash On Delivery) charges that you associate with a COD fulfillment order.
    /// </summary>
    [DataContract]
    public partial class CODSettings :  IEquatable<CODSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CODSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CODSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CODSettings" /> class.
        /// </summary>
        /// <param name="isCodRequired">When true, this fulfillment order requires a COD (Cash On Delivery) payment. (required).</param>
        /// <param name="codCharge">The amount of the COD charge to be collected from the recipient for a COD order..</param>
        /// <param name="codChargeTax">The amount of the tax on the COD charge to be collected from the recipient for a COD order..</param>
        /// <param name="shippingCharge">The amount of the tax on the COD charge to be collected from the recipient for a COD order..</param>
        /// <param name="shippingChargeTax">The amount of the tax on the shipping charge to be collected from the recipient for a COD order..</param>
        public CODSettings(bool? isCodRequired = default(bool?), Money codCharge = default(Money), Money codChargeTax = default(Money), Money shippingCharge = default(Money), Money shippingChargeTax = default(Money))
        {
            // to ensure "isCodRequired" is required (not null)
            if (isCodRequired == null)
            {
                throw new InvalidDataException("isCodRequired is a required property for CODSettings and cannot be null");
            }
            else
            {
                this.IsCodRequired = isCodRequired;
            }
            this.CodCharge = codCharge;
            this.CodChargeTax = codChargeTax;
            this.ShippingCharge = shippingCharge;
            this.ShippingChargeTax = shippingChargeTax;
        }
        
        /// <summary>
        /// When true, this fulfillment order requires a COD (Cash On Delivery) payment.
        /// </summary>
        /// <value>When true, this fulfillment order requires a COD (Cash On Delivery) payment.</value>
        [DataMember(Name="isCodRequired", EmitDefaultValue=false)]
        public bool? IsCodRequired { get; set; }

        /// <summary>
        /// The amount of the COD charge to be collected from the recipient for a COD order.
        /// </summary>
        /// <value>The amount of the COD charge to be collected from the recipient for a COD order.</value>
        [DataMember(Name="codCharge", EmitDefaultValue=false)]
        public Money CodCharge { get; set; }

        /// <summary>
        /// The amount of the tax on the COD charge to be collected from the recipient for a COD order.
        /// </summary>
        /// <value>The amount of the tax on the COD charge to be collected from the recipient for a COD order.</value>
        [DataMember(Name="codChargeTax", EmitDefaultValue=false)]
        public Money CodChargeTax { get; set; }

        /// <summary>
        /// The amount of the tax on the COD charge to be collected from the recipient for a COD order.
        /// </summary>
        /// <value>The amount of the tax on the COD charge to be collected from the recipient for a COD order.</value>
        [DataMember(Name="shippingCharge", EmitDefaultValue=false)]
        public Money ShippingCharge { get; set; }

        /// <summary>
        /// The amount of the tax on the shipping charge to be collected from the recipient for a COD order.
        /// </summary>
        /// <value>The amount of the tax on the shipping charge to be collected from the recipient for a COD order.</value>
        [DataMember(Name="shippingChargeTax", EmitDefaultValue=false)]
        public Money ShippingChargeTax { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CODSettings {\n");
            sb.Append("  IsCodRequired: ").Append(IsCodRequired).Append("\n");
            sb.Append("  CodCharge: ").Append(CodCharge).Append("\n");
            sb.Append("  CodChargeTax: ").Append(CodChargeTax).Append("\n");
            sb.Append("  ShippingCharge: ").Append(ShippingCharge).Append("\n");
            sb.Append("  ShippingChargeTax: ").Append(ShippingChargeTax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CODSettings);
        }

        /// <summary>
        /// Returns true if CODSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of CODSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CODSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsCodRequired == input.IsCodRequired ||
                    (this.IsCodRequired != null &&
                    this.IsCodRequired.Equals(input.IsCodRequired))
                ) && 
                (
                    this.CodCharge == input.CodCharge ||
                    (this.CodCharge != null &&
                    this.CodCharge.Equals(input.CodCharge))
                ) && 
                (
                    this.CodChargeTax == input.CodChargeTax ||
                    (this.CodChargeTax != null &&
                    this.CodChargeTax.Equals(input.CodChargeTax))
                ) && 
                (
                    this.ShippingCharge == input.ShippingCharge ||
                    (this.ShippingCharge != null &&
                    this.ShippingCharge.Equals(input.ShippingCharge))
                ) && 
                (
                    this.ShippingChargeTax == input.ShippingChargeTax ||
                    (this.ShippingChargeTax != null &&
                    this.ShippingChargeTax.Equals(input.ShippingChargeTax))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsCodRequired != null)
                    hashCode = hashCode * 59 + this.IsCodRequired.GetHashCode();
                if (this.CodCharge != null)
                    hashCode = hashCode * 59 + this.CodCharge.GetHashCode();
                if (this.CodChargeTax != null)
                    hashCode = hashCode * 59 + this.CodChargeTax.GetHashCode();
                if (this.ShippingCharge != null)
                    hashCode = hashCode * 59 + this.ShippingCharge.GetHashCode();
                if (this.ShippingChargeTax != null)
                    hashCode = hashCode * 59 + this.ShippingChargeTax.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
