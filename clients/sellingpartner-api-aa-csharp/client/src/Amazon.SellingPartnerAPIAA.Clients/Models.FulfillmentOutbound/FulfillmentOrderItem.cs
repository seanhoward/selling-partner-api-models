/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentOutbound
{
    /// <summary>
    /// Item information for a fulfillment order.
    /// </summary>
    [DataContract]
    public partial class FulfillmentOrderItem :  IEquatable<FulfillmentOrderItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentOrderItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FulfillmentOrderItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentOrderItem" /> class.
        /// </summary>
        /// <param name="sellerSku">The seller SKU of the item. (required).</param>
        /// <param name="sellerFulfillmentOrderItemId">A fulfillment order item identifier submitted with a call to the &#x60;createFulfillmentOrder&#x60; operation. (required).</param>
        /// <param name="quantity">quantity (required).</param>
        /// <param name="giftMessage">A message to the gift recipient, if applicable..</param>
        /// <param name="displayableComment">Item-specific text that displays in recipient-facing materials such as the outbound shipment packing slip..</param>
        /// <param name="fulfillmentNetworkSku">Amazon&#39;s fulfillment network SKU of the item..</param>
        /// <param name="orderItemDisposition">Indicates whether the item is sellable or unsellable..</param>
        /// <param name="cancelledQuantity">The item quantity that was cancelled by the seller. (required).</param>
        /// <param name="unfulfillableQuantity">The item quantity that is unfulfillable. (required).</param>
        /// <param name="estimatedShipDate">The estimated date and time that the item quantity is scheduled to ship from the fulfillment center. Note that this value can change over time. If the shipment that contains the item quantity has been cancelled, &#x60;estimatedShipDate&#x60; is not returned..</param>
        /// <param name="estimatedArrivalDate">The estimated arrival date and time of the item quantity. Note that this value can change over time. If the shipment that contains the item quantity has been cancelled, &#x60;estimatedArrivalDate&#x60; is not returned..</param>
        /// <param name="perUnitPrice">The amount to be collected from the recipient for this item in a COD (Cash On Delivery) order..</param>
        /// <param name="perUnitTax">The tax on the amount to be collected from the recipient for this item in a COD (Cash On Delivery) order..</param>
        /// <param name="perUnitDeclaredValue">The monetary value assigned by the seller to this item. This is a required field for India MCF orders..</param>
        public FulfillmentOrderItem(string sellerSku = default(string), string sellerFulfillmentOrderItemId = default(string), int? quantity = default(int?), string giftMessage = default(string), string displayableComment = default(string), string fulfillmentNetworkSku = default(string), string orderItemDisposition = default(string), int? cancelledQuantity = default(int?), int? unfulfillableQuantity = default(int?), DateTime? estimatedShipDate = default(DateTime?), DateTime? estimatedArrivalDate = default(DateTime?), Money perUnitPrice = default(Money), Money perUnitTax = default(Money), Money perUnitDeclaredValue = default(Money))
        {
            // to ensure "sellerSku" is required (not null)
            if (sellerSku == null)
            {
                throw new InvalidDataException("sellerSku is a required property for FulfillmentOrderItem and cannot be null");
            }
            else
            {
                this.SellerSku = sellerSku;
            }
            // to ensure "sellerFulfillmentOrderItemId" is required (not null)
            if (sellerFulfillmentOrderItemId == null)
            {
                throw new InvalidDataException("sellerFulfillmentOrderItemId is a required property for FulfillmentOrderItem and cannot be null");
            }
            else
            {
                this.SellerFulfillmentOrderItemId = sellerFulfillmentOrderItemId;
            }
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for FulfillmentOrderItem and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            // to ensure "cancelledQuantity" is required (not null)
            if (cancelledQuantity == null)
            {
                throw new InvalidDataException("cancelledQuantity is a required property for FulfillmentOrderItem and cannot be null");
            }
            else
            {
                this.CancelledQuantity = cancelledQuantity;
            }
            // to ensure "unfulfillableQuantity" is required (not null)
            if (unfulfillableQuantity == null)
            {
                throw new InvalidDataException("unfulfillableQuantity is a required property for FulfillmentOrderItem and cannot be null");
            }
            else
            {
                this.UnfulfillableQuantity = unfulfillableQuantity;
            }
            this.GiftMessage = giftMessage;
            this.DisplayableComment = displayableComment;
            this.FulfillmentNetworkSku = fulfillmentNetworkSku;
            this.OrderItemDisposition = orderItemDisposition;
            this.EstimatedShipDate = estimatedShipDate;
            this.EstimatedArrivalDate = estimatedArrivalDate;
            this.PerUnitPrice = perUnitPrice;
            this.PerUnitTax = perUnitTax;
            this.PerUnitDeclaredValue = perUnitDeclaredValue;
        }
        
        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        /// <value>The seller SKU of the item.</value>
        [DataMember(Name="sellerSku", EmitDefaultValue=false)]
        public string SellerSku { get; set; }

        /// <summary>
        /// A fulfillment order item identifier submitted with a call to the &#x60;createFulfillmentOrder&#x60; operation.
        /// </summary>
        /// <value>A fulfillment order item identifier submitted with a call to the &#x60;createFulfillmentOrder&#x60; operation.</value>
        [DataMember(Name="sellerFulfillmentOrderItemId", EmitDefaultValue=false)]
        public string SellerFulfillmentOrderItemId { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// A message to the gift recipient, if applicable.
        /// </summary>
        /// <value>A message to the gift recipient, if applicable.</value>
        [DataMember(Name="giftMessage", EmitDefaultValue=false)]
        public string GiftMessage { get; set; }

        /// <summary>
        /// Item-specific text that displays in recipient-facing materials such as the outbound shipment packing slip.
        /// </summary>
        /// <value>Item-specific text that displays in recipient-facing materials such as the outbound shipment packing slip.</value>
        [DataMember(Name="displayableComment", EmitDefaultValue=false)]
        public string DisplayableComment { get; set; }

        /// <summary>
        /// Amazon&#39;s fulfillment network SKU of the item.
        /// </summary>
        /// <value>Amazon&#39;s fulfillment network SKU of the item.</value>
        [DataMember(Name="fulfillmentNetworkSku", EmitDefaultValue=false)]
        public string FulfillmentNetworkSku { get; set; }

        /// <summary>
        /// Indicates whether the item is sellable or unsellable.
        /// </summary>
        /// <value>Indicates whether the item is sellable or unsellable.</value>
        [DataMember(Name="orderItemDisposition", EmitDefaultValue=false)]
        public string OrderItemDisposition { get; set; }

        /// <summary>
        /// The item quantity that was cancelled by the seller.
        /// </summary>
        /// <value>The item quantity that was cancelled by the seller.</value>
        [DataMember(Name="cancelledQuantity", EmitDefaultValue=false)]
        public int? CancelledQuantity { get; set; }

        /// <summary>
        /// The item quantity that is unfulfillable.
        /// </summary>
        /// <value>The item quantity that is unfulfillable.</value>
        [DataMember(Name="unfulfillableQuantity", EmitDefaultValue=false)]
        public int? UnfulfillableQuantity { get; set; }

        /// <summary>
        /// The estimated date and time that the item quantity is scheduled to ship from the fulfillment center. Note that this value can change over time. If the shipment that contains the item quantity has been cancelled, &#x60;estimatedShipDate&#x60; is not returned.
        /// </summary>
        /// <value>The estimated date and time that the item quantity is scheduled to ship from the fulfillment center. Note that this value can change over time. If the shipment that contains the item quantity has been cancelled, &#x60;estimatedShipDate&#x60; is not returned.</value>
        [DataMember(Name="estimatedShipDate", EmitDefaultValue=false)]
        public DateTime? EstimatedShipDate { get; set; }

        /// <summary>
        /// The estimated arrival date and time of the item quantity. Note that this value can change over time. If the shipment that contains the item quantity has been cancelled, &#x60;estimatedArrivalDate&#x60; is not returned.
        /// </summary>
        /// <value>The estimated arrival date and time of the item quantity. Note that this value can change over time. If the shipment that contains the item quantity has been cancelled, &#x60;estimatedArrivalDate&#x60; is not returned.</value>
        [DataMember(Name="estimatedArrivalDate", EmitDefaultValue=false)]
        public DateTime? EstimatedArrivalDate { get; set; }

        /// <summary>
        /// The amount to be collected from the recipient for this item in a COD (Cash On Delivery) order.
        /// </summary>
        /// <value>The amount to be collected from the recipient for this item in a COD (Cash On Delivery) order.</value>
        [DataMember(Name="perUnitPrice", EmitDefaultValue=false)]
        public Money PerUnitPrice { get; set; }

        /// <summary>
        /// The tax on the amount to be collected from the recipient for this item in a COD (Cash On Delivery) order.
        /// </summary>
        /// <value>The tax on the amount to be collected from the recipient for this item in a COD (Cash On Delivery) order.</value>
        [DataMember(Name="perUnitTax", EmitDefaultValue=false)]
        public Money PerUnitTax { get; set; }

        /// <summary>
        /// The monetary value assigned by the seller to this item. This is a required field for India MCF orders.
        /// </summary>
        /// <value>The monetary value assigned by the seller to this item. This is a required field for India MCF orders.</value>
        [DataMember(Name="perUnitDeclaredValue", EmitDefaultValue=false)]
        public Money PerUnitDeclaredValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentOrderItem {\n");
            sb.Append("  SellerSku: ").Append(SellerSku).Append("\n");
            sb.Append("  SellerFulfillmentOrderItemId: ").Append(SellerFulfillmentOrderItemId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  GiftMessage: ").Append(GiftMessage).Append("\n");
            sb.Append("  DisplayableComment: ").Append(DisplayableComment).Append("\n");
            sb.Append("  FulfillmentNetworkSku: ").Append(FulfillmentNetworkSku).Append("\n");
            sb.Append("  OrderItemDisposition: ").Append(OrderItemDisposition).Append("\n");
            sb.Append("  CancelledQuantity: ").Append(CancelledQuantity).Append("\n");
            sb.Append("  UnfulfillableQuantity: ").Append(UnfulfillableQuantity).Append("\n");
            sb.Append("  EstimatedShipDate: ").Append(EstimatedShipDate).Append("\n");
            sb.Append("  EstimatedArrivalDate: ").Append(EstimatedArrivalDate).Append("\n");
            sb.Append("  PerUnitPrice: ").Append(PerUnitPrice).Append("\n");
            sb.Append("  PerUnitTax: ").Append(PerUnitTax).Append("\n");
            sb.Append("  PerUnitDeclaredValue: ").Append(PerUnitDeclaredValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentOrderItem);
        }

        /// <summary>
        /// Returns true if FulfillmentOrderItem instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentOrderItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentOrderItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SellerSku == input.SellerSku ||
                    (this.SellerSku != null &&
                    this.SellerSku.Equals(input.SellerSku))
                ) && 
                (
                    this.SellerFulfillmentOrderItemId == input.SellerFulfillmentOrderItemId ||
                    (this.SellerFulfillmentOrderItemId != null &&
                    this.SellerFulfillmentOrderItemId.Equals(input.SellerFulfillmentOrderItemId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.GiftMessage == input.GiftMessage ||
                    (this.GiftMessage != null &&
                    this.GiftMessage.Equals(input.GiftMessage))
                ) && 
                (
                    this.DisplayableComment == input.DisplayableComment ||
                    (this.DisplayableComment != null &&
                    this.DisplayableComment.Equals(input.DisplayableComment))
                ) && 
                (
                    this.FulfillmentNetworkSku == input.FulfillmentNetworkSku ||
                    (this.FulfillmentNetworkSku != null &&
                    this.FulfillmentNetworkSku.Equals(input.FulfillmentNetworkSku))
                ) && 
                (
                    this.OrderItemDisposition == input.OrderItemDisposition ||
                    (this.OrderItemDisposition != null &&
                    this.OrderItemDisposition.Equals(input.OrderItemDisposition))
                ) && 
                (
                    this.CancelledQuantity == input.CancelledQuantity ||
                    (this.CancelledQuantity != null &&
                    this.CancelledQuantity.Equals(input.CancelledQuantity))
                ) && 
                (
                    this.UnfulfillableQuantity == input.UnfulfillableQuantity ||
                    (this.UnfulfillableQuantity != null &&
                    this.UnfulfillableQuantity.Equals(input.UnfulfillableQuantity))
                ) && 
                (
                    this.EstimatedShipDate == input.EstimatedShipDate ||
                    (this.EstimatedShipDate != null &&
                    this.EstimatedShipDate.Equals(input.EstimatedShipDate))
                ) && 
                (
                    this.EstimatedArrivalDate == input.EstimatedArrivalDate ||
                    (this.EstimatedArrivalDate != null &&
                    this.EstimatedArrivalDate.Equals(input.EstimatedArrivalDate))
                ) && 
                (
                    this.PerUnitPrice == input.PerUnitPrice ||
                    (this.PerUnitPrice != null &&
                    this.PerUnitPrice.Equals(input.PerUnitPrice))
                ) && 
                (
                    this.PerUnitTax == input.PerUnitTax ||
                    (this.PerUnitTax != null &&
                    this.PerUnitTax.Equals(input.PerUnitTax))
                ) && 
                (
                    this.PerUnitDeclaredValue == input.PerUnitDeclaredValue ||
                    (this.PerUnitDeclaredValue != null &&
                    this.PerUnitDeclaredValue.Equals(input.PerUnitDeclaredValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SellerSku != null)
                    hashCode = hashCode * 59 + this.SellerSku.GetHashCode();
                if (this.SellerFulfillmentOrderItemId != null)
                    hashCode = hashCode * 59 + this.SellerFulfillmentOrderItemId.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.GiftMessage != null)
                    hashCode = hashCode * 59 + this.GiftMessage.GetHashCode();
                if (this.DisplayableComment != null)
                    hashCode = hashCode * 59 + this.DisplayableComment.GetHashCode();
                if (this.FulfillmentNetworkSku != null)
                    hashCode = hashCode * 59 + this.FulfillmentNetworkSku.GetHashCode();
                if (this.OrderItemDisposition != null)
                    hashCode = hashCode * 59 + this.OrderItemDisposition.GetHashCode();
                if (this.CancelledQuantity != null)
                    hashCode = hashCode * 59 + this.CancelledQuantity.GetHashCode();
                if (this.UnfulfillableQuantity != null)
                    hashCode = hashCode * 59 + this.UnfulfillableQuantity.GetHashCode();
                if (this.EstimatedShipDate != null)
                    hashCode = hashCode * 59 + this.EstimatedShipDate.GetHashCode();
                if (this.EstimatedArrivalDate != null)
                    hashCode = hashCode * 59 + this.EstimatedArrivalDate.GetHashCode();
                if (this.PerUnitPrice != null)
                    hashCode = hashCode * 59 + this.PerUnitPrice.GetHashCode();
                if (this.PerUnitTax != null)
                    hashCode = hashCode * 59 + this.PerUnitTax.GetHashCode();
                if (this.PerUnitDeclaredValue != null)
                    hashCode = hashCode * 59 + this.PerUnitDeclaredValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
