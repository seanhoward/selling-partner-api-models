/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentOutbound
{
    /// <summary>
    /// Fee type and cost.
    /// </summary>
    [DataContract]
    public partial class Fee :  IEquatable<Fee>, IValidatableObject
    {
        /// <summary>
        /// The type of fee.
        /// </summary>
        /// <value>The type of fee.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NameEnum
        {
            
            /// <summary>
            /// Enum FBAPerUnitFulfillmentFee for value: FBAPerUnitFulfillmentFee
            /// </summary>
            [EnumMember(Value = "FBAPerUnitFulfillmentFee")]
            FBAPerUnitFulfillmentFee = 1,
            
            /// <summary>
            /// Enum FBAPerOrderFulfillmentFee for value: FBAPerOrderFulfillmentFee
            /// </summary>
            [EnumMember(Value = "FBAPerOrderFulfillmentFee")]
            FBAPerOrderFulfillmentFee = 2,
            
            /// <summary>
            /// Enum FBATransportationFee for value: FBATransportationFee
            /// </summary>
            [EnumMember(Value = "FBATransportationFee")]
            FBATransportationFee = 3,
            
            /// <summary>
            /// Enum FBAFulfillmentCODFee for value: FBAFulfillmentCODFee
            /// </summary>
            [EnumMember(Value = "FBAFulfillmentCODFee")]
            FBAFulfillmentCODFee = 4
        }

        /// <summary>
        /// The type of fee.
        /// </summary>
        /// <value>The type of fee.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public NameEnum Name { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Fee" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Fee() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Fee" /> class.
        /// </summary>
        /// <param name="name">The type of fee. (required).</param>
        /// <param name="amount">The amount of the fee. (required).</param>
        public Fee(NameEnum name = default(NameEnum), Money amount = default(Money))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Fee and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for Fee and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
        }
        

        /// <summary>
        /// The amount of the fee.
        /// </summary>
        /// <value>The amount of the fee.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public Money Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Fee {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Fee);
        }

        /// <summary>
        /// Returns true if Fee instances are equal
        /// </summary>
        /// <param name="input">Instance of Fee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Fee input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
