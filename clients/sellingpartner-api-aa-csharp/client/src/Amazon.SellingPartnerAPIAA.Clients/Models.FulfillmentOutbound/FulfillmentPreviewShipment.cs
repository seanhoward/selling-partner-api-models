/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentOutbound
{
    /// <summary>
    /// Delivery and item information for a shipment in a fulfillment order preview.
    /// </summary>
    [DataContract]
    public partial class FulfillmentPreviewShipment :  IEquatable<FulfillmentPreviewShipment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentPreviewShipment" /> class.
        /// </summary>
        [JsonConstructor]
        protected FulfillmentPreviewShipment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentPreviewShipment" /> class.
        /// </summary>
        /// <param name="earliestShipDate">The earliest date that the shipment is expected to be sent from the fulfillment center. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format..</param>
        /// <param name="latestShipDate">The latest date that the shipment is expected to be sent from the fulfillment center. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format..</param>
        /// <param name="earliestArrivalDate">The earliest date that the shipment is expected to arrive at its destination..</param>
        /// <param name="latestArrivalDate">The latest date that the shipment is expected to arrive at its destination. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format..</param>
        /// <param name="shippingNotes">Provides additional insight into the shipment timeline when exact delivery dates are not able to be precomputed..</param>
        /// <param name="fulfillmentPreviewItems">Information about the items in the shipment. (required).</param>
        public FulfillmentPreviewShipment(DateTime? earliestShipDate = default, DateTime? latestShipDate = default, DateTime? earliestArrivalDate = default, DateTime? latestArrivalDate = default, List<string> shippingNotes = default, FulfillmentPreviewItemList fulfillmentPreviewItems = default)
        {
            // to ensure "fulfillmentPreviewItems" is required (not null)
            if (fulfillmentPreviewItems == null)
            {
                throw new InvalidDataException("fulfillmentPreviewItems is a required property for FulfillmentPreviewShipment and cannot be null");
            }
            else
            {
                this.FulfillmentPreviewItems = fulfillmentPreviewItems;
            }
            this.EarliestShipDate = earliestShipDate;
            this.LatestShipDate = latestShipDate;
            this.EarliestArrivalDate = earliestArrivalDate;
            this.LatestArrivalDate = latestArrivalDate;
            this.ShippingNotes = shippingNotes;
        }
        
        /// <summary>
        /// The earliest date that the shipment is expected to be sent from the fulfillment center. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format.
        /// </summary>
        /// <value>The earliest date that the shipment is expected to be sent from the fulfillment center. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format.</value>
        [DataMember(Name="earliestShipDate", EmitDefaultValue=false)]
        public DateTime? EarliestShipDate { get; set; }

        /// <summary>
        /// The latest date that the shipment is expected to be sent from the fulfillment center. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format.
        /// </summary>
        /// <value>The latest date that the shipment is expected to be sent from the fulfillment center. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format.</value>
        [DataMember(Name="latestShipDate", EmitDefaultValue=false)]
        public DateTime? LatestShipDate { get; set; }

        /// <summary>
        /// The earliest date that the shipment is expected to arrive at its destination.
        /// </summary>
        /// <value>The earliest date that the shipment is expected to arrive at its destination.</value>
        [DataMember(Name="earliestArrivalDate", EmitDefaultValue=false)]
        public DateTime? EarliestArrivalDate { get; set; }

        /// <summary>
        /// The latest date that the shipment is expected to arrive at its destination. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format.
        /// </summary>
        /// <value>The latest date that the shipment is expected to arrive at its destination. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format.</value>
        [DataMember(Name="latestArrivalDate", EmitDefaultValue=false)]
        public DateTime? LatestArrivalDate { get; set; }

        /// <summary>
        /// Provides additional insight into the shipment timeline when exact delivery dates are not able to be precomputed.
        /// </summary>
        /// <value>Provides additional insight into the shipment timeline when exact delivery dates are not able to be precomputed.</value>
        [DataMember(Name="shippingNotes", EmitDefaultValue=false)]
        public List<string> ShippingNotes { get; set; }

        /// <summary>
        /// Information about the items in the shipment.
        /// </summary>
        /// <value>Information about the items in the shipment.</value>
        [DataMember(Name="fulfillmentPreviewItems", EmitDefaultValue=false)]
        public FulfillmentPreviewItemList FulfillmentPreviewItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentPreviewShipment {\n");
            sb.Append("  EarliestShipDate: ").Append(EarliestShipDate).Append("\n");
            sb.Append("  LatestShipDate: ").Append(LatestShipDate).Append("\n");
            sb.Append("  EarliestArrivalDate: ").Append(EarliestArrivalDate).Append("\n");
            sb.Append("  LatestArrivalDate: ").Append(LatestArrivalDate).Append("\n");
            sb.Append("  ShippingNotes: ").Append(ShippingNotes).Append("\n");
            sb.Append("  FulfillmentPreviewItems: ").Append(FulfillmentPreviewItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentPreviewShipment);
        }

        /// <summary>
        /// Returns true if FulfillmentPreviewShipment instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentPreviewShipment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentPreviewShipment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EarliestShipDate == input.EarliestShipDate ||
                    (this.EarliestShipDate != null &&
                    this.EarliestShipDate.Equals(input.EarliestShipDate))
                ) && 
                (
                    this.LatestShipDate == input.LatestShipDate ||
                    (this.LatestShipDate != null &&
                    this.LatestShipDate.Equals(input.LatestShipDate))
                ) && 
                (
                    this.EarliestArrivalDate == input.EarliestArrivalDate ||
                    (this.EarliestArrivalDate != null &&
                    this.EarliestArrivalDate.Equals(input.EarliestArrivalDate))
                ) && 
                (
                    this.LatestArrivalDate == input.LatestArrivalDate ||
                    (this.LatestArrivalDate != null &&
                    this.LatestArrivalDate.Equals(input.LatestArrivalDate))
                ) && 
                (
                    this.ShippingNotes == input.ShippingNotes ||
                    this.ShippingNotes != null &&
                    this.ShippingNotes.SequenceEqual(input.ShippingNotes)
                ) && 
                (
                    this.FulfillmentPreviewItems == input.FulfillmentPreviewItems ||
                    (this.FulfillmentPreviewItems != null &&
                    this.FulfillmentPreviewItems.Equals(input.FulfillmentPreviewItems))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EarliestShipDate != null)
                    hashCode = hashCode * 59 + this.EarliestShipDate.GetHashCode();
                if (this.LatestShipDate != null)
                    hashCode = hashCode * 59 + this.LatestShipDate.GetHashCode();
                if (this.EarliestArrivalDate != null)
                    hashCode = hashCode * 59 + this.EarliestArrivalDate.GetHashCode();
                if (this.LatestArrivalDate != null)
                    hashCode = hashCode * 59 + this.LatestArrivalDate.GetHashCode();
                if (this.ShippingNotes != null)
                    hashCode = hashCode * 59 + this.ShippingNotes.GetHashCode();
                if (this.FulfillmentPreviewItems != null)
                    hashCode = hashCode * 59 + this.FulfillmentPreviewItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
