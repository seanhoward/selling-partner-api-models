/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentOutbound
{
    /// <summary>
    /// The time range within which something (for example, a delivery) will occur.
    /// </summary>
    [DataContract]
    public partial class DateRange : IEquatable<DateRange>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DateRange" /> class.
        /// </summary>
        [JsonConstructor]
        protected DateRange() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DateRange" /> class.
        /// </summary>
        /// <param name="earliest">The earliest point in a date range. (required).</param>
        /// <param name="latest">The latest point in a date range. (required).</param>
        public DateRange(DateTime? earliest = default, DateTime? latest = default)
        {
            // to ensure "earliest" is required (not null)
            if (earliest == null)
            {
                throw new InvalidDataException("earliest is a required property for DateRange and cannot be null");
            }
            else
            {
                this.Earliest = earliest;
            }
            // to ensure "latest" is required (not null)
            if (latest == null)
            {
                throw new InvalidDataException("latest is a required property for DateRange and cannot be null");
            }
            else
            {
                this.Latest = latest;
            }
        }

        /// <summary>
        /// The earliest point in a date range.
        /// </summary>
        /// <value>The earliest point in a date range.</value>
        [DataMember(Name = "earliest", EmitDefaultValue = false)]
        public DateTime? Earliest { get; set; }

        /// <summary>
        /// The latest point in a date range.
        /// </summary>
        /// <value>The latest point in a date range.</value>
        [DataMember(Name = "latest", EmitDefaultValue = false)]
        public DateTime? Latest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DateRange {\n");
            sb.Append("  Earliest: ").Append(Earliest).Append("\n");
            sb.Append("  Latest: ").Append(Latest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DateRange);
        }

        /// <summary>
        /// Returns true if DateRange instances are equal
        /// </summary>
        /// <param name="input">Instance of DateRange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateRange input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Earliest == input.Earliest ||
                    (this.Earliest != null &&
                    this.Earliest.Equals(input.Earliest))
                ) &&
                (
                    this.Latest == input.Latest ||
                    (this.Latest != null &&
                    this.Latest.Equals(input.Latest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Earliest != null)
                    hashCode = hashCode * 59 + this.Earliest.GetHashCode();
                if (this.Latest != null)
                    hashCode = hashCode * 59 + this.Latest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
