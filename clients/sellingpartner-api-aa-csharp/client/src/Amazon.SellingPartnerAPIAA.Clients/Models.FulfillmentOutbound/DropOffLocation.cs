/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentOutbound
{
    /// <summary>
    /// The preferred location to leave packages at the destination address.
    /// </summary>
    [DataContract]
    public partial class DropOffLocation :  IEquatable<DropOffLocation>, IValidatableObject
    {
        /// <summary>
        /// Specifies the preferred location to leave the package at the destination address.
        /// </summary>
        /// <value>Specifies the preferred location to leave the package at the destination address.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum FRONTDOOR for value: FRONT_DOOR
            /// </summary>
            [EnumMember(Value = "FRONT_DOOR")]
            FRONTDOOR = 1,
            
            /// <summary>
            /// Enum DELIVERYBOX for value: DELIVERY_BOX
            /// </summary>
            [EnumMember(Value = "DELIVERY_BOX")]
            DELIVERYBOX = 2,
            
            /// <summary>
            /// Enum GASMETERBOX for value: GAS_METER_BOX
            /// </summary>
            [EnumMember(Value = "GAS_METER_BOX")]
            GASMETERBOX = 3,
            
            /// <summary>
            /// Enum BICYCLEBASKET for value: BICYCLE_BASKET
            /// </summary>
            [EnumMember(Value = "BICYCLE_BASKET")]
            BICYCLEBASKET = 4,
            
            /// <summary>
            /// Enum GARAGE for value: GARAGE
            /// </summary>
            [EnumMember(Value = "GARAGE")]
            GARAGE = 5,
            
            /// <summary>
            /// Enum RECEPTIONIST for value: RECEPTIONIST
            /// </summary>
            [EnumMember(Value = "RECEPTIONIST")]
            RECEPTIONIST = 6,
            
            /// <summary>
            /// Enum FALLBACKNEIGHBORDELIVERY for value: FALLBACK_NEIGHBOR_DELIVERY
            /// </summary>
            [EnumMember(Value = "FALLBACK_NEIGHBOR_DELIVERY")]
            FALLBACKNEIGHBORDELIVERY = 7,
            
            /// <summary>
            /// Enum DONOTLEAVEUNATTENDED for value: DO_NOT_LEAVE_UNATTENDED
            /// </summary>
            [EnumMember(Value = "DO_NOT_LEAVE_UNATTENDED")]
            DONOTLEAVEUNATTENDED = 8
        }

        /// <summary>
        /// Specifies the preferred location to leave the package at the destination address.
        /// </summary>
        /// <value>Specifies the preferred location to leave the package at the destination address.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DropOffLocation" /> class.
        /// </summary>
        [JsonConstructor]
        protected DropOffLocation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DropOffLocation" /> class.
        /// </summary>
        /// <param name="type">Specifies the preferred location to leave the package at the destination address. (required).</param>
        /// <param name="attributes">Additional information about the drop-off location that can vary depending on the type of drop-off location specified in the &#x60;type&#x60; field. If the &#x60;type&#x60; is set to &#x60;FALLBACK_NEIGHBOR_DELIVERY&#x60;, the &#x60;attributes&#x60; object should include the exact keys &#x60;neighborName&#x60; and &#x60;houseNumber&#x60; to provide the name and house number of the designated neighbor..</param>
        public DropOffLocation(TypeEnum type = default, Dictionary<string, string> attributes = default)
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for DropOffLocation and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Attributes = attributes;
        }
        

        /// <summary>
        /// Additional information about the drop-off location that can vary depending on the type of drop-off location specified in the &#x60;type&#x60; field. If the &#x60;type&#x60; is set to &#x60;FALLBACK_NEIGHBOR_DELIVERY&#x60;, the &#x60;attributes&#x60; object should include the exact keys &#x60;neighborName&#x60; and &#x60;houseNumber&#x60; to provide the name and house number of the designated neighbor.
        /// </summary>
        /// <value>Additional information about the drop-off location that can vary depending on the type of drop-off location specified in the &#x60;type&#x60; field. If the &#x60;type&#x60; is set to &#x60;FALLBACK_NEIGHBOR_DELIVERY&#x60;, the &#x60;attributes&#x60; object should include the exact keys &#x60;neighborName&#x60; and &#x60;houseNumber&#x60; to provide the name and house number of the designated neighbor.</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public Dictionary<string, string> Attributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DropOffLocation {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DropOffLocation);
        }

        /// <summary>
        /// Returns true if DropOffLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of DropOffLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DropOffLocation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
