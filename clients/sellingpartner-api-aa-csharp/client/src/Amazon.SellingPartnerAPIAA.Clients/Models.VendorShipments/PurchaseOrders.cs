/* 
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorShipments
{
    /// <summary>
    /// Transport Request pickup date
    /// </summary>
    [DataContract]
    public partial class PurchaseOrders :  IEquatable<PurchaseOrders>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseOrders" /> class.
        /// </summary>
        /// <param name="purchaseOrderNumber">Purchase order numbers involved in this shipment, list all the PO that are involved as part of this shipment..</param>
        /// <param name="purchaseOrderDate">Purchase order numbers involved in this shipment, list all the PO that are involved as part of this shipment..</param>
        /// <param name="shipWindow">Date range in which shipment is expected for these purchase orders..</param>
        /// <param name="items">A list of the items that are associated to the PO in this transport and their associated details..</param>
        public PurchaseOrders(string purchaseOrderNumber = default, DateTime? purchaseOrderDate = default, string shipWindow = default, List<PurchaseOrderItems> items = default)
        {
            this.PurchaseOrderNumber = purchaseOrderNumber;
            this.PurchaseOrderDate = purchaseOrderDate;
            this.ShipWindow = shipWindow;
            this.Items = items;
        }
        
        /// <summary>
        /// Purchase order numbers involved in this shipment, list all the PO that are involved as part of this shipment.
        /// </summary>
        /// <value>Purchase order numbers involved in this shipment, list all the PO that are involved as part of this shipment.</value>
        [DataMember(Name="purchaseOrderNumber", EmitDefaultValue=false)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Purchase order numbers involved in this shipment, list all the PO that are involved as part of this shipment.
        /// </summary>
        /// <value>Purchase order numbers involved in this shipment, list all the PO that are involved as part of this shipment.</value>
        [DataMember(Name="purchaseOrderDate", EmitDefaultValue=false)]
        public DateTime? PurchaseOrderDate { get; set; }

        /// <summary>
        /// Date range in which shipment is expected for these purchase orders.
        /// </summary>
        /// <value>Date range in which shipment is expected for these purchase orders.</value>
        [DataMember(Name="shipWindow", EmitDefaultValue=false)]
        public string ShipWindow { get; set; }

        /// <summary>
        /// A list of the items that are associated to the PO in this transport and their associated details.
        /// </summary>
        /// <value>A list of the items that are associated to the PO in this transport and their associated details.</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<PurchaseOrderItems> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseOrders {\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  PurchaseOrderDate: ").Append(PurchaseOrderDate).Append("\n");
            sb.Append("  ShipWindow: ").Append(ShipWindow).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PurchaseOrders);
        }

        /// <summary>
        /// Returns true if PurchaseOrders instances are equal
        /// </summary>
        /// <param name="input">Instance of PurchaseOrders to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseOrders input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PurchaseOrderNumber == input.PurchaseOrderNumber ||
                    (this.PurchaseOrderNumber != null &&
                    this.PurchaseOrderNumber.Equals(input.PurchaseOrderNumber))
                ) && 
                (
                    this.PurchaseOrderDate == input.PurchaseOrderDate ||
                    (this.PurchaseOrderDate != null &&
                    this.PurchaseOrderDate.Equals(input.PurchaseOrderDate))
                ) && 
                (
                    this.ShipWindow == input.ShipWindow ||
                    (this.ShipWindow != null &&
                    this.ShipWindow.Equals(input.ShipWindow))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderNumber.GetHashCode();
                if (this.PurchaseOrderDate != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderDate.GetHashCode();
                if (this.ShipWindow != null)
                    hashCode = hashCode * 59 + this.ShipWindow.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
