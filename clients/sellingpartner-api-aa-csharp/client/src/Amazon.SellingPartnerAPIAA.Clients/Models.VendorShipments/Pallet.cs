/* 
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorShipments
{
    /// <summary>
    /// Details of the Pallet/Tare being shipped.
    /// </summary>
    [DataContract]
    public partial class Pallet :  IEquatable<Pallet>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Pallet" /> class.
        /// </summary>
        [JsonConstructor]
        protected Pallet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Pallet" /> class.
        /// </summary>
        /// <param name="palletIdentifiers">A list of pallet identifiers. (required).</param>
        /// <param name="tier">Number of layers per pallet. Only applicable to container type Pallet..</param>
        /// <param name="block">Number of cartons per layer on the pallet. Only applicable to container type Pallet..</param>
        /// <param name="dimensions">dimensions.</param>
        /// <param name="weight">weight.</param>
        /// <param name="cartonReferenceDetails">Carton reference details..</param>
        /// <param name="items">A list of container item details..</param>
        public Pallet(List<ContainerIdentification> palletIdentifiers = default, int? tier = default, int? block = default, Dimensions dimensions = default, Weight weight = default, CartonReferenceDetails cartonReferenceDetails = default, List<ContainerItem> items = default)
        {
            // to ensure "palletIdentifiers" is required (not null)
            if (palletIdentifiers == null)
            {
                throw new InvalidDataException("palletIdentifiers is a required property for Pallet and cannot be null");
            }
            else
            {
                this.PalletIdentifiers = palletIdentifiers;
            }
            this.Tier = tier;
            this.Block = block;
            this.Dimensions = dimensions;
            this.Weight = weight;
            this.CartonReferenceDetails = cartonReferenceDetails;
            this.Items = items;
        }
        
        /// <summary>
        /// A list of pallet identifiers.
        /// </summary>
        /// <value>A list of pallet identifiers.</value>
        [DataMember(Name="palletIdentifiers", EmitDefaultValue=false)]
        public List<ContainerIdentification> PalletIdentifiers { get; set; }

        /// <summary>
        /// Number of layers per pallet. Only applicable to container type Pallet.
        /// </summary>
        /// <value>Number of layers per pallet. Only applicable to container type Pallet.</value>
        [DataMember(Name="tier", EmitDefaultValue=false)]
        public int? Tier { get; set; }

        /// <summary>
        /// Number of cartons per layer on the pallet. Only applicable to container type Pallet.
        /// </summary>
        /// <value>Number of cartons per layer on the pallet. Only applicable to container type Pallet.</value>
        [DataMember(Name="block", EmitDefaultValue=false)]
        public int? Block { get; set; }

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name="dimensions", EmitDefaultValue=false)]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public Weight Weight { get; set; }

        /// <summary>
        /// Carton reference details.
        /// </summary>
        /// <value>Carton reference details.</value>
        [DataMember(Name="cartonReferenceDetails", EmitDefaultValue=false)]
        public CartonReferenceDetails CartonReferenceDetails { get; set; }

        /// <summary>
        /// A list of container item details.
        /// </summary>
        /// <value>A list of container item details.</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<ContainerItem> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Pallet {\n");
            sb.Append("  PalletIdentifiers: ").Append(PalletIdentifiers).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  CartonReferenceDetails: ").Append(CartonReferenceDetails).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Pallet);
        }

        /// <summary>
        /// Returns true if Pallet instances are equal
        /// </summary>
        /// <param name="input">Instance of Pallet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Pallet input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PalletIdentifiers == input.PalletIdentifiers ||
                    this.PalletIdentifiers != null &&
                    this.PalletIdentifiers.SequenceEqual(input.PalletIdentifiers)
                ) && 
                (
                    this.Tier == input.Tier ||
                    (this.Tier != null &&
                    this.Tier.Equals(input.Tier))
                ) && 
                (
                    this.Block == input.Block ||
                    (this.Block != null &&
                    this.Block.Equals(input.Block))
                ) && 
                (
                    this.Dimensions == input.Dimensions ||
                    (this.Dimensions != null &&
                    this.Dimensions.Equals(input.Dimensions))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.CartonReferenceDetails == input.CartonReferenceDetails ||
                    (this.CartonReferenceDetails != null &&
                    this.CartonReferenceDetails.Equals(input.CartonReferenceDetails))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PalletIdentifiers != null)
                    hashCode = hashCode * 59 + this.PalletIdentifiers.GetHashCode();
                if (this.Tier != null)
                    hashCode = hashCode * 59 + this.Tier.GetHashCode();
                if (this.Block != null)
                    hashCode = hashCode * 59 + this.Block.GetHashCode();
                if (this.Dimensions != null)
                    hashCode = hashCode * 59 + this.Dimensions.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.CartonReferenceDetails != null)
                    hashCode = hashCode * 59 + this.CartonReferenceDetails.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
