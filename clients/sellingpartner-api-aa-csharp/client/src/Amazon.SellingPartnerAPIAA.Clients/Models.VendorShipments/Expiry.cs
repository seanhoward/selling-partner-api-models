/* 
 * Vendor Shipments v1
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorShipments
{
    /// <summary>
    /// Expiry refers to the collection of dates required  for certain items. These could be either expiryDate or mfgDate and expiryAfterDuration. These are mandatory for perishable items.
    /// </summary>
    [DataContract]
    public partial class Expiry :  IEquatable<Expiry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Expiry" /> class.
        /// </summary>
        /// <param name="manufacturerDate">Production, packaging or assembly date determined by the manufacturer. Its meaning is determined based on the trade item context..</param>
        /// <param name="expiryDate">The date that determines the limit of consumption or use of a product. Its meaning is determined based on the trade item context..</param>
        /// <param name="expiryAfterDuration">Duration after manufacturing date during which the product is valid for consumption..</param>
        public Expiry(DateTime? manufacturerDate = default(DateTime?), DateTime? expiryDate = default(DateTime?), Duration expiryAfterDuration = default(Duration))
        {
            this.ManufacturerDate = manufacturerDate;
            this.ExpiryDate = expiryDate;
            this.ExpiryAfterDuration = expiryAfterDuration;
        }
        
        /// <summary>
        /// Production, packaging or assembly date determined by the manufacturer. Its meaning is determined based on the trade item context.
        /// </summary>
        /// <value>Production, packaging or assembly date determined by the manufacturer. Its meaning is determined based on the trade item context.</value>
        [DataMember(Name="manufacturerDate", EmitDefaultValue=false)]
        public DateTime? ManufacturerDate { get; set; }

        /// <summary>
        /// The date that determines the limit of consumption or use of a product. Its meaning is determined based on the trade item context.
        /// </summary>
        /// <value>The date that determines the limit of consumption or use of a product. Its meaning is determined based on the trade item context.</value>
        [DataMember(Name="expiryDate", EmitDefaultValue=false)]
        public DateTime? ExpiryDate { get; set; }

        /// <summary>
        /// Duration after manufacturing date during which the product is valid for consumption.
        /// </summary>
        /// <value>Duration after manufacturing date during which the product is valid for consumption.</value>
        [DataMember(Name="expiryAfterDuration", EmitDefaultValue=false)]
        public Duration ExpiryAfterDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Expiry {\n");
            sb.Append("  ManufacturerDate: ").Append(ManufacturerDate).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  ExpiryAfterDuration: ").Append(ExpiryAfterDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Expiry);
        }

        /// <summary>
        /// Returns true if Expiry instances are equal
        /// </summary>
        /// <param name="input">Instance of Expiry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Expiry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ManufacturerDate == input.ManufacturerDate ||
                    (this.ManufacturerDate != null &&
                    this.ManufacturerDate.Equals(input.ManufacturerDate))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.ExpiryAfterDuration == input.ExpiryAfterDuration ||
                    (this.ExpiryAfterDuration != null &&
                    this.ExpiryAfterDuration.Equals(input.ExpiryAfterDuration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ManufacturerDate != null)
                    hashCode = hashCode * 59 + this.ManufacturerDate.GetHashCode();
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                if (this.ExpiryAfterDuration != null)
                    hashCode = hashCode * 59 + this.ExpiryAfterDuration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
