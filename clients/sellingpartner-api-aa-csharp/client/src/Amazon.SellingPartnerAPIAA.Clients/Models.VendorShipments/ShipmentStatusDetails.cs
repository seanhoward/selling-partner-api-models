/* 
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorShipments
{
    /// <summary>
    /// Shipment Status details.
    /// </summary>
    [DataContract]
    public partial class ShipmentStatusDetails :  IEquatable<ShipmentStatusDetails>, IValidatableObject
    {
        /// <summary>
        /// Current status of the shipment on whether it is picked up or scheduled.
        /// </summary>
        /// <value>Current status of the shipment on whether it is picked up or scheduled.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShipmentStatusEnum
        {
            
            /// <summary>
            /// Enum Created for value: Created
            /// </summary>
            [EnumMember(Value = "Created")]
            Created = 1,
            
            /// <summary>
            /// Enum TransportationRequested for value: TransportationRequested
            /// </summary>
            [EnumMember(Value = "TransportationRequested")]
            TransportationRequested = 2,
            
            /// <summary>
            /// Enum CarrierAssigned for value: CarrierAssigned
            /// </summary>
            [EnumMember(Value = "CarrierAssigned")]
            CarrierAssigned = 3,
            
            /// <summary>
            /// Enum Shipped for value: Shipped
            /// </summary>
            [EnumMember(Value = "Shipped")]
            Shipped = 4
        }

        /// <summary>
        /// Current status of the shipment on whether it is picked up or scheduled.
        /// </summary>
        /// <value>Current status of the shipment on whether it is picked up or scheduled.</value>
        [DataMember(Name="shipmentStatus", EmitDefaultValue=false)]
        public ShipmentStatusEnum? ShipmentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentStatusDetails" /> class.
        /// </summary>
        /// <param name="shipmentStatus">Current status of the shipment on whether it is picked up or scheduled..</param>
        /// <param name="shipmentStatusDate">Date and time on last status update received for the shipment.</param>
        public ShipmentStatusDetails(ShipmentStatusEnum? shipmentStatus = default, DateTime? shipmentStatusDate = default)
        {
            this.ShipmentStatus = shipmentStatus;
            this.ShipmentStatusDate = shipmentStatusDate;
        }
        

        /// <summary>
        /// Date and time on last status update received for the shipment
        /// </summary>
        /// <value>Date and time on last status update received for the shipment</value>
        [DataMember(Name="shipmentStatusDate", EmitDefaultValue=false)]
        public DateTime? ShipmentStatusDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipmentStatusDetails {\n");
            sb.Append("  ShipmentStatus: ").Append(ShipmentStatus).Append("\n");
            sb.Append("  ShipmentStatusDate: ").Append(ShipmentStatusDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipmentStatusDetails);
        }

        /// <summary>
        /// Returns true if ShipmentStatusDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipmentStatusDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentStatusDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ShipmentStatus == input.ShipmentStatus ||
                    (this.ShipmentStatus != null &&
                    this.ShipmentStatus.Equals(input.ShipmentStatus))
                ) && 
                (
                    this.ShipmentStatusDate == input.ShipmentStatusDate ||
                    (this.ShipmentStatusDate != null &&
                    this.ShipmentStatusDate.Equals(input.ShipmentStatusDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShipmentStatus != null)
                    hashCode = hashCode * 59 + this.ShipmentStatus.GetHashCode();
                if (this.ShipmentStatusDate != null)
                    hashCode = hashCode * 59 + this.ShipmentStatusDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
