/* 
 * Vendor Shipments v1
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorShipments
{
    /// <summary>
    /// Shipment measurement details.
    /// </summary>
    [DataContract]
    public partial class TransportShipmentMeasurements :  IEquatable<TransportShipmentMeasurements>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransportShipmentMeasurements" /> class.
        /// </summary>
        /// <param name="totalCartonCount">Total number of cartons present in the shipment. Provide the cartonCount only for non-palletized shipments..</param>
        /// <param name="totalPalletStackable">Total number of Stackable Pallets present in the shipment..</param>
        /// <param name="totalPalletNonStackable">Total number of Non Stackable Pallets present in the shipment..</param>
        /// <param name="shipmentWeight">Total Weight of the shipment..</param>
        /// <param name="shipmentVolume">Total Volume of the shipment..</param>
        public TransportShipmentMeasurements(int? totalCartonCount = default(int?), int? totalPalletStackable = default(int?), int? totalPalletNonStackable = default(int?), Weight shipmentWeight = default(Weight), Volume shipmentVolume = default(Volume))
        {
            this.TotalCartonCount = totalCartonCount;
            this.TotalPalletStackable = totalPalletStackable;
            this.TotalPalletNonStackable = totalPalletNonStackable;
            this.ShipmentWeight = shipmentWeight;
            this.ShipmentVolume = shipmentVolume;
        }
        
        /// <summary>
        /// Total number of cartons present in the shipment. Provide the cartonCount only for non-palletized shipments.
        /// </summary>
        /// <value>Total number of cartons present in the shipment. Provide the cartonCount only for non-palletized shipments.</value>
        [DataMember(Name="totalCartonCount", EmitDefaultValue=false)]
        public int? TotalCartonCount { get; set; }

        /// <summary>
        /// Total number of Stackable Pallets present in the shipment.
        /// </summary>
        /// <value>Total number of Stackable Pallets present in the shipment.</value>
        [DataMember(Name="totalPalletStackable", EmitDefaultValue=false)]
        public int? TotalPalletStackable { get; set; }

        /// <summary>
        /// Total number of Non Stackable Pallets present in the shipment.
        /// </summary>
        /// <value>Total number of Non Stackable Pallets present in the shipment.</value>
        [DataMember(Name="totalPalletNonStackable", EmitDefaultValue=false)]
        public int? TotalPalletNonStackable { get; set; }

        /// <summary>
        /// Total Weight of the shipment.
        /// </summary>
        /// <value>Total Weight of the shipment.</value>
        [DataMember(Name="shipmentWeight", EmitDefaultValue=false)]
        public Weight ShipmentWeight { get; set; }

        /// <summary>
        /// Total Volume of the shipment.
        /// </summary>
        /// <value>Total Volume of the shipment.</value>
        [DataMember(Name="shipmentVolume", EmitDefaultValue=false)]
        public Volume ShipmentVolume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransportShipmentMeasurements {\n");
            sb.Append("  TotalCartonCount: ").Append(TotalCartonCount).Append("\n");
            sb.Append("  TotalPalletStackable: ").Append(TotalPalletStackable).Append("\n");
            sb.Append("  TotalPalletNonStackable: ").Append(TotalPalletNonStackable).Append("\n");
            sb.Append("  ShipmentWeight: ").Append(ShipmentWeight).Append("\n");
            sb.Append("  ShipmentVolume: ").Append(ShipmentVolume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransportShipmentMeasurements);
        }

        /// <summary>
        /// Returns true if TransportShipmentMeasurements instances are equal
        /// </summary>
        /// <param name="input">Instance of TransportShipmentMeasurements to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransportShipmentMeasurements input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TotalCartonCount == input.TotalCartonCount ||
                    (this.TotalCartonCount != null &&
                    this.TotalCartonCount.Equals(input.TotalCartonCount))
                ) && 
                (
                    this.TotalPalletStackable == input.TotalPalletStackable ||
                    (this.TotalPalletStackable != null &&
                    this.TotalPalletStackable.Equals(input.TotalPalletStackable))
                ) && 
                (
                    this.TotalPalletNonStackable == input.TotalPalletNonStackable ||
                    (this.TotalPalletNonStackable != null &&
                    this.TotalPalletNonStackable.Equals(input.TotalPalletNonStackable))
                ) && 
                (
                    this.ShipmentWeight == input.ShipmentWeight ||
                    (this.ShipmentWeight != null &&
                    this.ShipmentWeight.Equals(input.ShipmentWeight))
                ) && 
                (
                    this.ShipmentVolume == input.ShipmentVolume ||
                    (this.ShipmentVolume != null &&
                    this.ShipmentVolume.Equals(input.ShipmentVolume))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalCartonCount != null)
                    hashCode = hashCode * 59 + this.TotalCartonCount.GetHashCode();
                if (this.TotalPalletStackable != null)
                    hashCode = hashCode * 59 + this.TotalPalletStackable.GetHashCode();
                if (this.TotalPalletNonStackable != null)
                    hashCode = hashCode * 59 + this.TotalPalletNonStackable.GetHashCode();
                if (this.ShipmentWeight != null)
                    hashCode = hashCode * 59 + this.ShipmentWeight.GetHashCode();
                if (this.ShipmentVolume != null)
                    hashCode = hashCode * 59 + this.ShipmentVolume.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
