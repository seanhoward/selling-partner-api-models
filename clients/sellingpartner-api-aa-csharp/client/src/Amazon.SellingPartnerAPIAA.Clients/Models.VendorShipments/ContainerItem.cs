/* 
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorShipments
{
    /// <summary>
    /// Carton/Pallet level details for the item.
    /// </summary>
    [DataContract]
    public partial class ContainerItem :  IEquatable<ContainerItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContainerItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerItem" /> class.
        /// </summary>
        /// <param name="itemReference">The reference number for the item. Please provide the itemSequenceNumber from the &#39;items&#39; segment to refer to that item&#39;s details here. (required).</param>
        /// <param name="shippedQuantity">Total item quantity shipped in this carton/pallet. (required).</param>
        /// <param name="itemDetails">itemDetails.</param>
        public ContainerItem(string itemReference = default(string), ItemQuantity shippedQuantity = default(ItemQuantity), ItemDetails itemDetails = default(ItemDetails))
        {
            // to ensure "itemReference" is required (not null)
            if (itemReference == null)
            {
                throw new InvalidDataException("itemReference is a required property for ContainerItem and cannot be null");
            }
            else
            {
                this.ItemReference = itemReference;
            }
            // to ensure "shippedQuantity" is required (not null)
            if (shippedQuantity == null)
            {
                throw new InvalidDataException("shippedQuantity is a required property for ContainerItem and cannot be null");
            }
            else
            {
                this.ShippedQuantity = shippedQuantity;
            }
            this.ItemDetails = itemDetails;
        }
        
        /// <summary>
        /// The reference number for the item. Please provide the itemSequenceNumber from the &#39;items&#39; segment to refer to that item&#39;s details here.
        /// </summary>
        /// <value>The reference number for the item. Please provide the itemSequenceNumber from the &#39;items&#39; segment to refer to that item&#39;s details here.</value>
        [DataMember(Name="itemReference", EmitDefaultValue=false)]
        public string ItemReference { get; set; }

        /// <summary>
        /// Total item quantity shipped in this carton/pallet.
        /// </summary>
        /// <value>Total item quantity shipped in this carton/pallet.</value>
        [DataMember(Name="shippedQuantity", EmitDefaultValue=false)]
        public ItemQuantity ShippedQuantity { get; set; }

        /// <summary>
        /// Gets or Sets ItemDetails
        /// </summary>
        [DataMember(Name="itemDetails", EmitDefaultValue=false)]
        public ItemDetails ItemDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContainerItem {\n");
            sb.Append("  ItemReference: ").Append(ItemReference).Append("\n");
            sb.Append("  ShippedQuantity: ").Append(ShippedQuantity).Append("\n");
            sb.Append("  ItemDetails: ").Append(ItemDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContainerItem);
        }

        /// <summary>
        /// Returns true if ContainerItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ContainerItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContainerItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemReference == input.ItemReference ||
                    (this.ItemReference != null &&
                    this.ItemReference.Equals(input.ItemReference))
                ) && 
                (
                    this.ShippedQuantity == input.ShippedQuantity ||
                    (this.ShippedQuantity != null &&
                    this.ShippedQuantity.Equals(input.ShippedQuantity))
                ) && 
                (
                    this.ItemDetails == input.ItemDetails ||
                    (this.ItemDetails != null &&
                    this.ItemDetails.Equals(input.ItemDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemReference != null)
                    hashCode = hashCode * 59 + this.ItemReference.GetHashCode();
                if (this.ShippedQuantity != null)
                    hashCode = hashCode * 59 + this.ShippedQuantity.GetHashCode();
                if (this.ItemDetails != null)
                    hashCode = hashCode * 59 + this.ItemDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
