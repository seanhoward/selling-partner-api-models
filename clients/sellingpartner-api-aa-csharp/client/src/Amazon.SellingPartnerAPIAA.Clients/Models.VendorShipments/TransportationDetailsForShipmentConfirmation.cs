/* 
 * Vendor Shipments v1
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorShipments
{
    /// <summary>
    /// Transportation details for this shipment.
    /// </summary>
    [DataContract]
    public partial class TransportationDetailsForShipmentConfirmation :  IEquatable<TransportationDetailsForShipmentConfirmation>, IValidatableObject
    {
        /// <summary>
        /// The mode of transportation for this shipment.
        /// </summary>
        /// <value>The mode of transportation for this shipment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransportationModeEnum
        {
            
            /// <summary>
            /// Enum Road for value: Road
            /// </summary>
            [EnumMember(Value = "Road")]
            Road = 1,
            
            /// <summary>
            /// Enum Air for value: Air
            /// </summary>
            [EnumMember(Value = "Air")]
            Air = 2,
            
            /// <summary>
            /// Enum Ocean for value: Ocean
            /// </summary>
            [EnumMember(Value = "Ocean")]
            Ocean = 3
        }

        /// <summary>
        /// The mode of transportation for this shipment.
        /// </summary>
        /// <value>The mode of transportation for this shipment.</value>
        [DataMember(Name="transportationMode", EmitDefaultValue=false)]
        public TransportationModeEnum? TransportationMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransportationDetailsForShipmentConfirmation" /> class.
        /// </summary>
        /// <param name="carrierScac">Code that identifies the carrier for the shipment. The Standard Carrier Alpha Code (SCAC) is a unique two to four letter code used to identify a carrier. Carrier SCAC codes are assigned and maintained by the NMFTA (National Motor Freight Association). This field is mandatory for US, CA, MX shipment confirmations..</param>
        /// <param name="carrierShipmentReferenceNumber">The field also known as PRO number is a unique number assigned by the carrier. It is used to identify and track the shipment that goes out for delivery. This field is mandatory for UA, CA, MX shipment confirmations..</param>
        /// <param name="transportationMode">The mode of transportation for this shipment..</param>
        /// <param name="billOfLadingNumber">The Bill of Lading (BOL) number is a unique number assigned to each shipment of goods by the vendor or shipper during the creation of the Bill of Lading. This number must be unique for every shipment and cannot be a date/time or single character. The BOL numer is mandatory in Shipment Confirmation message for FTL and LTL shipments, and must match the paper BOL provided with the shipment. Instead of BOL, an alternative reference number (like Delivery Note Number) for the shipment can also be sent in this field..</param>
        public TransportationDetailsForShipmentConfirmation(string carrierScac = default(string), string carrierShipmentReferenceNumber = default(string), TransportationModeEnum? transportationMode = default(TransportationModeEnum?), string billOfLadingNumber = default(string))
        {
            this.CarrierScac = carrierScac;
            this.CarrierShipmentReferenceNumber = carrierShipmentReferenceNumber;
            this.TransportationMode = transportationMode;
            this.BillOfLadingNumber = billOfLadingNumber;
        }
        
        /// <summary>
        /// Code that identifies the carrier for the shipment. The Standard Carrier Alpha Code (SCAC) is a unique two to four letter code used to identify a carrier. Carrier SCAC codes are assigned and maintained by the NMFTA (National Motor Freight Association). This field is mandatory for US, CA, MX shipment confirmations.
        /// </summary>
        /// <value>Code that identifies the carrier for the shipment. The Standard Carrier Alpha Code (SCAC) is a unique two to four letter code used to identify a carrier. Carrier SCAC codes are assigned and maintained by the NMFTA (National Motor Freight Association). This field is mandatory for US, CA, MX shipment confirmations.</value>
        [DataMember(Name="carrierScac", EmitDefaultValue=false)]
        public string CarrierScac { get; set; }

        /// <summary>
        /// The field also known as PRO number is a unique number assigned by the carrier. It is used to identify and track the shipment that goes out for delivery. This field is mandatory for UA, CA, MX shipment confirmations.
        /// </summary>
        /// <value>The field also known as PRO number is a unique number assigned by the carrier. It is used to identify and track the shipment that goes out for delivery. This field is mandatory for UA, CA, MX shipment confirmations.</value>
        [DataMember(Name="carrierShipmentReferenceNumber", EmitDefaultValue=false)]
        public string CarrierShipmentReferenceNumber { get; set; }


        /// <summary>
        /// The Bill of Lading (BOL) number is a unique number assigned to each shipment of goods by the vendor or shipper during the creation of the Bill of Lading. This number must be unique for every shipment and cannot be a date/time or single character. The BOL numer is mandatory in Shipment Confirmation message for FTL and LTL shipments, and must match the paper BOL provided with the shipment. Instead of BOL, an alternative reference number (like Delivery Note Number) for the shipment can also be sent in this field.
        /// </summary>
        /// <value>The Bill of Lading (BOL) number is a unique number assigned to each shipment of goods by the vendor or shipper during the creation of the Bill of Lading. This number must be unique for every shipment and cannot be a date/time or single character. The BOL numer is mandatory in Shipment Confirmation message for FTL and LTL shipments, and must match the paper BOL provided with the shipment. Instead of BOL, an alternative reference number (like Delivery Note Number) for the shipment can also be sent in this field.</value>
        [DataMember(Name="billOfLadingNumber", EmitDefaultValue=false)]
        public string BillOfLadingNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransportationDetailsForShipmentConfirmation {\n");
            sb.Append("  CarrierScac: ").Append(CarrierScac).Append("\n");
            sb.Append("  CarrierShipmentReferenceNumber: ").Append(CarrierShipmentReferenceNumber).Append("\n");
            sb.Append("  TransportationMode: ").Append(TransportationMode).Append("\n");
            sb.Append("  BillOfLadingNumber: ").Append(BillOfLadingNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransportationDetailsForShipmentConfirmation);
        }

        /// <summary>
        /// Returns true if TransportationDetailsForShipmentConfirmation instances are equal
        /// </summary>
        /// <param name="input">Instance of TransportationDetailsForShipmentConfirmation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransportationDetailsForShipmentConfirmation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CarrierScac == input.CarrierScac ||
                    (this.CarrierScac != null &&
                    this.CarrierScac.Equals(input.CarrierScac))
                ) && 
                (
                    this.CarrierShipmentReferenceNumber == input.CarrierShipmentReferenceNumber ||
                    (this.CarrierShipmentReferenceNumber != null &&
                    this.CarrierShipmentReferenceNumber.Equals(input.CarrierShipmentReferenceNumber))
                ) && 
                (
                    this.TransportationMode == input.TransportationMode ||
                    (this.TransportationMode != null &&
                    this.TransportationMode.Equals(input.TransportationMode))
                ) && 
                (
                    this.BillOfLadingNumber == input.BillOfLadingNumber ||
                    (this.BillOfLadingNumber != null &&
                    this.BillOfLadingNumber.Equals(input.BillOfLadingNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CarrierScac != null)
                    hashCode = hashCode * 59 + this.CarrierScac.GetHashCode();
                if (this.CarrierShipmentReferenceNumber != null)
                    hashCode = hashCode * 59 + this.CarrierShipmentReferenceNumber.GetHashCode();
                if (this.TransportationMode != null)
                    hashCode = hashCode * 59 + this.TransportationMode.GetHashCode();
                if (this.BillOfLadingNumber != null)
                    hashCode = hashCode * 59 + this.BillOfLadingNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
