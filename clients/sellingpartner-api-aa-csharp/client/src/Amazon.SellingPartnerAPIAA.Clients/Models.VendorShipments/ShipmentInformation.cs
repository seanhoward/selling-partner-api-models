/* 
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorShipments
{
    /// <summary>
    /// Shipment Information details for Label request.
    /// </summary>
    [DataContract]
    public partial class ShipmentInformation : IEquatable<ShipmentInformation>, IValidatableObject
    {
        /// <summary>
        /// Type of shipment whether it is Small Parcel
        /// </summary>
        /// <value>Type of shipment whether it is Small Parcel</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShipModeEnum
        {

            /// <summary>
            /// Enum SmallParcel for value: SmallParcel
            /// </summary>
            [EnumMember(Value = "SmallParcel")]
            SmallParcel = 1,

            /// <summary>
            /// Enum LTL for value: LTL
            /// </summary>
            [EnumMember(Value = "LTL")]
            LTL = 2
        }

        /// <summary>
        /// Type of shipment whether it is Small Parcel
        /// </summary>
        /// <value>Type of shipment whether it is Small Parcel</value>
        [DataMember(Name = "shipMode", EmitDefaultValue = false)]
        public ShipModeEnum? ShipMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentInformation" /> class.
        /// </summary>
        /// <param name="vendorDetails">Vendor Details requesting for Shipment Label.</param>
        /// <param name="buyerReferenceNumber">The buyer reference number is a unique identifier generated by the buyer for all Collect and WePay shipments..</param>
        /// <param name="shipToParty">The name and address of the destination warehouse where the shipment is being shipped..</param>
        /// <param name="shipFromParty">Name/Address of the destination warehouse where the shipment is being shipped to..</param>
        /// <param name="warehouseId">Vendor Warehouse ID from where the shipment is scheduled to be picked up by buyer / Carrier..</param>
        /// <param name="masterTrackingId">Unique Id with  which  the shipment can be tracked for Small Parcels..</param>
        /// <param name="totalLabelCount">Number of Labels that are created as part of this shipment..</param>
        /// <param name="shipMode">Type of shipment whether it is Small Parcel.</param>
        public ShipmentInformation(VendorDetails vendorDetails = default, string buyerReferenceNumber = default, PartyIdentification shipToParty = default, PartyIdentification shipFromParty = default, string warehouseId = default, string masterTrackingId = default, int? totalLabelCount = default, ShipModeEnum? shipMode = default)
        {
            this.VendorDetails = vendorDetails;
            this.BuyerReferenceNumber = buyerReferenceNumber;
            this.ShipToParty = shipToParty;
            this.ShipFromParty = shipFromParty;
            this.WarehouseId = warehouseId;
            this.MasterTrackingId = masterTrackingId;
            this.TotalLabelCount = totalLabelCount;
            this.ShipMode = shipMode;
        }

        /// <summary>
        /// Vendor Details requesting for Shipment Label
        /// </summary>
        /// <value>Vendor Details requesting for Shipment Label</value>
        [DataMember(Name = "vendorDetails", EmitDefaultValue = false)]
        public VendorDetails VendorDetails { get; set; }

        /// <summary>
        /// The buyer reference number is a unique identifier generated by the buyer for all Collect and WePay shipments.
        /// </summary>
        /// <value>The buyer reference number is a unique identifier generated by the buyer for all Collect and WePay shipments.</value>
        [DataMember(Name = "buyerReferenceNumber", EmitDefaultValue = false)]
        public string BuyerReferenceNumber { get; set; }

        /// <summary>
        /// The name and address of the destination warehouse where the shipment is being shipped.
        /// </summary>
        /// <value>The name and address of the destination warehouse where the shipment is being shipped.</value>
        [DataMember(Name = "shipToParty", EmitDefaultValue = false)]
        public PartyIdentification ShipToParty { get; set; }

        /// <summary>
        /// Name/Address of the destination warehouse where the shipment is being shipped to.
        /// </summary>
        /// <value>Name/Address of the destination warehouse where the shipment is being shipped to.</value>
        [DataMember(Name = "shipFromParty", EmitDefaultValue = false)]
        public PartyIdentification ShipFromParty { get; set; }

        /// <summary>
        /// Vendor Warehouse ID from where the shipment is scheduled to be picked up by buyer / Carrier.
        /// </summary>
        /// <value>Vendor Warehouse ID from where the shipment is scheduled to be picked up by buyer / Carrier.</value>
        [DataMember(Name = "warehouseId", EmitDefaultValue = false)]
        public string WarehouseId { get; set; }

        /// <summary>
        /// Unique Id with  which  the shipment can be tracked for Small Parcels.
        /// </summary>
        /// <value>Unique Id with  which  the shipment can be tracked for Small Parcels.</value>
        [DataMember(Name = "masterTrackingId", EmitDefaultValue = false)]
        public string MasterTrackingId { get; set; }

        /// <summary>
        /// Number of Labels that are created as part of this shipment.
        /// </summary>
        /// <value>Number of Labels that are created as part of this shipment.</value>
        [DataMember(Name = "totalLabelCount", EmitDefaultValue = false)]
        public int? TotalLabelCount { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipmentInformation {\n");
            sb.Append("  VendorDetails: ").Append(VendorDetails).Append("\n");
            sb.Append("  BuyerReferenceNumber: ").Append(BuyerReferenceNumber).Append("\n");
            sb.Append("  ShipToParty: ").Append(ShipToParty).Append("\n");
            sb.Append("  ShipFromParty: ").Append(ShipFromParty).Append("\n");
            sb.Append("  WarehouseId: ").Append(WarehouseId).Append("\n");
            sb.Append("  MasterTrackingId: ").Append(MasterTrackingId).Append("\n");
            sb.Append("  TotalLabelCount: ").Append(TotalLabelCount).Append("\n");
            sb.Append("  ShipMode: ").Append(ShipMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipmentInformation);
        }

        /// <summary>
        /// Returns true if ShipmentInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipmentInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentInformation input)
        {
            if (input == null)
                return false;

            return
                (
                    this.VendorDetails == input.VendorDetails ||
                    (this.VendorDetails != null &&
                    this.VendorDetails.Equals(input.VendorDetails))
                ) &&
                (
                    this.BuyerReferenceNumber == input.BuyerReferenceNumber ||
                    (this.BuyerReferenceNumber != null &&
                    this.BuyerReferenceNumber.Equals(input.BuyerReferenceNumber))
                ) &&
                (
                    this.ShipToParty == input.ShipToParty ||
                    (this.ShipToParty != null &&
                    this.ShipToParty.Equals(input.ShipToParty))
                ) &&
                (
                    this.ShipFromParty == input.ShipFromParty ||
                    (this.ShipFromParty != null &&
                    this.ShipFromParty.Equals(input.ShipFromParty))
                ) &&
                (
                    this.WarehouseId == input.WarehouseId ||
                    (this.WarehouseId != null &&
                    this.WarehouseId.Equals(input.WarehouseId))
                ) &&
                (
                    this.MasterTrackingId == input.MasterTrackingId ||
                    (this.MasterTrackingId != null &&
                    this.MasterTrackingId.Equals(input.MasterTrackingId))
                ) &&
                (
                    this.TotalLabelCount == input.TotalLabelCount ||
                    (this.TotalLabelCount != null &&
                    this.TotalLabelCount.Equals(input.TotalLabelCount))
                ) &&
                (
                    this.ShipMode == input.ShipMode ||
                    (this.ShipMode != null &&
                    this.ShipMode.Equals(input.ShipMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VendorDetails != null)
                    hashCode = hashCode * 59 + this.VendorDetails.GetHashCode();
                if (this.BuyerReferenceNumber != null)
                    hashCode = hashCode * 59 + this.BuyerReferenceNumber.GetHashCode();
                if (this.ShipToParty != null)
                    hashCode = hashCode * 59 + this.ShipToParty.GetHashCode();
                if (this.ShipFromParty != null)
                    hashCode = hashCode * 59 + this.ShipFromParty.GetHashCode();
                if (this.WarehouseId != null)
                    hashCode = hashCode * 59 + this.WarehouseId.GetHashCode();
                if (this.MasterTrackingId != null)
                    hashCode = hashCode * 59 + this.MasterTrackingId.GetHashCode();
                if (this.TotalLabelCount != null)
                    hashCode = hashCode * 59 + this.TotalLabelCount.GetHashCode();
                if (this.ShipMode != null)
                    hashCode = hashCode * 59 + this.ShipMode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
