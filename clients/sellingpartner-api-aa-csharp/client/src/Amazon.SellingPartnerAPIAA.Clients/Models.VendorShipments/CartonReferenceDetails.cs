/* 
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorShipments
{
    /// <summary>
    /// Carton reference details.
    /// </summary>
    [DataContract]
    public partial class CartonReferenceDetails :  IEquatable<CartonReferenceDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartonReferenceDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CartonReferenceDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CartonReferenceDetails" /> class.
        /// </summary>
        /// <param name="cartonCount">Pallet level carton count is mandatory for single item pallet and optional for mixed item pallet..</param>
        /// <param name="cartonReferenceNumbers">Array of reference numbers for the carton that are part of this pallet/shipment. Please provide the cartonSequenceNumber from the &#39;cartons&#39; segment to refer to that carton&#39;s details here. (required).</param>
        public CartonReferenceDetails(int? cartonCount = default(int?), List<string> cartonReferenceNumbers = default(List<string>))
        {
            // to ensure "cartonReferenceNumbers" is required (not null)
            if (cartonReferenceNumbers == null)
            {
                throw new InvalidDataException("cartonReferenceNumbers is a required property for CartonReferenceDetails and cannot be null");
            }
            else
            {
                this.CartonReferenceNumbers = cartonReferenceNumbers;
            }
            this.CartonCount = cartonCount;
        }
        
        /// <summary>
        /// Pallet level carton count is mandatory for single item pallet and optional for mixed item pallet.
        /// </summary>
        /// <value>Pallet level carton count is mandatory for single item pallet and optional for mixed item pallet.</value>
        [DataMember(Name="cartonCount", EmitDefaultValue=false)]
        public int? CartonCount { get; set; }

        /// <summary>
        /// Array of reference numbers for the carton that are part of this pallet/shipment. Please provide the cartonSequenceNumber from the &#39;cartons&#39; segment to refer to that carton&#39;s details here.
        /// </summary>
        /// <value>Array of reference numbers for the carton that are part of this pallet/shipment. Please provide the cartonSequenceNumber from the &#39;cartons&#39; segment to refer to that carton&#39;s details here.</value>
        [DataMember(Name="cartonReferenceNumbers", EmitDefaultValue=false)]
        public List<string> CartonReferenceNumbers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartonReferenceDetails {\n");
            sb.Append("  CartonCount: ").Append(CartonCount).Append("\n");
            sb.Append("  CartonReferenceNumbers: ").Append(CartonReferenceNumbers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartonReferenceDetails);
        }

        /// <summary>
        /// Returns true if CartonReferenceDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of CartonReferenceDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartonReferenceDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CartonCount == input.CartonCount ||
                    (this.CartonCount != null &&
                    this.CartonCount.Equals(input.CartonCount))
                ) && 
                (
                    this.CartonReferenceNumbers == input.CartonReferenceNumbers ||
                    this.CartonReferenceNumbers != null &&
                    this.CartonReferenceNumbers.SequenceEqual(input.CartonReferenceNumbers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CartonCount != null)
                    hashCode = hashCode * 59 + this.CartonCount.GetHashCode();
                if (this.CartonReferenceNumbers != null)
                    hashCode = hashCode * 59 + this.CartonReferenceNumbers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
