/* 
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorShipments
{
    /// <summary>
    /// Contractual or operational port or point relevant to the movement of the cargo.
    /// </summary>
    [DataContract]
    public partial class Stop : IEquatable<Stop>, IValidatableObject
    {
        /// <summary>
        /// Provide the function code.
        /// </summary>
        /// <value>Provide the function code.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FunctionCodeEnum
        {

            /// <summary>
            /// Enum PortOfDischarge for value: PortOfDischarge
            /// </summary>
            [EnumMember(Value = "PortOfDischarge")]
            PortOfDischarge = 1,

            /// <summary>
            /// Enum FreightPayableAt for value: FreightPayableAt
            /// </summary>
            [EnumMember(Value = "FreightPayableAt")]
            FreightPayableAt = 2,

            /// <summary>
            /// Enum PortOfLoading for value: PortOfLoading
            /// </summary>
            [EnumMember(Value = "PortOfLoading")]
            PortOfLoading = 3
        }

        /// <summary>
        /// Provide the function code.
        /// </summary>
        /// <value>Provide the function code.</value>
        [DataMember(Name = "functionCode", EmitDefaultValue = false)]
        public FunctionCodeEnum FunctionCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Stop" /> class.
        /// </summary>
        [JsonConstructor]
        protected Stop() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Stop" /> class.
        /// </summary>
        /// <param name="functionCode">Provide the function code. (required).</param>
        /// <param name="locationIdentification">locationIdentification.</param>
        /// <param name="arrivalTime">Date and time of the arrival of the cargo..</param>
        /// <param name="departureTime">Date and time of the departure of the cargo..</param>
        public Stop(FunctionCodeEnum functionCode = default, Location locationIdentification = default, DateTime? arrivalTime = default, DateTime? departureTime = default)
        {
            // to ensure "functionCode" is required (not null)
            if (functionCode == null)
            {
                throw new InvalidDataException("functionCode is a required property for Stop and cannot be null");
            }
            else
            {
                this.FunctionCode = functionCode;
            }
            this.LocationIdentification = locationIdentification;
            this.ArrivalTime = arrivalTime;
            this.DepartureTime = departureTime;
        }


        /// <summary>
        /// Gets or Sets LocationIdentification
        /// </summary>
        [DataMember(Name = "locationIdentification", EmitDefaultValue = false)]
        public Location LocationIdentification { get; set; }

        /// <summary>
        /// Date and time of the arrival of the cargo.
        /// </summary>
        /// <value>Date and time of the arrival of the cargo.</value>
        [DataMember(Name = "arrivalTime", EmitDefaultValue = false)]
        public DateTime? ArrivalTime { get; set; }

        /// <summary>
        /// Date and time of the departure of the cargo.
        /// </summary>
        /// <value>Date and time of the departure of the cargo.</value>
        [DataMember(Name = "departureTime", EmitDefaultValue = false)]
        public DateTime? DepartureTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Stop {\n");
            sb.Append("  FunctionCode: ").Append(FunctionCode).Append("\n");
            sb.Append("  LocationIdentification: ").Append(LocationIdentification).Append("\n");
            sb.Append("  ArrivalTime: ").Append(ArrivalTime).Append("\n");
            sb.Append("  DepartureTime: ").Append(DepartureTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Stop);
        }

        /// <summary>
        /// Returns true if Stop instances are equal
        /// </summary>
        /// <param name="input">Instance of Stop to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Stop input)
        {
            if (input == null)
                return false;

            return
                (
                    this.FunctionCode == input.FunctionCode ||
                    (this.FunctionCode != null &&
                    this.FunctionCode.Equals(input.FunctionCode))
                ) &&
                (
                    this.LocationIdentification == input.LocationIdentification ||
                    (this.LocationIdentification != null &&
                    this.LocationIdentification.Equals(input.LocationIdentification))
                ) &&
                (
                    this.ArrivalTime == input.ArrivalTime ||
                    (this.ArrivalTime != null &&
                    this.ArrivalTime.Equals(input.ArrivalTime))
                ) &&
                (
                    this.DepartureTime == input.DepartureTime ||
                    (this.DepartureTime != null &&
                    this.DepartureTime.Equals(input.DepartureTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FunctionCode != null)
                    hashCode = hashCode * 59 + this.FunctionCode.GetHashCode();
                if (this.LocationIdentification != null)
                    hashCode = hashCode * 59 + this.LocationIdentification.GetHashCode();
                if (this.ArrivalTime != null)
                    hashCode = hashCode * 59 + this.ArrivalTime.GetHashCode();
                if (this.DepartureTime != null)
                    hashCode = hashCode * 59 + this.DepartureTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
