/* 
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorShipments
{
    /// <summary>
    /// A list of the items in this transportation and their associated inner container details. If any of the item detail fields are common at a carton or a pallet level, provide them at the corresponding carton or pallet level.
    /// </summary>
    [DataContract]
    public partial class Containers : IEquatable<Containers>, IValidatableObject
    {
        /// <summary>
        /// The type of container.
        /// </summary>
        /// <value>The type of container.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContainerTypeEnum
        {

            /// <summary>
            /// Enum Carton for value: carton
            /// </summary>
            [EnumMember(Value = "carton")]
            Carton = 1,

            /// <summary>
            /// Enum Pallet for value: pallet
            /// </summary>
            [EnumMember(Value = "pallet")]
            Pallet = 2
        }

        /// <summary>
        /// The type of container.
        /// </summary>
        /// <value>The type of container.</value>
        [DataMember(Name = "containerType", EmitDefaultValue = false)]
        public ContainerTypeEnum ContainerType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Containers" /> class.
        /// </summary>
        [JsonConstructor]
        protected Containers() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Containers" /> class.
        /// </summary>
        /// <param name="containerType">The type of container. (required).</param>
        /// <param name="containerSequenceNumber">An integer that must be submitted for multi-box shipments only, where one item may come in separate packages..</param>
        /// <param name="containerIdentifiers">A list of carton identifiers. (required).</param>
        /// <param name="trackingNumber">The tracking number used for identifying the shipment..</param>
        /// <param name="dimensions">dimensions.</param>
        /// <param name="weight">weight.</param>
        /// <param name="tier">Number of layers per pallet..</param>
        /// <param name="block">Number of cartons per layer on the pallet..</param>
        /// <param name="innerContainersDetails">innerContainersDetails.</param>
        /// <param name="packedItems">A list of packed items..</param>
        public Containers(ContainerTypeEnum containerType = default, string containerSequenceNumber = default, List<ContainerIdentification> containerIdentifiers = default, string trackingNumber = default, Dimensions dimensions = default, Weight weight = default, int? tier = default, int? block = default, InnerContainersDetails innerContainersDetails = default, List<PackedItems> packedItems = default)
        {
            // to ensure "containerType" is required (not null)
            if (containerType == null)
            {
                throw new InvalidDataException("containerType is a required property for Containers and cannot be null");
            }
            else
            {
                this.ContainerType = containerType;
            }
            // to ensure "containerIdentifiers" is required (not null)
            if (containerIdentifiers == null)
            {
                throw new InvalidDataException("containerIdentifiers is a required property for Containers and cannot be null");
            }
            else
            {
                this.ContainerIdentifiers = containerIdentifiers;
            }
            this.ContainerSequenceNumber = containerSequenceNumber;
            this.TrackingNumber = trackingNumber;
            this.Dimensions = dimensions;
            this.Weight = weight;
            this.Tier = tier;
            this.Block = block;
            this.InnerContainersDetails = innerContainersDetails;
            this.PackedItems = packedItems;
        }


        /// <summary>
        /// An integer that must be submitted for multi-box shipments only, where one item may come in separate packages.
        /// </summary>
        /// <value>An integer that must be submitted for multi-box shipments only, where one item may come in separate packages.</value>
        [DataMember(Name = "containerSequenceNumber", EmitDefaultValue = false)]
        public string ContainerSequenceNumber { get; set; }

        /// <summary>
        /// A list of carton identifiers.
        /// </summary>
        /// <value>A list of carton identifiers.</value>
        [DataMember(Name = "containerIdentifiers", EmitDefaultValue = false)]
        public List<ContainerIdentification> ContainerIdentifiers { get; set; }

        /// <summary>
        /// The tracking number used for identifying the shipment.
        /// </summary>
        /// <value>The tracking number used for identifying the shipment.</value>
        [DataMember(Name = "trackingNumber", EmitDefaultValue = false)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name = "dimensions", EmitDefaultValue = false)]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public Weight Weight { get; set; }

        /// <summary>
        /// Number of layers per pallet.
        /// </summary>
        /// <value>Number of layers per pallet.</value>
        [DataMember(Name = "tier", EmitDefaultValue = false)]
        public int? Tier { get; set; }

        /// <summary>
        /// Number of cartons per layer on the pallet.
        /// </summary>
        /// <value>Number of cartons per layer on the pallet.</value>
        [DataMember(Name = "block", EmitDefaultValue = false)]
        public int? Block { get; set; }

        /// <summary>
        /// Gets or Sets InnerContainersDetails
        /// </summary>
        [DataMember(Name = "innerContainersDetails", EmitDefaultValue = false)]
        public InnerContainersDetails InnerContainersDetails { get; set; }

        /// <summary>
        /// A list of packed items.
        /// </summary>
        /// <value>A list of packed items.</value>
        [DataMember(Name = "packedItems", EmitDefaultValue = false)]
        public List<PackedItems> PackedItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Containers {\n");
            sb.Append("  ContainerType: ").Append(ContainerType).Append("\n");
            sb.Append("  ContainerSequenceNumber: ").Append(ContainerSequenceNumber).Append("\n");
            sb.Append("  ContainerIdentifiers: ").Append(ContainerIdentifiers).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  InnerContainersDetails: ").Append(InnerContainersDetails).Append("\n");
            sb.Append("  PackedItems: ").Append(PackedItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Containers);
        }

        /// <summary>
        /// Returns true if Containers instances are equal
        /// </summary>
        /// <param name="input">Instance of Containers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Containers input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ContainerType == input.ContainerType ||
                    (this.ContainerType != null &&
                    this.ContainerType.Equals(input.ContainerType))
                ) &&
                (
                    this.ContainerSequenceNumber == input.ContainerSequenceNumber ||
                    (this.ContainerSequenceNumber != null &&
                    this.ContainerSequenceNumber.Equals(input.ContainerSequenceNumber))
                ) &&
                (
                    this.ContainerIdentifiers == input.ContainerIdentifiers ||
                    this.ContainerIdentifiers != null &&
                    this.ContainerIdentifiers.SequenceEqual(input.ContainerIdentifiers)
                ) &&
                (
                    this.TrackingNumber == input.TrackingNumber ||
                    (this.TrackingNumber != null &&
                    this.TrackingNumber.Equals(input.TrackingNumber))
                ) &&
                (
                    this.Dimensions == input.Dimensions ||
                    (this.Dimensions != null &&
                    this.Dimensions.Equals(input.Dimensions))
                ) &&
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) &&
                (
                    this.Tier == input.Tier ||
                    (this.Tier != null &&
                    this.Tier.Equals(input.Tier))
                ) &&
                (
                    this.Block == input.Block ||
                    (this.Block != null &&
                    this.Block.Equals(input.Block))
                ) &&
                (
                    this.InnerContainersDetails == input.InnerContainersDetails ||
                    (this.InnerContainersDetails != null &&
                    this.InnerContainersDetails.Equals(input.InnerContainersDetails))
                ) &&
                (
                    this.PackedItems == input.PackedItems ||
                    this.PackedItems != null &&
                    this.PackedItems.SequenceEqual(input.PackedItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContainerType != null)
                    hashCode = hashCode * 59 + this.ContainerType.GetHashCode();
                if (this.ContainerSequenceNumber != null)
                    hashCode = hashCode * 59 + this.ContainerSequenceNumber.GetHashCode();
                if (this.ContainerIdentifiers != null)
                    hashCode = hashCode * 59 + this.ContainerIdentifiers.GetHashCode();
                if (this.TrackingNumber != null)
                    hashCode = hashCode * 59 + this.TrackingNumber.GetHashCode();
                if (this.Dimensions != null)
                    hashCode = hashCode * 59 + this.Dimensions.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.Tier != null)
                    hashCode = hashCode * 59 + this.Tier.GetHashCode();
                if (this.Block != null)
                    hashCode = hashCode * 59 + this.Block.GetHashCode();
                if (this.InnerContainersDetails != null)
                    hashCode = hashCode * 59 + this.InnerContainersDetails.GetHashCode();
                if (this.PackedItems != null)
                    hashCode = hashCode * 59 + this.PackedItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
