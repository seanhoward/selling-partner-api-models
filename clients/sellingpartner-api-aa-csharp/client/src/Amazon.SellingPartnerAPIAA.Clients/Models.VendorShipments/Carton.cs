/* 
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorShipments
{
    /// <summary>
    /// Details of the carton/package being shipped.
    /// </summary>
    [DataContract]
    public partial class Carton :  IEquatable<Carton>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Carton" /> class.
        /// </summary>
        [JsonConstructor]
        protected Carton() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Carton" /> class.
        /// </summary>
        /// <param name="cartonIdentifiers">A list of carton identifiers..</param>
        /// <param name="cartonSequenceNumber">Carton sequence number for the carton. The first carton will be 001, the second 002, and so on. This number is used as a reference to refer to this carton from the pallet level. (required).</param>
        /// <param name="dimensions">dimensions.</param>
        /// <param name="weight">weight.</param>
        /// <param name="trackingNumber">This is required to be provided for every carton in the small parcel shipments..</param>
        /// <param name="items">A list of container item details. (required).</param>
        public Carton(List<ContainerIdentification> cartonIdentifiers = default, string cartonSequenceNumber = default, Dimensions dimensions = default, Weight weight = default, string trackingNumber = default, List<ContainerItem> items = default)
        {
            // to ensure "cartonSequenceNumber" is required (not null)
            if (cartonSequenceNumber == null)
            {
                throw new InvalidDataException("cartonSequenceNumber is a required property for Carton and cannot be null");
            }
            else
            {
                this.CartonSequenceNumber = cartonSequenceNumber;
            }
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new InvalidDataException("items is a required property for Carton and cannot be null");
            }
            else
            {
                this.Items = items;
            }
            this.CartonIdentifiers = cartonIdentifiers;
            this.Dimensions = dimensions;
            this.Weight = weight;
            this.TrackingNumber = trackingNumber;
        }
        
        /// <summary>
        /// A list of carton identifiers.
        /// </summary>
        /// <value>A list of carton identifiers.</value>
        [DataMember(Name="cartonIdentifiers", EmitDefaultValue=false)]
        public List<ContainerIdentification> CartonIdentifiers { get; set; }

        /// <summary>
        /// Carton sequence number for the carton. The first carton will be 001, the second 002, and so on. This number is used as a reference to refer to this carton from the pallet level.
        /// </summary>
        /// <value>Carton sequence number for the carton. The first carton will be 001, the second 002, and so on. This number is used as a reference to refer to this carton from the pallet level.</value>
        [DataMember(Name="cartonSequenceNumber", EmitDefaultValue=false)]
        public string CartonSequenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name="dimensions", EmitDefaultValue=false)]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public Weight Weight { get; set; }

        /// <summary>
        /// This is required to be provided for every carton in the small parcel shipments.
        /// </summary>
        /// <value>This is required to be provided for every carton in the small parcel shipments.</value>
        [DataMember(Name="trackingNumber", EmitDefaultValue=false)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// A list of container item details.
        /// </summary>
        /// <value>A list of container item details.</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<ContainerItem> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Carton {\n");
            sb.Append("  CartonIdentifiers: ").Append(CartonIdentifiers).Append("\n");
            sb.Append("  CartonSequenceNumber: ").Append(CartonSequenceNumber).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Carton);
        }

        /// <summary>
        /// Returns true if Carton instances are equal
        /// </summary>
        /// <param name="input">Instance of Carton to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Carton input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CartonIdentifiers == input.CartonIdentifiers ||
                    this.CartonIdentifiers != null &&
                    this.CartonIdentifiers.SequenceEqual(input.CartonIdentifiers)
                ) && 
                (
                    this.CartonSequenceNumber == input.CartonSequenceNumber ||
                    (this.CartonSequenceNumber != null &&
                    this.CartonSequenceNumber.Equals(input.CartonSequenceNumber))
                ) && 
                (
                    this.Dimensions == input.Dimensions ||
                    (this.Dimensions != null &&
                    this.Dimensions.Equals(input.Dimensions))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.TrackingNumber == input.TrackingNumber ||
                    (this.TrackingNumber != null &&
                    this.TrackingNumber.Equals(input.TrackingNumber))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CartonIdentifiers != null)
                    hashCode = hashCode * 59 + this.CartonIdentifiers.GetHashCode();
                if (this.CartonSequenceNumber != null)
                    hashCode = hashCode * 59 + this.CartonSequenceNumber.GetHashCode();
                if (this.Dimensions != null)
                    hashCode = hashCode * 59 + this.Dimensions.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.TrackingNumber != null)
                    hashCode = hashCode * 59 + this.TrackingNumber.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
