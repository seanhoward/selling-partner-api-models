/* 
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorShipments
{
    /// <summary>
    /// Vendor Details as part of Label response.
    /// </summary>
    [DataContract]
    public partial class VendorDetails : IEquatable<VendorDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorDetails" /> class.
        /// </summary>
        /// <param name="sellingParty">Name/Address and tax details of the selling party..</param>
        /// <param name="vendorShipmentIdentifier">Unique vendor shipment id which is not used in last 365 days.</param>
        public VendorDetails(PartyIdentification sellingParty = default, string vendorShipmentIdentifier = default)
        {
            this.SellingParty = sellingParty;
            this.VendorShipmentIdentifier = vendorShipmentIdentifier;
        }

        /// <summary>
        /// Name/Address and tax details of the selling party.
        /// </summary>
        /// <value>Name/Address and tax details of the selling party.</value>
        [DataMember(Name = "sellingParty", EmitDefaultValue = false)]
        public PartyIdentification SellingParty { get; set; }

        /// <summary>
        /// Unique vendor shipment id which is not used in last 365 days
        /// </summary>
        /// <value>Unique vendor shipment id which is not used in last 365 days</value>
        [DataMember(Name = "vendorShipmentIdentifier", EmitDefaultValue = false)]
        public string VendorShipmentIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VendorDetails {\n");
            sb.Append("  SellingParty: ").Append(SellingParty).Append("\n");
            sb.Append("  VendorShipmentIdentifier: ").Append(VendorShipmentIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VendorDetails);
        }

        /// <summary>
        /// Returns true if VendorDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of VendorDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VendorDetails input)
        {
            if (input == null)
                return false;

            return
                (
                    this.SellingParty == input.SellingParty ||
                    (this.SellingParty != null &&
                    this.SellingParty.Equals(input.SellingParty))
                ) &&
                (
                    this.VendorShipmentIdentifier == input.VendorShipmentIdentifier ||
                    (this.VendorShipmentIdentifier != null &&
                    this.VendorShipmentIdentifier.Equals(input.VendorShipmentIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SellingParty != null)
                    hashCode = hashCode * 59 + this.SellingParty.GetHashCode();
                if (this.VendorShipmentIdentifier != null)
                    hashCode = hashCode * 59 + this.VendorShipmentIdentifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
