/* 
 * Selling Partner API for Direct Fulfillment Shipping
 *
 * Use the Selling Partner API for Direct Fulfillment Shipping to access a direct fulfillment vendor's shipping data.
 *
 * OpenAPI spec version: 2021-12-28
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorDirectFulfillmentShipping
{
    /// <summary>
    /// Details for the shipment status update given by the vendor for the specific package.
    /// </summary>
    [DataContract]
    public partial class StatusUpdateDetails :  IEquatable<StatusUpdateDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusUpdateDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StatusUpdateDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusUpdateDetails" /> class.
        /// </summary>
        /// <param name="trackingNumber">The shipment tracking number is required for every package and should match the &#x60;trackingNumber&#x60; sent for the shipment confirmation. (required).</param>
        /// <param name="statusCode">Indicates the shipment status code of the package that provides transportation information for Amazon tracking systems and ultimately for the final customer. For more information, refer to the [Additional Fields Explanation](https://developer-docs.amazon.com/sp-api/docs/vendor-direct-fulfillment-shipping-api-use-case-guide#additional-fields-explanation). (required).</param>
        /// <param name="reasonCode">Provides a reason code for the status of the package that will provide additional information about the transportation status. For more information, refer to the [Additional Fields Explanation](https://developer-docs.amazon.com/sp-api/docs/vendor-direct-fulfillment-shipping-api-use-case-guide#additional-fields-explanation). (required).</param>
        /// <param name="statusDateTime">The date and time when the shipment status was updated. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00. (required).</param>
        /// <param name="statusLocationAddress">statusLocationAddress (required).</param>
        /// <param name="shipmentSchedule">shipmentSchedule.</param>
        public StatusUpdateDetails(string trackingNumber = default(string), string statusCode = default(string), string reasonCode = default(string), DateTime? statusDateTime = default(DateTime?), Address statusLocationAddress = default(Address), ShipmentSchedule shipmentSchedule = default(ShipmentSchedule))
        {
            // to ensure "trackingNumber" is required (not null)
            if (trackingNumber == null)
            {
                throw new InvalidDataException("trackingNumber is a required property for StatusUpdateDetails and cannot be null");
            }
            else
            {
                this.TrackingNumber = trackingNumber;
            }
            // to ensure "statusCode" is required (not null)
            if (statusCode == null)
            {
                throw new InvalidDataException("statusCode is a required property for StatusUpdateDetails and cannot be null");
            }
            else
            {
                this.StatusCode = statusCode;
            }
            // to ensure "reasonCode" is required (not null)
            if (reasonCode == null)
            {
                throw new InvalidDataException("reasonCode is a required property for StatusUpdateDetails and cannot be null");
            }
            else
            {
                this.ReasonCode = reasonCode;
            }
            // to ensure "statusDateTime" is required (not null)
            if (statusDateTime == null)
            {
                throw new InvalidDataException("statusDateTime is a required property for StatusUpdateDetails and cannot be null");
            }
            else
            {
                this.StatusDateTime = statusDateTime;
            }
            // to ensure "statusLocationAddress" is required (not null)
            if (statusLocationAddress == null)
            {
                throw new InvalidDataException("statusLocationAddress is a required property for StatusUpdateDetails and cannot be null");
            }
            else
            {
                this.StatusLocationAddress = statusLocationAddress;
            }
            this.ShipmentSchedule = shipmentSchedule;
        }
        
        /// <summary>
        /// The shipment tracking number is required for every package and should match the &#x60;trackingNumber&#x60; sent for the shipment confirmation.
        /// </summary>
        /// <value>The shipment tracking number is required for every package and should match the &#x60;trackingNumber&#x60; sent for the shipment confirmation.</value>
        [DataMember(Name="trackingNumber", EmitDefaultValue=false)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// Indicates the shipment status code of the package that provides transportation information for Amazon tracking systems and ultimately for the final customer. For more information, refer to the [Additional Fields Explanation](https://developer-docs.amazon.com/sp-api/docs/vendor-direct-fulfillment-shipping-api-use-case-guide#additional-fields-explanation).
        /// </summary>
        /// <value>Indicates the shipment status code of the package that provides transportation information for Amazon tracking systems and ultimately for the final customer. For more information, refer to the [Additional Fields Explanation](https://developer-docs.amazon.com/sp-api/docs/vendor-direct-fulfillment-shipping-api-use-case-guide#additional-fields-explanation).</value>
        [DataMember(Name="statusCode", EmitDefaultValue=false)]
        public string StatusCode { get; set; }

        /// <summary>
        /// Provides a reason code for the status of the package that will provide additional information about the transportation status. For more information, refer to the [Additional Fields Explanation](https://developer-docs.amazon.com/sp-api/docs/vendor-direct-fulfillment-shipping-api-use-case-guide#additional-fields-explanation).
        /// </summary>
        /// <value>Provides a reason code for the status of the package that will provide additional information about the transportation status. For more information, refer to the [Additional Fields Explanation](https://developer-docs.amazon.com/sp-api/docs/vendor-direct-fulfillment-shipping-api-use-case-guide#additional-fields-explanation).</value>
        [DataMember(Name="reasonCode", EmitDefaultValue=false)]
        public string ReasonCode { get; set; }

        /// <summary>
        /// The date and time when the shipment status was updated. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.
        /// </summary>
        /// <value>The date and time when the shipment status was updated. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.</value>
        [DataMember(Name="statusDateTime", EmitDefaultValue=false)]
        public DateTime? StatusDateTime { get; set; }

        /// <summary>
        /// Gets or Sets StatusLocationAddress
        /// </summary>
        [DataMember(Name="statusLocationAddress", EmitDefaultValue=false)]
        public Address StatusLocationAddress { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentSchedule
        /// </summary>
        [DataMember(Name="shipmentSchedule", EmitDefaultValue=false)]
        public ShipmentSchedule ShipmentSchedule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatusUpdateDetails {\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  StatusDateTime: ").Append(StatusDateTime).Append("\n");
            sb.Append("  StatusLocationAddress: ").Append(StatusLocationAddress).Append("\n");
            sb.Append("  ShipmentSchedule: ").Append(ShipmentSchedule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatusUpdateDetails);
        }

        /// <summary>
        /// Returns true if StatusUpdateDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of StatusUpdateDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatusUpdateDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TrackingNumber == input.TrackingNumber ||
                    (this.TrackingNumber != null &&
                    this.TrackingNumber.Equals(input.TrackingNumber))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.ReasonCode == input.ReasonCode ||
                    (this.ReasonCode != null &&
                    this.ReasonCode.Equals(input.ReasonCode))
                ) && 
                (
                    this.StatusDateTime == input.StatusDateTime ||
                    (this.StatusDateTime != null &&
                    this.StatusDateTime.Equals(input.StatusDateTime))
                ) && 
                (
                    this.StatusLocationAddress == input.StatusLocationAddress ||
                    (this.StatusLocationAddress != null &&
                    this.StatusLocationAddress.Equals(input.StatusLocationAddress))
                ) && 
                (
                    this.ShipmentSchedule == input.ShipmentSchedule ||
                    (this.ShipmentSchedule != null &&
                    this.ShipmentSchedule.Equals(input.ShipmentSchedule))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TrackingNumber != null)
                    hashCode = hashCode * 59 + this.TrackingNumber.GetHashCode();
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.ReasonCode != null)
                    hashCode = hashCode * 59 + this.ReasonCode.GetHashCode();
                if (this.StatusDateTime != null)
                    hashCode = hashCode * 59 + this.StatusDateTime.GetHashCode();
                if (this.StatusLocationAddress != null)
                    hashCode = hashCode * 59 + this.StatusLocationAddress.GetHashCode();
                if (this.ShipmentSchedule != null)
                    hashCode = hashCode * 59 + this.ShipmentSchedule.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
