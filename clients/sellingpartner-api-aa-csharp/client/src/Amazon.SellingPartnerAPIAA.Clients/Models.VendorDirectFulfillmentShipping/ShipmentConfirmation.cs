/* 
 * Selling Partner API for Direct Fulfillment Shipping
 *
 * The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor's shipping data.
 *
 * OpenAPI spec version: 2021-12-28
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorDirectFulfillmentShipping
{
    /// <summary>
    /// Represents the confirmation details of a shipment, including the purchase order number and other shipment details.
    /// </summary>
    [DataContract]
    public partial class ShipmentConfirmation :  IEquatable<ShipmentConfirmation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentConfirmation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShipmentConfirmation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentConfirmation" /> class.
        /// </summary>
        /// <param name="purchaseOrderNumber">Purchase order number corresponding to the shipment. (required).</param>
        /// <param name="shipmentDetails">Shipment information. (required).</param>
        /// <param name="sellingParty">ID of the selling party or vendor. (required).</param>
        /// <param name="shipFromParty">Warehouse code of vendor. (required).</param>
        /// <param name="items">Provide the details of the items in this shipment. If any of the item details field is common at a package or a pallet level, then provide them at the corresponding package. (required).</param>
        /// <param name="containers">Provide the details of the items in this shipment. If any of the item details field is common at a package or a pallet level, then provide them at the corresponding package..</param>
        public ShipmentConfirmation(string purchaseOrderNumber = default(string), ShipmentDetails shipmentDetails = default(ShipmentDetails), PartyIdentification sellingParty = default(PartyIdentification), PartyIdentification shipFromParty = default(PartyIdentification), List<Item> items = default(List<Item>), List<Container> containers = default(List<Container>))
        {
            // to ensure "purchaseOrderNumber" is required (not null)
            if (purchaseOrderNumber == null)
            {
                throw new InvalidDataException("purchaseOrderNumber is a required property for ShipmentConfirmation and cannot be null");
            }
            else
            {
                this.PurchaseOrderNumber = purchaseOrderNumber;
            }
            // to ensure "shipmentDetails" is required (not null)
            if (shipmentDetails == null)
            {
                throw new InvalidDataException("shipmentDetails is a required property for ShipmentConfirmation and cannot be null");
            }
            else
            {
                this.ShipmentDetails = shipmentDetails;
            }
            // to ensure "sellingParty" is required (not null)
            if (sellingParty == null)
            {
                throw new InvalidDataException("sellingParty is a required property for ShipmentConfirmation and cannot be null");
            }
            else
            {
                this.SellingParty = sellingParty;
            }
            // to ensure "shipFromParty" is required (not null)
            if (shipFromParty == null)
            {
                throw new InvalidDataException("shipFromParty is a required property for ShipmentConfirmation and cannot be null");
            }
            else
            {
                this.ShipFromParty = shipFromParty;
            }
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new InvalidDataException("items is a required property for ShipmentConfirmation and cannot be null");
            }
            else
            {
                this.Items = items;
            }
            this.Containers = containers;
        }
        
        /// <summary>
        /// Purchase order number corresponding to the shipment.
        /// </summary>
        /// <value>Purchase order number corresponding to the shipment.</value>
        [DataMember(Name="purchaseOrderNumber", EmitDefaultValue=false)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Shipment information.
        /// </summary>
        /// <value>Shipment information.</value>
        [DataMember(Name="shipmentDetails", EmitDefaultValue=false)]
        public ShipmentDetails ShipmentDetails { get; set; }

        /// <summary>
        /// ID of the selling party or vendor.
        /// </summary>
        /// <value>ID of the selling party or vendor.</value>
        [DataMember(Name="sellingParty", EmitDefaultValue=false)]
        public PartyIdentification SellingParty { get; set; }

        /// <summary>
        /// Warehouse code of vendor.
        /// </summary>
        /// <value>Warehouse code of vendor.</value>
        [DataMember(Name="shipFromParty", EmitDefaultValue=false)]
        public PartyIdentification ShipFromParty { get; set; }

        /// <summary>
        /// Provide the details of the items in this shipment. If any of the item details field is common at a package or a pallet level, then provide them at the corresponding package.
        /// </summary>
        /// <value>Provide the details of the items in this shipment. If any of the item details field is common at a package or a pallet level, then provide them at the corresponding package.</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<Item> Items { get; set; }

        /// <summary>
        /// Provide the details of the items in this shipment. If any of the item details field is common at a package or a pallet level, then provide them at the corresponding package.
        /// </summary>
        /// <value>Provide the details of the items in this shipment. If any of the item details field is common at a package or a pallet level, then provide them at the corresponding package.</value>
        [DataMember(Name="containers", EmitDefaultValue=false)]
        public List<Container> Containers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipmentConfirmation {\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  ShipmentDetails: ").Append(ShipmentDetails).Append("\n");
            sb.Append("  SellingParty: ").Append(SellingParty).Append("\n");
            sb.Append("  ShipFromParty: ").Append(ShipFromParty).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Containers: ").Append(Containers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipmentConfirmation);
        }

        /// <summary>
        /// Returns true if ShipmentConfirmation instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipmentConfirmation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentConfirmation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PurchaseOrderNumber == input.PurchaseOrderNumber ||
                    (this.PurchaseOrderNumber != null &&
                    this.PurchaseOrderNumber.Equals(input.PurchaseOrderNumber))
                ) && 
                (
                    this.ShipmentDetails == input.ShipmentDetails ||
                    (this.ShipmentDetails != null &&
                    this.ShipmentDetails.Equals(input.ShipmentDetails))
                ) && 
                (
                    this.SellingParty == input.SellingParty ||
                    (this.SellingParty != null &&
                    this.SellingParty.Equals(input.SellingParty))
                ) && 
                (
                    this.ShipFromParty == input.ShipFromParty ||
                    (this.ShipFromParty != null &&
                    this.ShipFromParty.Equals(input.ShipFromParty))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.Containers == input.Containers ||
                    this.Containers != null &&
                    this.Containers.SequenceEqual(input.Containers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderNumber.GetHashCode();
                if (this.ShipmentDetails != null)
                    hashCode = hashCode * 59 + this.ShipmentDetails.GetHashCode();
                if (this.SellingParty != null)
                    hashCode = hashCode * 59 + this.SellingParty.GetHashCode();
                if (this.ShipFromParty != null)
                    hashCode = hashCode * 59 + this.ShipFromParty.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.Containers != null)
                    hashCode = hashCode * 59 + this.Containers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PurchaseOrderNumber (string) pattern
            Regex regexPurchaseOrderNumber = new Regex(@"^[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexPurchaseOrderNumber.Match(this.PurchaseOrderNumber).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PurchaseOrderNumber, must match a pattern of " + regexPurchaseOrderNumber, new [] { "PurchaseOrderNumber" });
            }

            yield break;
        }
    }

}
