/* 
 * Selling Partner API for Direct Fulfillment Shipping
 *
 * Use the Selling Partner API for Direct Fulfillment Shipping to access a direct fulfillment vendor's shipping data.
 *
 * OpenAPI spec version: 2021-12-28
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorDirectFulfillmentShipping
{
    /// <summary>
    /// The details of the container label.
    /// </summary>
    [DataContract]
    public partial class ContainerLabel :  IEquatable<ContainerLabel>, IValidatableObject
    {
        /// <summary>
        /// The format of the container label.
        /// </summary>
        /// <value>The format of the container label.</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public ContainerLabelFormat Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerLabel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContainerLabel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerLabel" /> class.
        /// </summary>
        /// <param name="containerTrackingNumber">The container (pallet) tracking identifier from the shipping carrier..</param>
        /// <param name="content">The &#x60;Base64encoded&#x60; string of the container label content. (required).</param>
        /// <param name="format">The format of the container label. (required).</param>
        public ContainerLabel(string containerTrackingNumber = default(string), string content = default(string), ContainerLabelFormat format = default(ContainerLabelFormat))
        {
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new InvalidDataException("content is a required property for ContainerLabel and cannot be null");
            }
            else
            {
                this.Content = content;
            }
            // to ensure "format" is required (not null)
            if (format == null)
            {
                throw new InvalidDataException("format is a required property for ContainerLabel and cannot be null");
            }
            else
            {
                this.Format = format;
            }
            this.ContainerTrackingNumber = containerTrackingNumber;
        }
        
        /// <summary>
        /// The container (pallet) tracking identifier from the shipping carrier.
        /// </summary>
        /// <value>The container (pallet) tracking identifier from the shipping carrier.</value>
        [DataMember(Name="containerTrackingNumber", EmitDefaultValue=false)]
        public string ContainerTrackingNumber { get; set; }

        /// <summary>
        /// The &#x60;Base64encoded&#x60; string of the container label content.
        /// </summary>
        /// <value>The &#x60;Base64encoded&#x60; string of the container label content.</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContainerLabel {\n");
            sb.Append("  ContainerTrackingNumber: ").Append(ContainerTrackingNumber).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContainerLabel);
        }

        /// <summary>
        /// Returns true if ContainerLabel instances are equal
        /// </summary>
        /// <param name="input">Instance of ContainerLabel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContainerLabel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContainerTrackingNumber == input.ContainerTrackingNumber ||
                    (this.ContainerTrackingNumber != null &&
                    this.ContainerTrackingNumber.Equals(input.ContainerTrackingNumber))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContainerTrackingNumber != null)
                    hashCode = hashCode * 59 + this.ContainerTrackingNumber.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
