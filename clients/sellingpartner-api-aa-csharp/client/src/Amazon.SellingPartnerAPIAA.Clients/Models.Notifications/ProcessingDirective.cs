/* 
 * Selling Partner API for Notifications
 *
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, refer to the [Notifications Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/notifications-api-v1-use-case-guide).
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Notifications
{
    /// <summary>
    /// Additional information passed to the subscription to control the processing of notifications. For example, you can use an &#x60;eventFilter&#x60; to customize your subscription to send notifications for only the specified &#x60;marketplaceId&#x60;s, or select the aggregation time period at which to send notifications (for example: limit to one notification every five minutes for high frequency notifications). The specific features available vary depending on the &#x60;notificationType&#x60;.  This feature is currently only supported by the &#x60;ANY_OFFER_CHANGED&#x60; and &#x60;ORDER_CHANGE&#x60; &#x60;notificationType&#x60;s.
    /// </summary>
    [DataContract]
    public partial class ProcessingDirective :  IEquatable<ProcessingDirective>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessingDirective" /> class.
        /// </summary>
        /// <param name="eventFilter">A &#x60;notificationType&#x60; specific filter..</param>
        public ProcessingDirective(EventFilter eventFilter = default)
        {
            this.EventFilter = eventFilter;
        }
        
        /// <summary>
        /// A &#x60;notificationType&#x60; specific filter.
        /// </summary>
        /// <value>A &#x60;notificationType&#x60; specific filter.</value>
        [DataMember(Name="eventFilter", EmitDefaultValue=false)]
        public EventFilter EventFilter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessingDirective {\n");
            sb.Append("  EventFilter: ").Append(EventFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessingDirective);
        }

        /// <summary>
        /// Returns true if ProcessingDirective instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessingDirective to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessingDirective input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EventFilter == input.EventFilter ||
                    (this.EventFilter != null &&
                    this.EventFilter.Equals(input.EventFilter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventFilter != null)
                    hashCode = hashCode * 59 + this.EventFilter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
