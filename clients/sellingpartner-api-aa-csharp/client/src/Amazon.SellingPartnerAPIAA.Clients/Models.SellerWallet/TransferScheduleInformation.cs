/* 
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SellerWallet
{
    /// <summary>
    /// Mandatory information for initiating a schedule transfer.
    /// </summary>
    [DataContract]
    public partial class TransferScheduleInformation : IEquatable<TransferScheduleInformation>, IValidatableObject
    {
        /// <summary>
        /// The type of schedule.
        /// </summary>
        /// <value>The type of schedule.</value>
        [DataMember(Name = "scheduleType", EmitDefaultValue = false)]
        public ScheduleTransferType? ScheduleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferScheduleInformation" /> class.
        /// </summary>
        /// <param name="scheduleStartDate">The start date of the scheduled transfer..</param>
        /// <param name="scheduleEndDate">The end date of the scheduled transfer..</param>
        /// <param name="scheduleExpression">How often the scheduled transfer repeats..</param>
        /// <param name="scheduleType">The type of schedule..</param>
        public TransferScheduleInformation(DateTime? scheduleStartDate = default, DateTime? scheduleEndDate = default, ScheduleExpression scheduleExpression = default, ScheduleTransferType? scheduleType = default)
        {
            this.ScheduleStartDate = scheduleStartDate;
            this.ScheduleEndDate = scheduleEndDate;
            this.ScheduleExpression = scheduleExpression;
            this.ScheduleType = scheduleType;
        }

        /// <summary>
        /// The start date of the scheduled transfer.
        /// </summary>
        /// <value>The start date of the scheduled transfer.</value>
        [DataMember(Name = "scheduleStartDate", EmitDefaultValue = false)]
        public DateTime? ScheduleStartDate { get; set; }

        /// <summary>
        /// The end date of the scheduled transfer.
        /// </summary>
        /// <value>The end date of the scheduled transfer.</value>
        [DataMember(Name = "scheduleEndDate", EmitDefaultValue = false)]
        public DateTime? ScheduleEndDate { get; set; }

        /// <summary>
        /// How often the scheduled transfer repeats.
        /// </summary>
        /// <value>How often the scheduled transfer repeats.</value>
        [DataMember(Name = "scheduleExpression", EmitDefaultValue = false)]
        public ScheduleExpression ScheduleExpression { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransferScheduleInformation {\n");
            sb.Append("  ScheduleStartDate: ").Append(ScheduleStartDate).Append("\n");
            sb.Append("  ScheduleEndDate: ").Append(ScheduleEndDate).Append("\n");
            sb.Append("  ScheduleExpression: ").Append(ScheduleExpression).Append("\n");
            sb.Append("  ScheduleType: ").Append(ScheduleType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransferScheduleInformation);
        }

        /// <summary>
        /// Returns true if TransferScheduleInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of TransferScheduleInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransferScheduleInformation input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ScheduleStartDate == input.ScheduleStartDate ||
                    (this.ScheduleStartDate != null &&
                    this.ScheduleStartDate.Equals(input.ScheduleStartDate))
                ) &&
                (
                    this.ScheduleEndDate == input.ScheduleEndDate ||
                    (this.ScheduleEndDate != null &&
                    this.ScheduleEndDate.Equals(input.ScheduleEndDate))
                ) &&
                (
                    this.ScheduleExpression == input.ScheduleExpression ||
                    (this.ScheduleExpression != null &&
                    this.ScheduleExpression.Equals(input.ScheduleExpression))
                ) &&
                (
                    this.ScheduleType == input.ScheduleType ||
                    (this.ScheduleType != null &&
                    this.ScheduleType.Equals(input.ScheduleType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScheduleStartDate != null)
                    hashCode = hashCode * 59 + this.ScheduleStartDate.GetHashCode();
                if (this.ScheduleEndDate != null)
                    hashCode = hashCode * 59 + this.ScheduleEndDate.GetHashCode();
                if (this.ScheduleExpression != null)
                    hashCode = hashCode * 59 + this.ScheduleExpression.GetHashCode();
                if (this.ScheduleType != null)
                    hashCode = hashCode * 59 + this.ScheduleType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
