/* 
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SellerWallet
{
    /// <summary>
    /// Transfer schedule details and historical details related to it.
    /// </summary>
    [DataContract]
    public partial class TransferSchedule : IEquatable<TransferSchedule>, IValidatableObject
    {
        /// <summary>
        /// The type of transfer.
        /// </summary>
        /// <value>The type of transfer.</value>
        [DataMember(Name = "transactionType", EmitDefaultValue = false)]
        public TransactionType TransactionType { get; set; }
        /// <summary>
        /// The type of transfer schedule. This information can be modified when you update a transfer schedule.
        /// </summary>
        /// <value>The type of transfer schedule. This information can be modified when you update a transfer schedule.</value>
        [DataMember(Name = "transferScheduleStatus", EmitDefaultValue = false)]
        public TransferScheduleStatus TransferScheduleStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferSchedule" /> class.
        /// </summary>
        [JsonConstructor]
        protected TransferSchedule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferSchedule" /> class.
        /// </summary>
        /// <param name="transferScheduleId">The unique identifier provided by Amazon to the scheduled transfer. (required).</param>
        /// <param name="transactionType">The type of transfer. (required).</param>
        /// <param name="transactionSourceAccount">Details of the source bank account in the scheduled transfer..</param>
        /// <param name="transactionDestinationAccount">Details of the destination bank account in the scheduled transfer. Here &#x60;bankAccountCountryCode&#x60; is a required field. (required).</param>
        /// <param name="transferScheduleStatus">The type of transfer schedule. This information can be modified when you update a transfer schedule. (required).</param>
        /// <param name="transferScheduleInformation">The fields required for the scheduled transfer. This information can be modified when you update a transfer schedule. (required).</param>
        /// <param name="paymentPreference">The payment preference of the scheduled transfer. This information can be modified when you update a transfer schedule..</param>
        /// <param name="transferScheduleFailures">A list of transfer schedule failures. (required).</param>
        public TransferSchedule(string transferScheduleId = default, TransactionType transactionType = default, TransactionAccount transactionSourceAccount = default, TransactionAccount transactionDestinationAccount = default, TransferScheduleStatus transferScheduleStatus = default, TransferScheduleInformation transferScheduleInformation = default, PaymentPreference paymentPreference = default, List<TransferScheduleFailures> transferScheduleFailures = default)
        {
            // to ensure "transferScheduleId" is required (not null)
            if (transferScheduleId == null)
            {
                throw new InvalidDataException("transferScheduleId is a required property for TransferSchedule and cannot be null");
            }
            else
            {
                this.TransferScheduleId = transferScheduleId;
            }
            // to ensure "transactionType" is required (not null)
            if (transactionType == null)
            {
                throw new InvalidDataException("transactionType is a required property for TransferSchedule and cannot be null");
            }
            else
            {
                this.TransactionType = transactionType;
            }
            // to ensure "transactionDestinationAccount" is required (not null)
            if (transactionDestinationAccount == null)
            {
                throw new InvalidDataException("transactionDestinationAccount is a required property for TransferSchedule and cannot be null");
            }
            else
            {
                this.TransactionDestinationAccount = transactionDestinationAccount;
            }
            // to ensure "transferScheduleStatus" is required (not null)
            if (transferScheduleStatus == null)
            {
                throw new InvalidDataException("transferScheduleStatus is a required property for TransferSchedule and cannot be null");
            }
            else
            {
                this.TransferScheduleStatus = transferScheduleStatus;
            }
            // to ensure "transferScheduleInformation" is required (not null)
            if (transferScheduleInformation == null)
            {
                throw new InvalidDataException("transferScheduleInformation is a required property for TransferSchedule and cannot be null");
            }
            else
            {
                this.TransferScheduleInformation = transferScheduleInformation;
            }
            // to ensure "transferScheduleFailures" is required (not null)
            if (transferScheduleFailures == null)
            {
                throw new InvalidDataException("transferScheduleFailures is a required property for TransferSchedule and cannot be null");
            }
            else
            {
                this.TransferScheduleFailures = transferScheduleFailures;
            }
            this.TransactionSourceAccount = transactionSourceAccount;
            this.PaymentPreference = paymentPreference;
        }

        /// <summary>
        /// The unique identifier provided by Amazon to the scheduled transfer.
        /// </summary>
        /// <value>The unique identifier provided by Amazon to the scheduled transfer.</value>
        [DataMember(Name = "transferScheduleId", EmitDefaultValue = false)]
        public string TransferScheduleId { get; set; }


        /// <summary>
        /// Details of the source bank account in the scheduled transfer.
        /// </summary>
        /// <value>Details of the source bank account in the scheduled transfer.</value>
        [DataMember(Name = "transactionSourceAccount", EmitDefaultValue = false)]
        public TransactionAccount TransactionSourceAccount { get; set; }

        /// <summary>
        /// Details of the destination bank account in the scheduled transfer. Here &#x60;bankAccountCountryCode&#x60; is a required field.
        /// </summary>
        /// <value>Details of the destination bank account in the scheduled transfer. Here &#x60;bankAccountCountryCode&#x60; is a required field.</value>
        [DataMember(Name = "transactionDestinationAccount", EmitDefaultValue = false)]
        public TransactionAccount TransactionDestinationAccount { get; set; }


        /// <summary>
        /// The fields required for the scheduled transfer. This information can be modified when you update a transfer schedule.
        /// </summary>
        /// <value>The fields required for the scheduled transfer. This information can be modified when you update a transfer schedule.</value>
        [DataMember(Name = "transferScheduleInformation", EmitDefaultValue = false)]
        public TransferScheduleInformation TransferScheduleInformation { get; set; }

        /// <summary>
        /// The payment preference of the scheduled transfer. This information can be modified when you update a transfer schedule.
        /// </summary>
        /// <value>The payment preference of the scheduled transfer. This information can be modified when you update a transfer schedule.</value>
        [DataMember(Name = "paymentPreference", EmitDefaultValue = false)]
        public PaymentPreference PaymentPreference { get; set; }

        /// <summary>
        /// A list of transfer schedule failures.
        /// </summary>
        /// <value>A list of transfer schedule failures.</value>
        [DataMember(Name = "transferScheduleFailures", EmitDefaultValue = false)]
        public List<TransferScheduleFailures> TransferScheduleFailures { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransferSchedule {\n");
            sb.Append("  TransferScheduleId: ").Append(TransferScheduleId).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  TransactionSourceAccount: ").Append(TransactionSourceAccount).Append("\n");
            sb.Append("  TransactionDestinationAccount: ").Append(TransactionDestinationAccount).Append("\n");
            sb.Append("  TransferScheduleStatus: ").Append(TransferScheduleStatus).Append("\n");
            sb.Append("  TransferScheduleInformation: ").Append(TransferScheduleInformation).Append("\n");
            sb.Append("  PaymentPreference: ").Append(PaymentPreference).Append("\n");
            sb.Append("  TransferScheduleFailures: ").Append(TransferScheduleFailures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransferSchedule);
        }

        /// <summary>
        /// Returns true if TransferSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of TransferSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransferSchedule input)
        {
            if (input == null)
                return false;

            return
                (
                    this.TransferScheduleId == input.TransferScheduleId ||
                    (this.TransferScheduleId != null &&
                    this.TransferScheduleId.Equals(input.TransferScheduleId))
                ) &&
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                ) &&
                (
                    this.TransactionSourceAccount == input.TransactionSourceAccount ||
                    (this.TransactionSourceAccount != null &&
                    this.TransactionSourceAccount.Equals(input.TransactionSourceAccount))
                ) &&
                (
                    this.TransactionDestinationAccount == input.TransactionDestinationAccount ||
                    (this.TransactionDestinationAccount != null &&
                    this.TransactionDestinationAccount.Equals(input.TransactionDestinationAccount))
                ) &&
                (
                    this.TransferScheduleStatus == input.TransferScheduleStatus ||
                    (this.TransferScheduleStatus != null &&
                    this.TransferScheduleStatus.Equals(input.TransferScheduleStatus))
                ) &&
                (
                    this.TransferScheduleInformation == input.TransferScheduleInformation ||
                    (this.TransferScheduleInformation != null &&
                    this.TransferScheduleInformation.Equals(input.TransferScheduleInformation))
                ) &&
                (
                    this.PaymentPreference == input.PaymentPreference ||
                    (this.PaymentPreference != null &&
                    this.PaymentPreference.Equals(input.PaymentPreference))
                ) &&
                (
                    this.TransferScheduleFailures == input.TransferScheduleFailures ||
                    this.TransferScheduleFailures != null &&
                    this.TransferScheduleFailures.SequenceEqual(input.TransferScheduleFailures)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransferScheduleId != null)
                    hashCode = hashCode * 59 + this.TransferScheduleId.GetHashCode();
                if (this.TransactionType != null)
                    hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                if (this.TransactionSourceAccount != null)
                    hashCode = hashCode * 59 + this.TransactionSourceAccount.GetHashCode();
                if (this.TransactionDestinationAccount != null)
                    hashCode = hashCode * 59 + this.TransactionDestinationAccount.GetHashCode();
                if (this.TransferScheduleStatus != null)
                    hashCode = hashCode * 59 + this.TransferScheduleStatus.GetHashCode();
                if (this.TransferScheduleInformation != null)
                    hashCode = hashCode * 59 + this.TransferScheduleInformation.GetHashCode();
                if (this.PaymentPreference != null)
                    hashCode = hashCode * 59 + this.PaymentPreference.GetHashCode();
                if (this.TransferScheduleFailures != null)
                    hashCode = hashCode * 59 + this.TransferScheduleFailures.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
