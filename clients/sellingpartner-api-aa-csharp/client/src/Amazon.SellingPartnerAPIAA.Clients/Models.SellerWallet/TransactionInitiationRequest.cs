/* 
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SellerWallet
{
    /// <summary>
    /// Request body to initiate a transaction from a Seller Wallet bank account to another customer-defined bank account.
    /// </summary>
    [DataContract]
    public partial class TransactionInitiationRequest : IEquatable<TransactionInitiationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInitiationRequest" /> class.
        /// </summary>
        [JsonConstructor]
        protected TransactionInitiationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInitiationRequest" /> class.
        /// </summary>
        /// <param name="sourceAccountId">The unique identifier of the source Amazon Seller Wallet bank account from which the money is debited. (required).</param>
        /// <param name="destinationAccountId">The unique identifier of the destination bank account where the money is deposited..</param>
        /// <param name="description">A description of the transaction. (required).</param>
        /// <param name="destinationTransactionInstrument">Details of the destination bank account in the transaction request. (required).</param>
        /// <param name="destinationAccountHolderAddress">The address used to verify the bank account of the payee. This can be a person or business mailing address..</param>
        /// <param name="sourceAmount">The transaction amount in the source account&#39;s currency format. Requests that use a currency other than source bank account currency will fail. (required).</param>
        /// <param name="transferRateDetails">The fees and foreign exchange rates applied to the transaction. Transfer Rate Preview is currently optional. This field is required when the third party honors the fees and rates of the Seller Wallet transaction..</param>
        /// <param name="requestTime">The time at which the transaction was initiated in [ISO 8601 date time format](https://developer-docs.amazon.com/sp-api/docs/iso-8601). (required).</param>
        public TransactionInitiationRequest(string sourceAccountId = default, string destinationAccountId = default, string description = default, TransactionInstrumentDetails destinationTransactionInstrument = default, AccountHolderAddress destinationAccountHolderAddress = default, Currency sourceAmount = default, TransferRatePreview transferRateDetails = default, DateTime? requestTime = default)
        {
            // to ensure "sourceAccountId" is required (not null)
            if (sourceAccountId == null)
            {
                throw new InvalidDataException("sourceAccountId is a required property for TransactionInitiationRequest and cannot be null");
            }
            else
            {
                this.SourceAccountId = sourceAccountId;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for TransactionInitiationRequest and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "destinationTransactionInstrument" is required (not null)
            if (destinationTransactionInstrument == null)
            {
                throw new InvalidDataException("destinationTransactionInstrument is a required property for TransactionInitiationRequest and cannot be null");
            }
            else
            {
                this.DestinationTransactionInstrument = destinationTransactionInstrument;
            }
            // to ensure "sourceAmount" is required (not null)
            if (sourceAmount == null)
            {
                throw new InvalidDataException("sourceAmount is a required property for TransactionInitiationRequest and cannot be null");
            }
            else
            {
                this.SourceAmount = sourceAmount;
            }
            // to ensure "requestTime" is required (not null)
            if (requestTime == null)
            {
                throw new InvalidDataException("requestTime is a required property for TransactionInitiationRequest and cannot be null");
            }
            else
            {
                this.RequestTime = requestTime;
            }
            this.DestinationAccountId = destinationAccountId;
            this.DestinationAccountHolderAddress = destinationAccountHolderAddress;
            this.TransferRateDetails = transferRateDetails;
        }

        /// <summary>
        /// The unique identifier of the source Amazon Seller Wallet bank account from which the money is debited.
        /// </summary>
        /// <value>The unique identifier of the source Amazon Seller Wallet bank account from which the money is debited.</value>
        [DataMember(Name = "sourceAccountId", EmitDefaultValue = false)]
        public string SourceAccountId { get; set; }

        /// <summary>
        /// The unique identifier of the destination bank account where the money is deposited.
        /// </summary>
        /// <value>The unique identifier of the destination bank account where the money is deposited.</value>
        [DataMember(Name = "destinationAccountId", EmitDefaultValue = false)]
        public string DestinationAccountId { get; set; }

        /// <summary>
        /// A description of the transaction.
        /// </summary>
        /// <value>A description of the transaction.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Details of the destination bank account in the transaction request.
        /// </summary>
        /// <value>Details of the destination bank account in the transaction request.</value>
        [DataMember(Name = "destinationTransactionInstrument", EmitDefaultValue = false)]
        public TransactionInstrumentDetails DestinationTransactionInstrument { get; set; }

        /// <summary>
        /// The address used to verify the bank account of the payee. This can be a person or business mailing address.
        /// </summary>
        /// <value>The address used to verify the bank account of the payee. This can be a person or business mailing address.</value>
        [DataMember(Name = "destinationAccountHolderAddress", EmitDefaultValue = false)]
        public AccountHolderAddress DestinationAccountHolderAddress { get; set; }

        /// <summary>
        /// The transaction amount in the source account&#39;s currency format. Requests that use a currency other than source bank account currency will fail.
        /// </summary>
        /// <value>The transaction amount in the source account&#39;s currency format. Requests that use a currency other than source bank account currency will fail.</value>
        [DataMember(Name = "sourceAmount", EmitDefaultValue = false)]
        public Currency SourceAmount { get; set; }

        /// <summary>
        /// The fees and foreign exchange rates applied to the transaction. Transfer Rate Preview is currently optional. This field is required when the third party honors the fees and rates of the Seller Wallet transaction.
        /// </summary>
        /// <value>The fees and foreign exchange rates applied to the transaction. Transfer Rate Preview is currently optional. This field is required when the third party honors the fees and rates of the Seller Wallet transaction.</value>
        [DataMember(Name = "transferRateDetails", EmitDefaultValue = false)]
        public TransferRatePreview TransferRateDetails { get; set; }

        /// <summary>
        /// The time at which the transaction was initiated in [ISO 8601 date time format](https://developer-docs.amazon.com/sp-api/docs/iso-8601).
        /// </summary>
        /// <value>The time at which the transaction was initiated in [ISO 8601 date time format](https://developer-docs.amazon.com/sp-api/docs/iso-8601).</value>
        [DataMember(Name = "requestTime", EmitDefaultValue = false)]
        public DateTime? RequestTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionInitiationRequest {\n");
            sb.Append("  SourceAccountId: ").Append(SourceAccountId).Append("\n");
            sb.Append("  DestinationAccountId: ").Append(DestinationAccountId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DestinationTransactionInstrument: ").Append(DestinationTransactionInstrument).Append("\n");
            sb.Append("  DestinationAccountHolderAddress: ").Append(DestinationAccountHolderAddress).Append("\n");
            sb.Append("  SourceAmount: ").Append(SourceAmount).Append("\n");
            sb.Append("  TransferRateDetails: ").Append(TransferRateDetails).Append("\n");
            sb.Append("  RequestTime: ").Append(RequestTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionInitiationRequest);
        }

        /// <summary>
        /// Returns true if TransactionInitiationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionInitiationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionInitiationRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    this.SourceAccountId == input.SourceAccountId ||
                    (this.SourceAccountId != null &&
                    this.SourceAccountId.Equals(input.SourceAccountId))
                ) &&
                (
                    this.DestinationAccountId == input.DestinationAccountId ||
                    (this.DestinationAccountId != null &&
                    this.DestinationAccountId.Equals(input.DestinationAccountId))
                ) &&
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) &&
                (
                    this.DestinationTransactionInstrument == input.DestinationTransactionInstrument ||
                    (this.DestinationTransactionInstrument != null &&
                    this.DestinationTransactionInstrument.Equals(input.DestinationTransactionInstrument))
                ) &&
                (
                    this.DestinationAccountHolderAddress == input.DestinationAccountHolderAddress ||
                    (this.DestinationAccountHolderAddress != null &&
                    this.DestinationAccountHolderAddress.Equals(input.DestinationAccountHolderAddress))
                ) &&
                (
                    this.SourceAmount == input.SourceAmount ||
                    (this.SourceAmount != null &&
                    this.SourceAmount.Equals(input.SourceAmount))
                ) &&
                (
                    this.TransferRateDetails == input.TransferRateDetails ||
                    (this.TransferRateDetails != null &&
                    this.TransferRateDetails.Equals(input.TransferRateDetails))
                ) &&
                (
                    this.RequestTime == input.RequestTime ||
                    (this.RequestTime != null &&
                    this.RequestTime.Equals(input.RequestTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceAccountId != null)
                    hashCode = hashCode * 59 + this.SourceAccountId.GetHashCode();
                if (this.DestinationAccountId != null)
                    hashCode = hashCode * 59 + this.DestinationAccountId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DestinationTransactionInstrument != null)
                    hashCode = hashCode * 59 + this.DestinationTransactionInstrument.GetHashCode();
                if (this.DestinationAccountHolderAddress != null)
                    hashCode = hashCode * 59 + this.DestinationAccountHolderAddress.GetHashCode();
                if (this.SourceAmount != null)
                    hashCode = hashCode * 59 + this.SourceAmount.GetHashCode();
                if (this.TransferRateDetails != null)
                    hashCode = hashCode * 59 + this.TransferRateDetails.GetHashCode();
                if (this.RequestTime != null)
                    hashCode = hashCode * 59 + this.RequestTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
