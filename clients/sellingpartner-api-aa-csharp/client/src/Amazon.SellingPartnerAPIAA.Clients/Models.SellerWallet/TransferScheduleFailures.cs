/* 
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SellerWallet
{
    /// <summary>
    /// The time of and reason for the transfer schedule failure.
    /// </summary>
    [DataContract]
    public partial class TransferScheduleFailures : IEquatable<TransferScheduleFailures>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferScheduleFailures" /> class.
        /// </summary>
        [JsonConstructor]
        protected TransferScheduleFailures() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferScheduleFailures" /> class.
        /// </summary>
        /// <param name="transferScheduleFailureDate">The transfer schedule failure date. (required).</param>
        /// <param name="transferScheduleFailureReason">The reason listed for the failure of the transfer schedule. (required).</param>
        public TransferScheduleFailures(DateTime? transferScheduleFailureDate = default, string transferScheduleFailureReason = default)
        {
            // to ensure "transferScheduleFailureDate" is required (not null)
            if (transferScheduleFailureDate == null)
            {
                throw new InvalidDataException("transferScheduleFailureDate is a required property for TransferScheduleFailures and cannot be null");
            }
            else
            {
                this.TransferScheduleFailureDate = transferScheduleFailureDate;
            }
            // to ensure "transferScheduleFailureReason" is required (not null)
            if (transferScheduleFailureReason == null)
            {
                throw new InvalidDataException("transferScheduleFailureReason is a required property for TransferScheduleFailures and cannot be null");
            }
            else
            {
                this.TransferScheduleFailureReason = transferScheduleFailureReason;
            }
        }

        /// <summary>
        /// The transfer schedule failure date.
        /// </summary>
        /// <value>The transfer schedule failure date.</value>
        [DataMember(Name = "transferScheduleFailureDate", EmitDefaultValue = false)]
        public DateTime? TransferScheduleFailureDate { get; set; }

        /// <summary>
        /// The reason listed for the failure of the transfer schedule.
        /// </summary>
        /// <value>The reason listed for the failure of the transfer schedule.</value>
        [DataMember(Name = "transferScheduleFailureReason", EmitDefaultValue = false)]
        public string TransferScheduleFailureReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransferScheduleFailures {\n");
            sb.Append("  TransferScheduleFailureDate: ").Append(TransferScheduleFailureDate).Append("\n");
            sb.Append("  TransferScheduleFailureReason: ").Append(TransferScheduleFailureReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransferScheduleFailures);
        }

        /// <summary>
        /// Returns true if TransferScheduleFailures instances are equal
        /// </summary>
        /// <param name="input">Instance of TransferScheduleFailures to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransferScheduleFailures input)
        {
            if (input == null)
                return false;

            return
                (
                    this.TransferScheduleFailureDate == input.TransferScheduleFailureDate ||
                    (this.TransferScheduleFailureDate != null &&
                    this.TransferScheduleFailureDate.Equals(input.TransferScheduleFailureDate))
                ) &&
                (
                    this.TransferScheduleFailureReason == input.TransferScheduleFailureReason ||
                    (this.TransferScheduleFailureReason != null &&
                    this.TransferScheduleFailureReason.Equals(input.TransferScheduleFailureReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransferScheduleFailureDate != null)
                    hashCode = hashCode * 59 + this.TransferScheduleFailureDate.GetHashCode();
                if (this.TransferScheduleFailureReason != null)
                    hashCode = hashCode * 59 + this.TransferScheduleFailureReason.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
