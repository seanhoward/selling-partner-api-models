/* 
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SellerWallet
{
    /// <summary>
    /// The balance amount in the Amazon Seller Wallet bank account.
    /// </summary>
    [DataContract]
    public partial class Balance : IEquatable<Balance>, IValidatableObject
    {
        /// <summary>
        /// The type of balance.
        /// </summary>
        /// <value>The type of balance.</value>
        [DataMember(Name = "balanceType", EmitDefaultValue = false)]
        public BalanceType? BalanceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Balance" /> class.
        /// </summary>
        [JsonConstructor]
        protected Balance() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Balance" /> class.
        /// </summary>
        /// <param name="accountId">The unique identifier provided by Amazon to identify the account. (required).</param>
        /// <param name="balanceType">The type of balance..</param>
        /// <param name="balanceAmount">The balance amount in number format. (required).</param>
        /// <param name="balanceCurrency">The Amazon Seller Wallet bank account currency code in ISO 4217 format. (required).</param>
        /// <param name="lastUpdateDate">The date of the most recent account balance update. (required).</param>
        public Balance(string accountId = default, BalanceType? balanceType = default, decimal? balanceAmount = default, string balanceCurrency = default, DateTime? lastUpdateDate = default)
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new InvalidDataException("accountId is a required property for Balance and cannot be null");
            }
            else
            {
                this.AccountId = accountId;
            }
            // to ensure "balanceAmount" is required (not null)
            if (balanceAmount == null)
            {
                throw new InvalidDataException("balanceAmount is a required property for Balance and cannot be null");
            }
            else
            {
                this.BalanceAmount = balanceAmount;
            }
            // to ensure "balanceCurrency" is required (not null)
            if (balanceCurrency == null)
            {
                throw new InvalidDataException("balanceCurrency is a required property for Balance and cannot be null");
            }
            else
            {
                this.BalanceCurrency = balanceCurrency;
            }
            // to ensure "lastUpdateDate" is required (not null)
            if (lastUpdateDate == null)
            {
                throw new InvalidDataException("lastUpdateDate is a required property for Balance and cannot be null");
            }
            else
            {
                this.LastUpdateDate = lastUpdateDate;
            }
            this.BalanceType = balanceType;
        }

        /// <summary>
        /// The unique identifier provided by Amazon to identify the account.
        /// </summary>
        /// <value>The unique identifier provided by Amazon to identify the account.</value>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }


        /// <summary>
        /// The balance amount in number format.
        /// </summary>
        /// <value>The balance amount in number format.</value>
        [DataMember(Name = "balanceAmount", EmitDefaultValue = false)]
        public decimal? BalanceAmount { get; set; }

        /// <summary>
        /// The Amazon Seller Wallet bank account currency code in ISO 4217 format.
        /// </summary>
        /// <value>The Amazon Seller Wallet bank account currency code in ISO 4217 format.</value>
        [DataMember(Name = "balanceCurrency", EmitDefaultValue = false)]
        public string BalanceCurrency { get; set; }

        /// <summary>
        /// The date of the most recent account balance update.
        /// </summary>
        /// <value>The date of the most recent account balance update.</value>
        [DataMember(Name = "lastUpdateDate", EmitDefaultValue = false)]
        public DateTime? LastUpdateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Balance {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  BalanceType: ").Append(BalanceType).Append("\n");
            sb.Append("  BalanceAmount: ").Append(BalanceAmount).Append("\n");
            sb.Append("  BalanceCurrency: ").Append(BalanceCurrency).Append("\n");
            sb.Append("  LastUpdateDate: ").Append(LastUpdateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Balance);
        }

        /// <summary>
        /// Returns true if Balance instances are equal
        /// </summary>
        /// <param name="input">Instance of Balance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Balance input)
        {
            if (input == null)
                return false;

            return
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) &&
                (
                    this.BalanceType == input.BalanceType ||
                    (this.BalanceType != null &&
                    this.BalanceType.Equals(input.BalanceType))
                ) &&
                (
                    this.BalanceAmount == input.BalanceAmount ||
                    (this.BalanceAmount != null &&
                    this.BalanceAmount.Equals(input.BalanceAmount))
                ) &&
                (
                    this.BalanceCurrency == input.BalanceCurrency ||
                    (this.BalanceCurrency != null &&
                    this.BalanceCurrency.Equals(input.BalanceCurrency))
                ) &&
                (
                    this.LastUpdateDate == input.LastUpdateDate ||
                    (this.LastUpdateDate != null &&
                    this.LastUpdateDate.Equals(input.LastUpdateDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.BalanceType != null)
                    hashCode = hashCode * 59 + this.BalanceType.GetHashCode();
                if (this.BalanceAmount != null)
                    hashCode = hashCode * 59 + this.BalanceAmount.GetHashCode();
                if (this.BalanceCurrency != null)
                    hashCode = hashCode * 59 + this.BalanceCurrency.GetHashCode();
                if (this.LastUpdateDate != null)
                    hashCode = hashCode * 59 + this.LastUpdateDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
