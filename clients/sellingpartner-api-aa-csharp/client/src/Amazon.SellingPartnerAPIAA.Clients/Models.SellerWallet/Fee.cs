/* 
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SellerWallet
{
    /// <summary>
    /// Details of the fee.
    /// </summary>
    [DataContract]
    public partial class Fee : IEquatable<Fee>, IValidatableObject
    {
        /// <summary>
        /// The type of the fee.
        /// </summary>
        /// <value>The type of the fee.</value>
        [DataMember(Name = "feeType", EmitDefaultValue = false)]
        public FeeType FeeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Fee" /> class.
        /// </summary>
        [JsonConstructor]
        protected Fee() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Fee" /> class.
        /// </summary>
        /// <param name="feeId">The unique identifier assigned to the fee. (required).</param>
        /// <param name="feeType">The type of the fee. (required).</param>
        /// <param name="feeRateValue">The value of the fee in percentage format. (required).</param>
        /// <param name="feeAmount">The actual value of the fee in numeric format. (required).</param>
        public Fee(string feeId = default, FeeType feeType = default, decimal? feeRateValue = default, Currency feeAmount = default)
        {
            // to ensure "feeId" is required (not null)
            if (feeId == null)
            {
                throw new InvalidDataException("feeId is a required property for Fee and cannot be null");
            }
            else
            {
                this.FeeId = feeId;
            }
            // to ensure "feeType" is required (not null)
            if (feeType == null)
            {
                throw new InvalidDataException("feeType is a required property for Fee and cannot be null");
            }
            else
            {
                this.FeeType = feeType;
            }
            // to ensure "feeRateValue" is required (not null)
            if (feeRateValue == null)
            {
                throw new InvalidDataException("feeRateValue is a required property for Fee and cannot be null");
            }
            else
            {
                this.FeeRateValue = feeRateValue;
            }
            // to ensure "feeAmount" is required (not null)
            if (feeAmount == null)
            {
                throw new InvalidDataException("feeAmount is a required property for Fee and cannot be null");
            }
            else
            {
                this.FeeAmount = feeAmount;
            }
        }

        /// <summary>
        /// The unique identifier assigned to the fee.
        /// </summary>
        /// <value>The unique identifier assigned to the fee.</value>
        [DataMember(Name = "feeId", EmitDefaultValue = false)]
        public string FeeId { get; set; }


        /// <summary>
        /// The value of the fee in percentage format.
        /// </summary>
        /// <value>The value of the fee in percentage format.</value>
        [DataMember(Name = "feeRateValue", EmitDefaultValue = false)]
        public decimal? FeeRateValue { get; set; }

        /// <summary>
        /// The actual value of the fee in numeric format.
        /// </summary>
        /// <value>The actual value of the fee in numeric format.</value>
        [DataMember(Name = "feeAmount", EmitDefaultValue = false)]
        public Currency FeeAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Fee {\n");
            sb.Append("  FeeId: ").Append(FeeId).Append("\n");
            sb.Append("  FeeType: ").Append(FeeType).Append("\n");
            sb.Append("  FeeRateValue: ").Append(FeeRateValue).Append("\n");
            sb.Append("  FeeAmount: ").Append(FeeAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Fee);
        }

        /// <summary>
        /// Returns true if Fee instances are equal
        /// </summary>
        /// <param name="input">Instance of Fee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Fee input)
        {
            if (input == null)
                return false;

            return
                (
                    this.FeeId == input.FeeId ||
                    (this.FeeId != null &&
                    this.FeeId.Equals(input.FeeId))
                ) &&
                (
                    this.FeeType == input.FeeType ||
                    (this.FeeType != null &&
                    this.FeeType.Equals(input.FeeType))
                ) &&
                (
                    this.FeeRateValue == input.FeeRateValue ||
                    (this.FeeRateValue != null &&
                    this.FeeRateValue.Equals(input.FeeRateValue))
                ) &&
                (
                    this.FeeAmount == input.FeeAmount ||
                    (this.FeeAmount != null &&
                    this.FeeAmount.Equals(input.FeeAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeeId != null)
                    hashCode = hashCode * 59 + this.FeeId.GetHashCode();
                if (this.FeeType != null)
                    hashCode = hashCode * 59 + this.FeeType.GetHashCode();
                if (this.FeeRateValue != null)
                    hashCode = hashCode * 59 + this.FeeRateValue.GetHashCode();
                if (this.FeeAmount != null)
                    hashCode = hashCode * 59 + this.FeeAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
