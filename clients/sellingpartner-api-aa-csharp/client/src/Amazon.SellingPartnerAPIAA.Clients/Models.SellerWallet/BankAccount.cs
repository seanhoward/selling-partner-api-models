/* 
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SellerWallet
{
    /// <summary>
    /// Details of an Amazon Seller Wallet bank account. This account is used to hold the money that a Seller Wallet customer earns by selling items.
    /// </summary>
    [DataContract]
    public partial class BankAccount : IEquatable<BankAccount>, IValidatableObject
    {
        /// <summary>
        /// The format in which the bank account number is provided.
        /// </summary>
        /// <value>The format in which the bank account number is provided.</value>
        [DataMember(Name = "bankAccountNumberFormat", EmitDefaultValue = false)]
        public BankAccountNumberFormat BankAccountNumberFormat { get; set; }
        /// <summary>
        /// Type of ownership of the bank account. This value is SELF for Amazon Seller Wallet accounts.
        /// </summary>
        /// <value>Type of ownership of the bank account. This value is SELF for Amazon Seller Wallet accounts.</value>
        [DataMember(Name = "bankAccountOwnershipType", EmitDefaultValue = false)]
        public BankAccountOwnershipType BankAccountOwnershipType { get; set; }
        /// <summary>
        /// Bank number format or routing number type.
        /// </summary>
        /// <value>Bank number format or routing number type.</value>
        [DataMember(Name = "bankNumberFormat", EmitDefaultValue = false)]
        public BankNumberFormat BankNumberFormat { get; set; }
        /// <summary>
        /// The compliance status of the bank account holder.
        /// </summary>
        /// <value>The compliance status of the bank account holder.</value>
        [DataMember(Name = "bankAccountHolderStatus", EmitDefaultValue = false)]
        public BankAccountHolderStatus? BankAccountHolderStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccount" /> class.
        /// </summary>
        [JsonConstructor]
        protected BankAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccount" /> class.
        /// </summary>
        /// <param name="accountId">The unique identifier provided by Amazon to identify the account..</param>
        /// <param name="accountHolderName">The bank account holder&#39;s name (expected to be an Amazon customer). (required).</param>
        /// <param name="bankAccountNumberFormat">The format in which the bank account number is provided. (required).</param>
        /// <param name="bankName">The name of the bank. This value is Amazon Seller Wallet for Amazon Seller Wallet accounts..</param>
        /// <param name="bankAccountOwnershipType">Type of ownership of the bank account. This value is SELF for Amazon Seller Wallet accounts. (required).</param>
        /// <param name="routingNumber">Routing number for automated clearing house transfers. This value is nine consecutive zeros for Amazon Seller Wallet accounts. (required).</param>
        /// <param name="bankNumberFormat">Bank number format or routing number type. (required).</param>
        /// <param name="accountCountryCode">The two-digit country code in ISO 3166 format. (required).</param>
        /// <param name="accountCurrency">Bank account currency code in ISO 4217 format. (required).</param>
        /// <param name="bankAccountNumberTail">The last 3 digit of the bank account number. This value is three consecutive zeros for Amazon Seller Wallet accounts. (required).</param>
        /// <param name="bankAccountHolderStatus">The compliance status of the bank account holder..</param>
        public BankAccount(string accountId = default, string accountHolderName = default, BankAccountNumberFormat bankAccountNumberFormat = default, string bankName = default, BankAccountOwnershipType bankAccountOwnershipType = default, string routingNumber = default, BankNumberFormat bankNumberFormat = default, string accountCountryCode = default, string accountCurrency = default, string bankAccountNumberTail = default, BankAccountHolderStatus? bankAccountHolderStatus = default)
        {
            // to ensure "accountHolderName" is required (not null)
            if (accountHolderName == null)
            {
                throw new InvalidDataException("accountHolderName is a required property for BankAccount and cannot be null");
            }
            else
            {
                this.AccountHolderName = accountHolderName;
            }
            // to ensure "bankAccountNumberFormat" is required (not null)
            if (bankAccountNumberFormat == null)
            {
                throw new InvalidDataException("bankAccountNumberFormat is a required property for BankAccount and cannot be null");
            }
            else
            {
                this.BankAccountNumberFormat = bankAccountNumberFormat;
            }
            // to ensure "bankAccountOwnershipType" is required (not null)
            if (bankAccountOwnershipType == null)
            {
                throw new InvalidDataException("bankAccountOwnershipType is a required property for BankAccount and cannot be null");
            }
            else
            {
                this.BankAccountOwnershipType = bankAccountOwnershipType;
            }
            // to ensure "routingNumber" is required (not null)
            if (routingNumber == null)
            {
                throw new InvalidDataException("routingNumber is a required property for BankAccount and cannot be null");
            }
            else
            {
                this.RoutingNumber = routingNumber;
            }
            // to ensure "bankNumberFormat" is required (not null)
            if (bankNumberFormat == null)
            {
                throw new InvalidDataException("bankNumberFormat is a required property for BankAccount and cannot be null");
            }
            else
            {
                this.BankNumberFormat = bankNumberFormat;
            }
            // to ensure "accountCountryCode" is required (not null)
            if (accountCountryCode == null)
            {
                throw new InvalidDataException("accountCountryCode is a required property for BankAccount and cannot be null");
            }
            else
            {
                this.AccountCountryCode = accountCountryCode;
            }
            // to ensure "accountCurrency" is required (not null)
            if (accountCurrency == null)
            {
                throw new InvalidDataException("accountCurrency is a required property for BankAccount and cannot be null");
            }
            else
            {
                this.AccountCurrency = accountCurrency;
            }
            // to ensure "bankAccountNumberTail" is required (not null)
            if (bankAccountNumberTail == null)
            {
                throw new InvalidDataException("bankAccountNumberTail is a required property for BankAccount and cannot be null");
            }
            else
            {
                this.BankAccountNumberTail = bankAccountNumberTail;
            }
            this.AccountId = accountId;
            this.BankName = bankName;
            this.BankAccountHolderStatus = bankAccountHolderStatus;
        }

        /// <summary>
        /// The unique identifier provided by Amazon to identify the account.
        /// </summary>
        /// <value>The unique identifier provided by Amazon to identify the account.</value>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// The bank account holder&#39;s name (expected to be an Amazon customer).
        /// </summary>
        /// <value>The bank account holder&#39;s name (expected to be an Amazon customer).</value>
        [DataMember(Name = "accountHolderName", EmitDefaultValue = false)]
        public string AccountHolderName { get; set; }


        /// <summary>
        /// The name of the bank. This value is Amazon Seller Wallet for Amazon Seller Wallet accounts.
        /// </summary>
        /// <value>The name of the bank. This value is Amazon Seller Wallet for Amazon Seller Wallet accounts.</value>
        [DataMember(Name = "bankName", EmitDefaultValue = false)]
        public string BankName { get; set; }


        /// <summary>
        /// Routing number for automated clearing house transfers. This value is nine consecutive zeros for Amazon Seller Wallet accounts.
        /// </summary>
        /// <value>Routing number for automated clearing house transfers. This value is nine consecutive zeros for Amazon Seller Wallet accounts.</value>
        [DataMember(Name = "routingNumber", EmitDefaultValue = false)]
        public string RoutingNumber { get; set; }


        /// <summary>
        /// The two-digit country code in ISO 3166 format.
        /// </summary>
        /// <value>The two-digit country code in ISO 3166 format.</value>
        [DataMember(Name = "accountCountryCode", EmitDefaultValue = false)]
        public string AccountCountryCode { get; set; }

        /// <summary>
        /// Bank account currency code in ISO 4217 format.
        /// </summary>
        /// <value>Bank account currency code in ISO 4217 format.</value>
        [DataMember(Name = "accountCurrency", EmitDefaultValue = false)]
        public string AccountCurrency { get; set; }

        /// <summary>
        /// The last 3 digit of the bank account number. This value is three consecutive zeros for Amazon Seller Wallet accounts.
        /// </summary>
        /// <value>The last 3 digit of the bank account number. This value is three consecutive zeros for Amazon Seller Wallet accounts.</value>
        [DataMember(Name = "bankAccountNumberTail", EmitDefaultValue = false)]
        public string BankAccountNumberTail { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankAccount {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountHolderName: ").Append(AccountHolderName).Append("\n");
            sb.Append("  BankAccountNumberFormat: ").Append(BankAccountNumberFormat).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankAccountOwnershipType: ").Append(BankAccountOwnershipType).Append("\n");
            sb.Append("  RoutingNumber: ").Append(RoutingNumber).Append("\n");
            sb.Append("  BankNumberFormat: ").Append(BankNumberFormat).Append("\n");
            sb.Append("  AccountCountryCode: ").Append(AccountCountryCode).Append("\n");
            sb.Append("  AccountCurrency: ").Append(AccountCurrency).Append("\n");
            sb.Append("  BankAccountNumberTail: ").Append(BankAccountNumberTail).Append("\n");
            sb.Append("  BankAccountHolderStatus: ").Append(BankAccountHolderStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankAccount);
        }

        /// <summary>
        /// Returns true if BankAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of BankAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankAccount input)
        {
            if (input == null)
                return false;

            return
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) &&
                (
                    this.AccountHolderName == input.AccountHolderName ||
                    (this.AccountHolderName != null &&
                    this.AccountHolderName.Equals(input.AccountHolderName))
                ) &&
                (
                    this.BankAccountNumberFormat == input.BankAccountNumberFormat ||
                    (this.BankAccountNumberFormat != null &&
                    this.BankAccountNumberFormat.Equals(input.BankAccountNumberFormat))
                ) &&
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) &&
                (
                    this.BankAccountOwnershipType == input.BankAccountOwnershipType ||
                    (this.BankAccountOwnershipType != null &&
                    this.BankAccountOwnershipType.Equals(input.BankAccountOwnershipType))
                ) &&
                (
                    this.RoutingNumber == input.RoutingNumber ||
                    (this.RoutingNumber != null &&
                    this.RoutingNumber.Equals(input.RoutingNumber))
                ) &&
                (
                    this.BankNumberFormat == input.BankNumberFormat ||
                    (this.BankNumberFormat != null &&
                    this.BankNumberFormat.Equals(input.BankNumberFormat))
                ) &&
                (
                    this.AccountCountryCode == input.AccountCountryCode ||
                    (this.AccountCountryCode != null &&
                    this.AccountCountryCode.Equals(input.AccountCountryCode))
                ) &&
                (
                    this.AccountCurrency == input.AccountCurrency ||
                    (this.AccountCurrency != null &&
                    this.AccountCurrency.Equals(input.AccountCurrency))
                ) &&
                (
                    this.BankAccountNumberTail == input.BankAccountNumberTail ||
                    (this.BankAccountNumberTail != null &&
                    this.BankAccountNumberTail.Equals(input.BankAccountNumberTail))
                ) &&
                (
                    this.BankAccountHolderStatus == input.BankAccountHolderStatus ||
                    (this.BankAccountHolderStatus != null &&
                    this.BankAccountHolderStatus.Equals(input.BankAccountHolderStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.AccountHolderName != null)
                    hashCode = hashCode * 59 + this.AccountHolderName.GetHashCode();
                if (this.BankAccountNumberFormat != null)
                    hashCode = hashCode * 59 + this.BankAccountNumberFormat.GetHashCode();
                if (this.BankName != null)
                    hashCode = hashCode * 59 + this.BankName.GetHashCode();
                if (this.BankAccountOwnershipType != null)
                    hashCode = hashCode * 59 + this.BankAccountOwnershipType.GetHashCode();
                if (this.RoutingNumber != null)
                    hashCode = hashCode * 59 + this.RoutingNumber.GetHashCode();
                if (this.BankNumberFormat != null)
                    hashCode = hashCode * 59 + this.BankNumberFormat.GetHashCode();
                if (this.AccountCountryCode != null)
                    hashCode = hashCode * 59 + this.AccountCountryCode.GetHashCode();
                if (this.AccountCurrency != null)
                    hashCode = hashCode * 59 + this.AccountCurrency.GetHashCode();
                if (this.BankAccountNumberTail != null)
                    hashCode = hashCode * 59 + this.BankAccountNumberTail.GetHashCode();
                if (this.BankAccountHolderStatus != null)
                    hashCode = hashCode * 59 + this.BankAccountHolderStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
