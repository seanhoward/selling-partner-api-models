/* 
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SellerWallet
{
    /// <summary>
    /// Details of the bank account involved in transaction.
    /// </summary>
    [DataContract]
    public partial class TransactionAccount : IEquatable<TransactionAccount>, IValidatableObject
    {
        /// <summary>
        /// The format for the bank account number.
        /// </summary>
        /// <value>The format for the bank account number.</value>
        [DataMember(Name = "bankAccountNumberFormat", EmitDefaultValue = false)]
        public BankAccountNumberFormat BankAccountNumberFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionAccount" /> class.
        /// </summary>
        [JsonConstructor]
        protected TransactionAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionAccount" /> class.
        /// </summary>
        /// <param name="accountId">The unique identifier provided by Amazon to identify the account..</param>
        /// <param name="bankAccountHolderName">The account holder&#39;s name. (required).</param>
        /// <param name="bankName">The name of the bank. (required).</param>
        /// <param name="bankAccountNumberFormat">The format for the bank account number. (required).</param>
        /// <param name="bankAccountNumberTail">The last three digits of the bank account number..</param>
        /// <param name="bankAccountCountryCode">The two-digit country code, in ISO 3166 format. This field is optional for &#x60;transactionSourceAccount&#x60;, but is mandatory for &#x60;transactionDestinationAccount&#x60;..</param>
        /// <param name="bankAccountCurrency">The currency code in ISO 4217 format. (required).</param>
        public TransactionAccount(string accountId = default, string bankAccountHolderName = default, string bankName = default, BankAccountNumberFormat bankAccountNumberFormat = default, string bankAccountNumberTail = default, string bankAccountCountryCode = default, string bankAccountCurrency = default)
        {
            // to ensure "bankAccountHolderName" is required (not null)
            if (bankAccountHolderName == null)
            {
                throw new InvalidDataException("bankAccountHolderName is a required property for TransactionAccount and cannot be null");
            }
            else
            {
                this.BankAccountHolderName = bankAccountHolderName;
            }
            // to ensure "bankName" is required (not null)
            if (bankName == null)
            {
                throw new InvalidDataException("bankName is a required property for TransactionAccount and cannot be null");
            }
            else
            {
                this.BankName = bankName;
            }
            // to ensure "bankAccountNumberFormat" is required (not null)
            if (bankAccountNumberFormat == null)
            {
                throw new InvalidDataException("bankAccountNumberFormat is a required property for TransactionAccount and cannot be null");
            }
            else
            {
                this.BankAccountNumberFormat = bankAccountNumberFormat;
            }
            // to ensure "bankAccountCurrency" is required (not null)
            if (bankAccountCurrency == null)
            {
                throw new InvalidDataException("bankAccountCurrency is a required property for TransactionAccount and cannot be null");
            }
            else
            {
                this.BankAccountCurrency = bankAccountCurrency;
            }
            this.AccountId = accountId;
            this.BankAccountNumberTail = bankAccountNumberTail;
            this.BankAccountCountryCode = bankAccountCountryCode;
        }

        /// <summary>
        /// The unique identifier provided by Amazon to identify the account.
        /// </summary>
        /// <value>The unique identifier provided by Amazon to identify the account.</value>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// The account holder&#39;s name.
        /// </summary>
        /// <value>The account holder&#39;s name.</value>
        [DataMember(Name = "bankAccountHolderName", EmitDefaultValue = false)]
        public string BankAccountHolderName { get; set; }

        /// <summary>
        /// The name of the bank.
        /// </summary>
        /// <value>The name of the bank.</value>
        [DataMember(Name = "bankName", EmitDefaultValue = false)]
        public string BankName { get; set; }


        /// <summary>
        /// The last three digits of the bank account number.
        /// </summary>
        /// <value>The last three digits of the bank account number.</value>
        [DataMember(Name = "bankAccountNumberTail", EmitDefaultValue = false)]
        public string BankAccountNumberTail { get; set; }

        /// <summary>
        /// The two-digit country code, in ISO 3166 format. This field is optional for &#x60;transactionSourceAccount&#x60;, but is mandatory for &#x60;transactionDestinationAccount&#x60;.
        /// </summary>
        /// <value>The two-digit country code, in ISO 3166 format. This field is optional for &#x60;transactionSourceAccount&#x60;, but is mandatory for &#x60;transactionDestinationAccount&#x60;.</value>
        [DataMember(Name = "bankAccountCountryCode", EmitDefaultValue = false)]
        public string BankAccountCountryCode { get; set; }

        /// <summary>
        /// The currency code in ISO 4217 format.
        /// </summary>
        /// <value>The currency code in ISO 4217 format.</value>
        [DataMember(Name = "bankAccountCurrency", EmitDefaultValue = false)]
        public string BankAccountCurrency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionAccount {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  BankAccountHolderName: ").Append(BankAccountHolderName).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankAccountNumberFormat: ").Append(BankAccountNumberFormat).Append("\n");
            sb.Append("  BankAccountNumberTail: ").Append(BankAccountNumberTail).Append("\n");
            sb.Append("  BankAccountCountryCode: ").Append(BankAccountCountryCode).Append("\n");
            sb.Append("  BankAccountCurrency: ").Append(BankAccountCurrency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionAccount);
        }

        /// <summary>
        /// Returns true if TransactionAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionAccount input)
        {
            if (input == null)
                return false;

            return
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) &&
                (
                    this.BankAccountHolderName == input.BankAccountHolderName ||
                    (this.BankAccountHolderName != null &&
                    this.BankAccountHolderName.Equals(input.BankAccountHolderName))
                ) &&
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) &&
                (
                    this.BankAccountNumberFormat == input.BankAccountNumberFormat ||
                    (this.BankAccountNumberFormat != null &&
                    this.BankAccountNumberFormat.Equals(input.BankAccountNumberFormat))
                ) &&
                (
                    this.BankAccountNumberTail == input.BankAccountNumberTail ||
                    (this.BankAccountNumberTail != null &&
                    this.BankAccountNumberTail.Equals(input.BankAccountNumberTail))
                ) &&
                (
                    this.BankAccountCountryCode == input.BankAccountCountryCode ||
                    (this.BankAccountCountryCode != null &&
                    this.BankAccountCountryCode.Equals(input.BankAccountCountryCode))
                ) &&
                (
                    this.BankAccountCurrency == input.BankAccountCurrency ||
                    (this.BankAccountCurrency != null &&
                    this.BankAccountCurrency.Equals(input.BankAccountCurrency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.BankAccountHolderName != null)
                    hashCode = hashCode * 59 + this.BankAccountHolderName.GetHashCode();
                if (this.BankName != null)
                    hashCode = hashCode * 59 + this.BankName.GetHashCode();
                if (this.BankAccountNumberFormat != null)
                    hashCode = hashCode * 59 + this.BankAccountNumberFormat.GetHashCode();
                if (this.BankAccountNumberTail != null)
                    hashCode = hashCode * 59 + this.BankAccountNumberTail.GetHashCode();
                if (this.BankAccountCountryCode != null)
                    hashCode = hashCode * 59 + this.BankAccountCountryCode.GetHashCode();
                if (this.BankAccountCurrency != null)
                    hashCode = hashCode * 59 + this.BankAccountCurrency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
