/* 
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SellerWallet
{
    /// <summary>
    /// The type of payment preference in which the transfer is being scheduled.
    /// </summary>
    [DataContract]
    public partial class PaymentPreference : IEquatable<PaymentPreference>, IValidatableObject
    {
        /// <summary>
        /// The preferred payment type for the scheduled transaction. Can be &#x60;PERCENTAGE&#x60; or &#x60;AMOUNT&#x60;.
        /// </summary>
        /// <value>The preferred payment type for the scheduled transaction. Can be &#x60;PERCENTAGE&#x60; or &#x60;AMOUNT&#x60;.</value>
        [DataMember(Name = "paymentPreferencePaymentType", EmitDefaultValue = false)]
        public PaymentPreferencePaymentType PaymentPreferencePaymentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentPreference" /> class.
        /// </summary>
        [JsonConstructor]
        protected PaymentPreference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentPreference" /> class.
        /// </summary>
        /// <param name="paymentPreferencePaymentType">The preferred payment type for the scheduled transaction. Can be &#x60;PERCENTAGE&#x60; or &#x60;AMOUNT&#x60;. (required).</param>
        /// <param name="value">The value of the payment preference. (required).</param>
        public PaymentPreference(PaymentPreferencePaymentType paymentPreferencePaymentType = default, decimal? value = default)
        {
            // to ensure "paymentPreferencePaymentType" is required (not null)
            if (paymentPreferencePaymentType == null)
            {
                throw new InvalidDataException("paymentPreferencePaymentType is a required property for PaymentPreference and cannot be null");
            }
            else
            {
                this.PaymentPreferencePaymentType = paymentPreferencePaymentType;
            }
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for PaymentPreference and cannot be null");
            }
            else
            {
                this.Value = value;
            }
        }


        /// <summary>
        /// The value of the payment preference.
        /// </summary>
        /// <value>The value of the payment preference.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public decimal? Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentPreference {\n");
            sb.Append("  PaymentPreferencePaymentType: ").Append(PaymentPreferencePaymentType).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentPreference);
        }

        /// <summary>
        /// Returns true if PaymentPreference instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentPreference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentPreference input)
        {
            if (input == null)
                return false;

            return
                (
                    this.PaymentPreferencePaymentType == input.PaymentPreferencePaymentType ||
                    (this.PaymentPreferencePaymentType != null &&
                    this.PaymentPreferencePaymentType.Equals(input.PaymentPreferencePaymentType))
                ) &&
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentPreferencePaymentType != null)
                    hashCode = hashCode * 59 + this.PaymentPreferencePaymentType.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
