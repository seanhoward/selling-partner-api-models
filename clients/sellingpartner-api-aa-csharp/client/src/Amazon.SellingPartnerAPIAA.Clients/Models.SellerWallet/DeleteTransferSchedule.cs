/* 
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SellerWallet
{
    /// <summary>
    /// The response returned when the schedule transfer&#39;s delete request is successful.
    /// </summary>
    [DataContract]
    public partial class DeleteTransferSchedule : IEquatable<DeleteTransferSchedule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteTransferSchedule" /> class.
        /// </summary>
        [JsonConstructor]
        protected DeleteTransferSchedule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteTransferSchedule" /> class.
        /// </summary>
        /// <param name="code">A success code that specifies that the delete operation was successful. For example, HTTP 200. (required).</param>
        /// <param name="message">A message that describes the success condition of the delete schedule transaction. (required).</param>
        /// <param name="details">Additional details that can help the caller understand the operation execution..</param>
        public DeleteTransferSchedule(string code = default, string message = default, string details = default)
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for DeleteTransferSchedule and cannot be null");
            }
            else
            {
                this.Code = code;
            }
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new InvalidDataException("message is a required property for DeleteTransferSchedule and cannot be null");
            }
            else
            {
                this.Message = message;
            }
            this.Details = details;
        }

        /// <summary>
        /// A success code that specifies that the delete operation was successful. For example, HTTP 200.
        /// </summary>
        /// <value>A success code that specifies that the delete operation was successful. For example, HTTP 200.</value>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// A message that describes the success condition of the delete schedule transaction.
        /// </summary>
        /// <value>A message that describes the success condition of the delete schedule transaction.</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Additional details that can help the caller understand the operation execution.
        /// </summary>
        /// <value>Additional details that can help the caller understand the operation execution.</value>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public string Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeleteTransferSchedule {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeleteTransferSchedule);
        }

        /// <summary>
        /// Returns true if DeleteTransferSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of DeleteTransferSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeleteTransferSchedule input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) &&
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) &&
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
