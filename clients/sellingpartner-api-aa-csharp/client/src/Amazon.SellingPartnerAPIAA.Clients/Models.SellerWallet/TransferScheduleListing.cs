/* 
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SellerWallet
{
    /// <summary>
    /// A list of transfer schedules.
    /// </summary>
    [DataContract]
    public partial class TransferScheduleListing : IEquatable<TransferScheduleListing>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferScheduleListing" /> class.
        /// </summary>
        [JsonConstructor]
        protected TransferScheduleListing() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferScheduleListing" /> class.
        /// </summary>
        /// <param name="nextPageToken">A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds 100. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages..</param>
        /// <param name="transferSchedules">A list of transfer schedules. (required).</param>
        public TransferScheduleListing(string nextPageToken = default, List<TransferSchedule> transferSchedules = default)
        {
            // to ensure "transferSchedules" is required (not null)
            if (transferSchedules == null)
            {
                throw new InvalidDataException("transferSchedules is a required property for TransferScheduleListing and cannot be null");
            }
            else
            {
                this.TransferSchedules = transferSchedules;
            }
            this.NextPageToken = nextPageToken;
        }

        /// <summary>
        /// A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds 100. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages.
        /// </summary>
        /// <value>A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds 100. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages.</value>
        [DataMember(Name = "nextPageToken", EmitDefaultValue = false)]
        public string NextPageToken { get; set; }

        /// <summary>
        /// A list of transfer schedules.
        /// </summary>
        /// <value>A list of transfer schedules.</value>
        [DataMember(Name = "transferSchedules", EmitDefaultValue = false)]
        public List<TransferSchedule> TransferSchedules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransferScheduleListing {\n");
            sb.Append("  NextPageToken: ").Append(NextPageToken).Append("\n");
            sb.Append("  TransferSchedules: ").Append(TransferSchedules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransferScheduleListing);
        }

        /// <summary>
        /// Returns true if TransferScheduleListing instances are equal
        /// </summary>
        /// <param name="input">Instance of TransferScheduleListing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransferScheduleListing input)
        {
            if (input == null)
                return false;

            return
                (
                    this.NextPageToken == input.NextPageToken ||
                    (this.NextPageToken != null &&
                    this.NextPageToken.Equals(input.NextPageToken))
                ) &&
                (
                    this.TransferSchedules == input.TransferSchedules ||
                    this.TransferSchedules != null &&
                    this.TransferSchedules.SequenceEqual(input.TransferSchedules)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NextPageToken != null)
                    hashCode = hashCode * 59 + this.NextPageToken.GetHashCode();
                if (this.TransferSchedules != null)
                    hashCode = hashCode * 59 + this.TransferSchedules.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
