/* 
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SellerWallet
{
    /// <summary>
    /// The configuration of the schedule.
    /// </summary>
    [DataContract]
    public partial class ScheduleExpression : IEquatable<ScheduleExpression>, IValidatableObject
    {
        /// <summary>
        /// The type of the scheduled transfer.
        /// </summary>
        /// <value>The type of the scheduled transfer.</value>
        [DataMember(Name = "scheduleExpressionType", EmitDefaultValue = false)]
        public ScheduleExpressionType ScheduleExpressionType { get; set; }
        /// <summary>
        /// How often the scheduled transfer happens. This field is required if &#x60;scheduleExpressionType&#x60; is &#x60;RECURRING&#x60;; otherwise it should be empty.
        /// </summary>
        /// <value>How often the scheduled transfer happens. This field is required if &#x60;scheduleExpressionType&#x60; is &#x60;RECURRING&#x60;; otherwise it should be empty.</value>
        [DataMember(Name = "recurringFrequency", EmitDefaultValue = false)]
        public RecurringFrequency? RecurringFrequency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleExpression" /> class.
        /// </summary>
        [JsonConstructor]
        protected ScheduleExpression() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleExpression" /> class.
        /// </summary>
        /// <param name="scheduleExpressionType">The type of the scheduled transfer. (required).</param>
        /// <param name="recurringFrequency">How often the scheduled transfer happens. This field is required if &#x60;scheduleExpressionType&#x60; is &#x60;RECURRING&#x60;; otherwise it should be empty..</param>
        public ScheduleExpression(ScheduleExpressionType scheduleExpressionType = default, RecurringFrequency? recurringFrequency = default)
        {
            // to ensure "scheduleExpressionType" is required (not null)
            if (scheduleExpressionType == null)
            {
                throw new InvalidDataException("scheduleExpressionType is a required property for ScheduleExpression and cannot be null");
            }
            else
            {
                this.ScheduleExpressionType = scheduleExpressionType;
            }
            this.RecurringFrequency = recurringFrequency;
        }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScheduleExpression {\n");
            sb.Append("  ScheduleExpressionType: ").Append(ScheduleExpressionType).Append("\n");
            sb.Append("  RecurringFrequency: ").Append(RecurringFrequency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduleExpression);
        }

        /// <summary>
        /// Returns true if ScheduleExpression instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduleExpression to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduleExpression input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ScheduleExpressionType == input.ScheduleExpressionType ||
                    (this.ScheduleExpressionType != null &&
                    this.ScheduleExpressionType.Equals(input.ScheduleExpressionType))
                ) &&
                (
                    this.RecurringFrequency == input.RecurringFrequency ||
                    (this.RecurringFrequency != null &&
                    this.RecurringFrequency.Equals(input.RecurringFrequency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScheduleExpressionType != null)
                    hashCode = hashCode * 59 + this.ScheduleExpressionType.GetHashCode();
                if (this.RecurringFrequency != null)
                    hashCode = hashCode * 59 + this.RecurringFrequency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
