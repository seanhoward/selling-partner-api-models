/* 
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SellerWallet
{
    /// <summary>
    /// The fees and foreign exchange rates applied to the transaction.  If the fees are in terms of the &#x60;baseAmount&#x60; (source account) currency, then the effective rate is equal to **1 - (fees * &#x60;baseRate&#x60; / &#x60;baseAmount&#x60;)**.  If the fees are in terms of the &#x60;transferAmount&#x60; (destination account) currency, then the effective rate is equal to **&#x60;baseRate&#x60; - (fees / &#x60;baseAmount&#x60;)**.  In the preceding expressions, **fees** is equal to the sum of all &#x60;feeAmount.currencyAmount&#x60; values in the &#x60;fees&#x60; array.
    /// </summary>
    [DataContract]
    public partial class TransferRatePreview : IEquatable<TransferRatePreview>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferRatePreview" /> class.
        /// </summary>
        [JsonConstructor]
        protected TransferRatePreview() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferRatePreview" /> class.
        /// </summary>
        /// <param name="baseAmount">The base amount of the transaction. (required).</param>
        /// <param name="fxRateDetails">The foreign exchange rate value of the transaction. (required).</param>
        /// <param name="transferAmount">The final amount transferred, which includes both the fee deduction and currency conversion rate. (required).</param>
        /// <param name="fees">A list of fees. (required).</param>
        public TransferRatePreview(Currency baseAmount = default, FxRateDetails fxRateDetails = default, Currency transferAmount = default, List<Fee> fees = default)
        {
            // to ensure "baseAmount" is required (not null)
            if (baseAmount == null)
            {
                throw new InvalidDataException("baseAmount is a required property for TransferRatePreview and cannot be null");
            }
            else
            {
                this.BaseAmount = baseAmount;
            }
            // to ensure "fxRateDetails" is required (not null)
            if (fxRateDetails == null)
            {
                throw new InvalidDataException("fxRateDetails is a required property for TransferRatePreview and cannot be null");
            }
            else
            {
                this.FxRateDetails = fxRateDetails;
            }
            // to ensure "transferAmount" is required (not null)
            if (transferAmount == null)
            {
                throw new InvalidDataException("transferAmount is a required property for TransferRatePreview and cannot be null");
            }
            else
            {
                this.TransferAmount = transferAmount;
            }
            // to ensure "fees" is required (not null)
            if (fees == null)
            {
                throw new InvalidDataException("fees is a required property for TransferRatePreview and cannot be null");
            }
            else
            {
                this.Fees = fees;
            }
        }

        /// <summary>
        /// The base amount of the transaction.
        /// </summary>
        /// <value>The base amount of the transaction.</value>
        [DataMember(Name = "baseAmount", EmitDefaultValue = false)]
        public Currency BaseAmount { get; set; }

        /// <summary>
        /// The foreign exchange rate value of the transaction.
        /// </summary>
        /// <value>The foreign exchange rate value of the transaction.</value>
        [DataMember(Name = "fxRateDetails", EmitDefaultValue = false)]
        public FxRateDetails FxRateDetails { get; set; }

        /// <summary>
        /// The final amount transferred, which includes both the fee deduction and currency conversion rate.
        /// </summary>
        /// <value>The final amount transferred, which includes both the fee deduction and currency conversion rate.</value>
        [DataMember(Name = "transferAmount", EmitDefaultValue = false)]
        public Currency TransferAmount { get; set; }

        /// <summary>
        /// A list of fees.
        /// </summary>
        /// <value>A list of fees.</value>
        [DataMember(Name = "fees", EmitDefaultValue = false)]
        public List<Fee> Fees { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransferRatePreview {\n");
            sb.Append("  BaseAmount: ").Append(BaseAmount).Append("\n");
            sb.Append("  FxRateDetails: ").Append(FxRateDetails).Append("\n");
            sb.Append("  TransferAmount: ").Append(TransferAmount).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransferRatePreview);
        }

        /// <summary>
        /// Returns true if TransferRatePreview instances are equal
        /// </summary>
        /// <param name="input">Instance of TransferRatePreview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransferRatePreview input)
        {
            if (input == null)
                return false;

            return
                (
                    this.BaseAmount == input.BaseAmount ||
                    (this.BaseAmount != null &&
                    this.BaseAmount.Equals(input.BaseAmount))
                ) &&
                (
                    this.FxRateDetails == input.FxRateDetails ||
                    (this.FxRateDetails != null &&
                    this.FxRateDetails.Equals(input.FxRateDetails))
                ) &&
                (
                    this.TransferAmount == input.TransferAmount ||
                    (this.TransferAmount != null &&
                    this.TransferAmount.Equals(input.TransferAmount))
                ) &&
                (
                    this.Fees == input.Fees ||
                    this.Fees != null &&
                    this.Fees.SequenceEqual(input.Fees)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BaseAmount != null)
                    hashCode = hashCode * 59 + this.BaseAmount.GetHashCode();
                if (this.FxRateDetails != null)
                    hashCode = hashCode * 59 + this.FxRateDetails.GetHashCode();
                if (this.TransferAmount != null)
                    hashCode = hashCode * 59 + this.TransferAmount.GetHashCode();
                if (this.Fees != null)
                    hashCode = hashCode * 59 + this.Fees.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
