/* 
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SellerWallet
{
    /// <summary>
    /// Request body to initiate a scheduled transfer from a Seller Wallet bank account to another customer-defined bank account.
    /// </summary>
    [DataContract]
    public partial class TransferScheduleRequest : IEquatable<TransferScheduleRequest>, IValidatableObject
    {
        /// <summary>
        /// The type of the scheduled transaction.
        /// </summary>
        /// <value>The type of the scheduled transaction.</value>
        [DataMember(Name = "transactionType", EmitDefaultValue = false)]
        public TransactionType TransactionType { get; set; }
        /// <summary>
        /// The type of transaction schedule. This field is required when you update a transfer schedule.
        /// </summary>
        /// <value>The type of transaction schedule. This field is required when you update a transfer schedule.</value>
        [DataMember(Name = "transferScheduleStatus", EmitDefaultValue = false)]
        public TransferScheduleStatus? TransferScheduleStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferScheduleRequest" /> class.
        /// </summary>
        [JsonConstructor]
        protected TransferScheduleRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferScheduleRequest" /> class.
        /// </summary>
        /// <param name="sourceAccountId">The unique identifier of the source Amazon Seller Wallet bank account from which money is debited. (required).</param>
        /// <param name="sourceCurrencyCode">The three-letter currency code of the source payment method country, in ISO 4217 format. (required).</param>
        /// <param name="destinationAccountId">The unique identifier of the destination bank account where the money is deposited. (required).</param>
        /// <param name="destinationTransactionInstrument">Details of the destination bank account in the transaction request. (required).</param>
        /// <param name="transactionType">The type of the scheduled transaction. (required).</param>
        /// <param name="transferScheduleInformation">The configuration of the scheduled transfer. (required).</param>
        /// <param name="paymentPreference">The payment preference of the scheduled transfer. (required).</param>
        /// <param name="transferScheduleStatus">The type of transaction schedule. This field is required when you update a transfer schedule..</param>
        public TransferScheduleRequest(string sourceAccountId = default, string sourceCurrencyCode = default, string destinationAccountId = default, TransactionInstrumentDetails destinationTransactionInstrument = default, TransactionType transactionType = default, TransferScheduleInformation transferScheduleInformation = default, PaymentPreference paymentPreference = default, TransferScheduleStatus? transferScheduleStatus = default)
        {
            // to ensure "sourceAccountId" is required (not null)
            if (sourceAccountId == null)
            {
                throw new InvalidDataException("sourceAccountId is a required property for TransferScheduleRequest and cannot be null");
            }
            else
            {
                this.SourceAccountId = sourceAccountId;
            }
            // to ensure "sourceCurrencyCode" is required (not null)
            if (sourceCurrencyCode == null)
            {
                throw new InvalidDataException("sourceCurrencyCode is a required property for TransferScheduleRequest and cannot be null");
            }
            else
            {
                this.SourceCurrencyCode = sourceCurrencyCode;
            }
            // to ensure "destinationAccountId" is required (not null)
            if (destinationAccountId == null)
            {
                throw new InvalidDataException("destinationAccountId is a required property for TransferScheduleRequest and cannot be null");
            }
            else
            {
                this.DestinationAccountId = destinationAccountId;
            }
            // to ensure "destinationTransactionInstrument" is required (not null)
            if (destinationTransactionInstrument == null)
            {
                throw new InvalidDataException("destinationTransactionInstrument is a required property for TransferScheduleRequest and cannot be null");
            }
            else
            {
                this.DestinationTransactionInstrument = destinationTransactionInstrument;
            }
            // to ensure "transactionType" is required (not null)
            if (transactionType == null)
            {
                throw new InvalidDataException("transactionType is a required property for TransferScheduleRequest and cannot be null");
            }
            else
            {
                this.TransactionType = transactionType;
            }
            // to ensure "transferScheduleInformation" is required (not null)
            if (transferScheduleInformation == null)
            {
                throw new InvalidDataException("transferScheduleInformation is a required property for TransferScheduleRequest and cannot be null");
            }
            else
            {
                this.TransferScheduleInformation = transferScheduleInformation;
            }
            // to ensure "paymentPreference" is required (not null)
            if (paymentPreference == null)
            {
                throw new InvalidDataException("paymentPreference is a required property for TransferScheduleRequest and cannot be null");
            }
            else
            {
                this.PaymentPreference = paymentPreference;
            }
            this.TransferScheduleStatus = transferScheduleStatus;
        }

        /// <summary>
        /// The unique identifier of the source Amazon Seller Wallet bank account from which money is debited.
        /// </summary>
        /// <value>The unique identifier of the source Amazon Seller Wallet bank account from which money is debited.</value>
        [DataMember(Name = "sourceAccountId", EmitDefaultValue = false)]
        public string SourceAccountId { get; set; }

        /// <summary>
        /// The three-letter currency code of the source payment method country, in ISO 4217 format.
        /// </summary>
        /// <value>The three-letter currency code of the source payment method country, in ISO 4217 format.</value>
        [DataMember(Name = "sourceCurrencyCode", EmitDefaultValue = false)]
        public string SourceCurrencyCode { get; set; }

        /// <summary>
        /// The unique identifier of the destination bank account where the money is deposited.
        /// </summary>
        /// <value>The unique identifier of the destination bank account where the money is deposited.</value>
        [DataMember(Name = "destinationAccountId", EmitDefaultValue = false)]
        public string DestinationAccountId { get; set; }

        /// <summary>
        /// Details of the destination bank account in the transaction request.
        /// </summary>
        /// <value>Details of the destination bank account in the transaction request.</value>
        [DataMember(Name = "destinationTransactionInstrument", EmitDefaultValue = false)]
        public TransactionInstrumentDetails DestinationTransactionInstrument { get; set; }


        /// <summary>
        /// The configuration of the scheduled transfer.
        /// </summary>
        /// <value>The configuration of the scheduled transfer.</value>
        [DataMember(Name = "transferScheduleInformation", EmitDefaultValue = false)]
        public TransferScheduleInformation TransferScheduleInformation { get; set; }

        /// <summary>
        /// The payment preference of the scheduled transfer.
        /// </summary>
        /// <value>The payment preference of the scheduled transfer.</value>
        [DataMember(Name = "paymentPreference", EmitDefaultValue = false)]
        public PaymentPreference PaymentPreference { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransferScheduleRequest {\n");
            sb.Append("  SourceAccountId: ").Append(SourceAccountId).Append("\n");
            sb.Append("  SourceCurrencyCode: ").Append(SourceCurrencyCode).Append("\n");
            sb.Append("  DestinationAccountId: ").Append(DestinationAccountId).Append("\n");
            sb.Append("  DestinationTransactionInstrument: ").Append(DestinationTransactionInstrument).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  TransferScheduleInformation: ").Append(TransferScheduleInformation).Append("\n");
            sb.Append("  PaymentPreference: ").Append(PaymentPreference).Append("\n");
            sb.Append("  TransferScheduleStatus: ").Append(TransferScheduleStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransferScheduleRequest);
        }

        /// <summary>
        /// Returns true if TransferScheduleRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TransferScheduleRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransferScheduleRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    this.SourceAccountId == input.SourceAccountId ||
                    (this.SourceAccountId != null &&
                    this.SourceAccountId.Equals(input.SourceAccountId))
                ) &&
                (
                    this.SourceCurrencyCode == input.SourceCurrencyCode ||
                    (this.SourceCurrencyCode != null &&
                    this.SourceCurrencyCode.Equals(input.SourceCurrencyCode))
                ) &&
                (
                    this.DestinationAccountId == input.DestinationAccountId ||
                    (this.DestinationAccountId != null &&
                    this.DestinationAccountId.Equals(input.DestinationAccountId))
                ) &&
                (
                    this.DestinationTransactionInstrument == input.DestinationTransactionInstrument ||
                    (this.DestinationTransactionInstrument != null &&
                    this.DestinationTransactionInstrument.Equals(input.DestinationTransactionInstrument))
                ) &&
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                ) &&
                (
                    this.TransferScheduleInformation == input.TransferScheduleInformation ||
                    (this.TransferScheduleInformation != null &&
                    this.TransferScheduleInformation.Equals(input.TransferScheduleInformation))
                ) &&
                (
                    this.PaymentPreference == input.PaymentPreference ||
                    (this.PaymentPreference != null &&
                    this.PaymentPreference.Equals(input.PaymentPreference))
                ) &&
                (
                    this.TransferScheduleStatus == input.TransferScheduleStatus ||
                    (this.TransferScheduleStatus != null &&
                    this.TransferScheduleStatus.Equals(input.TransferScheduleStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceAccountId != null)
                    hashCode = hashCode * 59 + this.SourceAccountId.GetHashCode();
                if (this.SourceCurrencyCode != null)
                    hashCode = hashCode * 59 + this.SourceCurrencyCode.GetHashCode();
                if (this.DestinationAccountId != null)
                    hashCode = hashCode * 59 + this.DestinationAccountId.GetHashCode();
                if (this.DestinationTransactionInstrument != null)
                    hashCode = hashCode * 59 + this.DestinationTransactionInstrument.GetHashCode();
                if (this.TransactionType != null)
                    hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                if (this.TransferScheduleInformation != null)
                    hashCode = hashCode * 59 + this.TransferScheduleInformation.GetHashCode();
                if (this.PaymentPreference != null)
                    hashCode = hashCode * 59 + this.PaymentPreference.GetHashCode();
                if (this.TransferScheduleStatus != null)
                    hashCode = hashCode * 59 + this.TransferScheduleStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
