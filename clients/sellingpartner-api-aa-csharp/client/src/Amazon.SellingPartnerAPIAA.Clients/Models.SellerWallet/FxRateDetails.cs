/* 
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SellerWallet
{
    /// <summary>
    /// Foreign exchange rate details.
    /// </summary>
    [DataContract]
    public partial class FxRateDetails : IEquatable<FxRateDetails>, IValidatableObject
    {
        /// <summary>
        /// Whether the customer is buying or selling the source currency.
        /// </summary>
        /// <value>Whether the customer is buying or selling the source currency.</value>
        [DataMember(Name = "rateDirection", EmitDefaultValue = false)]
        public RateDirection RateDirection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FxRateDetails" /> class.
        /// </summary>
        [JsonConstructor]
        protected FxRateDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FxRateDetails" /> class.
        /// </summary>
        /// <param name="fxRateId">The unique identifier assigned to the fees / foreign exchange rate of a transaction. (required).</param>
        /// <param name="baseRate">The market foreign exchange rate. (required).</param>
        /// <param name="effectiveFxRate">The total rate applied to the money transfer. This includes all exchange rates, markups, and fees. (required).</param>
        /// <param name="rateDirection">Whether the customer is buying or selling the source currency. (required).</param>
        public FxRateDetails(string fxRateId = default, decimal? baseRate = default, decimal? effectiveFxRate = default, RateDirection rateDirection = default)
        {
            // to ensure "fxRateId" is required (not null)
            if (fxRateId == null)
            {
                throw new InvalidDataException("fxRateId is a required property for FxRateDetails and cannot be null");
            }
            else
            {
                this.FxRateId = fxRateId;
            }
            // to ensure "baseRate" is required (not null)
            if (baseRate == null)
            {
                throw new InvalidDataException("baseRate is a required property for FxRateDetails and cannot be null");
            }
            else
            {
                this.BaseRate = baseRate;
            }
            // to ensure "effectiveFxRate" is required (not null)
            if (effectiveFxRate == null)
            {
                throw new InvalidDataException("effectiveFxRate is a required property for FxRateDetails and cannot be null");
            }
            else
            {
                this.EffectiveFxRate = effectiveFxRate;
            }
            // to ensure "rateDirection" is required (not null)
            if (rateDirection == null)
            {
                throw new InvalidDataException("rateDirection is a required property for FxRateDetails and cannot be null");
            }
            else
            {
                this.RateDirection = rateDirection;
            }
        }

        /// <summary>
        /// The unique identifier assigned to the fees / foreign exchange rate of a transaction.
        /// </summary>
        /// <value>The unique identifier assigned to the fees / foreign exchange rate of a transaction.</value>
        [DataMember(Name = "fxRateId", EmitDefaultValue = false)]
        public string FxRateId { get; set; }

        /// <summary>
        /// The market foreign exchange rate.
        /// </summary>
        /// <value>The market foreign exchange rate.</value>
        [DataMember(Name = "baseRate", EmitDefaultValue = false)]
        public decimal? BaseRate { get; set; }

        /// <summary>
        /// The total rate applied to the money transfer. This includes all exchange rates, markups, and fees.
        /// </summary>
        /// <value>The total rate applied to the money transfer. This includes all exchange rates, markups, and fees.</value>
        [DataMember(Name = "effectiveFxRate", EmitDefaultValue = false)]
        public decimal? EffectiveFxRate { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FxRateDetails {\n");
            sb.Append("  FxRateId: ").Append(FxRateId).Append("\n");
            sb.Append("  BaseRate: ").Append(BaseRate).Append("\n");
            sb.Append("  EffectiveFxRate: ").Append(EffectiveFxRate).Append("\n");
            sb.Append("  RateDirection: ").Append(RateDirection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FxRateDetails);
        }

        /// <summary>
        /// Returns true if FxRateDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of FxRateDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FxRateDetails input)
        {
            if (input == null)
                return false;

            return
                (
                    this.FxRateId == input.FxRateId ||
                    (this.FxRateId != null &&
                    this.FxRateId.Equals(input.FxRateId))
                ) &&
                (
                    this.BaseRate == input.BaseRate ||
                    (this.BaseRate != null &&
                    this.BaseRate.Equals(input.BaseRate))
                ) &&
                (
                    this.EffectiveFxRate == input.EffectiveFxRate ||
                    (this.EffectiveFxRate != null &&
                    this.EffectiveFxRate.Equals(input.EffectiveFxRate))
                ) &&
                (
                    this.RateDirection == input.RateDirection ||
                    (this.RateDirection != null &&
                    this.RateDirection.Equals(input.RateDirection))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FxRateId != null)
                    hashCode = hashCode * 59 + this.FxRateId.GetHashCode();
                if (this.BaseRate != null)
                    hashCode = hashCode * 59 + this.BaseRate.GetHashCode();
                if (this.EffectiveFxRate != null)
                    hashCode = hashCode * 59 + this.EffectiveFxRate.GetHashCode();
                if (this.RateDirection != null)
                    hashCode = hashCode * 59 + this.RateDirection.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
