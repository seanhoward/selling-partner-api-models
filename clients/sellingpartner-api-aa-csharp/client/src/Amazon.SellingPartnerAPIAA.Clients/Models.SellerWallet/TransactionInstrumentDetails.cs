/* 
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.SellerWallet
{
    /// <summary>
    /// Details of the destination bank account in the transaction request.
    /// </summary>
    [DataContract]
    public partial class TransactionInstrumentDetails : IEquatable<TransactionInstrumentDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInstrumentDetails" /> class.
        /// </summary>
        [JsonConstructor]
        protected TransactionInstrumentDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInstrumentDetails" /> class.
        /// </summary>
        /// <param name="bankAccount">Details of the destination bank account. (required).</param>
        /// <param name="bankAccountNumber">The bank account number of the destination payment method.  **Note:** This field is encrypted before Amazon receives it, so should not be used to generate &#x60;destAccountDigitalSignature&#x60;, and should not be included in the request signature. (required).</param>
        public TransactionInstrumentDetails(BankAccount bankAccount = default, string bankAccountNumber = default)
        {
            // to ensure "bankAccount" is required (not null)
            if (bankAccount == null)
            {
                throw new InvalidDataException("bankAccount is a required property for TransactionInstrumentDetails and cannot be null");
            }
            else
            {
                this.BankAccount = bankAccount;
            }
            // to ensure "bankAccountNumber" is required (not null)
            if (bankAccountNumber == null)
            {
                throw new InvalidDataException("bankAccountNumber is a required property for TransactionInstrumentDetails and cannot be null");
            }
            else
            {
                this.BankAccountNumber = bankAccountNumber;
            }
        }

        /// <summary>
        /// Details of the destination bank account.
        /// </summary>
        /// <value>Details of the destination bank account.</value>
        [DataMember(Name = "bankAccount", EmitDefaultValue = false)]
        public BankAccount BankAccount { get; set; }

        /// <summary>
        /// The bank account number of the destination payment method.  **Note:** This field is encrypted before Amazon receives it, so should not be used to generate &#x60;destAccountDigitalSignature&#x60;, and should not be included in the request signature.
        /// </summary>
        /// <value>The bank account number of the destination payment method.  **Note:** This field is encrypted before Amazon receives it, so should not be used to generate &#x60;destAccountDigitalSignature&#x60;, and should not be included in the request signature.</value>
        [DataMember(Name = "bankAccountNumber", EmitDefaultValue = false)]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionInstrumentDetails {\n");
            sb.Append("  BankAccount: ").Append(BankAccount).Append("\n");
            sb.Append("  BankAccountNumber: ").Append(BankAccountNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionInstrumentDetails);
        }

        /// <summary>
        /// Returns true if TransactionInstrumentDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionInstrumentDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionInstrumentDetails input)
        {
            if (input == null)
                return false;

            return
                (
                    this.BankAccount == input.BankAccount ||
                    (this.BankAccount != null &&
                    this.BankAccount.Equals(input.BankAccount))
                ) &&
                (
                    this.BankAccountNumber == input.BankAccountNumber ||
                    (this.BankAccountNumber != null &&
                    this.BankAccountNumber.Equals(input.BankAccountNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BankAccount != null)
                    hashCode = hashCode * 59 + this.BankAccount.GetHashCode();
                if (this.BankAccountNumber != null)
                    hashCode = hashCode * 59 + this.BankAccountNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
