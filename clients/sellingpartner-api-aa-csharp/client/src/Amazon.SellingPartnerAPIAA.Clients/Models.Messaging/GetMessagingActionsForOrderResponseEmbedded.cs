/* 
 * Selling Partner API for Messaging
 *
 * With the Messaging API you can build applications that send messages to buyers. You can get a list of message types that are available for an order that you specify, then call an operation that sends a message to the buyer for that order. The Messaging API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Messaging
{
    /// <summary>
    /// GetMessagingActionsForOrderResponseEmbedded
    /// </summary>
    [DataContract]
    public partial class GetMessagingActionsForOrderResponseEmbedded :  IEquatable<GetMessagingActionsForOrderResponseEmbedded>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMessagingActionsForOrderResponseEmbedded" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetMessagingActionsForOrderResponseEmbedded() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMessagingActionsForOrderResponseEmbedded" /> class.
        /// </summary>
        /// <param name="actions">actions (required).</param>
        public GetMessagingActionsForOrderResponseEmbedded(List<GetMessagingActionResponse> actions = default(List<GetMessagingActionResponse>))
        {
            // to ensure "actions" is required (not null)
            if (actions == null)
            {
                throw new InvalidDataException("actions is a required property for GetMessagingActionsForOrderResponseEmbedded and cannot be null");
            }
            else
            {
                this.Actions = actions;
            }
        }
        
        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name="actions", EmitDefaultValue=false)]
        public List<GetMessagingActionResponse> Actions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetMessagingActionsForOrderResponseEmbedded {\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetMessagingActionsForOrderResponseEmbedded);
        }

        /// <summary>
        /// Returns true if GetMessagingActionsForOrderResponseEmbedded instances are equal
        /// </summary>
        /// <param name="input">Instance of GetMessagingActionsForOrderResponseEmbedded to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetMessagingActionsForOrderResponseEmbedded input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Actions != null)
                    hashCode = hashCode * 59 + this.Actions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
