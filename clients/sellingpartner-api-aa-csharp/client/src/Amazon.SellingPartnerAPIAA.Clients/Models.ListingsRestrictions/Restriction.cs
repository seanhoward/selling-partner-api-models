/* 
 * Selling Partner API for Listings Restrictions
 *
 * The Selling Partner API for Listings Restrictions provides programmatic access to restrictions on Amazon catalog listings.  For more information, see the [Listings Restrictions API Use Case Guide](doc:listings-restrictions-api-v2021-08-01-use-case-guide).
 *
 * OpenAPI spec version: 2021-08-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.ListingsRestrictions
{
    /// <summary>
    /// A listing restriction, optionally qualified by a condition, with a list of reasons for the restriction.
    /// </summary>
    [DataContract]
    public partial class Restriction :  IEquatable<Restriction>, IValidatableObject
    {
        /// <summary>
        /// The condition that applies to the restriction.
        /// </summary>
        /// <value>The condition that applies to the restriction.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConditionTypeEnum
        {
            
            /// <summary>
            /// Enum Newnew for value: new_new
            /// </summary>
            [EnumMember(Value = "new_new")]
            Newnew = 1,
            
            /// <summary>
            /// Enum Newopenbox for value: new_open_box
            /// </summary>
            [EnumMember(Value = "new_open_box")]
            Newopenbox = 2,
            
            /// <summary>
            /// Enum Newoem for value: new_oem
            /// </summary>
            [EnumMember(Value = "new_oem")]
            Newoem = 3,
            
            /// <summary>
            /// Enum Refurbishedrefurbished for value: refurbished_refurbished
            /// </summary>
            [EnumMember(Value = "refurbished_refurbished")]
            Refurbishedrefurbished = 4,
            
            /// <summary>
            /// Enum Usedlikenew for value: used_like_new
            /// </summary>
            [EnumMember(Value = "used_like_new")]
            Usedlikenew = 5,
            
            /// <summary>
            /// Enum Usedverygood for value: used_very_good
            /// </summary>
            [EnumMember(Value = "used_very_good")]
            Usedverygood = 6,
            
            /// <summary>
            /// Enum Usedgood for value: used_good
            /// </summary>
            [EnumMember(Value = "used_good")]
            Usedgood = 7,
            
            /// <summary>
            /// Enum Usedacceptable for value: used_acceptable
            /// </summary>
            [EnumMember(Value = "used_acceptable")]
            Usedacceptable = 8,
            
            /// <summary>
            /// Enum Collectiblelikenew for value: collectible_like_new
            /// </summary>
            [EnumMember(Value = "collectible_like_new")]
            Collectiblelikenew = 9,
            
            /// <summary>
            /// Enum Collectibleverygood for value: collectible_very_good
            /// </summary>
            [EnumMember(Value = "collectible_very_good")]
            Collectibleverygood = 10,
            
            /// <summary>
            /// Enum Collectiblegood for value: collectible_good
            /// </summary>
            [EnumMember(Value = "collectible_good")]
            Collectiblegood = 11,
            
            /// <summary>
            /// Enum Collectibleacceptable for value: collectible_acceptable
            /// </summary>
            [EnumMember(Value = "collectible_acceptable")]
            Collectibleacceptable = 12,
            
            /// <summary>
            /// Enum Clubclub for value: club_club
            /// </summary>
            [EnumMember(Value = "club_club")]
            Clubclub = 13
        }

        /// <summary>
        /// The condition that applies to the restriction.
        /// </summary>
        /// <value>The condition that applies to the restriction.</value>
        [DataMember(Name="conditionType", EmitDefaultValue=false)]
        public ConditionTypeEnum? ConditionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Restriction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Restriction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Restriction" /> class.
        /// </summary>
        /// <param name="marketplaceId">A marketplace identifier. Identifies the Amazon marketplace where the restriction is enforced. (required).</param>
        /// <param name="conditionType">The condition that applies to the restriction..</param>
        /// <param name="reasons">A list of reasons for the restriction..</param>
        public Restriction(string marketplaceId = default(string), ConditionTypeEnum? conditionType = default(ConditionTypeEnum?), List<Reason> reasons = default(List<Reason>))
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for Restriction and cannot be null");
            }
            else
            {
                this.MarketplaceId = marketplaceId;
            }
            this.ConditionType = conditionType;
            this.Reasons = reasons;
        }
        
        /// <summary>
        /// A marketplace identifier. Identifies the Amazon marketplace where the restriction is enforced.
        /// </summary>
        /// <value>A marketplace identifier. Identifies the Amazon marketplace where the restriction is enforced.</value>
        [DataMember(Name="marketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }


        /// <summary>
        /// A list of reasons for the restriction.
        /// </summary>
        /// <value>A list of reasons for the restriction.</value>
        [DataMember(Name="reasons", EmitDefaultValue=false)]
        public List<Reason> Reasons { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Restriction {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  ConditionType: ").Append(ConditionType).Append("\n");
            sb.Append("  Reasons: ").Append(Reasons).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Restriction);
        }

        /// <summary>
        /// Returns true if Restriction instances are equal
        /// </summary>
        /// <param name="input">Instance of Restriction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Restriction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) && 
                (
                    this.ConditionType == input.ConditionType ||
                    (this.ConditionType != null &&
                    this.ConditionType.Equals(input.ConditionType))
                ) && 
                (
                    this.Reasons == input.Reasons ||
                    this.Reasons != null &&
                    this.Reasons.SequenceEqual(input.Reasons)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.ConditionType != null)
                    hashCode = hashCode * 59 + this.ConditionType.GetHashCode();
                if (this.Reasons != null)
                    hashCode = hashCode * 59 + this.Reasons.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
