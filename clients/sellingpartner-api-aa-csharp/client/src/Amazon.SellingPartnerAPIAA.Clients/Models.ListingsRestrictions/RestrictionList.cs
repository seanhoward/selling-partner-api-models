/* 
 * Selling Partner API for Listings Restrictions
 *
 * The Selling Partner API for Listings Restrictions provides programmatic access to restrictions on Amazon catalog listings.  For more information, see the [Listings Restrictions API Use Case Guide](doc:listings-restrictions-api-v2021-08-01-use-case-guide).
 *
 * OpenAPI spec version: 2021-08-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.ListingsRestrictions
{
    /// <summary>
    /// A list of restrictions for the specified Amazon catalog item.
    /// </summary>
    [DataContract]
    public partial class RestrictionList :  IEquatable<RestrictionList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RestrictionList" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RestrictionList() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RestrictionList" /> class.
        /// </summary>
        /// <param name="restrictions">restrictions (required).</param>
        public RestrictionList(List<Restriction> restrictions = default(List<Restriction>))
        {
            // to ensure "restrictions" is required (not null)
            if (restrictions == null)
            {
                throw new InvalidDataException("restrictions is a required property for RestrictionList and cannot be null");
            }
            else
            {
                this.Restrictions = restrictions;
            }
        }
        
        /// <summary>
        /// Gets or Sets Restrictions
        /// </summary>
        [DataMember(Name="restrictions", EmitDefaultValue=false)]
        public List<Restriction> Restrictions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RestrictionList {\n");
            sb.Append("  Restrictions: ").Append(Restrictions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RestrictionList);
        }

        /// <summary>
        /// Returns true if RestrictionList instances are equal
        /// </summary>
        /// <param name="input">Instance of RestrictionList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RestrictionList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Restrictions == input.Restrictions ||
                    this.Restrictions != null &&
                    this.Restrictions.SequenceEqual(input.Restrictions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Restrictions != null)
                    hashCode = hashCode * 59 + this.Restrictions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
