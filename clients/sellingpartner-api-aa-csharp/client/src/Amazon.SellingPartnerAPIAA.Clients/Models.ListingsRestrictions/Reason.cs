/* 
 * Selling Partner API for Listings Restrictions
 *
 * The Selling Partner API for Listings Restrictions provides programmatic access to restrictions on Amazon catalog listings.  For more information, see the [Listings Restrictions API Use Case Guide](doc:listings-restrictions-api-v2021-08-01-use-case-guide).
 *
 * OpenAPI spec version: 2021-08-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.ListingsRestrictions
{
    /// <summary>
    /// A reason for the restriction, including path forward links that may allow Selling Partners to remove the restriction, if available.
    /// </summary>
    [DataContract]
    public partial class Reason : IEquatable<Reason>, IValidatableObject
    {
        /// <summary>
        /// A code indicating why the listing is restricted.
        /// </summary>
        /// <value>A code indicating why the listing is restricted.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonCodeEnum
        {

            /// <summary>
            /// Enum APPROVALREQUIRED for value: APPROVAL_REQUIRED
            /// </summary>
            [EnumMember(Value = "APPROVAL_REQUIRED")]
            APPROVALREQUIRED = 1,

            /// <summary>
            /// Enum ASINNOTFOUND for value: ASIN_NOT_FOUND
            /// </summary>
            [EnumMember(Value = "ASIN_NOT_FOUND")]
            ASINNOTFOUND = 2,

            /// <summary>
            /// Enum NOTELIGIBLE for value: NOT_ELIGIBLE
            /// </summary>
            [EnumMember(Value = "NOT_ELIGIBLE")]
            NOTELIGIBLE = 3
        }

        /// <summary>
        /// A code indicating why the listing is restricted.
        /// </summary>
        /// <value>A code indicating why the listing is restricted.</value>
        [DataMember(Name = "reasonCode", EmitDefaultValue = false)]
        public ReasonCodeEnum? ReasonCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Reason" /> class.
        /// </summary>
        [JsonConstructor]
        protected Reason() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Reason" /> class.
        /// </summary>
        /// <param name="message">A message describing the reason for the restriction. (required).</param>
        /// <param name="reasonCode">A code indicating why the listing is restricted..</param>
        /// <param name="links">A list of path forward links that may allow Selling Partners to remove the restriction..</param>
        public Reason(string message = default, ReasonCodeEnum? reasonCode = default, List<Link> links = default)
        {
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new InvalidDataException("message is a required property for Reason and cannot be null");
            }
            else
            {
                this.Message = message;
            }
            this.ReasonCode = reasonCode;
            this.Links = links;
        }

        /// <summary>
        /// A message describing the reason for the restriction.
        /// </summary>
        /// <value>A message describing the reason for the restriction.</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }


        /// <summary>
        /// A list of path forward links that may allow Selling Partners to remove the restriction.
        /// </summary>
        /// <value>A list of path forward links that may allow Selling Partners to remove the restriction.</value>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Reason {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Reason);
        }

        /// <summary>
        /// Returns true if Reason instances are equal
        /// </summary>
        /// <param name="input">Instance of Reason to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Reason input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) &&
                (
                    this.ReasonCode == input.ReasonCode ||
                    (this.ReasonCode != null &&
                    this.ReasonCode.Equals(input.ReasonCode))
                ) &&
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.ReasonCode != null)
                    hashCode = hashCode * 59 + this.ReasonCode.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
