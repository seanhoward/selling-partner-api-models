/* 
 * Selling Partner API for Uploads
 *
 * The Uploads API lets you upload files that you can programmatically access using other Selling Partner APIs, such as the A+ Content API and the Messaging API.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Uploads
{
    /// <summary>
    /// Information about an upload destination.
    /// </summary>
    [DataContract]
    public partial class UploadDestination :  IEquatable<UploadDestination>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadDestination" /> class.
        /// </summary>
        /// <param name="uploadDestinationId">The unique identifier for the upload destination..</param>
        /// <param name="url">The URL for the upload destination..</param>
        /// <param name="headers">The headers to include in the upload request..</param>
        public UploadDestination(string uploadDestinationId = default, string url = default, Object headers = default)
        {
            this.UploadDestinationId = uploadDestinationId;
            this.Url = url;
            this.Headers = headers;
        }
        
        /// <summary>
        /// The unique identifier for the upload destination.
        /// </summary>
        /// <value>The unique identifier for the upload destination.</value>
        [DataMember(Name="uploadDestinationId", EmitDefaultValue=false)]
        public string UploadDestinationId { get; set; }

        /// <summary>
        /// The URL for the upload destination.
        /// </summary>
        /// <value>The URL for the upload destination.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// The headers to include in the upload request.
        /// </summary>
        /// <value>The headers to include in the upload request.</value>
        [DataMember(Name="headers", EmitDefaultValue=false)]
        public Object Headers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UploadDestination {\n");
            sb.Append("  UploadDestinationId: ").Append(UploadDestinationId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UploadDestination);
        }

        /// <summary>
        /// Returns true if UploadDestination instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadDestination to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadDestination input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UploadDestinationId == input.UploadDestinationId ||
                    (this.UploadDestinationId != null &&
                    this.UploadDestinationId.Equals(input.UploadDestinationId))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Headers == input.Headers ||
                    (this.Headers != null &&
                    this.Headers.Equals(input.Headers))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UploadDestinationId != null)
                    hashCode = hashCode * 59 + this.UploadDestinationId.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Headers != null)
                    hashCode = hashCode * 59 + this.Headers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
