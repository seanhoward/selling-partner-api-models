/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.AplusContent
{
    /// <summary>
    /// The A+ Content ASIN with additional metadata for content management. If you don&#39;t include the &#x60;includedDataSet&#x60; parameter in a call to the listContentDocumentAsinRelations operation, the related ASINs are returned without metadata.
    /// </summary>
    [DataContract]
    public partial class AsinMetadata :  IEquatable<AsinMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsinMetadata" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AsinMetadata() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AsinMetadata" /> class.
        /// </summary>
        /// <param name="asin">asin (required).</param>
        /// <param name="badgeSet">badgeSet.</param>
        /// <param name="parent">parent.</param>
        /// <param name="title">The title for the ASIN in the Amazon catalog..</param>
        /// <param name="imageUrl">The default image for the ASIN in the Amazon catalog..</param>
        /// <param name="contentReferenceKeySet">contentReferenceKeySet.</param>
        public AsinMetadata(string asin = default(string), AsinBadgeSet badgeSet = default(AsinBadgeSet), string parent = default(string), string title = default(string), string imageUrl = default(string), ContentReferenceKeySet contentReferenceKeySet = default(ContentReferenceKeySet))
        {
            // to ensure "asin" is required (not null)
            if (asin == null)
            {
                throw new InvalidDataException("asin is a required property for AsinMetadata and cannot be null");
            }
            else
            {
                this.Asin = asin;
            }
            this.BadgeSet = badgeSet;
            this.Parent = parent;
            this.Title = title;
            this.ImageUrl = imageUrl;
            this.ContentReferenceKeySet = contentReferenceKeySet;
        }
        
        /// <summary>
        /// Gets or Sets Asin
        /// </summary>
        [DataMember(Name="asin", EmitDefaultValue=false)]
        public string Asin { get; set; }

        /// <summary>
        /// Gets or Sets BadgeSet
        /// </summary>
        [DataMember(Name="badgeSet", EmitDefaultValue=false)]
        public AsinBadgeSet BadgeSet { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name="parent", EmitDefaultValue=false)]
        public string Parent { get; set; }

        /// <summary>
        /// The title for the ASIN in the Amazon catalog.
        /// </summary>
        /// <value>The title for the ASIN in the Amazon catalog.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// The default image for the ASIN in the Amazon catalog.
        /// </summary>
        /// <value>The default image for the ASIN in the Amazon catalog.</value>
        [DataMember(Name="imageUrl", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets ContentReferenceKeySet
        /// </summary>
        [DataMember(Name="contentReferenceKeySet", EmitDefaultValue=false)]
        public ContentReferenceKeySet ContentReferenceKeySet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsinMetadata {\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  BadgeSet: ").Append(BadgeSet).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  ContentReferenceKeySet: ").Append(ContentReferenceKeySet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AsinMetadata);
        }

        /// <summary>
        /// Returns true if AsinMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of AsinMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsinMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Asin == input.Asin ||
                    (this.Asin != null &&
                    this.Asin.Equals(input.Asin))
                ) && 
                (
                    this.BadgeSet == input.BadgeSet ||
                    (this.BadgeSet != null &&
                    this.BadgeSet.Equals(input.BadgeSet))
                ) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.ContentReferenceKeySet == input.ContentReferenceKeySet ||
                    (this.ContentReferenceKeySet != null &&
                    this.ContentReferenceKeySet.Equals(input.ContentReferenceKeySet))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Asin != null)
                    hashCode = hashCode * 59 + this.Asin.GetHashCode();
                if (this.BadgeSet != null)
                    hashCode = hashCode * 59 + this.BadgeSet.GetHashCode();
                if (this.Parent != null)
                    hashCode = hashCode * 59 + this.Parent.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                if (this.ContentReferenceKeySet != null)
                    hashCode = hashCode * 59 + this.ContentReferenceKeySet.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Title (string) minLength
            if(this.Title != null && this.Title.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be greater than 1.", new [] { "Title" });
            }

            // ImageUrl (string) minLength
            if(this.ImageUrl != null && this.ImageUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ImageUrl, length must be greater than 1.", new [] { "ImageUrl" });
            }

            yield break;
        }
    }

}
