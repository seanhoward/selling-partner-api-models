/* 
 * Selling Partner API for A+ Content Management
 *
 * Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.AplusContent
{
    /// <summary>
    /// The full context for an A+ Content publishing event.
    /// </summary>
    [DataContract]
    public partial class PublishRecord : IEquatable<PublishRecord>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name = "contentType", EmitDefaultValue = false)]
        public ContentType ContentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublishRecord" /> class.
        /// </summary>
        [JsonConstructor]
        protected PublishRecord() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublishRecord" /> class.
        /// </summary>
        /// <param name="marketplaceId">marketplaceId (required).</param>
        /// <param name="locale">locale (required).</param>
        /// <param name="asin">asin (required).</param>
        /// <param name="contentType">contentType (required).</param>
        /// <param name="contentSubType">contentSubType.</param>
        /// <param name="contentReferenceKey">contentReferenceKey (required).</param>
        public PublishRecord(string marketplaceId = default, string locale = default, string asin = default, ContentType contentType = default, string contentSubType = default, string contentReferenceKey = default)
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for PublishRecord and cannot be null");
            }
            else
            {
                this.MarketplaceId = marketplaceId;
            }
            // to ensure "locale" is required (not null)
            if (locale == null)
            {
                throw new InvalidDataException("locale is a required property for PublishRecord and cannot be null");
            }
            else
            {
                this.Locale = locale;
            }
            // to ensure "asin" is required (not null)
            if (asin == null)
            {
                throw new InvalidDataException("asin is a required property for PublishRecord and cannot be null");
            }
            else
            {
                this.Asin = asin;
            }
            // to ensure "contentType" is required (not null)
            if (contentType == null)
            {
                throw new InvalidDataException("contentType is a required property for PublishRecord and cannot be null");
            }
            else
            {
                this.ContentType = contentType;
            }
            // to ensure "contentReferenceKey" is required (not null)
            if (contentReferenceKey == null)
            {
                throw new InvalidDataException("contentReferenceKey is a required property for PublishRecord and cannot be null");
            }
            else
            {
                this.ContentReferenceKey = contentReferenceKey;
            }
            this.ContentSubType = contentSubType;
        }

        /// <summary>
        /// Gets or Sets MarketplaceId
        /// </summary>
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name = "locale", EmitDefaultValue = false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets Asin
        /// </summary>
        [DataMember(Name = "asin", EmitDefaultValue = false)]
        public string Asin { get; set; }


        /// <summary>
        /// Gets or Sets ContentSubType
        /// </summary>
        [DataMember(Name = "contentSubType", EmitDefaultValue = false)]
        public string ContentSubType { get; set; }

        /// <summary>
        /// Gets or Sets ContentReferenceKey
        /// </summary>
        [DataMember(Name = "contentReferenceKey", EmitDefaultValue = false)]
        public string ContentReferenceKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PublishRecord {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  ContentSubType: ").Append(ContentSubType).Append("\n");
            sb.Append("  ContentReferenceKey: ").Append(ContentReferenceKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublishRecord);
        }

        /// <summary>
        /// Returns true if PublishRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of PublishRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublishRecord input)
        {
            if (input == null)
                return false;

            return
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) &&
                (
                    this.Asin == input.Asin ||
                    (this.Asin != null &&
                    this.Asin.Equals(input.Asin))
                ) &&
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) &&
                (
                    this.ContentSubType == input.ContentSubType ||
                    (this.ContentSubType != null &&
                    this.ContentSubType.Equals(input.ContentSubType))
                ) &&
                (
                    this.ContentReferenceKey == input.ContentReferenceKey ||
                    (this.ContentReferenceKey != null &&
                    this.ContentReferenceKey.Equals(input.ContentReferenceKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                if (this.Asin != null)
                    hashCode = hashCode * 59 + this.Asin.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.ContentSubType != null)
                    hashCode = hashCode * 59 + this.ContentSubType.GetHashCode();
                if (this.ContentReferenceKey != null)
                    hashCode = hashCode * 59 + this.ContentReferenceKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
