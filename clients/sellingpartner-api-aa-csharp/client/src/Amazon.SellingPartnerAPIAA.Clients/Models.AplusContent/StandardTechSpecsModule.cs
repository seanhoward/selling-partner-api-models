/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.AplusContent
{
    /// <summary>
    /// The standard table of technical feature names and definitions.
    /// </summary>
    [DataContract]
    public partial class StandardTechSpecsModule :  IEquatable<StandardTechSpecsModule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardTechSpecsModule" /> class.
        /// </summary>
        [JsonConstructor]
        protected StandardTechSpecsModule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardTechSpecsModule" /> class.
        /// </summary>
        /// <param name="headline">headline.</param>
        /// <param name="specificationList">The specification list. (required).</param>
        /// <param name="tableCount">The number of tables to present. Features are evenly divided between the tables..</param>
        public StandardTechSpecsModule(TextComponent headline = default, List<StandardTextPairBlock> specificationList = default, int? tableCount = default)
        {
            // to ensure "specificationList" is required (not null)
            if (specificationList == null)
            {
                throw new InvalidDataException("specificationList is a required property for StandardTechSpecsModule and cannot be null");
            }
            else
            {
                this.SpecificationList = specificationList;
            }
            this.Headline = headline;
            this.TableCount = tableCount;
        }
        
        /// <summary>
        /// Gets or Sets Headline
        /// </summary>
        [DataMember(Name="headline", EmitDefaultValue=false)]
        public TextComponent Headline { get; set; }

        /// <summary>
        /// The specification list.
        /// </summary>
        /// <value>The specification list.</value>
        [DataMember(Name="specificationList", EmitDefaultValue=false)]
        public List<StandardTextPairBlock> SpecificationList { get; set; }

        /// <summary>
        /// The number of tables to present. Features are evenly divided between the tables.
        /// </summary>
        /// <value>The number of tables to present. Features are evenly divided between the tables.</value>
        [DataMember(Name="tableCount", EmitDefaultValue=false)]
        public int? TableCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StandardTechSpecsModule {\n");
            sb.Append("  Headline: ").Append(Headline).Append("\n");
            sb.Append("  SpecificationList: ").Append(SpecificationList).Append("\n");
            sb.Append("  TableCount: ").Append(TableCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StandardTechSpecsModule);
        }

        /// <summary>
        /// Returns true if StandardTechSpecsModule instances are equal
        /// </summary>
        /// <param name="input">Instance of StandardTechSpecsModule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StandardTechSpecsModule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Headline == input.Headline ||
                    (this.Headline != null &&
                    this.Headline.Equals(input.Headline))
                ) && 
                (
                    this.SpecificationList == input.SpecificationList ||
                    this.SpecificationList != null &&
                    this.SpecificationList.SequenceEqual(input.SpecificationList)
                ) && 
                (
                    this.TableCount == input.TableCount ||
                    (this.TableCount != null &&
                    this.TableCount.Equals(input.TableCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Headline != null)
                    hashCode = hashCode * 59 + this.Headline.GetHashCode();
                if (this.SpecificationList != null)
                    hashCode = hashCode * 59 + this.SpecificationList.GetHashCode();
                if (this.TableCount != null)
                    hashCode = hashCode * 59 + this.TableCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TableCount (int?) maximum
            if(this.TableCount > (int?)2)
            {
                yield return new ValidationResult("Invalid value for TableCount, must be a value less than or equal to 2.", new [] { "TableCount" });
            }

            // TableCount (int?) minimum
            if(this.TableCount < (int?)1)
            {
                yield return new ValidationResult("Invalid value for TableCount, must be a value greater than or equal to 1.", new [] { "TableCount" });
            }

            yield break;
        }
    }

}
