/* 
 * Selling Partner API for A+ Content Management
 *
 * Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.AplusContent
{
    /// <summary>
    /// An A+ Content module. An A+ Content document is composed of content modules. The &#x60;contentModuleType&#x60; property selects which content module types to use.
    /// </summary>
    [DataContract]
    public partial class ContentModule : IEquatable<ContentModule>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ContentModuleType
        /// </summary>
        [DataMember(Name = "contentModuleType", EmitDefaultValue = false)]
        public ContentModuleType ContentModuleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentModule" /> class.
        /// </summary>
        [JsonConstructor]
        protected ContentModule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentModule" /> class.
        /// </summary>
        /// <param name="contentModuleType">contentModuleType (required).</param>
        /// <param name="standardCompanyLogo">standardCompanyLogo.</param>
        /// <param name="standardComparisonTable">standardComparisonTable.</param>
        /// <param name="standardFourImageText">standardFourImageText.</param>
        /// <param name="standardFourImageTextQuadrant">standardFourImageTextQuadrant.</param>
        /// <param name="standardHeaderImageText">standardHeaderImageText.</param>
        /// <param name="standardImageSidebar">standardImageSidebar.</param>
        /// <param name="standardImageTextOverlay">standardImageTextOverlay.</param>
        /// <param name="standardMultipleImageText">standardMultipleImageText.</param>
        /// <param name="standardProductDescription">standardProductDescription.</param>
        /// <param name="standardSingleImageHighlights">standardSingleImageHighlights.</param>
        /// <param name="standardSingleImageSpecsDetail">standardSingleImageSpecsDetail.</param>
        /// <param name="standardSingleSideImage">standardSingleSideImage.</param>
        /// <param name="standardTechSpecs">standardTechSpecs.</param>
        /// <param name="standardText">standardText.</param>
        /// <param name="standardThreeImageText">standardThreeImageText.</param>
        public ContentModule(ContentModuleType contentModuleType = default, StandardCompanyLogoModule standardCompanyLogo = default, StandardComparisonTableModule standardComparisonTable = default, StandardFourImageTextModule standardFourImageText = default, StandardFourImageTextQuadrantModule standardFourImageTextQuadrant = default, StandardHeaderImageTextModule standardHeaderImageText = default, StandardImageSidebarModule standardImageSidebar = default, StandardImageTextOverlayModule standardImageTextOverlay = default, StandardMultipleImageTextModule standardMultipleImageText = default, StandardProductDescriptionModule standardProductDescription = default, StandardSingleImageHighlightsModule standardSingleImageHighlights = default, StandardSingleImageSpecsDetailModule standardSingleImageSpecsDetail = default, StandardSingleSideImageModule standardSingleSideImage = default, StandardTechSpecsModule standardTechSpecs = default, StandardTextModule standardText = default, StandardThreeImageTextModule standardThreeImageText = default)
        {
            // to ensure "contentModuleType" is required (not null)
            if (contentModuleType == null)
            {
                throw new InvalidDataException("contentModuleType is a required property for ContentModule and cannot be null");
            }
            else
            {
                this.ContentModuleType = contentModuleType;
            }
            this.StandardCompanyLogo = standardCompanyLogo;
            this.StandardComparisonTable = standardComparisonTable;
            this.StandardFourImageText = standardFourImageText;
            this.StandardFourImageTextQuadrant = standardFourImageTextQuadrant;
            this.StandardHeaderImageText = standardHeaderImageText;
            this.StandardImageSidebar = standardImageSidebar;
            this.StandardImageTextOverlay = standardImageTextOverlay;
            this.StandardMultipleImageText = standardMultipleImageText;
            this.StandardProductDescription = standardProductDescription;
            this.StandardSingleImageHighlights = standardSingleImageHighlights;
            this.StandardSingleImageSpecsDetail = standardSingleImageSpecsDetail;
            this.StandardSingleSideImage = standardSingleSideImage;
            this.StandardTechSpecs = standardTechSpecs;
            this.StandardText = standardText;
            this.StandardThreeImageText = standardThreeImageText;
        }


        /// <summary>
        /// Gets or Sets StandardCompanyLogo
        /// </summary>
        [DataMember(Name = "standardCompanyLogo", EmitDefaultValue = false)]
        public StandardCompanyLogoModule StandardCompanyLogo { get; set; }

        /// <summary>
        /// Gets or Sets StandardComparisonTable
        /// </summary>
        [DataMember(Name = "standardComparisonTable", EmitDefaultValue = false)]
        public StandardComparisonTableModule StandardComparisonTable { get; set; }

        /// <summary>
        /// Gets or Sets StandardFourImageText
        /// </summary>
        [DataMember(Name = "standardFourImageText", EmitDefaultValue = false)]
        public StandardFourImageTextModule StandardFourImageText { get; set; }

        /// <summary>
        /// Gets or Sets StandardFourImageTextQuadrant
        /// </summary>
        [DataMember(Name = "standardFourImageTextQuadrant", EmitDefaultValue = false)]
        public StandardFourImageTextQuadrantModule StandardFourImageTextQuadrant { get; set; }

        /// <summary>
        /// Gets or Sets StandardHeaderImageText
        /// </summary>
        [DataMember(Name = "standardHeaderImageText", EmitDefaultValue = false)]
        public StandardHeaderImageTextModule StandardHeaderImageText { get; set; }

        /// <summary>
        /// Gets or Sets StandardImageSidebar
        /// </summary>
        [DataMember(Name = "standardImageSidebar", EmitDefaultValue = false)]
        public StandardImageSidebarModule StandardImageSidebar { get; set; }

        /// <summary>
        /// Gets or Sets StandardImageTextOverlay
        /// </summary>
        [DataMember(Name = "standardImageTextOverlay", EmitDefaultValue = false)]
        public StandardImageTextOverlayModule StandardImageTextOverlay { get; set; }

        /// <summary>
        /// Gets or Sets StandardMultipleImageText
        /// </summary>
        [DataMember(Name = "standardMultipleImageText", EmitDefaultValue = false)]
        public StandardMultipleImageTextModule StandardMultipleImageText { get; set; }

        /// <summary>
        /// Gets or Sets StandardProductDescription
        /// </summary>
        [DataMember(Name = "standardProductDescription", EmitDefaultValue = false)]
        public StandardProductDescriptionModule StandardProductDescription { get; set; }

        /// <summary>
        /// Gets or Sets StandardSingleImageHighlights
        /// </summary>
        [DataMember(Name = "standardSingleImageHighlights", EmitDefaultValue = false)]
        public StandardSingleImageHighlightsModule StandardSingleImageHighlights { get; set; }

        /// <summary>
        /// Gets or Sets StandardSingleImageSpecsDetail
        /// </summary>
        [DataMember(Name = "standardSingleImageSpecsDetail", EmitDefaultValue = false)]
        public StandardSingleImageSpecsDetailModule StandardSingleImageSpecsDetail { get; set; }

        /// <summary>
        /// Gets or Sets StandardSingleSideImage
        /// </summary>
        [DataMember(Name = "standardSingleSideImage", EmitDefaultValue = false)]
        public StandardSingleSideImageModule StandardSingleSideImage { get; set; }

        /// <summary>
        /// Gets or Sets StandardTechSpecs
        /// </summary>
        [DataMember(Name = "standardTechSpecs", EmitDefaultValue = false)]
        public StandardTechSpecsModule StandardTechSpecs { get; set; }

        /// <summary>
        /// Gets or Sets StandardText
        /// </summary>
        [DataMember(Name = "standardText", EmitDefaultValue = false)]
        public StandardTextModule StandardText { get; set; }

        /// <summary>
        /// Gets or Sets StandardThreeImageText
        /// </summary>
        [DataMember(Name = "standardThreeImageText", EmitDefaultValue = false)]
        public StandardThreeImageTextModule StandardThreeImageText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContentModule {\n");
            sb.Append("  ContentModuleType: ").Append(ContentModuleType).Append("\n");
            sb.Append("  StandardCompanyLogo: ").Append(StandardCompanyLogo).Append("\n");
            sb.Append("  StandardComparisonTable: ").Append(StandardComparisonTable).Append("\n");
            sb.Append("  StandardFourImageText: ").Append(StandardFourImageText).Append("\n");
            sb.Append("  StandardFourImageTextQuadrant: ").Append(StandardFourImageTextQuadrant).Append("\n");
            sb.Append("  StandardHeaderImageText: ").Append(StandardHeaderImageText).Append("\n");
            sb.Append("  StandardImageSidebar: ").Append(StandardImageSidebar).Append("\n");
            sb.Append("  StandardImageTextOverlay: ").Append(StandardImageTextOverlay).Append("\n");
            sb.Append("  StandardMultipleImageText: ").Append(StandardMultipleImageText).Append("\n");
            sb.Append("  StandardProductDescription: ").Append(StandardProductDescription).Append("\n");
            sb.Append("  StandardSingleImageHighlights: ").Append(StandardSingleImageHighlights).Append("\n");
            sb.Append("  StandardSingleImageSpecsDetail: ").Append(StandardSingleImageSpecsDetail).Append("\n");
            sb.Append("  StandardSingleSideImage: ").Append(StandardSingleSideImage).Append("\n");
            sb.Append("  StandardTechSpecs: ").Append(StandardTechSpecs).Append("\n");
            sb.Append("  StandardText: ").Append(StandardText).Append("\n");
            sb.Append("  StandardThreeImageText: ").Append(StandardThreeImageText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentModule);
        }

        /// <summary>
        /// Returns true if ContentModule instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentModule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentModule input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ContentModuleType == input.ContentModuleType ||
                    (this.ContentModuleType != null &&
                    this.ContentModuleType.Equals(input.ContentModuleType))
                ) &&
                (
                    this.StandardCompanyLogo == input.StandardCompanyLogo ||
                    (this.StandardCompanyLogo != null &&
                    this.StandardCompanyLogo.Equals(input.StandardCompanyLogo))
                ) &&
                (
                    this.StandardComparisonTable == input.StandardComparisonTable ||
                    (this.StandardComparisonTable != null &&
                    this.StandardComparisonTable.Equals(input.StandardComparisonTable))
                ) &&
                (
                    this.StandardFourImageText == input.StandardFourImageText ||
                    (this.StandardFourImageText != null &&
                    this.StandardFourImageText.Equals(input.StandardFourImageText))
                ) &&
                (
                    this.StandardFourImageTextQuadrant == input.StandardFourImageTextQuadrant ||
                    (this.StandardFourImageTextQuadrant != null &&
                    this.StandardFourImageTextQuadrant.Equals(input.StandardFourImageTextQuadrant))
                ) &&
                (
                    this.StandardHeaderImageText == input.StandardHeaderImageText ||
                    (this.StandardHeaderImageText != null &&
                    this.StandardHeaderImageText.Equals(input.StandardHeaderImageText))
                ) &&
                (
                    this.StandardImageSidebar == input.StandardImageSidebar ||
                    (this.StandardImageSidebar != null &&
                    this.StandardImageSidebar.Equals(input.StandardImageSidebar))
                ) &&
                (
                    this.StandardImageTextOverlay == input.StandardImageTextOverlay ||
                    (this.StandardImageTextOverlay != null &&
                    this.StandardImageTextOverlay.Equals(input.StandardImageTextOverlay))
                ) &&
                (
                    this.StandardMultipleImageText == input.StandardMultipleImageText ||
                    (this.StandardMultipleImageText != null &&
                    this.StandardMultipleImageText.Equals(input.StandardMultipleImageText))
                ) &&
                (
                    this.StandardProductDescription == input.StandardProductDescription ||
                    (this.StandardProductDescription != null &&
                    this.StandardProductDescription.Equals(input.StandardProductDescription))
                ) &&
                (
                    this.StandardSingleImageHighlights == input.StandardSingleImageHighlights ||
                    (this.StandardSingleImageHighlights != null &&
                    this.StandardSingleImageHighlights.Equals(input.StandardSingleImageHighlights))
                ) &&
                (
                    this.StandardSingleImageSpecsDetail == input.StandardSingleImageSpecsDetail ||
                    (this.StandardSingleImageSpecsDetail != null &&
                    this.StandardSingleImageSpecsDetail.Equals(input.StandardSingleImageSpecsDetail))
                ) &&
                (
                    this.StandardSingleSideImage == input.StandardSingleSideImage ||
                    (this.StandardSingleSideImage != null &&
                    this.StandardSingleSideImage.Equals(input.StandardSingleSideImage))
                ) &&
                (
                    this.StandardTechSpecs == input.StandardTechSpecs ||
                    (this.StandardTechSpecs != null &&
                    this.StandardTechSpecs.Equals(input.StandardTechSpecs))
                ) &&
                (
                    this.StandardText == input.StandardText ||
                    (this.StandardText != null &&
                    this.StandardText.Equals(input.StandardText))
                ) &&
                (
                    this.StandardThreeImageText == input.StandardThreeImageText ||
                    (this.StandardThreeImageText != null &&
                    this.StandardThreeImageText.Equals(input.StandardThreeImageText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContentModuleType != null)
                    hashCode = hashCode * 59 + this.ContentModuleType.GetHashCode();
                if (this.StandardCompanyLogo != null)
                    hashCode = hashCode * 59 + this.StandardCompanyLogo.GetHashCode();
                if (this.StandardComparisonTable != null)
                    hashCode = hashCode * 59 + this.StandardComparisonTable.GetHashCode();
                if (this.StandardFourImageText != null)
                    hashCode = hashCode * 59 + this.StandardFourImageText.GetHashCode();
                if (this.StandardFourImageTextQuadrant != null)
                    hashCode = hashCode * 59 + this.StandardFourImageTextQuadrant.GetHashCode();
                if (this.StandardHeaderImageText != null)
                    hashCode = hashCode * 59 + this.StandardHeaderImageText.GetHashCode();
                if (this.StandardImageSidebar != null)
                    hashCode = hashCode * 59 + this.StandardImageSidebar.GetHashCode();
                if (this.StandardImageTextOverlay != null)
                    hashCode = hashCode * 59 + this.StandardImageTextOverlay.GetHashCode();
                if (this.StandardMultipleImageText != null)
                    hashCode = hashCode * 59 + this.StandardMultipleImageText.GetHashCode();
                if (this.StandardProductDescription != null)
                    hashCode = hashCode * 59 + this.StandardProductDescription.GetHashCode();
                if (this.StandardSingleImageHighlights != null)
                    hashCode = hashCode * 59 + this.StandardSingleImageHighlights.GetHashCode();
                if (this.StandardSingleImageSpecsDetail != null)
                    hashCode = hashCode * 59 + this.StandardSingleImageSpecsDetail.GetHashCode();
                if (this.StandardSingleSideImage != null)
                    hashCode = hashCode * 59 + this.StandardSingleSideImage.GetHashCode();
                if (this.StandardTechSpecs != null)
                    hashCode = hashCode * 59 + this.StandardTechSpecs.GetHashCode();
                if (this.StandardText != null)
                    hashCode = hashCode * 59 + this.StandardText.GetHashCode();
                if (this.StandardThreeImageText != null)
                    hashCode = hashCode * 59 + this.StandardThreeImageText.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
