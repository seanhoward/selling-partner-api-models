/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.AplusContent
{
    /// <summary>
    /// A standard image with several paragraphs and a bulleted list.
    /// </summary>
    [DataContract]
    public partial class StandardSingleImageHighlightsModule :  IEquatable<StandardSingleImageHighlightsModule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardSingleImageHighlightsModule" /> class.
        /// </summary>
        /// <param name="image">image.</param>
        /// <param name="headline">headline.</param>
        /// <param name="textBlock1">textBlock1.</param>
        /// <param name="textBlock2">textBlock2.</param>
        /// <param name="textBlock3">textBlock3.</param>
        /// <param name="bulletedListBlock">bulletedListBlock.</param>
        public StandardSingleImageHighlightsModule(ImageComponent image = default, TextComponent headline = default, StandardTextBlock textBlock1 = default, StandardTextBlock textBlock2 = default, StandardTextBlock textBlock3 = default, StandardHeaderTextListBlock bulletedListBlock = default)
        {
            this.Image = image;
            this.Headline = headline;
            this.TextBlock1 = textBlock1;
            this.TextBlock2 = textBlock2;
            this.TextBlock3 = textBlock3;
            this.BulletedListBlock = bulletedListBlock;
        }
        
        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public ImageComponent Image { get; set; }

        /// <summary>
        /// Gets or Sets Headline
        /// </summary>
        [DataMember(Name="headline", EmitDefaultValue=false)]
        public TextComponent Headline { get; set; }

        /// <summary>
        /// Gets or Sets TextBlock1
        /// </summary>
        [DataMember(Name="textBlock1", EmitDefaultValue=false)]
        public StandardTextBlock TextBlock1 { get; set; }

        /// <summary>
        /// Gets or Sets TextBlock2
        /// </summary>
        [DataMember(Name="textBlock2", EmitDefaultValue=false)]
        public StandardTextBlock TextBlock2 { get; set; }

        /// <summary>
        /// Gets or Sets TextBlock3
        /// </summary>
        [DataMember(Name="textBlock3", EmitDefaultValue=false)]
        public StandardTextBlock TextBlock3 { get; set; }

        /// <summary>
        /// Gets or Sets BulletedListBlock
        /// </summary>
        [DataMember(Name="bulletedListBlock", EmitDefaultValue=false)]
        public StandardHeaderTextListBlock BulletedListBlock { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StandardSingleImageHighlightsModule {\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Headline: ").Append(Headline).Append("\n");
            sb.Append("  TextBlock1: ").Append(TextBlock1).Append("\n");
            sb.Append("  TextBlock2: ").Append(TextBlock2).Append("\n");
            sb.Append("  TextBlock3: ").Append(TextBlock3).Append("\n");
            sb.Append("  BulletedListBlock: ").Append(BulletedListBlock).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StandardSingleImageHighlightsModule);
        }

        /// <summary>
        /// Returns true if StandardSingleImageHighlightsModule instances are equal
        /// </summary>
        /// <param name="input">Instance of StandardSingleImageHighlightsModule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StandardSingleImageHighlightsModule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.Headline == input.Headline ||
                    (this.Headline != null &&
                    this.Headline.Equals(input.Headline))
                ) && 
                (
                    this.TextBlock1 == input.TextBlock1 ||
                    (this.TextBlock1 != null &&
                    this.TextBlock1.Equals(input.TextBlock1))
                ) && 
                (
                    this.TextBlock2 == input.TextBlock2 ||
                    (this.TextBlock2 != null &&
                    this.TextBlock2.Equals(input.TextBlock2))
                ) && 
                (
                    this.TextBlock3 == input.TextBlock3 ||
                    (this.TextBlock3 != null &&
                    this.TextBlock3.Equals(input.TextBlock3))
                ) && 
                (
                    this.BulletedListBlock == input.BulletedListBlock ||
                    (this.BulletedListBlock != null &&
                    this.BulletedListBlock.Equals(input.BulletedListBlock))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.Headline != null)
                    hashCode = hashCode * 59 + this.Headline.GetHashCode();
                if (this.TextBlock1 != null)
                    hashCode = hashCode * 59 + this.TextBlock1.GetHashCode();
                if (this.TextBlock2 != null)
                    hashCode = hashCode * 59 + this.TextBlock2.GetHashCode();
                if (this.TextBlock3 != null)
                    hashCode = hashCode * 59 + this.TextBlock3.GetHashCode();
                if (this.BulletedListBlock != null)
                    hashCode = hashCode * 59 + this.BulletedListBlock.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
