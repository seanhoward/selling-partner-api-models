/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.AplusContent
{
    /// <summary>
    /// A standard background image with a floating text box.
    /// </summary>
    [DataContract]
    public partial class StandardImageTextOverlayModule :  IEquatable<StandardImageTextOverlayModule>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets OverlayColorType
        /// </summary>
        [DataMember(Name="overlayColorType", EmitDefaultValue=false)]
        public ColorType OverlayColorType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardImageTextOverlayModule" /> class.
        /// </summary>
        [JsonConstructor]
        protected StandardImageTextOverlayModule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardImageTextOverlayModule" /> class.
        /// </summary>
        /// <param name="overlayColorType">overlayColorType (required).</param>
        /// <param name="block">block.</param>
        public StandardImageTextOverlayModule(ColorType overlayColorType = default, StandardImageTextBlock block = default)
        {
            // to ensure "overlayColorType" is required (not null)
            if (overlayColorType == null)
            {
                throw new InvalidDataException("overlayColorType is a required property for StandardImageTextOverlayModule and cannot be null");
            }
            else
            {
                this.OverlayColorType = overlayColorType;
            }
            this.Block = block;
        }
        

        /// <summary>
        /// Gets or Sets Block
        /// </summary>
        [DataMember(Name="block", EmitDefaultValue=false)]
        public StandardImageTextBlock Block { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StandardImageTextOverlayModule {\n");
            sb.Append("  OverlayColorType: ").Append(OverlayColorType).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StandardImageTextOverlayModule);
        }

        /// <summary>
        /// Returns true if StandardImageTextOverlayModule instances are equal
        /// </summary>
        /// <param name="input">Instance of StandardImageTextOverlayModule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StandardImageTextOverlayModule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OverlayColorType == input.OverlayColorType ||
                    (this.OverlayColorType != null &&
                    this.OverlayColorType.Equals(input.OverlayColorType))
                ) && 
                (
                    this.Block == input.Block ||
                    (this.Block != null &&
                    this.Block.Equals(input.Block))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OverlayColorType != null)
                    hashCode = hashCode * 59 + this.OverlayColorType.GetHashCode();
                if (this.Block != null)
                    hashCode = hashCode * 59 + this.Block.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
