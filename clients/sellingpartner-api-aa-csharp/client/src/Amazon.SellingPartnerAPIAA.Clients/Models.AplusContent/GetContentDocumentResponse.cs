/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.AplusContent
{
    /// <summary>
    /// GetContentDocumentResponse
    /// </summary>
    [DataContract]
    public partial class GetContentDocumentResponse : AplusResponse,  IEquatable<GetContentDocumentResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetContentDocumentResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetContentDocumentResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetContentDocumentResponse" /> class.
        /// </summary>
        /// <param name="contentRecord">contentRecord (required).</param>
        public GetContentDocumentResponse(ContentRecord contentRecord = default(ContentRecord), MessageSet warnings = default(MessageSet)) : base(warnings)
        {
            // to ensure "contentRecord" is required (not null)
            if (contentRecord == null)
            {
                throw new InvalidDataException("contentRecord is a required property for GetContentDocumentResponse and cannot be null");
            }
            else
            {
                this.ContentRecord = contentRecord;
            }
        }
        
        /// <summary>
        /// Gets or Sets ContentRecord
        /// </summary>
        [DataMember(Name="contentRecord", EmitDefaultValue=false)]
        public ContentRecord ContentRecord { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetContentDocumentResponse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ContentRecord: ").Append(ContentRecord).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetContentDocumentResponse);
        }

        /// <summary>
        /// Returns true if GetContentDocumentResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetContentDocumentResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetContentDocumentResponse input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ContentRecord == input.ContentRecord ||
                    (this.ContentRecord != null &&
                    this.ContentRecord.Equals(input.ContentRecord))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ContentRecord != null)
                    hashCode = hashCode * 59 + this.ContentRecord.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            //foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
