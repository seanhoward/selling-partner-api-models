/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.AplusContent
{
    /// <summary>
    /// Rich text content.
    /// </summary>
    [DataContract]
    public partial class TextComponent :  IEquatable<TextComponent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextComponent" /> class.
        /// </summary>
        [JsonConstructor]
        protected TextComponent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextComponent" /> class.
        /// </summary>
        /// <param name="value">The actual plain text. (required).</param>
        /// <param name="decoratorSet">decoratorSet.</param>
        public TextComponent(string value = default, DecoratorSet decoratorSet = default)
        {
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for TextComponent and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            this.DecoratorSet = decoratorSet;
        }
        
        /// <summary>
        /// The actual plain text.
        /// </summary>
        /// <value>The actual plain text.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets DecoratorSet
        /// </summary>
        [DataMember(Name="decoratorSet", EmitDefaultValue=false)]
        public DecoratorSet DecoratorSet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TextComponent {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  DecoratorSet: ").Append(DecoratorSet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextComponent);
        }

        /// <summary>
        /// Returns true if TextComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of TextComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextComponent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.DecoratorSet == input.DecoratorSet ||
                    (this.DecoratorSet != null &&
                    this.DecoratorSet.Equals(input.DecoratorSet))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.DecoratorSet != null)
                    hashCode = hashCode * 59 + this.DecoratorSet.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 10000)
            {
                yield return new ValidationResult("Invalid value for Value, length must be less than 10000.", new [] { "Value" });
            }

            // Value (string) minLength
            if(this.Value != null && this.Value.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Value, length must be greater than 1.", new [] { "Value" });
            }

            yield break;
        }
    }

}
