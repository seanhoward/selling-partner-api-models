/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.AplusContent
{
    /// <summary>
    /// The standard product comparison table.
    /// </summary>
    [DataContract]
    public partial class StandardComparisonTableModule :  IEquatable<StandardComparisonTableModule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardComparisonTableModule" /> class.
        /// </summary>
        /// <param name="productColumns">productColumns.</param>
        /// <param name="metricRowLabels">metricRowLabels.</param>
        public StandardComparisonTableModule(List<StandardComparisonProductBlock> productColumns = default, List<PlainTextItem> metricRowLabels = default)
        {
            this.ProductColumns = productColumns;
            this.MetricRowLabels = metricRowLabels;
        }
        
        /// <summary>
        /// Gets or Sets ProductColumns
        /// </summary>
        [DataMember(Name="productColumns", EmitDefaultValue=false)]
        public List<StandardComparisonProductBlock> ProductColumns { get; set; }

        /// <summary>
        /// Gets or Sets MetricRowLabels
        /// </summary>
        [DataMember(Name="metricRowLabels", EmitDefaultValue=false)]
        public List<PlainTextItem> MetricRowLabels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StandardComparisonTableModule {\n");
            sb.Append("  ProductColumns: ").Append(ProductColumns).Append("\n");
            sb.Append("  MetricRowLabels: ").Append(MetricRowLabels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StandardComparisonTableModule);
        }

        /// <summary>
        /// Returns true if StandardComparisonTableModule instances are equal
        /// </summary>
        /// <param name="input">Instance of StandardComparisonTableModule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StandardComparisonTableModule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductColumns == input.ProductColumns ||
                    this.ProductColumns != null &&
                    this.ProductColumns.SequenceEqual(input.ProductColumns)
                ) && 
                (
                    this.MetricRowLabels == input.MetricRowLabels ||
                    this.MetricRowLabels != null &&
                    this.MetricRowLabels.SequenceEqual(input.MetricRowLabels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductColumns != null)
                    hashCode = hashCode * 59 + this.ProductColumns.GetHashCode();
                if (this.MetricRowLabels != null)
                    hashCode = hashCode * 59 + this.MetricRowLabels.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
