/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.AplusContent
{
    /// <summary>
    /// The A+ Content standard comparison product block.
    /// </summary>
    [DataContract]
    public partial class StandardComparisonProductBlock :  IEquatable<StandardComparisonProductBlock>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardComparisonProductBlock" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StandardComparisonProductBlock() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardComparisonProductBlock" /> class.
        /// </summary>
        /// <param name="position">The rank or index of this comparison product block within the module. Different blocks cannot occupy the same position within a single module. (required).</param>
        /// <param name="image">image.</param>
        /// <param name="title">The comparison product title..</param>
        /// <param name="asin">asin.</param>
        /// <param name="highlight">Determines whether this block of content is visually highlighted..</param>
        /// <param name="metrics">Comparison metrics for the product..</param>
        public StandardComparisonProductBlock(int? position = default(int?), ImageComponent image = default(ImageComponent), string title = default(string), string asin = default(string), bool? highlight = default(bool?), List<PlainTextItem> metrics = default(List<PlainTextItem>))
        {
            // to ensure "position" is required (not null)
            if (position == null)
            {
                throw new InvalidDataException("position is a required property for StandardComparisonProductBlock and cannot be null");
            }
            else
            {
                this.Position = position;
            }
            this.Image = image;
            this.Title = title;
            this.Asin = asin;
            this.Highlight = highlight;
            this.Metrics = metrics;
        }
        
        /// <summary>
        /// The rank or index of this comparison product block within the module. Different blocks cannot occupy the same position within a single module.
        /// </summary>
        /// <value>The rank or index of this comparison product block within the module. Different blocks cannot occupy the same position within a single module.</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int? Position { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public ImageComponent Image { get; set; }

        /// <summary>
        /// The comparison product title.
        /// </summary>
        /// <value>The comparison product title.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Asin
        /// </summary>
        [DataMember(Name="asin", EmitDefaultValue=false)]
        public string Asin { get; set; }

        /// <summary>
        /// Determines whether this block of content is visually highlighted.
        /// </summary>
        /// <value>Determines whether this block of content is visually highlighted.</value>
        [DataMember(Name="highlight", EmitDefaultValue=false)]
        public bool? Highlight { get; set; }

        /// <summary>
        /// Comparison metrics for the product.
        /// </summary>
        /// <value>Comparison metrics for the product.</value>
        [DataMember(Name="metrics", EmitDefaultValue=false)]
        public List<PlainTextItem> Metrics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StandardComparisonProductBlock {\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  Highlight: ").Append(Highlight).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StandardComparisonProductBlock);
        }

        /// <summary>
        /// Returns true if StandardComparisonProductBlock instances are equal
        /// </summary>
        /// <param name="input">Instance of StandardComparisonProductBlock to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StandardComparisonProductBlock input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Asin == input.Asin ||
                    (this.Asin != null &&
                    this.Asin.Equals(input.Asin))
                ) && 
                (
                    this.Highlight == input.Highlight ||
                    (this.Highlight != null &&
                    this.Highlight.Equals(input.Highlight))
                ) && 
                (
                    this.Metrics == input.Metrics ||
                    this.Metrics != null &&
                    this.Metrics.SequenceEqual(input.Metrics)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Asin != null)
                    hashCode = hashCode * 59 + this.Asin.GetHashCode();
                if (this.Highlight != null)
                    hashCode = hashCode * 59 + this.Highlight.GetHashCode();
                if (this.Metrics != null)
                    hashCode = hashCode * 59 + this.Metrics.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Position (int?) maximum
            if(this.Position > (int?)6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Position, must be a value less than or equal to 6.", new [] { "Position" });
            }

            // Position (int?) minimum
            if(this.Position < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Position, must be a value greater than or equal to 1.", new [] { "Position" });
            }

            // Title (string) maxLength
            if(this.Title != null && this.Title.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be less than 80.", new [] { "Title" });
            }

            // Title (string) minLength
            if(this.Title != null && this.Title.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be greater than 1.", new [] { "Title" });
            }

            yield break;
        }
    }

}
