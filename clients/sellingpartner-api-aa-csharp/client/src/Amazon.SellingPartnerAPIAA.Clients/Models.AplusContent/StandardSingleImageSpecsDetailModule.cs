/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.AplusContent
{
    /// <summary>
    /// A standard image with paragraphs and a bulleted list, and extra space for technical details.
    /// </summary>
    [DataContract]
    public partial class StandardSingleImageSpecsDetailModule :  IEquatable<StandardSingleImageSpecsDetailModule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardSingleImageSpecsDetailModule" /> class.
        /// </summary>
        /// <param name="headline">headline.</param>
        /// <param name="image">image.</param>
        /// <param name="descriptionHeadline">descriptionHeadline.</param>
        /// <param name="descriptionBlock1">descriptionBlock1.</param>
        /// <param name="descriptionBlock2">descriptionBlock2.</param>
        /// <param name="specificationHeadline">specificationHeadline.</param>
        /// <param name="specificationListBlock">specificationListBlock.</param>
        /// <param name="specificationTextBlock">specificationTextBlock.</param>
        public StandardSingleImageSpecsDetailModule(TextComponent headline = default, ImageComponent image = default, TextComponent descriptionHeadline = default, StandardTextBlock descriptionBlock1 = default, StandardTextBlock descriptionBlock2 = default, TextComponent specificationHeadline = default, StandardHeaderTextListBlock specificationListBlock = default, StandardTextBlock specificationTextBlock = default)
        {
            this.Headline = headline;
            this.Image = image;
            this.DescriptionHeadline = descriptionHeadline;
            this.DescriptionBlock1 = descriptionBlock1;
            this.DescriptionBlock2 = descriptionBlock2;
            this.SpecificationHeadline = specificationHeadline;
            this.SpecificationListBlock = specificationListBlock;
            this.SpecificationTextBlock = specificationTextBlock;
        }
        
        /// <summary>
        /// Gets or Sets Headline
        /// </summary>
        [DataMember(Name="headline", EmitDefaultValue=false)]
        public TextComponent Headline { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public ImageComponent Image { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionHeadline
        /// </summary>
        [DataMember(Name="descriptionHeadline", EmitDefaultValue=false)]
        public TextComponent DescriptionHeadline { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionBlock1
        /// </summary>
        [DataMember(Name="descriptionBlock1", EmitDefaultValue=false)]
        public StandardTextBlock DescriptionBlock1 { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionBlock2
        /// </summary>
        [DataMember(Name="descriptionBlock2", EmitDefaultValue=false)]
        public StandardTextBlock DescriptionBlock2 { get; set; }

        /// <summary>
        /// Gets or Sets SpecificationHeadline
        /// </summary>
        [DataMember(Name="specificationHeadline", EmitDefaultValue=false)]
        public TextComponent SpecificationHeadline { get; set; }

        /// <summary>
        /// Gets or Sets SpecificationListBlock
        /// </summary>
        [DataMember(Name="specificationListBlock", EmitDefaultValue=false)]
        public StandardHeaderTextListBlock SpecificationListBlock { get; set; }

        /// <summary>
        /// Gets or Sets SpecificationTextBlock
        /// </summary>
        [DataMember(Name="specificationTextBlock", EmitDefaultValue=false)]
        public StandardTextBlock SpecificationTextBlock { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StandardSingleImageSpecsDetailModule {\n");
            sb.Append("  Headline: ").Append(Headline).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  DescriptionHeadline: ").Append(DescriptionHeadline).Append("\n");
            sb.Append("  DescriptionBlock1: ").Append(DescriptionBlock1).Append("\n");
            sb.Append("  DescriptionBlock2: ").Append(DescriptionBlock2).Append("\n");
            sb.Append("  SpecificationHeadline: ").Append(SpecificationHeadline).Append("\n");
            sb.Append("  SpecificationListBlock: ").Append(SpecificationListBlock).Append("\n");
            sb.Append("  SpecificationTextBlock: ").Append(SpecificationTextBlock).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StandardSingleImageSpecsDetailModule);
        }

        /// <summary>
        /// Returns true if StandardSingleImageSpecsDetailModule instances are equal
        /// </summary>
        /// <param name="input">Instance of StandardSingleImageSpecsDetailModule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StandardSingleImageSpecsDetailModule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Headline == input.Headline ||
                    (this.Headline != null &&
                    this.Headline.Equals(input.Headline))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.DescriptionHeadline == input.DescriptionHeadline ||
                    (this.DescriptionHeadline != null &&
                    this.DescriptionHeadline.Equals(input.DescriptionHeadline))
                ) && 
                (
                    this.DescriptionBlock1 == input.DescriptionBlock1 ||
                    (this.DescriptionBlock1 != null &&
                    this.DescriptionBlock1.Equals(input.DescriptionBlock1))
                ) && 
                (
                    this.DescriptionBlock2 == input.DescriptionBlock2 ||
                    (this.DescriptionBlock2 != null &&
                    this.DescriptionBlock2.Equals(input.DescriptionBlock2))
                ) && 
                (
                    this.SpecificationHeadline == input.SpecificationHeadline ||
                    (this.SpecificationHeadline != null &&
                    this.SpecificationHeadline.Equals(input.SpecificationHeadline))
                ) && 
                (
                    this.SpecificationListBlock == input.SpecificationListBlock ||
                    (this.SpecificationListBlock != null &&
                    this.SpecificationListBlock.Equals(input.SpecificationListBlock))
                ) && 
                (
                    this.SpecificationTextBlock == input.SpecificationTextBlock ||
                    (this.SpecificationTextBlock != null &&
                    this.SpecificationTextBlock.Equals(input.SpecificationTextBlock))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Headline != null)
                    hashCode = hashCode * 59 + this.Headline.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.DescriptionHeadline != null)
                    hashCode = hashCode * 59 + this.DescriptionHeadline.GetHashCode();
                if (this.DescriptionBlock1 != null)
                    hashCode = hashCode * 59 + this.DescriptionBlock1.GetHashCode();
                if (this.DescriptionBlock2 != null)
                    hashCode = hashCode * 59 + this.DescriptionBlock2.GetHashCode();
                if (this.SpecificationHeadline != null)
                    hashCode = hashCode * 59 + this.SpecificationHeadline.GetHashCode();
                if (this.SpecificationListBlock != null)
                    hashCode = hashCode * 59 + this.SpecificationListBlock.GetHashCode();
                if (this.SpecificationTextBlock != null)
                    hashCode = hashCode * 59 + this.SpecificationTextBlock.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
