/* 
 * Selling Partner API for A+ Content Management
 *
 * Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.AplusContent
{
    /// <summary>
    /// The standard company logo image.
    /// </summary>
    [DataContract]
    public partial class StandardCompanyLogoModule : IEquatable<StandardCompanyLogoModule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardCompanyLogoModule" /> class.
        /// </summary>
        [JsonConstructor]
        protected StandardCompanyLogoModule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardCompanyLogoModule" /> class.
        /// </summary>
        /// <param name="companyLogo">companyLogo (required).</param>
        public StandardCompanyLogoModule(ImageComponent companyLogo = default)
        {
            // to ensure "companyLogo" is required (not null)
            if (companyLogo == null)
            {
                throw new InvalidDataException("companyLogo is a required property for StandardCompanyLogoModule and cannot be null");
            }
            else
            {
                this.CompanyLogo = companyLogo;
            }
        }

        /// <summary>
        /// Gets or Sets CompanyLogo
        /// </summary>
        [DataMember(Name = "companyLogo", EmitDefaultValue = false)]
        public ImageComponent CompanyLogo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StandardCompanyLogoModule {\n");
            sb.Append("  CompanyLogo: ").Append(CompanyLogo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StandardCompanyLogoModule);
        }

        /// <summary>
        /// Returns true if StandardCompanyLogoModule instances are equal
        /// </summary>
        /// <param name="input">Instance of StandardCompanyLogoModule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StandardCompanyLogoModule input)
        {
            if (input == null)
                return false;

            return
                (
                    this.CompanyLogo == input.CompanyLogo ||
                    (this.CompanyLogo != null &&
                    this.CompanyLogo.Equals(input.CompanyLogo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompanyLogo != null)
                    hashCode = hashCode * 59 + this.CompanyLogo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
