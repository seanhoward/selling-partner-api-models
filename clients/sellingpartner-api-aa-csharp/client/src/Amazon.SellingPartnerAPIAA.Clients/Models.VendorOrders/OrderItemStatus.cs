/* 
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorOrders
{
    /// <summary>
    /// Represents the current status of an order item, including acknowledgement and receiving details.
    /// </summary>
    [DataContract]
    public partial class OrderItemStatus :  IEquatable<OrderItemStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItemStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderItemStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItemStatus" /> class.
        /// </summary>
        /// <param name="itemSequenceNumber">Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on. (required).</param>
        /// <param name="buyerProductIdentifier">Buyer&#39;s Standard Identification Number (ASIN) of an item..</param>
        /// <param name="vendorProductIdentifier">The vendor selected product identification of the item..</param>
        /// <param name="netCost">The net cost of an item per each or weight unit..</param>
        /// <param name="listPrice">The list price of an item per each or weight unit..</param>
        /// <param name="orderedQuantity">orderedQuantity.</param>
        /// <param name="acknowledgementStatus">acknowledgementStatus.</param>
        /// <param name="receivingStatus">receivingStatus.</param>
        public OrderItemStatus(string itemSequenceNumber = default(string), string buyerProductIdentifier = default(string), string vendorProductIdentifier = default(string), Money netCost = default(Money), Money listPrice = default(Money), OrderItemStatusOrderedQuantity orderedQuantity = default(OrderItemStatusOrderedQuantity), OrderItemStatusAcknowledgementStatus acknowledgementStatus = default(OrderItemStatusAcknowledgementStatus), OrderItemStatusReceivingStatus receivingStatus = default(OrderItemStatusReceivingStatus))
        {
            // to ensure "itemSequenceNumber" is required (not null)
            if (itemSequenceNumber == null)
            {
                throw new InvalidDataException("itemSequenceNumber is a required property for OrderItemStatus and cannot be null");
            }
            else
            {
                this.ItemSequenceNumber = itemSequenceNumber;
            }
            this.BuyerProductIdentifier = buyerProductIdentifier;
            this.VendorProductIdentifier = vendorProductIdentifier;
            this.NetCost = netCost;
            this.ListPrice = listPrice;
            this.OrderedQuantity = orderedQuantity;
            this.AcknowledgementStatus = acknowledgementStatus;
            this.ReceivingStatus = receivingStatus;
        }
        
        /// <summary>
        /// Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.
        /// </summary>
        /// <value>Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.</value>
        [DataMember(Name="itemSequenceNumber", EmitDefaultValue=false)]
        public string ItemSequenceNumber { get; set; }

        /// <summary>
        /// Buyer&#39;s Standard Identification Number (ASIN) of an item.
        /// </summary>
        /// <value>Buyer&#39;s Standard Identification Number (ASIN) of an item.</value>
        [DataMember(Name="buyerProductIdentifier", EmitDefaultValue=false)]
        public string BuyerProductIdentifier { get; set; }

        /// <summary>
        /// The vendor selected product identification of the item.
        /// </summary>
        /// <value>The vendor selected product identification of the item.</value>
        [DataMember(Name="vendorProductIdentifier", EmitDefaultValue=false)]
        public string VendorProductIdentifier { get; set; }

        /// <summary>
        /// The net cost of an item per each or weight unit.
        /// </summary>
        /// <value>The net cost of an item per each or weight unit.</value>
        [DataMember(Name="netCost", EmitDefaultValue=false)]
        public Money NetCost { get; set; }

        /// <summary>
        /// The list price of an item per each or weight unit.
        /// </summary>
        /// <value>The list price of an item per each or weight unit.</value>
        [DataMember(Name="listPrice", EmitDefaultValue=false)]
        public Money ListPrice { get; set; }

        /// <summary>
        /// Gets or Sets OrderedQuantity
        /// </summary>
        [DataMember(Name="orderedQuantity", EmitDefaultValue=false)]
        public OrderItemStatusOrderedQuantity OrderedQuantity { get; set; }

        /// <summary>
        /// Gets or Sets AcknowledgementStatus
        /// </summary>
        [DataMember(Name="acknowledgementStatus", EmitDefaultValue=false)]
        public OrderItemStatusAcknowledgementStatus AcknowledgementStatus { get; set; }

        /// <summary>
        /// Gets or Sets ReceivingStatus
        /// </summary>
        [DataMember(Name="receivingStatus", EmitDefaultValue=false)]
        public OrderItemStatusReceivingStatus ReceivingStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderItemStatus {\n");
            sb.Append("  ItemSequenceNumber: ").Append(ItemSequenceNumber).Append("\n");
            sb.Append("  BuyerProductIdentifier: ").Append(BuyerProductIdentifier).Append("\n");
            sb.Append("  VendorProductIdentifier: ").Append(VendorProductIdentifier).Append("\n");
            sb.Append("  NetCost: ").Append(NetCost).Append("\n");
            sb.Append("  ListPrice: ").Append(ListPrice).Append("\n");
            sb.Append("  OrderedQuantity: ").Append(OrderedQuantity).Append("\n");
            sb.Append("  AcknowledgementStatus: ").Append(AcknowledgementStatus).Append("\n");
            sb.Append("  ReceivingStatus: ").Append(ReceivingStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderItemStatus);
        }

        /// <summary>
        /// Returns true if OrderItemStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderItemStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderItemStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemSequenceNumber == input.ItemSequenceNumber ||
                    (this.ItemSequenceNumber != null &&
                    this.ItemSequenceNumber.Equals(input.ItemSequenceNumber))
                ) && 
                (
                    this.BuyerProductIdentifier == input.BuyerProductIdentifier ||
                    (this.BuyerProductIdentifier != null &&
                    this.BuyerProductIdentifier.Equals(input.BuyerProductIdentifier))
                ) && 
                (
                    this.VendorProductIdentifier == input.VendorProductIdentifier ||
                    (this.VendorProductIdentifier != null &&
                    this.VendorProductIdentifier.Equals(input.VendorProductIdentifier))
                ) && 
                (
                    this.NetCost == input.NetCost ||
                    (this.NetCost != null &&
                    this.NetCost.Equals(input.NetCost))
                ) && 
                (
                    this.ListPrice == input.ListPrice ||
                    (this.ListPrice != null &&
                    this.ListPrice.Equals(input.ListPrice))
                ) && 
                (
                    this.OrderedQuantity == input.OrderedQuantity ||
                    (this.OrderedQuantity != null &&
                    this.OrderedQuantity.Equals(input.OrderedQuantity))
                ) && 
                (
                    this.AcknowledgementStatus == input.AcknowledgementStatus ||
                    (this.AcknowledgementStatus != null &&
                    this.AcknowledgementStatus.Equals(input.AcknowledgementStatus))
                ) && 
                (
                    this.ReceivingStatus == input.ReceivingStatus ||
                    (this.ReceivingStatus != null &&
                    this.ReceivingStatus.Equals(input.ReceivingStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemSequenceNumber != null)
                    hashCode = hashCode * 59 + this.ItemSequenceNumber.GetHashCode();
                if (this.BuyerProductIdentifier != null)
                    hashCode = hashCode * 59 + this.BuyerProductIdentifier.GetHashCode();
                if (this.VendorProductIdentifier != null)
                    hashCode = hashCode * 59 + this.VendorProductIdentifier.GetHashCode();
                if (this.NetCost != null)
                    hashCode = hashCode * 59 + this.NetCost.GetHashCode();
                if (this.ListPrice != null)
                    hashCode = hashCode * 59 + this.ListPrice.GetHashCode();
                if (this.OrderedQuantity != null)
                    hashCode = hashCode * 59 + this.OrderedQuantity.GetHashCode();
                if (this.AcknowledgementStatus != null)
                    hashCode = hashCode * 59 + this.AcknowledgementStatus.GetHashCode();
                if (this.ReceivingStatus != null)
                    hashCode = hashCode * 59 + this.ReceivingStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
