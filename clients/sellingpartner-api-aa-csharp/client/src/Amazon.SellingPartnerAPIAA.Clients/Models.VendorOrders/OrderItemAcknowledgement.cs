/* 
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorOrders
{
    /// <summary>
    /// Represents the acknowledgement details for an individual order item, including the acknowledgement code, acknowledged quantity, scheduled ship and delivery dates, and rejection reason (if applicable).
    /// </summary>
    [DataContract]
    public partial class OrderItemAcknowledgement :  IEquatable<OrderItemAcknowledgement>, IValidatableObject
    {
        /// <summary>
        /// This indicates the acknowledgement code.
        /// </summary>
        /// <value>This indicates the acknowledgement code.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AcknowledgementCodeEnum
        {
            
            /// <summary>
            /// Enum Accepted for value: Accepted
            /// </summary>
            [EnumMember(Value = "Accepted")]
            Accepted = 1,
            
            /// <summary>
            /// Enum Backordered for value: Backordered
            /// </summary>
            [EnumMember(Value = "Backordered")]
            Backordered = 2,
            
            /// <summary>
            /// Enum Rejected for value: Rejected
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected = 3
        }

        /// <summary>
        /// This indicates the acknowledgement code.
        /// </summary>
        /// <value>This indicates the acknowledgement code.</value>
        [DataMember(Name="acknowledgementCode", EmitDefaultValue=false)]
        public AcknowledgementCodeEnum AcknowledgementCode { get; set; }
        /// <summary>
        /// Indicates the reason for rejection.
        /// </summary>
        /// <value>Indicates the reason for rejection.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RejectionReasonEnum
        {
            
            /// <summary>
            /// Enum TemporarilyUnavailable for value: TemporarilyUnavailable
            /// </summary>
            [EnumMember(Value = "TemporarilyUnavailable")]
            TemporarilyUnavailable = 1,
            
            /// <summary>
            /// Enum InvalidProductIdentifier for value: InvalidProductIdentifier
            /// </summary>
            [EnumMember(Value = "InvalidProductIdentifier")]
            InvalidProductIdentifier = 2,
            
            /// <summary>
            /// Enum ObsoleteProduct for value: ObsoleteProduct
            /// </summary>
            [EnumMember(Value = "ObsoleteProduct")]
            ObsoleteProduct = 3
        }

        /// <summary>
        /// Indicates the reason for rejection.
        /// </summary>
        /// <value>Indicates the reason for rejection.</value>
        [DataMember(Name="rejectionReason", EmitDefaultValue=false)]
        public RejectionReasonEnum? RejectionReason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItemAcknowledgement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderItemAcknowledgement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItemAcknowledgement" /> class.
        /// </summary>
        /// <param name="acknowledgementCode">This indicates the acknowledgement code. (required).</param>
        /// <param name="acknowledgedQuantity">Details of quantity acknowledged with the above acknowledgement code. (required).</param>
        /// <param name="scheduledShipDate">Estimated ship date per line item. Must be in ISO-8601 date/time format..</param>
        /// <param name="scheduledDeliveryDate">Estimated delivery date per line item. Must be in ISO-8601 date/time format..</param>
        /// <param name="rejectionReason">Indicates the reason for rejection..</param>
        public OrderItemAcknowledgement(AcknowledgementCodeEnum acknowledgementCode = default(AcknowledgementCodeEnum), ItemQuantity acknowledgedQuantity = default(ItemQuantity), DateTime? scheduledShipDate = default(DateTime?), DateTime? scheduledDeliveryDate = default(DateTime?), RejectionReasonEnum? rejectionReason = default(RejectionReasonEnum?))
        {
            // to ensure "acknowledgementCode" is required (not null)
            if (acknowledgementCode == null)
            {
                throw new InvalidDataException("acknowledgementCode is a required property for OrderItemAcknowledgement and cannot be null");
            }
            else
            {
                this.AcknowledgementCode = acknowledgementCode;
            }
            // to ensure "acknowledgedQuantity" is required (not null)
            if (acknowledgedQuantity == null)
            {
                throw new InvalidDataException("acknowledgedQuantity is a required property for OrderItemAcknowledgement and cannot be null");
            }
            else
            {
                this.AcknowledgedQuantity = acknowledgedQuantity;
            }
            this.ScheduledShipDate = scheduledShipDate;
            this.ScheduledDeliveryDate = scheduledDeliveryDate;
            this.RejectionReason = rejectionReason;
        }
        

        /// <summary>
        /// Details of quantity acknowledged with the above acknowledgement code.
        /// </summary>
        /// <value>Details of quantity acknowledged with the above acknowledgement code.</value>
        [DataMember(Name="acknowledgedQuantity", EmitDefaultValue=false)]
        public ItemQuantity AcknowledgedQuantity { get; set; }

        /// <summary>
        /// Estimated ship date per line item. Must be in ISO-8601 date/time format.
        /// </summary>
        /// <value>Estimated ship date per line item. Must be in ISO-8601 date/time format.</value>
        [DataMember(Name="scheduledShipDate", EmitDefaultValue=false)]
        public DateTime? ScheduledShipDate { get; set; }

        /// <summary>
        /// Estimated delivery date per line item. Must be in ISO-8601 date/time format.
        /// </summary>
        /// <value>Estimated delivery date per line item. Must be in ISO-8601 date/time format.</value>
        [DataMember(Name="scheduledDeliveryDate", EmitDefaultValue=false)]
        public DateTime? ScheduledDeliveryDate { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderItemAcknowledgement {\n");
            sb.Append("  AcknowledgementCode: ").Append(AcknowledgementCode).Append("\n");
            sb.Append("  AcknowledgedQuantity: ").Append(AcknowledgedQuantity).Append("\n");
            sb.Append("  ScheduledShipDate: ").Append(ScheduledShipDate).Append("\n");
            sb.Append("  ScheduledDeliveryDate: ").Append(ScheduledDeliveryDate).Append("\n");
            sb.Append("  RejectionReason: ").Append(RejectionReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderItemAcknowledgement);
        }

        /// <summary>
        /// Returns true if OrderItemAcknowledgement instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderItemAcknowledgement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderItemAcknowledgement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcknowledgementCode == input.AcknowledgementCode ||
                    (this.AcknowledgementCode != null &&
                    this.AcknowledgementCode.Equals(input.AcknowledgementCode))
                ) && 
                (
                    this.AcknowledgedQuantity == input.AcknowledgedQuantity ||
                    (this.AcknowledgedQuantity != null &&
                    this.AcknowledgedQuantity.Equals(input.AcknowledgedQuantity))
                ) && 
                (
                    this.ScheduledShipDate == input.ScheduledShipDate ||
                    (this.ScheduledShipDate != null &&
                    this.ScheduledShipDate.Equals(input.ScheduledShipDate))
                ) && 
                (
                    this.ScheduledDeliveryDate == input.ScheduledDeliveryDate ||
                    (this.ScheduledDeliveryDate != null &&
                    this.ScheduledDeliveryDate.Equals(input.ScheduledDeliveryDate))
                ) && 
                (
                    this.RejectionReason == input.RejectionReason ||
                    (this.RejectionReason != null &&
                    this.RejectionReason.Equals(input.RejectionReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcknowledgementCode != null)
                    hashCode = hashCode * 59 + this.AcknowledgementCode.GetHashCode();
                if (this.AcknowledgedQuantity != null)
                    hashCode = hashCode * 59 + this.AcknowledgedQuantity.GetHashCode();
                if (this.ScheduledShipDate != null)
                    hashCode = hashCode * 59 + this.ScheduledShipDate.GetHashCode();
                if (this.ScheduledDeliveryDate != null)
                    hashCode = hashCode * 59 + this.ScheduledDeliveryDate.GetHashCode();
                if (this.RejectionReason != null)
                    hashCode = hashCode * 59 + this.RejectionReason.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
