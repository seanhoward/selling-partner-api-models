/* 
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorOrders
{
    /// <summary>
    /// Import details for an import order.
    /// </summary>
    [DataContract]
    public partial class ImportDetails :  IEquatable<ImportDetails>, IValidatableObject
    {
        /// <summary>
        /// If the recipient requests, contains the shipment method of payment. This is for import PO&#39;s only.
        /// </summary>
        /// <value>If the recipient requests, contains the shipment method of payment. This is for import PO&#39;s only.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodOfPaymentEnum
        {
            
            /// <summary>
            /// Enum PaidByBuyer for value: PaidByBuyer
            /// </summary>
            [EnumMember(Value = "PaidByBuyer")]
            PaidByBuyer = 1,
            
            /// <summary>
            /// Enum CollectOnDelivery for value: CollectOnDelivery
            /// </summary>
            [EnumMember(Value = "CollectOnDelivery")]
            CollectOnDelivery = 2,
            
            /// <summary>
            /// Enum DefinedByBuyerAndSeller for value: DefinedByBuyerAndSeller
            /// </summary>
            [EnumMember(Value = "DefinedByBuyerAndSeller")]
            DefinedByBuyerAndSeller = 3,
            
            /// <summary>
            /// Enum FOBPortOfCall for value: FOBPortOfCall
            /// </summary>
            [EnumMember(Value = "FOBPortOfCall")]
            FOBPortOfCall = 4,
            
            /// <summary>
            /// Enum PrepaidBySeller for value: PrepaidBySeller
            /// </summary>
            [EnumMember(Value = "PrepaidBySeller")]
            PrepaidBySeller = 5,
            
            /// <summary>
            /// Enum PaidBySeller for value: PaidBySeller
            /// </summary>
            [EnumMember(Value = "PaidBySeller")]
            PaidBySeller = 6
        }

        /// <summary>
        /// If the recipient requests, contains the shipment method of payment. This is for import PO&#39;s only.
        /// </summary>
        /// <value>If the recipient requests, contains the shipment method of payment. This is for import PO&#39;s only.</value>
        [DataMember(Name="methodOfPayment", EmitDefaultValue=false)]
        public MethodOfPaymentEnum? MethodOfPayment { get; set; }
        /// <summary>
        /// Incoterms (International Commercial Terms) are used to divide transaction costs and responsibilities between buyer and seller and reflect state-of-the-art transportation practices. This is for import purchase orders only. 
        /// </summary>
        /// <value>Incoterms (International Commercial Terms) are used to divide transaction costs and responsibilities between buyer and seller and reflect state-of-the-art transportation practices. This is for import purchase orders only. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InternationalCommercialTermsEnum
        {
            
            /// <summary>
            /// Enum ExWorks for value: ExWorks
            /// </summary>
            [EnumMember(Value = "ExWorks")]
            ExWorks = 1,
            
            /// <summary>
            /// Enum FreeCarrier for value: FreeCarrier
            /// </summary>
            [EnumMember(Value = "FreeCarrier")]
            FreeCarrier = 2,
            
            /// <summary>
            /// Enum FreeOnBoard for value: FreeOnBoard
            /// </summary>
            [EnumMember(Value = "FreeOnBoard")]
            FreeOnBoard = 3,
            
            /// <summary>
            /// Enum FreeAlongSideShip for value: FreeAlongSideShip
            /// </summary>
            [EnumMember(Value = "FreeAlongSideShip")]
            FreeAlongSideShip = 4,
            
            /// <summary>
            /// Enum CarriagePaidTo for value: CarriagePaidTo
            /// </summary>
            [EnumMember(Value = "CarriagePaidTo")]
            CarriagePaidTo = 5,
            
            /// <summary>
            /// Enum CostAndFreight for value: CostAndFreight
            /// </summary>
            [EnumMember(Value = "CostAndFreight")]
            CostAndFreight = 6,
            
            /// <summary>
            /// Enum CarriageAndInsurancePaidTo for value: CarriageAndInsurancePaidTo
            /// </summary>
            [EnumMember(Value = "CarriageAndInsurancePaidTo")]
            CarriageAndInsurancePaidTo = 7,
            
            /// <summary>
            /// Enum CostInsuranceAndFreight for value: CostInsuranceAndFreight
            /// </summary>
            [EnumMember(Value = "CostInsuranceAndFreight")]
            CostInsuranceAndFreight = 8,
            
            /// <summary>
            /// Enum DeliveredAtTerminal for value: DeliveredAtTerminal
            /// </summary>
            [EnumMember(Value = "DeliveredAtTerminal")]
            DeliveredAtTerminal = 9,
            
            /// <summary>
            /// Enum DeliveredAtPlace for value: DeliveredAtPlace
            /// </summary>
            [EnumMember(Value = "DeliveredAtPlace")]
            DeliveredAtPlace = 10,
            
            /// <summary>
            /// Enum DeliverDutyPaid for value: DeliverDutyPaid
            /// </summary>
            [EnumMember(Value = "DeliverDutyPaid")]
            DeliverDutyPaid = 11
        }

        /// <summary>
        /// Incoterms (International Commercial Terms) are used to divide transaction costs and responsibilities between buyer and seller and reflect state-of-the-art transportation practices. This is for import purchase orders only. 
        /// </summary>
        /// <value>Incoterms (International Commercial Terms) are used to divide transaction costs and responsibilities between buyer and seller and reflect state-of-the-art transportation practices. This is for import purchase orders only. </value>
        [DataMember(Name="internationalCommercialTerms", EmitDefaultValue=false)]
        public InternationalCommercialTermsEnum? InternationalCommercialTerms { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportDetails" /> class.
        /// </summary>
        /// <param name="methodOfPayment">If the recipient requests, contains the shipment method of payment. This is for import PO&#39;s only..</param>
        /// <param name="internationalCommercialTerms">Incoterms (International Commercial Terms) are used to divide transaction costs and responsibilities between buyer and seller and reflect state-of-the-art transportation practices. This is for import purchase orders only. .</param>
        /// <param name="portOfDelivery">The port where goods on an import purchase order must be delivered by the vendor. This should only be specified when the internationalCommercialTerms is FOB..</param>
        /// <param name="importContainers">Types and numbers of container(s) for import purchase orders. Can be a comma-separated list if the shipment has multiple containers. HC signifies a high-capacity container. Free-text field, limited to 64 characters. The format will be a comma-delimited list containing values of the type: $NUMBER_OF_CONTAINERS_OF_THIS_TYPE-$CONTAINER_TYPE. The list of values for the container type is: 40&#39;(40-foot container), 40&#39;HC (40-foot high-capacity container), 45&#39;, 45&#39;HC, 30&#39;, 30&#39;HC, 20&#39;, 20&#39;HC..</param>
        /// <param name="shippingInstructions">Special instructions regarding the shipment. This field is for import purchase orders..</param>
        public ImportDetails(MethodOfPaymentEnum? methodOfPayment = default, InternationalCommercialTermsEnum? internationalCommercialTerms = default, string portOfDelivery = default, string importContainers = default, string shippingInstructions = default)
        {
            this.MethodOfPayment = methodOfPayment;
            this.InternationalCommercialTerms = internationalCommercialTerms;
            this.PortOfDelivery = portOfDelivery;
            this.ImportContainers = importContainers;
            this.ShippingInstructions = shippingInstructions;
        }
        


        /// <summary>
        /// The port where goods on an import purchase order must be delivered by the vendor. This should only be specified when the internationalCommercialTerms is FOB.
        /// </summary>
        /// <value>The port where goods on an import purchase order must be delivered by the vendor. This should only be specified when the internationalCommercialTerms is FOB.</value>
        [DataMember(Name="portOfDelivery", EmitDefaultValue=false)]
        public string PortOfDelivery { get; set; }

        /// <summary>
        /// Types and numbers of container(s) for import purchase orders. Can be a comma-separated list if the shipment has multiple containers. HC signifies a high-capacity container. Free-text field, limited to 64 characters. The format will be a comma-delimited list containing values of the type: $NUMBER_OF_CONTAINERS_OF_THIS_TYPE-$CONTAINER_TYPE. The list of values for the container type is: 40&#39;(40-foot container), 40&#39;HC (40-foot high-capacity container), 45&#39;, 45&#39;HC, 30&#39;, 30&#39;HC, 20&#39;, 20&#39;HC.
        /// </summary>
        /// <value>Types and numbers of container(s) for import purchase orders. Can be a comma-separated list if the shipment has multiple containers. HC signifies a high-capacity container. Free-text field, limited to 64 characters. The format will be a comma-delimited list containing values of the type: $NUMBER_OF_CONTAINERS_OF_THIS_TYPE-$CONTAINER_TYPE. The list of values for the container type is: 40&#39;(40-foot container), 40&#39;HC (40-foot high-capacity container), 45&#39;, 45&#39;HC, 30&#39;, 30&#39;HC, 20&#39;, 20&#39;HC.</value>
        [DataMember(Name="importContainers", EmitDefaultValue=false)]
        public string ImportContainers { get; set; }

        /// <summary>
        /// Special instructions regarding the shipment. This field is for import purchase orders.
        /// </summary>
        /// <value>Special instructions regarding the shipment. This field is for import purchase orders.</value>
        [DataMember(Name="shippingInstructions", EmitDefaultValue=false)]
        public string ShippingInstructions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportDetails {\n");
            sb.Append("  MethodOfPayment: ").Append(MethodOfPayment).Append("\n");
            sb.Append("  InternationalCommercialTerms: ").Append(InternationalCommercialTerms).Append("\n");
            sb.Append("  PortOfDelivery: ").Append(PortOfDelivery).Append("\n");
            sb.Append("  ImportContainers: ").Append(ImportContainers).Append("\n");
            sb.Append("  ShippingInstructions: ").Append(ShippingInstructions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportDetails);
        }

        /// <summary>
        /// Returns true if ImportDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MethodOfPayment == input.MethodOfPayment ||
                    (this.MethodOfPayment != null &&
                    this.MethodOfPayment.Equals(input.MethodOfPayment))
                ) && 
                (
                    this.InternationalCommercialTerms == input.InternationalCommercialTerms ||
                    (this.InternationalCommercialTerms != null &&
                    this.InternationalCommercialTerms.Equals(input.InternationalCommercialTerms))
                ) && 
                (
                    this.PortOfDelivery == input.PortOfDelivery ||
                    (this.PortOfDelivery != null &&
                    this.PortOfDelivery.Equals(input.PortOfDelivery))
                ) && 
                (
                    this.ImportContainers == input.ImportContainers ||
                    (this.ImportContainers != null &&
                    this.ImportContainers.Equals(input.ImportContainers))
                ) && 
                (
                    this.ShippingInstructions == input.ShippingInstructions ||
                    (this.ShippingInstructions != null &&
                    this.ShippingInstructions.Equals(input.ShippingInstructions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MethodOfPayment != null)
                    hashCode = hashCode * 59 + this.MethodOfPayment.GetHashCode();
                if (this.InternationalCommercialTerms != null)
                    hashCode = hashCode * 59 + this.InternationalCommercialTerms.GetHashCode();
                if (this.PortOfDelivery != null)
                    hashCode = hashCode * 59 + this.PortOfDelivery.GetHashCode();
                if (this.ImportContainers != null)
                    hashCode = hashCode * 59 + this.ImportContainers.GetHashCode();
                if (this.ShippingInstructions != null)
                    hashCode = hashCode * 59 + this.ShippingInstructions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PortOfDelivery (string) maxLength
            if(this.PortOfDelivery != null && this.PortOfDelivery.Length > 64)
            {
                yield return new ValidationResult("Invalid value for PortOfDelivery, length must be less than 64.", new [] { "PortOfDelivery" });
            }

            // ImportContainers (string) maxLength
            if(this.ImportContainers != null && this.ImportContainers.Length > 64)
            {
                yield return new ValidationResult("Invalid value for ImportContainers, length must be less than 64.", new [] { "ImportContainers" });
            }

            yield break;
        }
    }

}
