/* 
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorOrders
{
    /// <summary>
    /// Represents an acknowledgement for an order, including the purchase order number, selling party details, acknowledgement date, and a list of acknowledged items.
    /// </summary>
    [DataContract]
    public partial class OrderAcknowledgement :  IEquatable<OrderAcknowledgement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderAcknowledgement" /> class.
        /// </summary>
        [JsonConstructor]
        protected OrderAcknowledgement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderAcknowledgement" /> class.
        /// </summary>
        /// <param name="purchaseOrderNumber">The purchase order number. Formatting Notes: 8-character alpha-numeric code. (required).</param>
        /// <param name="sellingParty">Name, address and tax details of the party receiving a shipment of products. (required).</param>
        /// <param name="acknowledgementDate">The date and time when the purchase order is acknowledged, in ISO-8601 date/time format. (required).</param>
        /// <param name="items">A list of the items being acknowledged with associated details. (required).</param>
        public OrderAcknowledgement(string purchaseOrderNumber = default, PartyIdentification sellingParty = default, DateTime? acknowledgementDate = default, List<OrderAcknowledgementItem> items = default)
        {
            // to ensure "purchaseOrderNumber" is required (not null)
            if (purchaseOrderNumber == null)
            {
                throw new InvalidDataException("purchaseOrderNumber is a required property for OrderAcknowledgement and cannot be null");
            }
            else
            {
                this.PurchaseOrderNumber = purchaseOrderNumber;
            }
            // to ensure "sellingParty" is required (not null)
            if (sellingParty == null)
            {
                throw new InvalidDataException("sellingParty is a required property for OrderAcknowledgement and cannot be null");
            }
            else
            {
                this.SellingParty = sellingParty;
            }
            // to ensure "acknowledgementDate" is required (not null)
            if (acknowledgementDate == null)
            {
                throw new InvalidDataException("acknowledgementDate is a required property for OrderAcknowledgement and cannot be null");
            }
            else
            {
                this.AcknowledgementDate = acknowledgementDate;
            }
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new InvalidDataException("items is a required property for OrderAcknowledgement and cannot be null");
            }
            else
            {
                this.Items = items;
            }
        }
        
        /// <summary>
        /// The purchase order number. Formatting Notes: 8-character alpha-numeric code.
        /// </summary>
        /// <value>The purchase order number. Formatting Notes: 8-character alpha-numeric code.</value>
        [DataMember(Name="purchaseOrderNumber", EmitDefaultValue=false)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Name, address and tax details of the party receiving a shipment of products.
        /// </summary>
        /// <value>Name, address and tax details of the party receiving a shipment of products.</value>
        [DataMember(Name="sellingParty", EmitDefaultValue=false)]
        public PartyIdentification SellingParty { get; set; }

        /// <summary>
        /// The date and time when the purchase order is acknowledged, in ISO-8601 date/time format.
        /// </summary>
        /// <value>The date and time when the purchase order is acknowledged, in ISO-8601 date/time format.</value>
        [DataMember(Name="acknowledgementDate", EmitDefaultValue=false)]
        public DateTime? AcknowledgementDate { get; set; }

        /// <summary>
        /// A list of the items being acknowledged with associated details.
        /// </summary>
        /// <value>A list of the items being acknowledged with associated details.</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<OrderAcknowledgementItem> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderAcknowledgement {\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  SellingParty: ").Append(SellingParty).Append("\n");
            sb.Append("  AcknowledgementDate: ").Append(AcknowledgementDate).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderAcknowledgement);
        }

        /// <summary>
        /// Returns true if OrderAcknowledgement instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderAcknowledgement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderAcknowledgement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PurchaseOrderNumber == input.PurchaseOrderNumber ||
                    (this.PurchaseOrderNumber != null &&
                    this.PurchaseOrderNumber.Equals(input.PurchaseOrderNumber))
                ) && 
                (
                    this.SellingParty == input.SellingParty ||
                    (this.SellingParty != null &&
                    this.SellingParty.Equals(input.SellingParty))
                ) && 
                (
                    this.AcknowledgementDate == input.AcknowledgementDate ||
                    (this.AcknowledgementDate != null &&
                    this.AcknowledgementDate.Equals(input.AcknowledgementDate))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderNumber.GetHashCode();
                if (this.SellingParty != null)
                    hashCode = hashCode * 59 + this.SellingParty.GetHashCode();
                if (this.AcknowledgementDate != null)
                    hashCode = hashCode * 59 + this.AcknowledgementDate.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
