/* 
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorOrders
{
    /// <summary>
    /// Current status of a purchase order.
    /// </summary>
    [DataContract]
    public partial class OrderStatus : IEquatable<OrderStatus>, IValidatableObject
    {
        /// <summary>
        /// The status of the buyer&#39;s purchase order for this order.
        /// </summary>
        /// <value>The status of the buyer&#39;s purchase order for this order.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PurchaseOrderStatusEnum
        {

            /// <summary>
            /// Enum OPEN for value: OPEN
            /// </summary>
            [EnumMember(Value = "OPEN")]
            OPEN = 1,

            /// <summary>
            /// Enum CLOSED for value: CLOSED
            /// </summary>
            [EnumMember(Value = "CLOSED")]
            CLOSED = 2
        }

        /// <summary>
        /// The status of the buyer&#39;s purchase order for this order.
        /// </summary>
        /// <value>The status of the buyer&#39;s purchase order for this order.</value>
        [DataMember(Name = "purchaseOrderStatus", EmitDefaultValue = false)]
        public PurchaseOrderStatusEnum PurchaseOrderStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderStatus" /> class.
        /// </summary>
        [JsonConstructor]
        protected OrderStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderStatus" /> class.
        /// </summary>
        /// <param name="purchaseOrderNumber">The buyer&#39;s purchase order number for this order. Formatting Notes: 8-character alpha-numeric code. (required).</param>
        /// <param name="purchaseOrderStatus">The status of the buyer&#39;s purchase order for this order. (required).</param>
        /// <param name="purchaseOrderDate">The date the purchase order was placed. Must be in ISO-8601 date/time format. (required).</param>
        /// <param name="lastUpdatedDate">The date when the purchase order was last updated. Must be in ISO-8601 date/time format..</param>
        /// <param name="sellingParty">Name/Address and tax details of the selling party. (required).</param>
        /// <param name="shipToParty">Name/Address and tax details of the ship to party. Find a list of fulfillment center addresses for a region on the [Resources page of Amazon Vendor Central](https://vendorcentral.amazon.com/hz/vendor/members/support/help/node/GPZ88XH8HQM97ZV6). (required).</param>
        /// <param name="itemStatus">Detailed order status. (required).</param>
        public OrderStatus(string purchaseOrderNumber = default, PurchaseOrderStatusEnum purchaseOrderStatus = default, DateTime? purchaseOrderDate = default, DateTime? lastUpdatedDate = default, PartyIdentification sellingParty = default, PartyIdentification shipToParty = default, ItemStatus itemStatus = default)
        {
            // to ensure "purchaseOrderNumber" is required (not null)
            if (purchaseOrderNumber == null)
            {
                throw new InvalidDataException("purchaseOrderNumber is a required property for OrderStatus and cannot be null");
            }
            else
            {
                this.PurchaseOrderNumber = purchaseOrderNumber;
            }
            // to ensure "purchaseOrderStatus" is required (not null)
            if (purchaseOrderStatus == null)
            {
                throw new InvalidDataException("purchaseOrderStatus is a required property for OrderStatus and cannot be null");
            }
            else
            {
                this.PurchaseOrderStatus = purchaseOrderStatus;
            }
            // to ensure "purchaseOrderDate" is required (not null)
            if (purchaseOrderDate == null)
            {
                throw new InvalidDataException("purchaseOrderDate is a required property for OrderStatus and cannot be null");
            }
            else
            {
                this.PurchaseOrderDate = purchaseOrderDate;
            }
            // to ensure "sellingParty" is required (not null)
            if (sellingParty == null)
            {
                throw new InvalidDataException("sellingParty is a required property for OrderStatus and cannot be null");
            }
            else
            {
                this.SellingParty = sellingParty;
            }
            // to ensure "shipToParty" is required (not null)
            if (shipToParty == null)
            {
                throw new InvalidDataException("shipToParty is a required property for OrderStatus and cannot be null");
            }
            else
            {
                this.ShipToParty = shipToParty;
            }
            // to ensure "itemStatus" is required (not null)
            if (itemStatus == null)
            {
                throw new InvalidDataException("itemStatus is a required property for OrderStatus and cannot be null");
            }
            else
            {
                this.ItemStatus = itemStatus;
            }
            this.LastUpdatedDate = lastUpdatedDate;
        }

        /// <summary>
        /// The buyer&#39;s purchase order number for this order. Formatting Notes: 8-character alpha-numeric code.
        /// </summary>
        /// <value>The buyer&#39;s purchase order number for this order. Formatting Notes: 8-character alpha-numeric code.</value>
        [DataMember(Name = "purchaseOrderNumber", EmitDefaultValue = false)]
        public string PurchaseOrderNumber { get; set; }


        /// <summary>
        /// The date the purchase order was placed. Must be in ISO-8601 date/time format.
        /// </summary>
        /// <value>The date the purchase order was placed. Must be in ISO-8601 date/time format.</value>
        [DataMember(Name = "purchaseOrderDate", EmitDefaultValue = false)]
        public DateTime? PurchaseOrderDate { get; set; }

        /// <summary>
        /// The date when the purchase order was last updated. Must be in ISO-8601 date/time format.
        /// </summary>
        /// <value>The date when the purchase order was last updated. Must be in ISO-8601 date/time format.</value>
        [DataMember(Name = "lastUpdatedDate", EmitDefaultValue = false)]
        public DateTime? LastUpdatedDate { get; set; }

        /// <summary>
        /// Name/Address and tax details of the selling party.
        /// </summary>
        /// <value>Name/Address and tax details of the selling party.</value>
        [DataMember(Name = "sellingParty", EmitDefaultValue = false)]
        public PartyIdentification SellingParty { get; set; }

        /// <summary>
        /// Name/Address and tax details of the ship to party. Find a list of fulfillment center addresses for a region on the [Resources page of Amazon Vendor Central](https://vendorcentral.amazon.com/hz/vendor/members/support/help/node/GPZ88XH8HQM97ZV6).
        /// </summary>
        /// <value>Name/Address and tax details of the ship to party. Find a list of fulfillment center addresses for a region on the [Resources page of Amazon Vendor Central](https://vendorcentral.amazon.com/hz/vendor/members/support/help/node/GPZ88XH8HQM97ZV6).</value>
        [DataMember(Name = "shipToParty", EmitDefaultValue = false)]
        public PartyIdentification ShipToParty { get; set; }

        /// <summary>
        /// Detailed order status.
        /// </summary>
        /// <value>Detailed order status.</value>
        [DataMember(Name = "itemStatus", EmitDefaultValue = false)]
        public ItemStatus ItemStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderStatus {\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  PurchaseOrderStatus: ").Append(PurchaseOrderStatus).Append("\n");
            sb.Append("  PurchaseOrderDate: ").Append(PurchaseOrderDate).Append("\n");
            sb.Append("  LastUpdatedDate: ").Append(LastUpdatedDate).Append("\n");
            sb.Append("  SellingParty: ").Append(SellingParty).Append("\n");
            sb.Append("  ShipToParty: ").Append(ShipToParty).Append("\n");
            sb.Append("  ItemStatus: ").Append(ItemStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderStatus);
        }

        /// <summary>
        /// Returns true if OrderStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderStatus input)
        {
            if (input == null)
                return false;

            return
                (
                    this.PurchaseOrderNumber == input.PurchaseOrderNumber ||
                    (this.PurchaseOrderNumber != null &&
                    this.PurchaseOrderNumber.Equals(input.PurchaseOrderNumber))
                ) &&
                (
                    this.PurchaseOrderStatus == input.PurchaseOrderStatus ||
                    (this.PurchaseOrderStatus != null &&
                    this.PurchaseOrderStatus.Equals(input.PurchaseOrderStatus))
                ) &&
                (
                    this.PurchaseOrderDate == input.PurchaseOrderDate ||
                    (this.PurchaseOrderDate != null &&
                    this.PurchaseOrderDate.Equals(input.PurchaseOrderDate))
                ) &&
                (
                    this.LastUpdatedDate == input.LastUpdatedDate ||
                    (this.LastUpdatedDate != null &&
                    this.LastUpdatedDate.Equals(input.LastUpdatedDate))
                ) &&
                (
                    this.SellingParty == input.SellingParty ||
                    (this.SellingParty != null &&
                    this.SellingParty.Equals(input.SellingParty))
                ) &&
                (
                    this.ShipToParty == input.ShipToParty ||
                    (this.ShipToParty != null &&
                    this.ShipToParty.Equals(input.ShipToParty))
                ) &&
                (
                    this.ItemStatus == input.ItemStatus ||
                    (this.ItemStatus != null &&
                    this.ItemStatus.Equals(input.ItemStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderNumber.GetHashCode();
                if (this.PurchaseOrderStatus != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderStatus.GetHashCode();
                if (this.PurchaseOrderDate != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderDate.GetHashCode();
                if (this.LastUpdatedDate != null)
                    hashCode = hashCode * 59 + this.LastUpdatedDate.GetHashCode();
                if (this.SellingParty != null)
                    hashCode = hashCode * 59 + this.SellingParty.GetHashCode();
                if (this.ShipToParty != null)
                    hashCode = hashCode * 59 + this.ShipToParty.GetHashCode();
                if (this.ItemStatus != null)
                    hashCode = hashCode * 59 + this.ItemStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
