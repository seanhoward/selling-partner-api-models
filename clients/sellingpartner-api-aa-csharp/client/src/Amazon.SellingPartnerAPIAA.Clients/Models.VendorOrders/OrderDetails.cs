/* 
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.VendorOrders
{
    /// <summary>
    /// Details of an order.
    /// </summary>
    [DataContract]
    public partial class OrderDetails :  IEquatable<OrderDetails>, IValidatableObject
    {
        /// <summary>
        /// Type of purchase order.
        /// </summary>
        /// <value>Type of purchase order.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PurchaseOrderTypeEnum
        {
            
            /// <summary>
            /// Enum RegularOrder for value: RegularOrder
            /// </summary>
            [EnumMember(Value = "RegularOrder")]
            RegularOrder = 1,
            
            /// <summary>
            /// Enum ConsignedOrder for value: ConsignedOrder
            /// </summary>
            [EnumMember(Value = "ConsignedOrder")]
            ConsignedOrder = 2,
            
            /// <summary>
            /// Enum NewProductIntroduction for value: NewProductIntroduction
            /// </summary>
            [EnumMember(Value = "NewProductIntroduction")]
            NewProductIntroduction = 3,
            
            /// <summary>
            /// Enum RushOrder for value: RushOrder
            /// </summary>
            [EnumMember(Value = "RushOrder")]
            RushOrder = 4
        }

        /// <summary>
        /// Type of purchase order.
        /// </summary>
        /// <value>Type of purchase order.</value>
        [DataMember(Name="purchaseOrderType", EmitDefaultValue=false)]
        public PurchaseOrderTypeEnum? PurchaseOrderType { get; set; }
        /// <summary>
        /// Payment method used.
        /// </summary>
        /// <value>Payment method used.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentMethodEnum
        {
            
            /// <summary>
            /// Enum Invoice for value: Invoice
            /// </summary>
            [EnumMember(Value = "Invoice")]
            Invoice = 1,
            
            /// <summary>
            /// Enum Consignment for value: Consignment
            /// </summary>
            [EnumMember(Value = "Consignment")]
            Consignment = 2,
            
            /// <summary>
            /// Enum CreditCard for value: CreditCard
            /// </summary>
            [EnumMember(Value = "CreditCard")]
            CreditCard = 3,
            
            /// <summary>
            /// Enum Prepaid for value: Prepaid
            /// </summary>
            [EnumMember(Value = "Prepaid")]
            Prepaid = 4
        }

        /// <summary>
        /// Payment method used.
        /// </summary>
        /// <value>Payment method used.</value>
        [DataMember(Name="paymentMethod", EmitDefaultValue=false)]
        public PaymentMethodEnum? PaymentMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDetails" /> class.
        /// </summary>
        /// <param name="purchaseOrderDate">The date the purchase order was placed. Must be in ISO-8601 date/time format. (required).</param>
        /// <param name="purchaseOrderChangedDate">The date when purchase order was last changed by Amazon after the order was placed. This date will be greater than &#39;purchaseOrderDate&#39;. This means the PO data was changed on that date and vendors are required to fulfill the  updated PO. The PO changes can be related to Item Quantity, Ship to Location, Ship Window etc. This field will not be present in orders that have not changed after creation. Must be in ISO-8601 date/time format..</param>
        /// <param name="purchaseOrderStateChangedDate">The date when current purchase order state was changed. Current purchase order state is available in the field &#39;purchaseOrderState&#39;. Must be in ISO-8601 date/time format. (required).</param>
        /// <param name="purchaseOrderType">Type of purchase order..</param>
        /// <param name="importDetails">If the purchase order is an import order, the details for the import order..</param>
        /// <param name="dealCode">If requested by the recipient, this field will contain a promotional/deal number. The discount code line is optional. It is used to obtain a price discount on items on the order..</param>
        /// <param name="paymentMethod">Payment method used..</param>
        /// <param name="buyingParty">Name/Address and tax details of the buying party..</param>
        /// <param name="sellingParty">Name/Address and tax details of the selling party..</param>
        /// <param name="shipToParty">Name/Address and tax details of the ship to party. Find a list of fulfillment center addresses for a region on the [Resources page of Amazon Vendor Central](https://vendorcentral.amazon.com/hz/vendor/members/support/help/node/GPZ88XH8HQM97ZV6)..</param>
        /// <param name="billToParty">Name/Address and tax details of the bill to party..</param>
        /// <param name="shipWindow">This indicates the ship window. Format is start and end date separated by double hyphen (- -). For example, 2007-03-01T13:00:00Z- -2007-03-11T15:30:00Z..</param>
        /// <param name="deliveryWindow">This indicates the delivery window. Format is start and end date separated by double hyphen (- -). For example, 2007-03-01T13:00:00Z- -2007-03-11T15:30:00Z..</param>
        /// <param name="items">A list of items in this purchase order. (required).</param>
        public OrderDetails(DateTime? purchaseOrderDate = default(DateTime?), DateTime? purchaseOrderChangedDate = default(DateTime?), DateTime? purchaseOrderStateChangedDate = default(DateTime?), PurchaseOrderTypeEnum? purchaseOrderType = default(PurchaseOrderTypeEnum?), ImportDetails importDetails = default(ImportDetails), string dealCode = default(string), PaymentMethodEnum? paymentMethod = default(PaymentMethodEnum?), PartyIdentification buyingParty = default(PartyIdentification), PartyIdentification sellingParty = default(PartyIdentification), PartyIdentification shipToParty = default(PartyIdentification), PartyIdentification billToParty = default(PartyIdentification), string shipWindow = default(string), string deliveryWindow = default(string), List<OrderItem> items = default(List<OrderItem>))
        {
            // to ensure "purchaseOrderDate" is required (not null)
            if (purchaseOrderDate == null)
            {
                throw new InvalidDataException("purchaseOrderDate is a required property for OrderDetails and cannot be null");
            }
            else
            {
                this.PurchaseOrderDate = purchaseOrderDate;
            }
            // to ensure "purchaseOrderStateChangedDate" is required (not null)
            if (purchaseOrderStateChangedDate == null)
            {
                throw new InvalidDataException("purchaseOrderStateChangedDate is a required property for OrderDetails and cannot be null");
            }
            else
            {
                this.PurchaseOrderStateChangedDate = purchaseOrderStateChangedDate;
            }
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new InvalidDataException("items is a required property for OrderDetails and cannot be null");
            }
            else
            {
                this.Items = items;
            }
            this.PurchaseOrderChangedDate = purchaseOrderChangedDate;
            this.PurchaseOrderType = purchaseOrderType;
            this.ImportDetails = importDetails;
            this.DealCode = dealCode;
            this.PaymentMethod = paymentMethod;
            this.BuyingParty = buyingParty;
            this.SellingParty = sellingParty;
            this.ShipToParty = shipToParty;
            this.BillToParty = billToParty;
            this.ShipWindow = shipWindow;
            this.DeliveryWindow = deliveryWindow;
        }
        
        /// <summary>
        /// The date the purchase order was placed. Must be in ISO-8601 date/time format.
        /// </summary>
        /// <value>The date the purchase order was placed. Must be in ISO-8601 date/time format.</value>
        [DataMember(Name="purchaseOrderDate", EmitDefaultValue=false)]
        public DateTime? PurchaseOrderDate { get; set; }

        /// <summary>
        /// The date when purchase order was last changed by Amazon after the order was placed. This date will be greater than &#39;purchaseOrderDate&#39;. This means the PO data was changed on that date and vendors are required to fulfill the  updated PO. The PO changes can be related to Item Quantity, Ship to Location, Ship Window etc. This field will not be present in orders that have not changed after creation. Must be in ISO-8601 date/time format.
        /// </summary>
        /// <value>The date when purchase order was last changed by Amazon after the order was placed. This date will be greater than &#39;purchaseOrderDate&#39;. This means the PO data was changed on that date and vendors are required to fulfill the  updated PO. The PO changes can be related to Item Quantity, Ship to Location, Ship Window etc. This field will not be present in orders that have not changed after creation. Must be in ISO-8601 date/time format.</value>
        [DataMember(Name="purchaseOrderChangedDate", EmitDefaultValue=false)]
        public DateTime? PurchaseOrderChangedDate { get; set; }

        /// <summary>
        /// The date when current purchase order state was changed. Current purchase order state is available in the field &#39;purchaseOrderState&#39;. Must be in ISO-8601 date/time format.
        /// </summary>
        /// <value>The date when current purchase order state was changed. Current purchase order state is available in the field &#39;purchaseOrderState&#39;. Must be in ISO-8601 date/time format.</value>
        [DataMember(Name="purchaseOrderStateChangedDate", EmitDefaultValue=false)]
        public DateTime? PurchaseOrderStateChangedDate { get; set; }


        /// <summary>
        /// If the purchase order is an import order, the details for the import order.
        /// </summary>
        /// <value>If the purchase order is an import order, the details for the import order.</value>
        [DataMember(Name="importDetails", EmitDefaultValue=false)]
        public ImportDetails ImportDetails { get; set; }

        /// <summary>
        /// If requested by the recipient, this field will contain a promotional/deal number. The discount code line is optional. It is used to obtain a price discount on items on the order.
        /// </summary>
        /// <value>If requested by the recipient, this field will contain a promotional/deal number. The discount code line is optional. It is used to obtain a price discount on items on the order.</value>
        [DataMember(Name="dealCode", EmitDefaultValue=false)]
        public string DealCode { get; set; }


        /// <summary>
        /// Name/Address and tax details of the buying party.
        /// </summary>
        /// <value>Name/Address and tax details of the buying party.</value>
        [DataMember(Name="buyingParty", EmitDefaultValue=false)]
        public PartyIdentification BuyingParty { get; set; }

        /// <summary>
        /// Name/Address and tax details of the selling party.
        /// </summary>
        /// <value>Name/Address and tax details of the selling party.</value>
        [DataMember(Name="sellingParty", EmitDefaultValue=false)]
        public PartyIdentification SellingParty { get; set; }

        /// <summary>
        /// Name/Address and tax details of the ship to party. Find a list of fulfillment center addresses for a region on the [Resources page of Amazon Vendor Central](https://vendorcentral.amazon.com/hz/vendor/members/support/help/node/GPZ88XH8HQM97ZV6).
        /// </summary>
        /// <value>Name/Address and tax details of the ship to party. Find a list of fulfillment center addresses for a region on the [Resources page of Amazon Vendor Central](https://vendorcentral.amazon.com/hz/vendor/members/support/help/node/GPZ88XH8HQM97ZV6).</value>
        [DataMember(Name="shipToParty", EmitDefaultValue=false)]
        public PartyIdentification ShipToParty { get; set; }

        /// <summary>
        /// Name/Address and tax details of the bill to party.
        /// </summary>
        /// <value>Name/Address and tax details of the bill to party.</value>
        [DataMember(Name="billToParty", EmitDefaultValue=false)]
        public PartyIdentification BillToParty { get; set; }

        /// <summary>
        /// This indicates the ship window. Format is start and end date separated by double hyphen (- -). For example, 2007-03-01T13:00:00Z- -2007-03-11T15:30:00Z.
        /// </summary>
        /// <value>This indicates the ship window. Format is start and end date separated by double hyphen (- -). For example, 2007-03-01T13:00:00Z- -2007-03-11T15:30:00Z.</value>
        [DataMember(Name="shipWindow", EmitDefaultValue=false)]
        public string ShipWindow { get; set; }

        /// <summary>
        /// This indicates the delivery window. Format is start and end date separated by double hyphen (- -). For example, 2007-03-01T13:00:00Z- -2007-03-11T15:30:00Z.
        /// </summary>
        /// <value>This indicates the delivery window. Format is start and end date separated by double hyphen (- -). For example, 2007-03-01T13:00:00Z- -2007-03-11T15:30:00Z.</value>
        [DataMember(Name="deliveryWindow", EmitDefaultValue=false)]
        public string DeliveryWindow { get; set; }

        /// <summary>
        /// A list of items in this purchase order.
        /// </summary>
        /// <value>A list of items in this purchase order.</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<OrderItem> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderDetails {\n");
            sb.Append("  PurchaseOrderDate: ").Append(PurchaseOrderDate).Append("\n");
            sb.Append("  PurchaseOrderChangedDate: ").Append(PurchaseOrderChangedDate).Append("\n");
            sb.Append("  PurchaseOrderStateChangedDate: ").Append(PurchaseOrderStateChangedDate).Append("\n");
            sb.Append("  PurchaseOrderType: ").Append(PurchaseOrderType).Append("\n");
            sb.Append("  ImportDetails: ").Append(ImportDetails).Append("\n");
            sb.Append("  DealCode: ").Append(DealCode).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  BuyingParty: ").Append(BuyingParty).Append("\n");
            sb.Append("  SellingParty: ").Append(SellingParty).Append("\n");
            sb.Append("  ShipToParty: ").Append(ShipToParty).Append("\n");
            sb.Append("  BillToParty: ").Append(BillToParty).Append("\n");
            sb.Append("  ShipWindow: ").Append(ShipWindow).Append("\n");
            sb.Append("  DeliveryWindow: ").Append(DeliveryWindow).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderDetails);
        }

        /// <summary>
        /// Returns true if OrderDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PurchaseOrderDate == input.PurchaseOrderDate ||
                    (this.PurchaseOrderDate != null &&
                    this.PurchaseOrderDate.Equals(input.PurchaseOrderDate))
                ) && 
                (
                    this.PurchaseOrderChangedDate == input.PurchaseOrderChangedDate ||
                    (this.PurchaseOrderChangedDate != null &&
                    this.PurchaseOrderChangedDate.Equals(input.PurchaseOrderChangedDate))
                ) && 
                (
                    this.PurchaseOrderStateChangedDate == input.PurchaseOrderStateChangedDate ||
                    (this.PurchaseOrderStateChangedDate != null &&
                    this.PurchaseOrderStateChangedDate.Equals(input.PurchaseOrderStateChangedDate))
                ) && 
                (
                    this.PurchaseOrderType == input.PurchaseOrderType ||
                    (this.PurchaseOrderType != null &&
                    this.PurchaseOrderType.Equals(input.PurchaseOrderType))
                ) && 
                (
                    this.ImportDetails == input.ImportDetails ||
                    (this.ImportDetails != null &&
                    this.ImportDetails.Equals(input.ImportDetails))
                ) && 
                (
                    this.DealCode == input.DealCode ||
                    (this.DealCode != null &&
                    this.DealCode.Equals(input.DealCode))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.BuyingParty == input.BuyingParty ||
                    (this.BuyingParty != null &&
                    this.BuyingParty.Equals(input.BuyingParty))
                ) && 
                (
                    this.SellingParty == input.SellingParty ||
                    (this.SellingParty != null &&
                    this.SellingParty.Equals(input.SellingParty))
                ) && 
                (
                    this.ShipToParty == input.ShipToParty ||
                    (this.ShipToParty != null &&
                    this.ShipToParty.Equals(input.ShipToParty))
                ) && 
                (
                    this.BillToParty == input.BillToParty ||
                    (this.BillToParty != null &&
                    this.BillToParty.Equals(input.BillToParty))
                ) && 
                (
                    this.ShipWindow == input.ShipWindow ||
                    (this.ShipWindow != null &&
                    this.ShipWindow.Equals(input.ShipWindow))
                ) && 
                (
                    this.DeliveryWindow == input.DeliveryWindow ||
                    (this.DeliveryWindow != null &&
                    this.DeliveryWindow.Equals(input.DeliveryWindow))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PurchaseOrderDate != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderDate.GetHashCode();
                if (this.PurchaseOrderChangedDate != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderChangedDate.GetHashCode();
                if (this.PurchaseOrderStateChangedDate != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderStateChangedDate.GetHashCode();
                if (this.PurchaseOrderType != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderType.GetHashCode();
                if (this.ImportDetails != null)
                    hashCode = hashCode * 59 + this.ImportDetails.GetHashCode();
                if (this.DealCode != null)
                    hashCode = hashCode * 59 + this.DealCode.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.BuyingParty != null)
                    hashCode = hashCode * 59 + this.BuyingParty.GetHashCode();
                if (this.SellingParty != null)
                    hashCode = hashCode * 59 + this.SellingParty.GetHashCode();
                if (this.ShipToParty != null)
                    hashCode = hashCode * 59 + this.ShipToParty.GetHashCode();
                if (this.BillToParty != null)
                    hashCode = hashCode * 59 + this.BillToParty.GetHashCode();
                if (this.ShipWindow != null)
                    hashCode = hashCode * 59 + this.ShipWindow.GetHashCode();
                if (this.DeliveryWindow != null)
                    hashCode = hashCode * 59 + this.DeliveryWindow.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
