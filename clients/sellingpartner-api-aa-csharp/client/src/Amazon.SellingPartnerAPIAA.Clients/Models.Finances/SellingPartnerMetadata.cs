/* 
 * The Selling Partner API for Finances
 *
 * The Selling Partner API for Finances provides financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * OpenAPI spec version: 2024-06-19
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Finances
{
    /// <summary>
    /// Metadata that describes the seller.
    /// </summary>
    [DataContract]
    public partial class SellingPartnerMetadata :  IEquatable<SellingPartnerMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SellingPartnerMetadata" /> class.
        /// </summary>
        /// <param name="sellingPartnerId">A unique seller identifier..</param>
        /// <param name="accountType">The type of account in the transaction..</param>
        /// <param name="marketplaceId">The identifier of the marketplace where the transaction occurred..</param>
        public SellingPartnerMetadata(string sellingPartnerId = default, string accountType = default, string marketplaceId = default)
        {
            this.SellingPartnerId = sellingPartnerId;
            this.AccountType = accountType;
            this.MarketplaceId = marketplaceId;
        }
        
        /// <summary>
        /// A unique seller identifier.
        /// </summary>
        /// <value>A unique seller identifier.</value>
        [DataMember(Name="sellingPartnerId", EmitDefaultValue=false)]
        public string SellingPartnerId { get; set; }

        /// <summary>
        /// The type of account in the transaction.
        /// </summary>
        /// <value>The type of account in the transaction.</value>
        [DataMember(Name="accountType", EmitDefaultValue=false)]
        public string AccountType { get; set; }

        /// <summary>
        /// The identifier of the marketplace where the transaction occurred.
        /// </summary>
        /// <value>The identifier of the marketplace where the transaction occurred.</value>
        [DataMember(Name="marketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SellingPartnerMetadata {\n");
            sb.Append("  SellingPartnerId: ").Append(SellingPartnerId).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SellingPartnerMetadata);
        }

        /// <summary>
        /// Returns true if SellingPartnerMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of SellingPartnerMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SellingPartnerMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SellingPartnerId == input.SellingPartnerId ||
                    (this.SellingPartnerId != null &&
                    this.SellingPartnerId.Equals(input.SellingPartnerId))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SellingPartnerId != null)
                    hashCode = hashCode * 59 + this.SellingPartnerId.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
