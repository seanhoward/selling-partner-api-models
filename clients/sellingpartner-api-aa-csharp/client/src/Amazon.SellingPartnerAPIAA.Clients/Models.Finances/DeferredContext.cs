/* 
 * The Selling Partner API for Finances
 *
 * The Selling Partner API for Finances provides financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * OpenAPI spec version: 2024-06-19
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Finances
{
    /// <summary>
    /// Additional information related to deferred transactions.
    /// </summary>
    [DataContract]
    public partial class DeferredContext :  IEquatable<DeferredContext>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeferredContext" /> class.
        /// </summary>
        /// <param name="deferralReason">Deferral policy applied on the transaction.  **Examples:** &#x60;B2B&#x60;,&#x60;DD7&#x60;.</param>
        /// <param name="maturityDate">The release date of the transaction..</param>
        /// <param name="deferralStatus">The status of the transaction. For example, &#x60;HOLD&#x60;,&#x60;RELEASE&#x60;..</param>
        public DeferredContext(string deferralReason = default, DateTime? maturityDate = default, string deferralStatus = default)
        {
            this.DeferralReason = deferralReason;
            this.MaturityDate = maturityDate;
            this.DeferralStatus = deferralStatus;
        }
        
        /// <summary>
        /// Deferral policy applied on the transaction.  **Examples:** &#x60;B2B&#x60;,&#x60;DD7&#x60;
        /// </summary>
        /// <value>Deferral policy applied on the transaction.  **Examples:** &#x60;B2B&#x60;,&#x60;DD7&#x60;</value>
        [DataMember(Name="deferralReason", EmitDefaultValue=false)]
        public string DeferralReason { get; set; }

        /// <summary>
        /// The release date of the transaction.
        /// </summary>
        /// <value>The release date of the transaction.</value>
        [DataMember(Name="maturityDate", EmitDefaultValue=false)]
        public DateTime? MaturityDate { get; set; }

        /// <summary>
        /// The status of the transaction. For example, &#x60;HOLD&#x60;,&#x60;RELEASE&#x60;.
        /// </summary>
        /// <value>The status of the transaction. For example, &#x60;HOLD&#x60;,&#x60;RELEASE&#x60;.</value>
        [DataMember(Name="deferralStatus", EmitDefaultValue=false)]
        public string DeferralStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeferredContext {\n");
            sb.Append("  DeferralReason: ").Append(DeferralReason).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  DeferralStatus: ").Append(DeferralStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeferredContext);
        }

        /// <summary>
        /// Returns true if DeferredContext instances are equal
        /// </summary>
        /// <param name="input">Instance of DeferredContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeferredContext input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeferralReason == input.DeferralReason ||
                    (this.DeferralReason != null &&
                    this.DeferralReason.Equals(input.DeferralReason))
                ) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && 
                (
                    this.DeferralStatus == input.DeferralStatus ||
                    (this.DeferralStatus != null &&
                    this.DeferralStatus.Equals(input.DeferralStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeferralReason != null)
                    hashCode = hashCode * 59 + this.DeferralReason.GetHashCode();
                if (this.MaturityDate != null)
                    hashCode = hashCode * 59 + this.MaturityDate.GetHashCode();
                if (this.DeferralStatus != null)
                    hashCode = hashCode * 59 + this.DeferralStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
