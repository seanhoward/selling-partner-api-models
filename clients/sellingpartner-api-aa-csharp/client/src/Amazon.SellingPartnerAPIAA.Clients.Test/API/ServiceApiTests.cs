/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Amazon.SellingPartnerAPIAA.Clients.Client;
using Amazon.SellingPartnerAPIAA.Clients.API;
using Amazon.SellingPartnerAPIAA.Clients.Models.Services;

namespace Amazon.SellingPartnerAPIAA.Clients.Services.Test
{
    /// <summary>
    ///  Class for testing ServiceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ServiceApiTests
    {
        private ServiceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to initialize instance for testing
            //instance = new ServiceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ServiceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ServiceApi
            //Assert.IsInstanceOfType(typeof(ServiceApi), instance, "instance is a ServiceApi");
        }

        
        /// <summary>
        /// Test AddAppointmentForServiceJobByServiceJobId
        /// </summary>
        [Test]
        public void AddAppointmentForServiceJobByServiceJobIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serviceJobId = null;
            //AddAppointmentRequest body = null;
            //var response = instance.AddAppointmentForServiceJobByServiceJobId(serviceJobId, body);
            //Assert.IsInstanceOf<SetAppointmentResponse> (response, "response is SetAppointmentResponse");
        }
        
        /// <summary>
        /// Test AssignAppointmentResources
        /// </summary>
        [Test]
        public void AssignAppointmentResourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serviceJobId = null;
            //string appointmentId = null;
            //AssignAppointmentResourcesRequest body = null;
            //var response = instance.AssignAppointmentResources(serviceJobId, appointmentId, body);
            //Assert.IsInstanceOf<AssignAppointmentResourcesResponse> (response, "response is AssignAppointmentResourcesResponse");
        }
        
        /// <summary>
        /// Test CancelReservation
        /// </summary>
        [Test]
        public void CancelReservationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string reservationId = null;
            //List<string> marketplaceIds = null;
            //var response = instance.CancelReservation(reservationId, marketplaceIds);
            //Assert.IsInstanceOf<CancelReservationResponse> (response, "response is CancelReservationResponse");
        }
        
        /// <summary>
        /// Test CancelServiceJobByServiceJobId
        /// </summary>
        [Test]
        public void CancelServiceJobByServiceJobIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serviceJobId = null;
            //string cancellationReasonCode = null;
            //var response = instance.CancelServiceJobByServiceJobId(serviceJobId, cancellationReasonCode);
            //Assert.IsInstanceOf<CancelServiceJobByServiceJobIdResponse> (response, "response is CancelServiceJobByServiceJobIdResponse");
        }
        
        /// <summary>
        /// Test CompleteServiceJobByServiceJobId
        /// </summary>
        [Test]
        public void CompleteServiceJobByServiceJobIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serviceJobId = null;
            //var response = instance.CompleteServiceJobByServiceJobId(serviceJobId);
            //Assert.IsInstanceOf<CompleteServiceJobByServiceJobIdResponse> (response, "response is CompleteServiceJobByServiceJobIdResponse");
        }
        
        /// <summary>
        /// Test CreateReservation
        /// </summary>
        [Test]
        public void CreateReservationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateReservationRequest body = null;
            //List<string> marketplaceIds = null;
            //var response = instance.CreateReservation(body, marketplaceIds);
            //Assert.IsInstanceOf<CreateReservationResponse> (response, "response is CreateReservationResponse");
        }
        
        /// <summary>
        /// Test CreateServiceDocumentUploadDestination
        /// </summary>
        [Test]
        public void CreateServiceDocumentUploadDestinationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ServiceUploadDocument body = null;
            //var response = instance.CreateServiceDocumentUploadDestination(body);
            //Assert.IsInstanceOf<CreateServiceDocumentUploadDestination> (response, "response is CreateServiceDocumentUploadDestination");
        }
        
        /// <summary>
        /// Test GetAppointmentSlots
        /// </summary>
        [Test]
        public void GetAppointmentSlotsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string asin = null;
            //string storeId = null;
            //List<string> marketplaceIds = null;
            //string startTime = null;
            //string endTime = null;
            //var response = instance.GetAppointmentSlots(asin, storeId, marketplaceIds, startTime, endTime);
            //Assert.IsInstanceOf<GetAppointmentSlotsResponse> (response, "response is GetAppointmentSlotsResponse");
        }
        
        /// <summary>
        /// Test GetAppointmmentSlotsByJobId
        /// </summary>
        [Test]
        public void GetAppointmmentSlotsByJobIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serviceJobId = null;
            //List<string> marketplaceIds = null;
            //string startTime = null;
            //string endTime = null;
            //var response = instance.GetAppointmmentSlotsByJobId(serviceJobId, marketplaceIds, startTime, endTime);
            //Assert.IsInstanceOf<GetAppointmentSlotsResponse> (response, "response is GetAppointmentSlotsResponse");
        }
        
        /// <summary>
        /// Test GetFixedSlotCapacity
        /// </summary>
        [Test]
        public void GetFixedSlotCapacityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string resourceId = null;
            //FixedSlotCapacityQuery body = null;
            //List<string> marketplaceIds = null;
            //string nextPageToken = null;
            //var response = instance.GetFixedSlotCapacity(resourceId, body, marketplaceIds, nextPageToken);
            //Assert.IsInstanceOf<FixedSlotCapacity> (response, "response is FixedSlotCapacity");
        }
        
        /// <summary>
        /// Test GetRangeSlotCapacity
        /// </summary>
        [Test]
        public void GetRangeSlotCapacityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string resourceId = null;
            //RangeSlotCapacityQuery body = null;
            //List<string> marketplaceIds = null;
            //string nextPageToken = null;
            //var response = instance.GetRangeSlotCapacity(resourceId, body, marketplaceIds, nextPageToken);
            //Assert.IsInstanceOf<RangeSlotCapacity> (response, "response is RangeSlotCapacity");
        }
        
        /// <summary>
        /// Test GetServiceJobByServiceJobId
        /// </summary>
        [Test]
        public void GetServiceJobByServiceJobIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serviceJobId = null;
            //var response = instance.GetServiceJobByServiceJobId(serviceJobId);
            //Assert.IsInstanceOf<GetServiceJobByServiceJobIdResponse> (response, "response is GetServiceJobByServiceJobIdResponse");
        }
        
        /// <summary>
        /// Test GetServiceJobs
        /// </summary>
        [Test]
        public void GetServiceJobsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> marketplaceIds = null;
            //List<string> serviceOrderIds = null;
            //List<string> serviceJobStatus = null;
            //string pageToken = null;
            //int? pageSize = null;
            //string sortField = null;
            //string sortOrder = null;
            //string createdAfter = null;
            //string createdBefore = null;
            //string lastUpdatedAfter = null;
            //string lastUpdatedBefore = null;
            //string scheduleStartDate = null;
            //string scheduleEndDate = null;
            //List<string> asins = null;
            //List<string> requiredSkills = null;
            //List<string> storeIds = null;
            //var response = instance.GetServiceJobs(marketplaceIds, serviceOrderIds, serviceJobStatus, pageToken, pageSize, sortField, sortOrder, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, scheduleStartDate, scheduleEndDate, asins, requiredSkills, storeIds);
            //Assert.IsInstanceOf<GetServiceJobsResponse> (response, "response is GetServiceJobsResponse");
        }
        
        /// <summary>
        /// Test RescheduleAppointmentForServiceJobByServiceJobId
        /// </summary>
        [Test]
        public void RescheduleAppointmentForServiceJobByServiceJobIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serviceJobId = null;
            //string appointmentId = null;
            //RescheduleAppointmentRequest body = null;
            //var response = instance.RescheduleAppointmentForServiceJobByServiceJobId(serviceJobId, appointmentId, body);
            //Assert.IsInstanceOf<SetAppointmentResponse> (response, "response is SetAppointmentResponse");
        }
        
        /// <summary>
        /// Test SetAppointmentFulfillmentData
        /// </summary>
        [Test]
        public void SetAppointmentFulfillmentDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serviceJobId = null;
            //string appointmentId = null;
            //SetAppointmentFulfillmentDataRequest body = null;
            //var response = instance.SetAppointmentFulfillmentData(serviceJobId, appointmentId, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test UpdateReservation
        /// </summary>
        [Test]
        public void UpdateReservationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string reservationId = null;
            //UpdateReservationRequest body = null;
            //List<string> marketplaceIds = null;
            //var response = instance.UpdateReservation(reservationId, body, marketplaceIds);
            //Assert.IsInstanceOf<UpdateReservationResponse> (response, "response is UpdateReservationResponse");
        }
        
        /// <summary>
        /// Test UpdateSchedule
        /// </summary>
        [Test]
        public void UpdateScheduleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string resourceId = null;
            //UpdateScheduleRequest body = null;
            //List<string> marketplaceIds = null;
            //var response = instance.UpdateSchedule(resourceId, body, marketplaceIds);
            //Assert.IsInstanceOf<UpdateScheduleResponse> (response, "response is UpdateScheduleResponse");
        }
        
    }

}