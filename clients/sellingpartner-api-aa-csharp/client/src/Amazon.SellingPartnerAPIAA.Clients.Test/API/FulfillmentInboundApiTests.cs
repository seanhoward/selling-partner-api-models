/* 
 * Fulfillment Inbound v2024-03-20
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Amazon.SellingPartnerAPIAA.Clients.Client;
using Amazon.SellingPartnerAPIAA.Clients.API;
using Amazon.SellingPartnerAPIAA.Clients.Models.FulfillmentInbound;

namespace Amazon.SellingPartnerAPIAA.Clients.FulfillmentInbound.Test
{
    /// <summary>
    ///  Class for testing FulfillmentInboundApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class FulfillmentInboundApiTests
    {
        private FulfillmentInboundApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to initialize instance for testing
            //instance = new FulfillmentInboundApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FulfillmentInboundApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FulfillmentInboundApi
            //Assert.IsInstanceOfType(typeof(FulfillmentInboundApi), instance, "instance is a FulfillmentInboundApi");
        }

        
        /// <summary>
        /// Test CancelInboundPlan
        /// </summary>
        [Test]
        public void CancelInboundPlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //var response = instance.CancelInboundPlan(inboundPlanId);
            //Assert.IsInstanceOf<CancelInboundPlanResponse> (response, "response is CancelInboundPlanResponse");
        }
        
        /// <summary>
        /// Test CancelSelfShipAppointment
        /// </summary>
        [Test]
        public void CancelSelfShipAppointmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string shipmentId = null;
            //CancelSelfShipAppointmentRequest body = null;
            //var response = instance.CancelSelfShipAppointment(inboundPlanId, shipmentId, body);
            //Assert.IsInstanceOf<CancelSelfShipAppointmentResponse> (response, "response is CancelSelfShipAppointmentResponse");
        }
        
        /// <summary>
        /// Test ConfirmDeliveryWindowOptions
        /// </summary>
        [Test]
        public void ConfirmDeliveryWindowOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string shipmentId = null;
            //string deliveryWindowOptionId = null;
            //var response = instance.ConfirmDeliveryWindowOptions(inboundPlanId, shipmentId, deliveryWindowOptionId);
            //Assert.IsInstanceOf<ConfirmDeliveryWindowOptionsResponse> (response, "response is ConfirmDeliveryWindowOptionsResponse");
        }
        
        /// <summary>
        /// Test ConfirmPackingOption
        /// </summary>
        [Test]
        public void ConfirmPackingOptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string packingOptionId = null;
            //var response = instance.ConfirmPackingOption(inboundPlanId, packingOptionId);
            //Assert.IsInstanceOf<ConfirmPackingOptionResponse> (response, "response is ConfirmPackingOptionResponse");
        }
        
        /// <summary>
        /// Test ConfirmPlacementOption
        /// </summary>
        [Test]
        public void ConfirmPlacementOptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string placementOptionId = null;
            //var response = instance.ConfirmPlacementOption(inboundPlanId, placementOptionId);
            //Assert.IsInstanceOf<ConfirmPlacementOptionResponse> (response, "response is ConfirmPlacementOptionResponse");
        }
        
        /// <summary>
        /// Test ConfirmShipmentContentUpdatePreview
        /// </summary>
        [Test]
        public void ConfirmShipmentContentUpdatePreviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string shipmentId = null;
            //string contentUpdatePreviewId = null;
            //var response = instance.ConfirmShipmentContentUpdatePreview(inboundPlanId, shipmentId, contentUpdatePreviewId);
            //Assert.IsInstanceOf<ConfirmShipmentContentUpdatePreviewResponse> (response, "response is ConfirmShipmentContentUpdatePreviewResponse");
        }
        
        /// <summary>
        /// Test ConfirmTransportationOptions
        /// </summary>
        [Test]
        public void ConfirmTransportationOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //ConfirmTransportationOptionsRequest body = null;
            //var response = instance.ConfirmTransportationOptions(inboundPlanId, body);
            //Assert.IsInstanceOf<ConfirmTransportationOptionsResponse> (response, "response is ConfirmTransportationOptionsResponse");
        }
        
        /// <summary>
        /// Test CreateInboundPlan
        /// </summary>
        [Test]
        public void CreateInboundPlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateInboundPlanRequest body = null;
            //var response = instance.CreateInboundPlan(body);
            //Assert.IsInstanceOf<CreateInboundPlanResponse> (response, "response is CreateInboundPlanResponse");
        }
        
        /// <summary>
        /// Test CreateMarketplaceItemLabels
        /// </summary>
        [Test]
        public void CreateMarketplaceItemLabelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateMarketplaceItemLabelsRequest body = null;
            //var response = instance.CreateMarketplaceItemLabels(body);
            //Assert.IsInstanceOf<CreateMarketplaceItemLabelsResponse> (response, "response is CreateMarketplaceItemLabelsResponse");
        }
        
        /// <summary>
        /// Test GenerateDeliveryWindowOptions
        /// </summary>
        [Test]
        public void GenerateDeliveryWindowOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string shipmentId = null;
            //var response = instance.GenerateDeliveryWindowOptions(inboundPlanId, shipmentId);
            //Assert.IsInstanceOf<GenerateDeliveryWindowOptionsResponse> (response, "response is GenerateDeliveryWindowOptionsResponse");
        }
        
        /// <summary>
        /// Test GeneratePackingOptions
        /// </summary>
        [Test]
        public void GeneratePackingOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //var response = instance.GeneratePackingOptions(inboundPlanId);
            //Assert.IsInstanceOf<GeneratePackingOptionsResponse> (response, "response is GeneratePackingOptionsResponse");
        }
        
        /// <summary>
        /// Test GeneratePlacementOptions
        /// </summary>
        [Test]
        public void GeneratePlacementOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //GeneratePlacementOptionsRequest body = null;
            //var response = instance.GeneratePlacementOptions(inboundPlanId, body);
            //Assert.IsInstanceOf<GeneratePlacementOptionsResponse> (response, "response is GeneratePlacementOptionsResponse");
        }
        
        /// <summary>
        /// Test GenerateSelfShipAppointmentSlots
        /// </summary>
        [Test]
        public void GenerateSelfShipAppointmentSlotsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string shipmentId = null;
            //GenerateSelfShipAppointmentSlotsRequest body = null;
            //var response = instance.GenerateSelfShipAppointmentSlots(inboundPlanId, shipmentId, body);
            //Assert.IsInstanceOf<GenerateSelfShipAppointmentSlotsResponse> (response, "response is GenerateSelfShipAppointmentSlotsResponse");
        }
        
        /// <summary>
        /// Test GenerateShipmentContentUpdatePreviews
        /// </summary>
        [Test]
        public void GenerateShipmentContentUpdatePreviewsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string shipmentId = null;
            //GenerateShipmentContentUpdatePreviewsRequest body = null;
            //var response = instance.GenerateShipmentContentUpdatePreviews(inboundPlanId, shipmentId, body);
            //Assert.IsInstanceOf<GenerateShipmentContentUpdatePreviewsResponse> (response, "response is GenerateShipmentContentUpdatePreviewsResponse");
        }
        
        /// <summary>
        /// Test GenerateTransportationOptions
        /// </summary>
        [Test]
        public void GenerateTransportationOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //GenerateTransportationOptionsRequest body = null;
            //var response = instance.GenerateTransportationOptions(inboundPlanId, body);
            //Assert.IsInstanceOf<GenerateTransportationOptionsResponse> (response, "response is GenerateTransportationOptionsResponse");
        }
        
        /// <summary>
        /// Test GetDeliveryChallanDocument
        /// </summary>
        [Test]
        public void GetDeliveryChallanDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string shipmentId = null;
            //var response = instance.GetDeliveryChallanDocument(inboundPlanId, shipmentId);
            //Assert.IsInstanceOf<GetDeliveryChallanDocumentResponse> (response, "response is GetDeliveryChallanDocumentResponse");
        }
        
        /// <summary>
        /// Test GetInboundOperationStatus
        /// </summary>
        [Test]
        public void GetInboundOperationStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string operationId = null;
            //var response = instance.GetInboundOperationStatus(operationId);
            //Assert.IsInstanceOf<InboundOperationStatus> (response, "response is InboundOperationStatus");
        }
        
        /// <summary>
        /// Test GetInboundPlan
        /// </summary>
        [Test]
        public void GetInboundPlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //var response = instance.GetInboundPlan(inboundPlanId);
            //Assert.IsInstanceOf<InboundPlan> (response, "response is InboundPlan");
        }
        
        /// <summary>
        /// Test GetSelfShipAppointmentSlots
        /// </summary>
        [Test]
        public void GetSelfShipAppointmentSlotsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string shipmentId = null;
            //int? pageSize = null;
            //string paginationToken = null;
            //var response = instance.GetSelfShipAppointmentSlots(inboundPlanId, shipmentId, pageSize, paginationToken);
            //Assert.IsInstanceOf<GetSelfShipAppointmentSlotsResponse> (response, "response is GetSelfShipAppointmentSlotsResponse");
        }
        
        /// <summary>
        /// Test GetShipment
        /// </summary>
        [Test]
        public void GetShipmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string shipmentId = null;
            //var response = instance.GetShipment(inboundPlanId, shipmentId);
            //Assert.IsInstanceOf<Shipment> (response, "response is Shipment");
        }
        
        /// <summary>
        /// Test GetShipmentContentUpdatePreview
        /// </summary>
        [Test]
        public void GetShipmentContentUpdatePreviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string shipmentId = null;
            //string contentUpdatePreviewId = null;
            //var response = instance.GetShipmentContentUpdatePreview(inboundPlanId, shipmentId, contentUpdatePreviewId);
            //Assert.IsInstanceOf<ContentUpdatePreview> (response, "response is ContentUpdatePreview");
        }
        
        /// <summary>
        /// Test ListDeliveryWindowOptions
        /// </summary>
        [Test]
        public void ListDeliveryWindowOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string shipmentId = null;
            //int? pageSize = null;
            //string paginationToken = null;
            //var response = instance.ListDeliveryWindowOptions(inboundPlanId, shipmentId, pageSize, paginationToken);
            //Assert.IsInstanceOf<ListDeliveryWindowOptionsResponse> (response, "response is ListDeliveryWindowOptionsResponse");
        }
        
        /// <summary>
        /// Test ListInboundPlanBoxes
        /// </summary>
        [Test]
        public void ListInboundPlanBoxesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //int? pageSize = null;
            //string paginationToken = null;
            //var response = instance.ListInboundPlanBoxes(inboundPlanId, pageSize, paginationToken);
            //Assert.IsInstanceOf<ListInboundPlanBoxesResponse> (response, "response is ListInboundPlanBoxesResponse");
        }
        
        /// <summary>
        /// Test ListInboundPlanItems
        /// </summary>
        [Test]
        public void ListInboundPlanItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //int? pageSize = null;
            //string paginationToken = null;
            //var response = instance.ListInboundPlanItems(inboundPlanId, pageSize, paginationToken);
            //Assert.IsInstanceOf<ListInboundPlanItemsResponse> (response, "response is ListInboundPlanItemsResponse");
        }
        
        /// <summary>
        /// Test ListInboundPlanPallets
        /// </summary>
        [Test]
        public void ListInboundPlanPalletsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //int? pageSize = null;
            //string paginationToken = null;
            //var response = instance.ListInboundPlanPallets(inboundPlanId, pageSize, paginationToken);
            //Assert.IsInstanceOf<ListInboundPlanPalletsResponse> (response, "response is ListInboundPlanPalletsResponse");
        }
        
        /// <summary>
        /// Test ListInboundPlans
        /// </summary>
        [Test]
        public void ListInboundPlansTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //string paginationToken = null;
            //string status = null;
            //string sortBy = null;
            //string sortOrder = null;
            //var response = instance.ListInboundPlans(pageSize, paginationToken, status, sortBy, sortOrder);
            //Assert.IsInstanceOf<ListInboundPlansResponse> (response, "response is ListInboundPlansResponse");
        }
        
        /// <summary>
        /// Test ListItemComplianceDetails
        /// </summary>
        [Test]
        public void ListItemComplianceDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> mskus = null;
            //string marketplaceId = null;
            //var response = instance.ListItemComplianceDetails(mskus, marketplaceId);
            //Assert.IsInstanceOf<ListItemComplianceDetailsResponse> (response, "response is ListItemComplianceDetailsResponse");
        }
        
        /// <summary>
        /// Test ListPackingGroupBoxes
        /// </summary>
        [Test]
        public void ListPackingGroupBoxesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string packingGroupId = null;
            //int? pageSize = null;
            //string paginationToken = null;
            //var response = instance.ListPackingGroupBoxes(inboundPlanId, packingGroupId, pageSize, paginationToken);
            //Assert.IsInstanceOf<ListPackingGroupBoxesResponse> (response, "response is ListPackingGroupBoxesResponse");
        }
        
        /// <summary>
        /// Test ListPackingGroupItems
        /// </summary>
        [Test]
        public void ListPackingGroupItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string packingGroupId = null;
            //int? pageSize = null;
            //string paginationToken = null;
            //var response = instance.ListPackingGroupItems(inboundPlanId, packingGroupId, pageSize, paginationToken);
            //Assert.IsInstanceOf<ListPackingGroupItemsResponse> (response, "response is ListPackingGroupItemsResponse");
        }
        
        /// <summary>
        /// Test ListPackingOptions
        /// </summary>
        [Test]
        public void ListPackingOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //int? pageSize = null;
            //string paginationToken = null;
            //var response = instance.ListPackingOptions(inboundPlanId, pageSize, paginationToken);
            //Assert.IsInstanceOf<ListPackingOptionsResponse> (response, "response is ListPackingOptionsResponse");
        }
        
        /// <summary>
        /// Test ListPlacementOptions
        /// </summary>
        [Test]
        public void ListPlacementOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //int? pageSize = null;
            //string paginationToken = null;
            //var response = instance.ListPlacementOptions(inboundPlanId, pageSize, paginationToken);
            //Assert.IsInstanceOf<ListPlacementOptionsResponse> (response, "response is ListPlacementOptionsResponse");
        }
        
        /// <summary>
        /// Test ListPrepDetails
        /// </summary>
        [Test]
        public void ListPrepDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string marketplaceId = null;
            //List<string> mskus = null;
            //var response = instance.ListPrepDetails(marketplaceId, mskus);
            //Assert.IsInstanceOf<ListPrepDetailsResponse> (response, "response is ListPrepDetailsResponse");
        }
        
        /// <summary>
        /// Test ListShipmentBoxes
        /// </summary>
        [Test]
        public void ListShipmentBoxesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string shipmentId = null;
            //int? pageSize = null;
            //string paginationToken = null;
            //var response = instance.ListShipmentBoxes(inboundPlanId, shipmentId, pageSize, paginationToken);
            //Assert.IsInstanceOf<ListShipmentBoxesResponse> (response, "response is ListShipmentBoxesResponse");
        }
        
        /// <summary>
        /// Test ListShipmentContentUpdatePreviews
        /// </summary>
        [Test]
        public void ListShipmentContentUpdatePreviewsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string shipmentId = null;
            //int? pageSize = null;
            //string paginationToken = null;
            //var response = instance.ListShipmentContentUpdatePreviews(inboundPlanId, shipmentId, pageSize, paginationToken);
            //Assert.IsInstanceOf<ListShipmentContentUpdatePreviewsResponse> (response, "response is ListShipmentContentUpdatePreviewsResponse");
        }
        
        /// <summary>
        /// Test ListShipmentItems
        /// </summary>
        [Test]
        public void ListShipmentItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string shipmentId = null;
            //int? pageSize = null;
            //string paginationToken = null;
            //var response = instance.ListShipmentItems(inboundPlanId, shipmentId, pageSize, paginationToken);
            //Assert.IsInstanceOf<ListShipmentItemsResponse> (response, "response is ListShipmentItemsResponse");
        }
        
        /// <summary>
        /// Test ListShipmentPallets
        /// </summary>
        [Test]
        public void ListShipmentPalletsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string shipmentId = null;
            //int? pageSize = null;
            //string paginationToken = null;
            //var response = instance.ListShipmentPallets(inboundPlanId, shipmentId, pageSize, paginationToken);
            //Assert.IsInstanceOf<ListShipmentPalletsResponse> (response, "response is ListShipmentPalletsResponse");
        }
        
        /// <summary>
        /// Test ListTransportationOptions
        /// </summary>
        [Test]
        public void ListTransportationOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //int? pageSize = null;
            //string paginationToken = null;
            //string placementOptionId = null;
            //string shipmentId = null;
            //var response = instance.ListTransportationOptions(inboundPlanId, pageSize, paginationToken, placementOptionId, shipmentId);
            //Assert.IsInstanceOf<ListTransportationOptionsResponse> (response, "response is ListTransportationOptionsResponse");
        }
        
        /// <summary>
        /// Test ScheduleSelfShipAppointment
        /// </summary>
        [Test]
        public void ScheduleSelfShipAppointmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string shipmentId = null;
            //string slotId = null;
            //ScheduleSelfShipAppointmentRequest body = null;
            //var response = instance.ScheduleSelfShipAppointment(inboundPlanId, shipmentId, slotId, body);
            //Assert.IsInstanceOf<ScheduleSelfShipAppointmentResponse> (response, "response is ScheduleSelfShipAppointmentResponse");
        }
        
        /// <summary>
        /// Test SetPackingInformation
        /// </summary>
        [Test]
        public void SetPackingInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //SetPackingInformationRequest body = null;
            //var response = instance.SetPackingInformation(inboundPlanId, body);
            //Assert.IsInstanceOf<SetPackingInformationResponse> (response, "response is SetPackingInformationResponse");
        }
        
        /// <summary>
        /// Test SetPrepDetails
        /// </summary>
        [Test]
        public void SetPrepDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SetPrepDetailsRequest body = null;
            //var response = instance.SetPrepDetails(body);
            //Assert.IsInstanceOf<SetPrepDetailsResponse> (response, "response is SetPrepDetailsResponse");
        }
        
        /// <summary>
        /// Test UpdateInboundPlanName
        /// </summary>
        [Test]
        public void UpdateInboundPlanNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //UpdateInboundPlanNameRequest body = null;
            //instance.UpdateInboundPlanName(inboundPlanId, body);
            
        }
        
        /// <summary>
        /// Test UpdateItemComplianceDetails
        /// </summary>
        [Test]
        public void UpdateItemComplianceDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string marketplaceId = null;
            //UpdateItemComplianceDetailsRequest body = null;
            //var response = instance.UpdateItemComplianceDetails(marketplaceId, body);
            //Assert.IsInstanceOf<UpdateItemComplianceDetailsResponse> (response, "response is UpdateItemComplianceDetailsResponse");
        }
        
        /// <summary>
        /// Test UpdateShipmentName
        /// </summary>
        [Test]
        public void UpdateShipmentNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string shipmentId = null;
            //UpdateShipmentNameRequest body = null;
            //instance.UpdateShipmentName(inboundPlanId, shipmentId, body);
            
        }
        
        /// <summary>
        /// Test UpdateShipmentSourceAddress
        /// </summary>
        [Test]
        public void UpdateShipmentSourceAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string shipmentId = null;
            //UpdateShipmentSourceAddressRequest body = null;
            //var response = instance.UpdateShipmentSourceAddress(inboundPlanId, shipmentId, body);
            //Assert.IsInstanceOf<UpdateShipmentSourceAddressResponse> (response, "response is UpdateShipmentSourceAddressResponse");
        }
        
        /// <summary>
        /// Test UpdateShipmentTrackingDetails
        /// </summary>
        [Test]
        public void UpdateShipmentTrackingDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inboundPlanId = null;
            //string shipmentId = null;
            //UpdateShipmentTrackingDetailsRequest body = null;
            //var response = instance.UpdateShipmentTrackingDetails(inboundPlanId, shipmentId, body);
            //Assert.IsInstanceOf<UpdateShipmentTrackingDetailsResponse> (response, "response is UpdateShipmentTrackingDetailsResponse");
        }
        
    }

}