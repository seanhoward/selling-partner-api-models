/* 
 * Selling Partner API for FBA Inventory
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Amazon.SellingPartnerAPIAA.Clients.Client;
using Amazon.SellingPartnerAPIAA.Clients.API;
using Amazon.SellingPartnerAPIAA.Clients.Models.FbaInventory;

namespace Amazon.SellingPartnerAPIAA.Clients.FbaInventory.Test
{
    /// <summary>
    ///  Class for testing FbaInventoryApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class FbaInventoryApiTests
    {
        private FbaInventoryApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to initialize instance for testing
            //instance = new FbaInventoryApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FbaInventoryApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FbaInventoryApi
            //Assert.IsInstanceOfType(typeof(FbaInventoryApi), instance, "instance is a FbaInventoryApi");
        }

        
        /// <summary>
        /// Test AddInventory
        /// </summary>
        [Test]
        public void AddInventoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xAmznIdempotencyToken = null;
            //AddInventoryRequest addInventoryRequestBody = null;
            //var response = instance.AddInventory(xAmznIdempotencyToken, addInventoryRequestBody);
            //Assert.IsInstanceOf<AddInventoryResponse> (response, "response is AddInventoryResponse");
        }
        
        /// <summary>
        /// Test CreateInventoryItem
        /// </summary>
        [Test]
        public void CreateInventoryItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateInventoryItemRequest createInventoryItemRequestBody = null;
            //var response = instance.CreateInventoryItem(createInventoryItemRequestBody);
            //Assert.IsInstanceOf<CreateInventoryItemResponse> (response, "response is CreateInventoryItemResponse");
        }
        
        /// <summary>
        /// Test DeleteInventoryItem
        /// </summary>
        [Test]
        public void DeleteInventoryItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sellerSku = null;
            //string marketplaceId = null;
            //var response = instance.DeleteInventoryItem(sellerSku, marketplaceId);
            //Assert.IsInstanceOf<DeleteInventoryItemResponse> (response, "response is DeleteInventoryItemResponse");
        }
        
        /// <summary>
        /// Test GetInventorySummaries
        /// </summary>
        [Test]
        public void GetInventorySummariesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string granularityType = null;
            //string granularityId = null;
            //List<string> marketplaceIds = null;
            //bool? details = null;
            //DateTime? startDateTime = null;
            //List<string> sellerSkus = null;
            //string sellerSku = null;
            //string nextToken = null;
            //var response = instance.GetInventorySummaries(granularityType, granularityId, marketplaceIds, details, startDateTime, sellerSkus, sellerSku, nextToken);
            //Assert.IsInstanceOf<GetInventorySummariesResponse> (response, "response is GetInventorySummariesResponse");
        }
        
    }

}